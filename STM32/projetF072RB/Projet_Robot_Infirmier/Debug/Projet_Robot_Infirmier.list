
Projet_Robot_Infirmier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d44  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e3c  08002e3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e3c  08002e3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e3c  08002e3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08002e50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002e50  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c1c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aec  00000000  00000000  00029c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0002b740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002be80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018881  00000000  00000000  0002c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a721  00000000  00000000  00044d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9f8  00000000  00000000  0004f4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbea2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c4  00000000  00000000  000dbef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002dec 	.word	0x08002dec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002dec 	.word	0x08002dec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	240c      	movs	r4, #12
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f002 fdd3 	bl	8002ddc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b2d      	ldr	r3, [pc, #180]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b2c      	ldr	r3, [pc, #176]	; (80002ec <MX_GPIO_Init+0xcc>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0309      	lsls	r1, r1, #12
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b29      	ldr	r3, [pc, #164]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	031b      	lsls	r3, r3, #12
 800024c:	4013      	ands	r3, r2
 800024e:	60bb      	str	r3, [r7, #8]
 8000250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000252:	4b26      	ldr	r3, [pc, #152]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b25      	ldr	r3, [pc, #148]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	03c9      	lsls	r1, r1, #15
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b22      	ldr	r3, [pc, #136]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	03db      	lsls	r3, r3, #15
 8000268:	4013      	ands	r3, r2
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b1f      	ldr	r3, [pc, #124]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	0289      	lsls	r1, r1, #10
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <MX_GPIO_Init+0xcc>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4013      	ands	r3, r2
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800028a:	2390      	movs	r3, #144	; 0x90
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	2200      	movs	r2, #0
 8000290:	2120      	movs	r1, #32
 8000292:	0018      	movs	r0, r3
 8000294:	f000 fda4 	bl	8000de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000298:	193b      	adds	r3, r7, r4
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	0192      	lsls	r2, r2, #6
 800029e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	2284      	movs	r2, #132	; 0x84
 80002a4:	0392      	lsls	r2, r2, #14
 80002a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ae:	193b      	adds	r3, r7, r4
 80002b0:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <MX_GPIO_Init+0xd0>)
 80002b2:	0019      	movs	r1, r3
 80002b4:	0010      	movs	r0, r2
 80002b6:	f000 fc1b 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002ba:	0021      	movs	r1, r4
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2220      	movs	r2, #32
 80002c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2201      	movs	r2, #1
 80002c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002d4:	187a      	adds	r2, r7, r1
 80002d6:	2390      	movs	r3, #144	; 0x90
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fc07 	bl	8000af0 <HAL_GPIO_Init>

}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b009      	add	sp, #36	; 0x24
 80002e8:	bd90      	pop	{r4, r7, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	40021000 	.word	0x40021000
 80002f0:	48000800 	.word	0x48000800

080002f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fa:	f000 fa15 	bl	8000728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fe:	f000 f82d 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000302:	f7ff ff8d 	bl	8000220 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000306:	f000 f8ed 	bl	80004e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800030a:	f000 f91b 	bl	8000544 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int t = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]


  while (1)
  {

	  t++;
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	3301      	adds	r3, #1
 8000316:	60fb      	str	r3, [r7, #12]

	  char buffer[5];
	  buffer[0] = '0';
 8000318:	003b      	movs	r3, r7
 800031a:	2230      	movs	r2, #48	; 0x30
 800031c:	701a      	strb	r2, [r3, #0]
	  buffer[1] = '1';
 800031e:	003b      	movs	r3, r7
 8000320:	2231      	movs	r2, #49	; 0x31
 8000322:	705a      	strb	r2, [r3, #1]
	  buffer[2] = '2';
 8000324:	003b      	movs	r3, r7
 8000326:	2232      	movs	r2, #50	; 0x32
 8000328:	709a      	strb	r2, [r3, #2]
	  buffer[3] = '3';
 800032a:	003b      	movs	r3, r7
 800032c:	2233      	movs	r2, #51	; 0x33
 800032e:	70da      	strb	r2, [r3, #3]
	  buffer[4] = '\n';
 8000330:	003b      	movs	r3, r7
 8000332:	220a      	movs	r2, #10
 8000334:	711a      	strb	r2, [r3, #4]


	  //HAL_UART_Transmit (&huart1, &D , sizeof(D) , 100);


	  HAL_UART_Receive_IT(&huart1, &D, sizeof(D));
 8000336:	2308      	movs	r3, #8
 8000338:	18f9      	adds	r1, r7, r3
 800033a:	4b07      	ldr	r3, [pc, #28]	; (8000358 <main+0x64>)
 800033c:	2204      	movs	r2, #4
 800033e:	0018      	movs	r0, r3
 8000340:	f001 fbbe 	bl	8001ac0 <HAL_UART_Receive_IT>
	  HAL_Delay(100);
 8000344:	2064      	movs	r0, #100	; 0x64
 8000346:	f000 fa53 	bl	80007f0 <HAL_Delay>


	  HAL_Delay(1000);
 800034a:	23fa      	movs	r3, #250	; 0xfa
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	0018      	movs	r0, r3
 8000350:	f000 fa4e 	bl	80007f0 <HAL_Delay>
  {
 8000354:	e7dd      	b.n	8000312 <main+0x1e>
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	20000028 	.word	0x20000028

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b099      	sub	sp, #100	; 0x64
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	242c      	movs	r4, #44	; 0x2c
 8000364:	193b      	adds	r3, r7, r4
 8000366:	0018      	movs	r0, r3
 8000368:	2334      	movs	r3, #52	; 0x34
 800036a:	001a      	movs	r2, r3
 800036c:	2100      	movs	r1, #0
 800036e:	f002 fd35 	bl	8002ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000372:	231c      	movs	r3, #28
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	0018      	movs	r0, r3
 8000378:	2310      	movs	r3, #16
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f002 fd2d 	bl	8002ddc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000382:	003b      	movs	r3, r7
 8000384:	0018      	movs	r0, r3
 8000386:	231c      	movs	r3, #28
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f002 fd26 	bl	8002ddc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000390:	0021      	movs	r1, r4
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2202      	movs	r2, #2
 8000396:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2201      	movs	r2, #1
 800039c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2210      	movs	r2, #16
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2202      	movs	r2, #2
 80003a8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	0212      	lsls	r2, r2, #8
 80003b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	22a0      	movs	r2, #160	; 0xa0
 80003b6:	0392      	lsls	r2, r2, #14
 80003b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2201      	movs	r2, #1
 80003be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 fd2a 	bl	8000e1c <HAL_RCC_OscConfig>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003cc:	f000 f82b 	bl	8000426 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	211c      	movs	r1, #28
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2207      	movs	r2, #7
 80003d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2202      	movs	r2, #2
 80003dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2101      	movs	r1, #1
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 f89a 	bl	8001528 <HAL_RCC_ClockConfig>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80003f8:	f000 f815 	bl	8000426 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80003fc:	003b      	movs	r3, r7
 80003fe:	2203      	movs	r2, #3
 8000400:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000402:	003b      	movs	r3, r7
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000408:	003b      	movs	r3, r7
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040e:	003b      	movs	r3, r7
 8000410:	0018      	movs	r0, r3
 8000412:	f001 fa03 	bl	800181c <HAL_RCCEx_PeriphCLKConfig>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800041a:	f000 f804 	bl	8000426 <Error_Handler>
  }
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b019      	add	sp, #100	; 0x64
 8000424:	bd90      	pop	{r4, r7, pc}

08000426 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042a:	b672      	cpsid	i
}
 800042c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042e:	e7fe      	b.n	800042e <Error_Handler+0x8>

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x44>)
 8000438:	699a      	ldr	r2, [r3, #24]
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <HAL_MspInit+0x44>)
 800043c:	2101      	movs	r1, #1
 800043e:	430a      	orrs	r2, r1
 8000440:	619a      	str	r2, [r3, #24]
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x44>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	2201      	movs	r2, #1
 8000448:	4013      	ands	r3, r2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <HAL_MspInit+0x44>)
 8000450:	69da      	ldr	r2, [r3, #28]
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <HAL_MspInit+0x44>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0549      	lsls	r1, r1, #21
 8000458:	430a      	orrs	r2, r1
 800045a:	61da      	str	r2, [r3, #28]
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <HAL_MspInit+0x44>)
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	055b      	lsls	r3, r3, #21
 8000464:	4013      	ands	r3, r2
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40021000 	.word	0x40021000

08000478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800047c:	e7fe      	b.n	800047c <NMI_Handler+0x4>

0800047e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <HardFault_Handler+0x4>

08000484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049c:	f000 f98c 	bl	80007b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004ac:	4b03      	ldr	r3, [pc, #12]	; (80004bc <USART1_IRQHandler+0x14>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f001 fb68 	bl	8001b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	20000028 	.word	0x20000028

080004c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004c4:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <USART2_IRQHandler+0x14>)
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 fb5c 	bl	8001b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	200000ac 	.word	0x200000ac

080004d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_USART1_UART_Init+0x58>)
 80004ea:	4a15      	ldr	r2, [pc, #84]	; (8000540 <MX_USART1_UART_Init+0x5c>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_USART1_UART_Init+0x58>)
 80004f0:	22e1      	movs	r2, #225	; 0xe1
 80004f2:	0252      	lsls	r2, r2, #9
 80004f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_USART1_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_USART1_UART_Init+0x58>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_USART1_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USART1_UART_Init+0x58>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_USART1_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_USART1_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_USART1_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_USART1_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <MX_USART1_UART_Init+0x58>)
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fa75 	bl	8001a18 <HAL_UART_Init>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000532:	f7ff ff78 	bl	8000426 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000028 	.word	0x20000028
 8000540:	40013800 	.word	0x40013800

08000544 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_USART2_UART_Init+0x58>)
 800054a:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <MX_USART2_UART_Init+0x5c>)
 800054c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000550:	22e1      	movs	r2, #225	; 0xe1
 8000552:	0252      	lsls	r2, r2, #9
 8000554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_USART2_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_USART2_UART_Init+0x58>)
 800056a:	220c      	movs	r2, #12
 800056c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_USART2_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <MX_USART2_UART_Init+0x58>)
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fa45 	bl	8001a18 <HAL_UART_Init>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000592:	f7ff ff48 	bl	8000426 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200000ac 	.word	0x200000ac
 80005a0:	40004400 	.word	0x40004400

080005a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b08d      	sub	sp, #52	; 0x34
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	241c      	movs	r4, #28
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	0018      	movs	r0, r3
 80005b2:	2314      	movs	r3, #20
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f002 fc10 	bl	8002ddc <memset>
  if(uartHandle->Instance==USART1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a41      	ldr	r2, [pc, #260]	; (80006c8 <HAL_UART_MspInit+0x124>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d13c      	bne.n	8000640 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005c6:	4b41      	ldr	r3, [pc, #260]	; (80006cc <HAL_UART_MspInit+0x128>)
 80005c8:	699a      	ldr	r2, [r3, #24]
 80005ca:	4b40      	ldr	r3, [pc, #256]	; (80006cc <HAL_UART_MspInit+0x128>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	01c9      	lsls	r1, r1, #7
 80005d0:	430a      	orrs	r2, r1
 80005d2:	619a      	str	r2, [r3, #24]
 80005d4:	4b3d      	ldr	r3, [pc, #244]	; (80006cc <HAL_UART_MspInit+0x128>)
 80005d6:	699a      	ldr	r2, [r3, #24]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	01db      	lsls	r3, r3, #7
 80005dc:	4013      	ands	r3, r2
 80005de:	61bb      	str	r3, [r7, #24]
 80005e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b3a      	ldr	r3, [pc, #232]	; (80006cc <HAL_UART_MspInit+0x128>)
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <HAL_UART_MspInit+0x128>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	0289      	lsls	r1, r1, #10
 80005ec:	430a      	orrs	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	4b36      	ldr	r3, [pc, #216]	; (80006cc <HAL_UART_MspInit+0x128>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	029b      	lsls	r3, r3, #10
 80005f8:	4013      	ands	r3, r2
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	22c0      	movs	r2, #192	; 0xc0
 8000602:	00d2      	lsls	r2, r2, #3
 8000604:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	0021      	movs	r1, r4
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2202      	movs	r2, #2
 800060c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2203      	movs	r2, #3
 8000618:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2201      	movs	r2, #1
 800061e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	187a      	adds	r2, r7, r1
 8000622:	2390      	movs	r3, #144	; 0x90
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fa61 	bl	8000af0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	201b      	movs	r0, #27
 8000634:	f000 f9ac 	bl	8000990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000638:	201b      	movs	r0, #27
 800063a:	f000 f9be 	bl	80009ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800063e:	e03f      	b.n	80006c0 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a22      	ldr	r2, [pc, #136]	; (80006d0 <HAL_UART_MspInit+0x12c>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d13a      	bne.n	80006c0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <HAL_UART_MspInit+0x128>)
 800064c:	69da      	ldr	r2, [r3, #28]
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <HAL_UART_MspInit+0x128>)
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	0289      	lsls	r1, r1, #10
 8000654:	430a      	orrs	r2, r1
 8000656:	61da      	str	r2, [r3, #28]
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <HAL_UART_MspInit+0x128>)
 800065a:	69da      	ldr	r2, [r3, #28]
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	029b      	lsls	r3, r3, #10
 8000660:	4013      	ands	r3, r2
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <HAL_UART_MspInit+0x128>)
 8000668:	695a      	ldr	r2, [r3, #20]
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <HAL_UART_MspInit+0x128>)
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	0289      	lsls	r1, r1, #10
 8000670:	430a      	orrs	r2, r1
 8000672:	615a      	str	r2, [r3, #20]
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <HAL_UART_MspInit+0x128>)
 8000676:	695a      	ldr	r2, [r3, #20]
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	029b      	lsls	r3, r3, #10
 800067c:	4013      	ands	r3, r2
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000682:	211c      	movs	r1, #28
 8000684:	187b      	adds	r3, r7, r1
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2202      	movs	r2, #2
 800068e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2201      	movs	r2, #1
 80006a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	187a      	adds	r2, r7, r1
 80006a4:	2390      	movs	r3, #144	; 0x90
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fa20 	bl	8000af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	201c      	movs	r0, #28
 80006b6:	f000 f96b 	bl	8000990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006ba:	201c      	movs	r0, #28
 80006bc:	f000 f97d 	bl	80009ba <HAL_NVIC_EnableIRQ>
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b00d      	add	sp, #52	; 0x34
 80006c6:	bd90      	pop	{r4, r7, pc}
 80006c8:	40013800 	.word	0x40013800
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40004400 	.word	0x40004400

080006d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <LoopForever+0x6>)
  ldr r1, =_edata
 80006da:	490e      	ldr	r1, [pc, #56]	; (8000714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006dc:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <LoopForever+0xe>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f0:	4c0b      	ldr	r4, [pc, #44]	; (8000720 <LoopForever+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006fe:	f7ff feeb 	bl	80004d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000702:	f002 fb47 	bl	8002d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000706:	f7ff fdf5 	bl	80002f4 <main>

0800070a <LoopForever>:

LoopForever:
    b LoopForever
 800070a:	e7fe      	b.n	800070a <LoopForever>
  ldr   r0, =_estack
 800070c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000714:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000718:	08002e44 	.word	0x08002e44
  ldr r2, =_sbss
 800071c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000720:	20000134 	.word	0x20000134

08000724 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC1_COMP_IRQHandler>
	...

08000728 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <HAL_Init+0x24>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_Init+0x24>)
 8000732:	2110      	movs	r1, #16
 8000734:	430a      	orrs	r2, r1
 8000736:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000738:	2000      	movs	r0, #0
 800073a:	f000 f809 	bl	8000750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800073e:	f7ff fe77 	bl	8000430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40022000 	.word	0x40022000

08000750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_InitTick+0x5c>)
 800075a:	681c      	ldr	r4, [r3, #0]
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_InitTick+0x60>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	0019      	movs	r1, r3
 8000762:	23fa      	movs	r3, #250	; 0xfa
 8000764:	0098      	lsls	r0, r3, #2
 8000766:	f7ff fccf 	bl	8000108 <__udivsi3>
 800076a:	0003      	movs	r3, r0
 800076c:	0019      	movs	r1, r3
 800076e:	0020      	movs	r0, r4
 8000770:	f7ff fcca 	bl	8000108 <__udivsi3>
 8000774:	0003      	movs	r3, r0
 8000776:	0018      	movs	r0, r3
 8000778:	f000 f92f 	bl	80009da <HAL_SYSTICK_Config>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	e00f      	b.n	80007a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d80b      	bhi.n	80007a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	2301      	movs	r3, #1
 800078e:	425b      	negs	r3, r3
 8000790:	2200      	movs	r2, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f000 f8fc 	bl	8000990 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_InitTick+0x64>)
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800079e:	2300      	movs	r3, #0
 80007a0:	e000      	b.n	80007a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b003      	add	sp, #12
 80007aa:	bd90      	pop	{r4, r7, pc}
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000004 	.word	0x20000004

080007b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_IncTick+0x1c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	001a      	movs	r2, r3
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_IncTick+0x20>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	18d2      	adds	r2, r2, r3
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <HAL_IncTick+0x20>)
 80007ca:	601a      	str	r2, [r3, #0]
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	20000008 	.word	0x20000008
 80007d8:	20000130 	.word	0x20000130

080007dc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  return uwTick;
 80007e0:	4b02      	ldr	r3, [pc, #8]	; (80007ec <HAL_GetTick+0x10>)
 80007e2:	681b      	ldr	r3, [r3, #0]
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	20000130 	.word	0x20000130

080007f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f8:	f7ff fff0 	bl	80007dc <HAL_GetTick>
 80007fc:	0003      	movs	r3, r0
 80007fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	d005      	beq.n	8000816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_Delay+0x44>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	001a      	movs	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	189b      	adds	r3, r3, r2
 8000814:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	f7ff ffe0 	bl	80007dc <HAL_GetTick>
 800081c:	0002      	movs	r2, r0
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	429a      	cmp	r2, r3
 8000826:	d8f7      	bhi.n	8000818 <HAL_Delay+0x28>
  {
  }
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b004      	add	sp, #16
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	20000008 	.word	0x20000008

08000838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	0002      	movs	r2, r0
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b7f      	cmp	r3, #127	; 0x7f
 800084a:	d809      	bhi.n	8000860 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	001a      	movs	r2, r3
 8000852:	231f      	movs	r3, #31
 8000854:	401a      	ands	r2, r3
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <__NVIC_EnableIRQ+0x30>)
 8000858:	2101      	movs	r1, #1
 800085a:	4091      	lsls	r1, r2
 800085c:	000a      	movs	r2, r1
 800085e:	601a      	str	r2, [r3, #0]
  }
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bd80      	pop	{r7, pc}
 8000868:	e000e100 	.word	0xe000e100

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	0002      	movs	r2, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b7f      	cmp	r3, #127	; 0x7f
 8000880:	d828      	bhi.n	80008d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000882:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <__NVIC_SetPriority+0xd4>)
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	33c0      	adds	r3, #192	; 0xc0
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	589b      	ldr	r3, [r3, r2]
 8000892:	1dfa      	adds	r2, r7, #7
 8000894:	7812      	ldrb	r2, [r2, #0]
 8000896:	0011      	movs	r1, r2
 8000898:	2203      	movs	r2, #3
 800089a:	400a      	ands	r2, r1
 800089c:	00d2      	lsls	r2, r2, #3
 800089e:	21ff      	movs	r1, #255	; 0xff
 80008a0:	4091      	lsls	r1, r2
 80008a2:	000a      	movs	r2, r1
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	401a      	ands	r2, r3
 80008a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	019b      	lsls	r3, r3, #6
 80008ae:	22ff      	movs	r2, #255	; 0xff
 80008b0:	401a      	ands	r2, r3
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0018      	movs	r0, r3
 80008b8:	2303      	movs	r3, #3
 80008ba:	4003      	ands	r3, r0
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c0:	481f      	ldr	r0, [pc, #124]	; (8000940 <__NVIC_SetPriority+0xd4>)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	089b      	lsrs	r3, r3, #2
 80008ca:	430a      	orrs	r2, r1
 80008cc:	33c0      	adds	r3, #192	; 0xc0
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008d2:	e031      	b.n	8000938 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <__NVIC_SetPriority+0xd8>)
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	0019      	movs	r1, r3
 80008dc:	230f      	movs	r3, #15
 80008de:	400b      	ands	r3, r1
 80008e0:	3b08      	subs	r3, #8
 80008e2:	089b      	lsrs	r3, r3, #2
 80008e4:	3306      	adds	r3, #6
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	18d3      	adds	r3, r2, r3
 80008ea:	3304      	adds	r3, #4
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	1dfa      	adds	r2, r7, #7
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	0011      	movs	r1, r2
 80008f4:	2203      	movs	r2, #3
 80008f6:	400a      	ands	r2, r1
 80008f8:	00d2      	lsls	r2, r2, #3
 80008fa:	21ff      	movs	r1, #255	; 0xff
 80008fc:	4091      	lsls	r1, r2
 80008fe:	000a      	movs	r2, r1
 8000900:	43d2      	mvns	r2, r2
 8000902:	401a      	ands	r2, r3
 8000904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	019b      	lsls	r3, r3, #6
 800090a:	22ff      	movs	r2, #255	; 0xff
 800090c:	401a      	ands	r2, r3
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	0018      	movs	r0, r3
 8000914:	2303      	movs	r3, #3
 8000916:	4003      	ands	r3, r0
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <__NVIC_SetPriority+0xd8>)
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	001c      	movs	r4, r3
 8000924:	230f      	movs	r3, #15
 8000926:	4023      	ands	r3, r4
 8000928:	3b08      	subs	r3, #8
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	430a      	orrs	r2, r1
 800092e:	3306      	adds	r3, #6
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	18c3      	adds	r3, r0, r3
 8000934:	3304      	adds	r3, #4
 8000936:	601a      	str	r2, [r3, #0]
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b003      	add	sp, #12
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	1e5a      	subs	r2, r3, #1
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	045b      	lsls	r3, r3, #17
 8000958:	429a      	cmp	r2, r3
 800095a:	d301      	bcc.n	8000960 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095c:	2301      	movs	r3, #1
 800095e:	e010      	b.n	8000982 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <SysTick_Config+0x44>)
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	3a01      	subs	r2, #1
 8000966:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000968:	2301      	movs	r3, #1
 800096a:	425b      	negs	r3, r3
 800096c:	2103      	movs	r1, #3
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff ff7c 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x44>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	210f      	movs	r1, #15
 800099c:	187b      	adds	r3, r7, r1
 800099e:	1c02      	adds	r2, r0, #0
 80009a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff ff5d 	bl	800086c <__NVIC_SetPriority>
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b004      	add	sp, #16
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	0002      	movs	r2, r0
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff ff33 	bl	8000838 <__NVIC_EnableIRQ>
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ffaf 	bl	8000948 <SysTick_Config>
 80009ea:	0003      	movs	r3, r0
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b002      	add	sp, #8
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2221      	movs	r2, #33	; 0x21
 8000a00:	5c9b      	ldrb	r3, [r3, r2]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d008      	beq.n	8000a1a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e020      	b.n	8000a5c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	210e      	movs	r1, #14
 8000a26:	438a      	bics	r2, r1
 8000a28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2101      	movs	r1, #1
 8000a36:	438a      	bics	r2, r1
 8000a38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a42:	2101      	movs	r1, #1
 8000a44:	4091      	lsls	r1, r2
 8000a46:	000a      	movs	r2, r1
 8000a48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2221      	movs	r2, #33	; 0x21
 8000a4e:	2101      	movs	r1, #1
 8000a50:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2220      	movs	r2, #32
 8000a56:	2100      	movs	r1, #0
 8000a58:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b002      	add	sp, #8
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a6c:	210f      	movs	r1, #15
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2221      	movs	r2, #33	; 0x21
 8000a78:	5c9b      	ldrb	r3, [r3, r2]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d006      	beq.n	8000a8e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2204      	movs	r2, #4
 8000a84:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	e028      	b.n	8000ae0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	210e      	movs	r1, #14
 8000a9a:	438a      	bics	r2, r1
 8000a9c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	438a      	bics	r2, r1
 8000aac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	000a      	movs	r2, r1
 8000abc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2221      	movs	r2, #33	; 0x21
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2220      	movs	r2, #32
 8000aca:	2100      	movs	r1, #0
 8000acc:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d004      	beq.n	8000ae0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	0010      	movs	r0, r2
 8000ade:	4798      	blx	r3
    } 
  }
  return status;
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	781b      	ldrb	r3, [r3, #0]
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b004      	add	sp, #16
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afe:	e155      	b.n	8000dac <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2101      	movs	r1, #1
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	4091      	lsls	r1, r2
 8000b0a:	000a      	movs	r2, r1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d100      	bne.n	8000b18 <HAL_GPIO_Init+0x28>
 8000b16:	e146      	b.n	8000da6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d005      	beq.n	8000b30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2203      	movs	r2, #3
 8000b2a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d130      	bne.n	8000b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	0013      	movs	r3, r2
 8000b40:	43da      	mvns	r2, r3
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	409a      	lsls	r2, r3
 8000b52:	0013      	movs	r3, r2
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b66:	2201      	movs	r2, #1
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	0013      	movs	r3, r2
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	091b      	lsrs	r3, r3, #4
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	2203      	movs	r2, #3
 8000b98:	4013      	ands	r3, r2
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d017      	beq.n	8000bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	2203      	movs	r2, #3
 8000baa:	409a      	lsls	r2, r3
 8000bac:	0013      	movs	r3, r2
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d123      	bne.n	8000c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	08da      	lsrs	r2, r3, #3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3208      	adds	r2, #8
 8000be2:	0092      	lsls	r2, r2, #2
 8000be4:	58d3      	ldr	r3, [r2, r3]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	2207      	movs	r2, #7
 8000bec:	4013      	ands	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	691a      	ldr	r2, [r3, #16]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	2107      	movs	r1, #7
 8000c06:	400b      	ands	r3, r1
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	08da      	lsrs	r2, r3, #3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3208      	adds	r2, #8
 8000c1c:	0092      	lsls	r2, r2, #2
 8000c1e:	6939      	ldr	r1, [r7, #16]
 8000c20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	0013      	movs	r3, r2
 8000c32:	43da      	mvns	r2, r3
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	401a      	ands	r2, r3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	23c0      	movs	r3, #192	; 0xc0
 8000c5c:	029b      	lsls	r3, r3, #10
 8000c5e:	4013      	ands	r3, r2
 8000c60:	d100      	bne.n	8000c64 <HAL_GPIO_Init+0x174>
 8000c62:	e0a0      	b.n	8000da6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c64:	4b57      	ldr	r3, [pc, #348]	; (8000dc4 <HAL_GPIO_Init+0x2d4>)
 8000c66:	699a      	ldr	r2, [r3, #24]
 8000c68:	4b56      	ldr	r3, [pc, #344]	; (8000dc4 <HAL_GPIO_Init+0x2d4>)
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	619a      	str	r2, [r3, #24]
 8000c70:	4b54      	ldr	r3, [pc, #336]	; (8000dc4 <HAL_GPIO_Init+0x2d4>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	2201      	movs	r2, #1
 8000c76:	4013      	ands	r3, r2
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c7c:	4a52      	ldr	r2, [pc, #328]	; (8000dc8 <HAL_GPIO_Init+0x2d8>)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	3302      	adds	r3, #2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	589b      	ldr	r3, [r3, r2]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	4013      	ands	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	409a      	lsls	r2, r3
 8000c96:	0013      	movs	r3, r2
 8000c98:	43da      	mvns	r2, r3
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	2390      	movs	r3, #144	; 0x90
 8000ca4:	05db      	lsls	r3, r3, #23
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d019      	beq.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a47      	ldr	r2, [pc, #284]	; (8000dcc <HAL_GPIO_Init+0x2dc>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d013      	beq.n	8000cda <HAL_GPIO_Init+0x1ea>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a46      	ldr	r2, [pc, #280]	; (8000dd0 <HAL_GPIO_Init+0x2e0>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d00d      	beq.n	8000cd6 <HAL_GPIO_Init+0x1e6>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a45      	ldr	r2, [pc, #276]	; (8000dd4 <HAL_GPIO_Init+0x2e4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d007      	beq.n	8000cd2 <HAL_GPIO_Init+0x1e2>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a44      	ldr	r2, [pc, #272]	; (8000dd8 <HAL_GPIO_Init+0x2e8>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_GPIO_Init+0x1de>
 8000cca:	2304      	movs	r3, #4
 8000ccc:	e008      	b.n	8000ce0 <HAL_GPIO_Init+0x1f0>
 8000cce:	2305      	movs	r3, #5
 8000cd0:	e006      	b.n	8000ce0 <HAL_GPIO_Init+0x1f0>
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e004      	b.n	8000ce0 <HAL_GPIO_Init+0x1f0>
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	e002      	b.n	8000ce0 <HAL_GPIO_Init+0x1f0>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e000      	b.n	8000ce0 <HAL_GPIO_Init+0x1f0>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	400a      	ands	r2, r1
 8000ce6:	0092      	lsls	r2, r2, #2
 8000ce8:	4093      	lsls	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cf0:	4935      	ldr	r1, [pc, #212]	; (8000dc8 <HAL_GPIO_Init+0x2d8>)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	089b      	lsrs	r3, r3, #2
 8000cf6:	3302      	adds	r3, #2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cfe:	4b37      	ldr	r3, [pc, #220]	; (8000ddc <HAL_GPIO_Init+0x2ec>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43da      	mvns	r2, r3
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	025b      	lsls	r3, r3, #9
 8000d16:	4013      	ands	r3, r2
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d22:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <HAL_GPIO_Init+0x2ec>)
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d28:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <HAL_GPIO_Init+0x2ec>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	43da      	mvns	r2, r3
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	029b      	lsls	r3, r3, #10
 8000d40:	4013      	ands	r3, r2
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_GPIO_Init+0x2ec>)
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <HAL_GPIO_Init+0x2ec>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	035b      	lsls	r3, r3, #13
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_GPIO_Init+0x2ec>)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_GPIO_Init+0x2ec>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	43da      	mvns	r2, r3
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	039b      	lsls	r3, r3, #14
 8000d94:	4013      	ands	r3, r2
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_GPIO_Init+0x2ec>)
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	40da      	lsrs	r2, r3
 8000db4:	1e13      	subs	r3, r2, #0
 8000db6:	d000      	beq.n	8000dba <HAL_GPIO_Init+0x2ca>
 8000db8:	e6a2      	b.n	8000b00 <HAL_GPIO_Init+0x10>
  } 
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b006      	add	sp, #24
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	48000800 	.word	0x48000800
 8000dd4:	48000c00 	.word	0x48000c00
 8000dd8:	48001000 	.word	0x48001000
 8000ddc:	40010400 	.word	0x40010400

08000de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	0008      	movs	r0, r1
 8000dea:	0011      	movs	r1, r2
 8000dec:	1cbb      	adds	r3, r7, #2
 8000dee:	1c02      	adds	r2, r0, #0
 8000df0:	801a      	strh	r2, [r3, #0]
 8000df2:	1c7b      	adds	r3, r7, #1
 8000df4:	1c0a      	adds	r2, r1, #0
 8000df6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000df8:	1c7b      	adds	r3, r7, #1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d004      	beq.n	8000e0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e00:	1cbb      	adds	r3, r7, #2
 8000e02:	881a      	ldrh	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e08:	e003      	b.n	8000e12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e0a:	1cbb      	adds	r3, r7, #2
 8000e0c:	881a      	ldrh	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f000 fb76 	bl	800151c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2201      	movs	r2, #1
 8000e36:	4013      	ands	r3, r2
 8000e38:	d100      	bne.n	8000e3c <HAL_RCC_OscConfig+0x20>
 8000e3a:	e08e      	b.n	8000f5a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e3c:	4bc5      	ldr	r3, [pc, #788]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	220c      	movs	r2, #12
 8000e42:	4013      	ands	r3, r2
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d00e      	beq.n	8000e66 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e48:	4bc2      	ldr	r3, [pc, #776]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	220c      	movs	r2, #12
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d117      	bne.n	8000e84 <HAL_RCC_OscConfig+0x68>
 8000e54:	4bbf      	ldr	r3, [pc, #764]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	23c0      	movs	r3, #192	; 0xc0
 8000e5a:	025b      	lsls	r3, r3, #9
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	025b      	lsls	r3, r3, #9
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d10e      	bne.n	8000e84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e66:	4bbb      	ldr	r3, [pc, #748]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	029b      	lsls	r3, r3, #10
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d100      	bne.n	8000e74 <HAL_RCC_OscConfig+0x58>
 8000e72:	e071      	b.n	8000f58 <HAL_RCC_OscConfig+0x13c>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d000      	beq.n	8000e7e <HAL_RCC_OscConfig+0x62>
 8000e7c:	e06c      	b.n	8000f58 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	f000 fb4c 	bl	800151c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d107      	bne.n	8000e9c <HAL_RCC_OscConfig+0x80>
 8000e8c:	4bb1      	ldr	r3, [pc, #708]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4bb0      	ldr	r3, [pc, #704]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000e92:	2180      	movs	r1, #128	; 0x80
 8000e94:	0249      	lsls	r1, r1, #9
 8000e96:	430a      	orrs	r2, r1
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e02f      	b.n	8000efc <HAL_RCC_OscConfig+0xe0>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10c      	bne.n	8000ebe <HAL_RCC_OscConfig+0xa2>
 8000ea4:	4bab      	ldr	r3, [pc, #684]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4baa      	ldr	r3, [pc, #680]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000eaa:	49ab      	ldr	r1, [pc, #684]	; (8001158 <HAL_RCC_OscConfig+0x33c>)
 8000eac:	400a      	ands	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	4ba8      	ldr	r3, [pc, #672]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4ba7      	ldr	r3, [pc, #668]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000eb6:	49a9      	ldr	r1, [pc, #676]	; (800115c <HAL_RCC_OscConfig+0x340>)
 8000eb8:	400a      	ands	r2, r1
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e01e      	b.n	8000efc <HAL_RCC_OscConfig+0xe0>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b05      	cmp	r3, #5
 8000ec4:	d10e      	bne.n	8000ee4 <HAL_RCC_OscConfig+0xc8>
 8000ec6:	4ba3      	ldr	r3, [pc, #652]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4ba2      	ldr	r3, [pc, #648]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	02c9      	lsls	r1, r1, #11
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	4b9f      	ldr	r3, [pc, #636]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b9e      	ldr	r3, [pc, #632]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	0249      	lsls	r1, r1, #9
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	e00b      	b.n	8000efc <HAL_RCC_OscConfig+0xe0>
 8000ee4:	4b9b      	ldr	r3, [pc, #620]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b9a      	ldr	r3, [pc, #616]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000eea:	499b      	ldr	r1, [pc, #620]	; (8001158 <HAL_RCC_OscConfig+0x33c>)
 8000eec:	400a      	ands	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	4b98      	ldr	r3, [pc, #608]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b97      	ldr	r3, [pc, #604]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000ef6:	4999      	ldr	r1, [pc, #612]	; (800115c <HAL_RCC_OscConfig+0x340>)
 8000ef8:	400a      	ands	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d014      	beq.n	8000f2e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f04:	f7ff fc6a 	bl	80007dc <HAL_GetTick>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f0e:	f7ff fc65 	bl	80007dc <HAL_GetTick>
 8000f12:	0002      	movs	r2, r0
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b64      	cmp	r3, #100	; 0x64
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e2fd      	b.n	800151c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f20:	4b8c      	ldr	r3, [pc, #560]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	029b      	lsls	r3, r3, #10
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d0f0      	beq.n	8000f0e <HAL_RCC_OscConfig+0xf2>
 8000f2c:	e015      	b.n	8000f5a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fc55 	bl	80007dc <HAL_GetTick>
 8000f32:	0003      	movs	r3, r0
 8000f34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fc50 	bl	80007dc <HAL_GetTick>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	; 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e2e8      	b.n	800151c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4a:	4b82      	ldr	r3, [pc, #520]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	029b      	lsls	r3, r3, #10
 8000f52:	4013      	ands	r3, r2
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x11c>
 8000f56:	e000      	b.n	8000f5a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f58:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	4013      	ands	r3, r2
 8000f62:	d100      	bne.n	8000f66 <HAL_RCC_OscConfig+0x14a>
 8000f64:	e06c      	b.n	8001040 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f66:	4b7b      	ldr	r3, [pc, #492]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d00e      	beq.n	8000f8e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f70:	4b78      	ldr	r3, [pc, #480]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	220c      	movs	r2, #12
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d11f      	bne.n	8000fbc <HAL_RCC_OscConfig+0x1a0>
 8000f7c:	4b75      	ldr	r3, [pc, #468]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	23c0      	movs	r3, #192	; 0xc0
 8000f82:	025b      	lsls	r3, r3, #9
 8000f84:	401a      	ands	r2, r3
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d116      	bne.n	8000fbc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8e:	4b71      	ldr	r3, [pc, #452]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2202      	movs	r2, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	d005      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x188>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d001      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e2bb      	b.n	800151c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa4:	4b6b      	ldr	r3, [pc, #428]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	22f8      	movs	r2, #248	; 0xf8
 8000faa:	4393      	bics	r3, r2
 8000fac:	0019      	movs	r1, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	00da      	lsls	r2, r3, #3
 8000fb4:	4b67      	ldr	r3, [pc, #412]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fba:	e041      	b.n	8001040 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d024      	beq.n	800100e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc4:	4b63      	ldr	r3, [pc, #396]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b62      	ldr	r3, [pc, #392]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fc04 	bl	80007dc <HAL_GetTick>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fda:	f7ff fbff 	bl	80007dc <HAL_GetTick>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e297      	b.n	800151c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fec:	4b59      	ldr	r3, [pc, #356]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d0f1      	beq.n	8000fda <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff6:	4b57      	ldr	r3, [pc, #348]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	22f8      	movs	r2, #248	; 0xf8
 8000ffc:	4393      	bics	r3, r2
 8000ffe:	0019      	movs	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	00da      	lsls	r2, r3, #3
 8001006:	4b53      	ldr	r3, [pc, #332]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8001008:	430a      	orrs	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e018      	b.n	8001040 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100e:	4b51      	ldr	r3, [pc, #324]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b50      	ldr	r3, [pc, #320]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8001014:	2101      	movs	r1, #1
 8001016:	438a      	bics	r2, r1
 8001018:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fbdf 	bl	80007dc <HAL_GetTick>
 800101e:	0003      	movs	r3, r0
 8001020:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001024:	f7ff fbda 	bl	80007dc <HAL_GetTick>
 8001028:	0002      	movs	r2, r0
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e272      	b.n	800151c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001036:	4b47      	ldr	r3, [pc, #284]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2202      	movs	r2, #2
 800103c:	4013      	ands	r3, r2
 800103e:	d1f1      	bne.n	8001024 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2208      	movs	r2, #8
 8001046:	4013      	ands	r3, r2
 8001048:	d036      	beq.n	80010b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d019      	beq.n	8001086 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8001054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001056:	4b3f      	ldr	r3, [pc, #252]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8001058:	2101      	movs	r1, #1
 800105a:	430a      	orrs	r2, r1
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105e:	f7ff fbbd 	bl	80007dc <HAL_GetTick>
 8001062:	0003      	movs	r3, r0
 8001064:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001068:	f7ff fbb8 	bl	80007dc <HAL_GetTick>
 800106c:	0002      	movs	r2, r0
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e250      	b.n	800151c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	2202      	movs	r2, #2
 8001080:	4013      	ands	r3, r2
 8001082:	d0f1      	beq.n	8001068 <HAL_RCC_OscConfig+0x24c>
 8001084:	e018      	b.n	80010b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8001088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800108a:	4b32      	ldr	r3, [pc, #200]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 800108c:	2101      	movs	r1, #1
 800108e:	438a      	bics	r2, r1
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001092:	f7ff fba3 	bl	80007dc <HAL_GetTick>
 8001096:	0003      	movs	r3, r0
 8001098:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800109c:	f7ff fb9e 	bl	80007dc <HAL_GetTick>
 80010a0:	0002      	movs	r2, r0
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e236      	b.n	800151c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	2202      	movs	r2, #2
 80010b4:	4013      	ands	r3, r2
 80010b6:	d1f1      	bne.n	800109c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2204      	movs	r2, #4
 80010be:	4013      	ands	r3, r2
 80010c0:	d100      	bne.n	80010c4 <HAL_RCC_OscConfig+0x2a8>
 80010c2:	e0b5      	b.n	8001230 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c4:	201f      	movs	r0, #31
 80010c6:	183b      	adds	r3, r7, r0
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 80010ce:	69da      	ldr	r2, [r3, #28]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	055b      	lsls	r3, r3, #21
 80010d4:	4013      	ands	r3, r2
 80010d6:	d110      	bne.n	80010fa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 80010da:	69da      	ldr	r2, [r3, #28]
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	0549      	lsls	r1, r1, #21
 80010e2:	430a      	orrs	r2, r1
 80010e4:	61da      	str	r2, [r3, #28]
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 80010e8:	69da      	ldr	r2, [r3, #28]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	4013      	ands	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010f4:	183b      	adds	r3, r7, r0
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_RCC_OscConfig+0x344>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4013      	ands	r3, r2
 8001104:	d11a      	bne.n	800113c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_RCC_OscConfig+0x344>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_RCC_OscConfig+0x344>)
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	0049      	lsls	r1, r1, #1
 8001110:	430a      	orrs	r2, r1
 8001112:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001114:	f7ff fb62 	bl	80007dc <HAL_GetTick>
 8001118:	0003      	movs	r3, r0
 800111a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800111e:	f7ff fb5d 	bl	80007dc <HAL_GetTick>
 8001122:	0002      	movs	r2, r0
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b64      	cmp	r3, #100	; 0x64
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e1f5      	b.n	800151c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_RCC_OscConfig+0x344>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4013      	ands	r3, r2
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d10f      	bne.n	8001164 <HAL_RCC_OscConfig+0x348>
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8001146:	6a1a      	ldr	r2, [r3, #32]
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 800114a:	2101      	movs	r1, #1
 800114c:	430a      	orrs	r2, r1
 800114e:	621a      	str	r2, [r3, #32]
 8001150:	e036      	b.n	80011c0 <HAL_RCC_OscConfig+0x3a4>
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	40021000 	.word	0x40021000
 8001158:	fffeffff 	.word	0xfffeffff
 800115c:	fffbffff 	.word	0xfffbffff
 8001160:	40007000 	.word	0x40007000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10c      	bne.n	8001186 <HAL_RCC_OscConfig+0x36a>
 800116c:	4bca      	ldr	r3, [pc, #808]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	4bc9      	ldr	r3, [pc, #804]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001172:	2101      	movs	r1, #1
 8001174:	438a      	bics	r2, r1
 8001176:	621a      	str	r2, [r3, #32]
 8001178:	4bc7      	ldr	r3, [pc, #796]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	4bc6      	ldr	r3, [pc, #792]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800117e:	2104      	movs	r1, #4
 8001180:	438a      	bics	r2, r1
 8001182:	621a      	str	r2, [r3, #32]
 8001184:	e01c      	b.n	80011c0 <HAL_RCC_OscConfig+0x3a4>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b05      	cmp	r3, #5
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x38c>
 800118e:	4bc2      	ldr	r3, [pc, #776]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001190:	6a1a      	ldr	r2, [r3, #32]
 8001192:	4bc1      	ldr	r3, [pc, #772]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001194:	2104      	movs	r1, #4
 8001196:	430a      	orrs	r2, r1
 8001198:	621a      	str	r2, [r3, #32]
 800119a:	4bbf      	ldr	r3, [pc, #764]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800119c:	6a1a      	ldr	r2, [r3, #32]
 800119e:	4bbe      	ldr	r3, [pc, #760]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	430a      	orrs	r2, r1
 80011a4:	621a      	str	r2, [r3, #32]
 80011a6:	e00b      	b.n	80011c0 <HAL_RCC_OscConfig+0x3a4>
 80011a8:	4bbb      	ldr	r3, [pc, #748]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80011aa:	6a1a      	ldr	r2, [r3, #32]
 80011ac:	4bba      	ldr	r3, [pc, #744]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80011ae:	2101      	movs	r1, #1
 80011b0:	438a      	bics	r2, r1
 80011b2:	621a      	str	r2, [r3, #32]
 80011b4:	4bb8      	ldr	r3, [pc, #736]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80011b6:	6a1a      	ldr	r2, [r3, #32]
 80011b8:	4bb7      	ldr	r3, [pc, #732]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80011ba:	2104      	movs	r1, #4
 80011bc:	438a      	bics	r2, r1
 80011be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d014      	beq.n	80011f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fb08 	bl	80007dc <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d0:	e009      	b.n	80011e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d2:	f7ff fb03 	bl	80007dc <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	4aaf      	ldr	r2, [pc, #700]	; (800149c <HAL_RCC_OscConfig+0x680>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e19a      	b.n	800151c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e6:	4bac      	ldr	r3, [pc, #688]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	2202      	movs	r2, #2
 80011ec:	4013      	ands	r3, r2
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x3b6>
 80011f0:	e013      	b.n	800121a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f2:	f7ff faf3 	bl	80007dc <HAL_GetTick>
 80011f6:	0003      	movs	r3, r0
 80011f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fa:	e009      	b.n	8001210 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fc:	f7ff faee 	bl	80007dc <HAL_GetTick>
 8001200:	0002      	movs	r2, r0
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	4aa5      	ldr	r2, [pc, #660]	; (800149c <HAL_RCC_OscConfig+0x680>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e185      	b.n	800151c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001210:	4ba1      	ldr	r3, [pc, #644]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	2202      	movs	r2, #2
 8001216:	4013      	ands	r3, r2
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800121a:	231f      	movs	r3, #31
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d105      	bne.n	8001230 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001224:	4b9c      	ldr	r3, [pc, #624]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001226:	69da      	ldr	r2, [r3, #28]
 8001228:	4b9b      	ldr	r3, [pc, #620]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800122a:	499d      	ldr	r1, [pc, #628]	; (80014a0 <HAL_RCC_OscConfig+0x684>)
 800122c:	400a      	ands	r2, r1
 800122e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2210      	movs	r2, #16
 8001236:	4013      	ands	r3, r2
 8001238:	d063      	beq.n	8001302 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d12a      	bne.n	8001298 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001242:	4b95      	ldr	r3, [pc, #596]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001246:	4b94      	ldr	r3, [pc, #592]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001248:	2104      	movs	r1, #4
 800124a:	430a      	orrs	r2, r1
 800124c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800124e:	4b92      	ldr	r3, [pc, #584]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001252:	4b91      	ldr	r3, [pc, #580]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001254:	2101      	movs	r1, #1
 8001256:	430a      	orrs	r2, r1
 8001258:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fabf 	bl	80007dc <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001264:	f7ff faba 	bl	80007dc <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e152      	b.n	800151c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001276:	4b88      	ldr	r3, [pc, #544]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d0f1      	beq.n	8001264 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001280:	4b85      	ldr	r3, [pc, #532]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001284:	22f8      	movs	r2, #248	; 0xf8
 8001286:	4393      	bics	r3, r2
 8001288:	0019      	movs	r1, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	00da      	lsls	r2, r3, #3
 8001290:	4b81      	ldr	r3, [pc, #516]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001292:	430a      	orrs	r2, r1
 8001294:	635a      	str	r2, [r3, #52]	; 0x34
 8001296:	e034      	b.n	8001302 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	3305      	adds	r3, #5
 800129e:	d111      	bne.n	80012c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012a0:	4b7d      	ldr	r3, [pc, #500]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a4:	4b7c      	ldr	r3, [pc, #496]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012a6:	2104      	movs	r1, #4
 80012a8:	438a      	bics	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012ac:	4b7a      	ldr	r3, [pc, #488]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b0:	22f8      	movs	r2, #248	; 0xf8
 80012b2:	4393      	bics	r3, r2
 80012b4:	0019      	movs	r1, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	00da      	lsls	r2, r3, #3
 80012bc:	4b76      	ldr	r3, [pc, #472]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012be:	430a      	orrs	r2, r1
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34
 80012c2:	e01e      	b.n	8001302 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012c4:	4b74      	ldr	r3, [pc, #464]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c8:	4b73      	ldr	r3, [pc, #460]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012ca:	2104      	movs	r1, #4
 80012cc:	430a      	orrs	r2, r1
 80012ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012d0:	4b71      	ldr	r3, [pc, #452]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012d4:	4b70      	ldr	r3, [pc, #448]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	438a      	bics	r2, r1
 80012da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012dc:	f7ff fa7e 	bl	80007dc <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012e6:	f7ff fa79 	bl	80007dc <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e111      	b.n	800151c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012f8:	4b67      	ldr	r3, [pc, #412]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fc:	2202      	movs	r2, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	d1f1      	bne.n	80012e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2220      	movs	r2, #32
 8001308:	4013      	ands	r3, r2
 800130a:	d05c      	beq.n	80013c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800130c:	4b62      	ldr	r3, [pc, #392]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	220c      	movs	r2, #12
 8001312:	4013      	ands	r3, r2
 8001314:	2b0c      	cmp	r3, #12
 8001316:	d00e      	beq.n	8001336 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001318:	4b5f      	ldr	r3, [pc, #380]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	220c      	movs	r2, #12
 800131e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001320:	2b08      	cmp	r3, #8
 8001322:	d114      	bne.n	800134e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001324:	4b5c      	ldr	r3, [pc, #368]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	23c0      	movs	r3, #192	; 0xc0
 800132a:	025b      	lsls	r3, r3, #9
 800132c:	401a      	ands	r2, r3
 800132e:	23c0      	movs	r3, #192	; 0xc0
 8001330:	025b      	lsls	r3, r3, #9
 8001332:	429a      	cmp	r2, r3
 8001334:	d10b      	bne.n	800134e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001336:	4b58      	ldr	r3, [pc, #352]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	025b      	lsls	r3, r3, #9
 800133e:	4013      	ands	r3, r2
 8001340:	d040      	beq.n	80013c4 <HAL_RCC_OscConfig+0x5a8>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d03c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0e6      	b.n	800151c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01b      	beq.n	800138e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800135a:	4b4f      	ldr	r3, [pc, #316]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	0249      	lsls	r1, r1, #9
 8001360:	430a      	orrs	r2, r1
 8001362:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fa3a 	bl	80007dc <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800136e:	f7ff fa35 	bl	80007dc <HAL_GetTick>
 8001372:	0002      	movs	r2, r0
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e0cd      	b.n	800151c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001380:	4b45      	ldr	r3, [pc, #276]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	025b      	lsls	r3, r3, #9
 8001388:	4013      	ands	r3, r2
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x552>
 800138c:	e01b      	b.n	80013c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001392:	4b41      	ldr	r3, [pc, #260]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001394:	4943      	ldr	r1, [pc, #268]	; (80014a4 <HAL_RCC_OscConfig+0x688>)
 8001396:	400a      	ands	r2, r1
 8001398:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fa1f 	bl	80007dc <HAL_GetTick>
 800139e:	0003      	movs	r3, r0
 80013a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013a4:	f7ff fa1a 	bl	80007dc <HAL_GetTick>
 80013a8:	0002      	movs	r2, r0
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e0b2      	b.n	800151c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80013b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	025b      	lsls	r3, r3, #9
 80013be:	4013      	ands	r3, r2
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x588>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d100      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5b4>
 80013ce:	e0a4      	b.n	800151a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	220c      	movs	r2, #12
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d100      	bne.n	80013de <HAL_RCC_OscConfig+0x5c2>
 80013dc:	e078      	b.n	80014d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d14c      	bne.n	8001480 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e6:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80013ec:	492e      	ldr	r1, [pc, #184]	; (80014a8 <HAL_RCC_OscConfig+0x68c>)
 80013ee:	400a      	ands	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff f9f3 	bl	80007dc <HAL_GetTick>
 80013f6:	0003      	movs	r3, r0
 80013f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fc:	f7ff f9ee 	bl	80007dc <HAL_GetTick>
 8001400:	0002      	movs	r2, r0
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e086      	b.n	800151c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	049b      	lsls	r3, r3, #18
 8001416:	4013      	ands	r3, r2
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	220f      	movs	r2, #15
 8001420:	4393      	bics	r3, r2
 8001422:	0019      	movs	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800142a:	430a      	orrs	r2, r1
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_RCC_OscConfig+0x690>)
 8001434:	4013      	ands	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	431a      	orrs	r2, r3
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	0449      	lsls	r1, r1, #17
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff f9c1 	bl	80007dc <HAL_GetTick>
 800145a:	0003      	movs	r3, r0
 800145c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff f9bc 	bl	80007dc <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e054      	b.n	800151c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	049b      	lsls	r3, r3, #18
 800147a:	4013      	ands	r3, r2
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x644>
 800147e:	e04c      	b.n	800151a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <HAL_RCC_OscConfig+0x68c>)
 8001488:	400a      	ands	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff f9a6 	bl	80007dc <HAL_GetTick>
 8001490:	0003      	movs	r3, r0
 8001492:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001494:	e015      	b.n	80014c2 <HAL_RCC_OscConfig+0x6a6>
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	40021000 	.word	0x40021000
 800149c:	00001388 	.word	0x00001388
 80014a0:	efffffff 	.word	0xefffffff
 80014a4:	fffeffff 	.word	0xfffeffff
 80014a8:	feffffff 	.word	0xfeffffff
 80014ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff f994 	bl	80007dc <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e02c      	b.n	800151c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_RCC_OscConfig+0x708>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	049b      	lsls	r3, r3, #18
 80014ca:	4013      	ands	r3, r2
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x694>
 80014ce:	e024      	b.n	800151a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e01f      	b.n	800151c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_RCC_OscConfig+0x708>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_RCC_OscConfig+0x708>)
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	23c0      	movs	r3, #192	; 0xc0
 80014ec:	025b      	lsls	r3, r3, #9
 80014ee:	401a      	ands	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d10e      	bne.n	8001516 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	220f      	movs	r2, #15
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d107      	bne.n	8001516 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	23f0      	movs	r3, #240	; 0xf0
 800150a:	039b      	lsls	r3, r3, #14
 800150c:	401a      	ands	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d001      	beq.n	800151a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	b008      	add	sp, #32
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0bf      	b.n	80016bc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800153c:	4b61      	ldr	r3, [pc, #388]	; (80016c4 <HAL_RCC_ClockConfig+0x19c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2201      	movs	r2, #1
 8001542:	4013      	ands	r3, r2
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d911      	bls.n	800156e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b5e      	ldr	r3, [pc, #376]	; (80016c4 <HAL_RCC_ClockConfig+0x19c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2201      	movs	r2, #1
 8001550:	4393      	bics	r3, r2
 8001552:	0019      	movs	r1, r3
 8001554:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <HAL_RCC_ClockConfig+0x19c>)
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155c:	4b59      	ldr	r3, [pc, #356]	; (80016c4 <HAL_RCC_ClockConfig+0x19c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2201      	movs	r2, #1
 8001562:	4013      	ands	r3, r2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0a6      	b.n	80016bc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2202      	movs	r2, #2
 8001574:	4013      	ands	r3, r2
 8001576:	d015      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2204      	movs	r2, #4
 800157e:	4013      	ands	r3, r2
 8001580:	d006      	beq.n	8001590 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001582:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001588:	21e0      	movs	r1, #224	; 0xe0
 800158a:	00c9      	lsls	r1, r1, #3
 800158c:	430a      	orrs	r2, r1
 800158e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001590:	4b4d      	ldr	r3, [pc, #308]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	22f0      	movs	r2, #240	; 0xf0
 8001596:	4393      	bics	r3, r2
 8001598:	0019      	movs	r1, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2201      	movs	r2, #1
 80015aa:	4013      	ands	r3, r2
 80015ac:	d04c      	beq.n	8001648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	029b      	lsls	r3, r3, #10
 80015be:	4013      	ands	r3, r2
 80015c0:	d120      	bne.n	8001604 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e07a      	b.n	80016bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ce:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	049b      	lsls	r3, r3, #18
 80015d6:	4013      	ands	r3, r2
 80015d8:	d114      	bne.n	8001604 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e06e      	b.n	80016bc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015e6:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 80015e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	025b      	lsls	r3, r3, #9
 80015ee:	4013      	ands	r3, r2
 80015f0:	d108      	bne.n	8001604 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e062      	b.n	80016bc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2202      	movs	r2, #2
 80015fc:	4013      	ands	r3, r2
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e05b      	b.n	80016bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2203      	movs	r2, #3
 800160a:	4393      	bics	r3, r2
 800160c:	0019      	movs	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001618:	f7ff f8e0 	bl	80007dc <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001620:	e009      	b.n	8001636 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001622:	f7ff f8db 	bl	80007dc <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_RCC_ClockConfig+0x1a4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e042      	b.n	80016bc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	220c      	movs	r2, #12
 800163c:	401a      	ands	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	429a      	cmp	r2, r3
 8001646:	d1ec      	bne.n	8001622 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_RCC_ClockConfig+0x19c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	4013      	ands	r3, r2
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d211      	bcs.n	800167a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_ClockConfig+0x19c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2201      	movs	r2, #1
 800165c:	4393      	bics	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_RCC_ClockConfig+0x19c>)
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_RCC_ClockConfig+0x19c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2201      	movs	r2, #1
 800166e:	4013      	ands	r3, r2
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d001      	beq.n	800167a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e020      	b.n	80016bc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2204      	movs	r2, #4
 8001680:	4013      	ands	r3, r2
 8001682:	d009      	beq.n	8001698 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_RCC_ClockConfig+0x1a8>)
 800168a:	4013      	ands	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001698:	f000 f820 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 800169c:	0001      	movs	r1, r0
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_RCC_ClockConfig+0x1a0>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	220f      	movs	r2, #15
 80016a6:	4013      	ands	r3, r2
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_RCC_ClockConfig+0x1ac>)
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	000a      	movs	r2, r1
 80016ae:	40da      	lsrs	r2, r3
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1b0>)
 80016b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff f84b 	bl	8000750 <HAL_InitTick>
  
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	0018      	movs	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	b004      	add	sp, #16
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40022000 	.word	0x40022000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	00001388 	.word	0x00001388
 80016d0:	fffff8ff 	.word	0xfffff8ff
 80016d4:	08002e24 	.word	0x08002e24
 80016d8:	20000000 	.word	0x20000000

080016dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b08f      	sub	sp, #60	; 0x3c
 80016e0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016e2:	2314      	movs	r3, #20
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	4a38      	ldr	r2, [pc, #224]	; (80017c8 <HAL_RCC_GetSysClockFreq+0xec>)
 80016e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016ea:	c313      	stmia	r3!, {r0, r1, r4}
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4a36      	ldr	r2, [pc, #216]	; (80017cc <HAL_RCC_GetSysClockFreq+0xf0>)
 80016f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016f6:	c313      	stmia	r3!, {r0, r1, r4}
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
 8001704:	2300      	movs	r3, #0
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	220c      	movs	r2, #12
 800171a:	4013      	ands	r3, r2
 800171c:	2b0c      	cmp	r3, #12
 800171e:	d047      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0xd4>
 8001720:	d849      	bhi.n	80017b6 <HAL_RCC_GetSysClockFreq+0xda>
 8001722:	2b04      	cmp	r3, #4
 8001724:	d002      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x50>
 8001726:	2b08      	cmp	r3, #8
 8001728:	d003      	beq.n	8001732 <HAL_RCC_GetSysClockFreq+0x56>
 800172a:	e044      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800172c:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001730:	e044      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001734:	0c9b      	lsrs	r3, r3, #18
 8001736:	220f      	movs	r2, #15
 8001738:	4013      	ands	r3, r2
 800173a:	2214      	movs	r2, #20
 800173c:	18ba      	adds	r2, r7, r2
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	220f      	movs	r2, #15
 8001748:	4013      	ands	r3, r2
 800174a:	1d3a      	adds	r2, r7, #4
 800174c:	5cd3      	ldrb	r3, [r2, r3]
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001752:	23c0      	movs	r3, #192	; 0xc0
 8001754:	025b      	lsls	r3, r3, #9
 8001756:	401a      	ands	r2, r3
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	025b      	lsls	r3, r3, #9
 800175c:	429a      	cmp	r2, r3
 800175e:	d109      	bne.n	8001774 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001762:	481c      	ldr	r0, [pc, #112]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001764:	f7fe fcd0 	bl	8000108 <__udivsi3>
 8001768:	0003      	movs	r3, r0
 800176a:	001a      	movs	r2, r3
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	4353      	muls	r3, r2
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
 8001772:	e01a      	b.n	80017aa <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001776:	23c0      	movs	r3, #192	; 0xc0
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	401a      	ands	r2, r3
 800177c:	23c0      	movs	r3, #192	; 0xc0
 800177e:	025b      	lsls	r3, r3, #9
 8001780:	429a      	cmp	r2, r3
 8001782:	d109      	bne.n	8001798 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001786:	4814      	ldr	r0, [pc, #80]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001788:	f7fe fcbe 	bl	8000108 <__udivsi3>
 800178c:	0003      	movs	r3, r0
 800178e:	001a      	movs	r2, r3
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	4353      	muls	r3, r2
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
 8001796:	e008      	b.n	80017aa <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800179a:	480e      	ldr	r0, [pc, #56]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800179c:	f7fe fcb4 	bl	8000108 <__udivsi3>
 80017a0:	0003      	movs	r3, r0
 80017a2:	001a      	movs	r2, r3
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	4353      	muls	r3, r2
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80017aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017ae:	e005      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017b4:	e002      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b00f      	add	sp, #60	; 0x3c
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	08002e04 	.word	0x08002e04
 80017cc:	08002e14 	.word	0x08002e14
 80017d0:	40021000 	.word	0x40021000
 80017d4:	007a1200 	.word	0x007a1200
 80017d8:	02dc6c00 	.word	0x02dc6c00

080017dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e0:	4b02      	ldr	r3, [pc, #8]	; (80017ec <HAL_RCC_GetHCLKFreq+0x10>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	20000000 	.word	0x20000000

080017f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017f4:	f7ff fff2 	bl	80017dc <HAL_RCC_GetHCLKFreq>
 80017f8:	0001      	movs	r1, r0
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	2207      	movs	r2, #7
 8001802:	4013      	ands	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001806:	5cd3      	ldrb	r3, [r2, r3]
 8001808:	40d9      	lsrs	r1, r3
 800180a:	000b      	movs	r3, r1
}    
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	40021000 	.word	0x40021000
 8001818:	08002e34 	.word	0x08002e34

0800181c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	4013      	ands	r3, r2
 8001836:	d100      	bne.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001838:	e08e      	b.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800183a:	2017      	movs	r0, #23
 800183c:	183b      	adds	r3, r7, r0
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001842:	4b6e      	ldr	r3, [pc, #440]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	055b      	lsls	r3, r3, #21
 800184a:	4013      	ands	r3, r2
 800184c:	d110      	bne.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b6b      	ldr	r3, [pc, #428]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	0549      	lsls	r1, r1, #21
 8001858:	430a      	orrs	r2, r1
 800185a:	61da      	str	r2, [r3, #28]
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800185e:	69da      	ldr	r2, [r3, #28]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	055b      	lsls	r3, r3, #21
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186a:	183b      	adds	r3, r7, r0
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4013      	ands	r3, r2
 800187a:	d11a      	bne.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187c:	4b60      	ldr	r3, [pc, #384]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b5f      	ldr	r3, [pc, #380]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001882:	2180      	movs	r1, #128	; 0x80
 8001884:	0049      	lsls	r1, r1, #1
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188a:	f7fe ffa7 	bl	80007dc <HAL_GetTick>
 800188e:	0003      	movs	r3, r0
 8001890:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001892:	e008      	b.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001894:	f7fe ffa2 	bl	80007dc <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e0a6      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b56      	ldr	r3, [pc, #344]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018b2:	4b52      	ldr	r3, [pc, #328]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018b4:	6a1a      	ldr	r2, [r3, #32]
 80018b6:	23c0      	movs	r3, #192	; 0xc0
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d034      	beq.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	23c0      	movs	r3, #192	; 0xc0
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4013      	ands	r3, r2
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d02c      	beq.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018d4:	4b49      	ldr	r3, [pc, #292]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4a4a      	ldr	r2, [pc, #296]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018da:	4013      	ands	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018e0:	6a1a      	ldr	r2, [r3, #32]
 80018e2:	4b46      	ldr	r3, [pc, #280]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	0249      	lsls	r1, r1, #9
 80018e8:	430a      	orrs	r2, r1
 80018ea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018f2:	4945      	ldr	r1, [pc, #276]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80018f4:	400a      	ands	r2, r1
 80018f6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018f8:	4b40      	ldr	r3, [pc, #256]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	4013      	ands	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7fe ff69 	bl	80007dc <HAL_GetTick>
 800190a:	0003      	movs	r3, r0
 800190c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	e009      	b.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7fe ff64 	bl	80007dc <HAL_GetTick>
 8001914:	0002      	movs	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	4a3c      	ldr	r2, [pc, #240]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e067      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d0f0      	beq.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4a34      	ldr	r2, [pc, #208]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001934:	4013      	ands	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800193e:	430a      	orrs	r2, r1
 8001940:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001942:	2317      	movs	r3, #23
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800194e:	69da      	ldr	r2, [r3, #28]
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001952:	492f      	ldr	r1, [pc, #188]	; (8001a10 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001954:	400a      	ands	r2, r1
 8001956:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d009      	beq.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	2203      	movs	r2, #3
 8001968:	4393      	bics	r3, r2
 800196a:	0019      	movs	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001972:	430a      	orrs	r2, r1
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	d009      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	4a23      	ldr	r2, [pc, #140]	; (8001a14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001986:	4013      	ands	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001990:	430a      	orrs	r2, r1
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2220      	movs	r2, #32
 800199a:	4013      	ands	r3, r2
 800199c:	d009      	beq.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	2210      	movs	r2, #16
 80019a4:	4393      	bics	r3, r2
 80019a6:	0019      	movs	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ae:	430a      	orrs	r2, r1
 80019b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	029b      	lsls	r3, r3, #10
 80019ba:	4013      	ands	r3, r2
 80019bc:	d009      	beq.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	4393      	bics	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ce:	430a      	orrs	r2, r1
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4013      	ands	r3, r2
 80019dc:	d009      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	2240      	movs	r2, #64	; 0x40
 80019e4:	4393      	bics	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b006      	add	sp, #24
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
 8001a04:	fffffcff 	.word	0xfffffcff
 8001a08:	fffeffff 	.word	0xfffeffff
 8001a0c:	00001388 	.word	0x00001388
 8001a10:	efffffff 	.word	0xefffffff
 8001a14:	fffcffff 	.word	0xfffcffff

08001a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e044      	b.n	8001ab4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d107      	bne.n	8001a42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2274      	movs	r2, #116	; 0x74
 8001a36:	2100      	movs	r1, #0
 8001a38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7fe fdb1 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2224      	movs	r2, #36	; 0x24
 8001a46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2101      	movs	r1, #1
 8001a54:	438a      	bics	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 fb8e 	bl	800217c <UART_SetConfig>
 8001a60:	0003      	movs	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e024      	b.n	8001ab4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f000 fd09 	bl	800248c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	490d      	ldr	r1, [pc, #52]	; (8001abc <HAL_UART_Init+0xa4>)
 8001a86:	400a      	ands	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	212a      	movs	r1, #42	; 0x2a
 8001a96:	438a      	bics	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 fda1 	bl	80025f4 <UART_CheckIdleState>
 8001ab2:	0003      	movs	r3, r0
}
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b002      	add	sp, #8
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	ffffb7ff 	.word	0xffffb7ff

08001ac0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	1dbb      	adds	r3, r7, #6
 8001acc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d150      	bne.n	8001b78 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_UART_Receive_IT+0x24>
 8001adc:	1dbb      	adds	r3, r7, #6
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e048      	b.n	8001b7a <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	015b      	lsls	r3, r3, #5
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d109      	bne.n	8001b08 <HAL_UART_Receive_IT+0x48>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2201      	movs	r2, #1
 8001b00:	4013      	ands	r3, r2
 8001b02:	d001      	beq.n	8001b08 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e038      	b.n	8001b7a <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2274      	movs	r2, #116	; 0x74
 8001b0c:	5c9b      	ldrb	r3, [r3, r2]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_UART_Receive_IT+0x56>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e031      	b.n	8001b7a <HAL_UART_Receive_IT+0xba>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2274      	movs	r2, #116	; 0x74
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	041b      	lsls	r3, r3, #16
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d019      	beq.n	8001b66 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b32:	f3ef 8310 	mrs	r3, PRIMASK
 8001b36:	613b      	str	r3, [r7, #16]
  return(result);
 8001b38:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001b3a:	61fb      	str	r3, [r7, #28]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f383 8810 	msr	PRIMASK, r3
}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2180      	movs	r1, #128	; 0x80
 8001b54:	04c9      	lsls	r1, r1, #19
 8001b56:	430a      	orrs	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f383 8810 	msr	PRIMASK, r3
}
 8001b64:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001b66:	1dbb      	adds	r3, r7, #6
 8001b68:	881a      	ldrh	r2, [r3, #0]
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f000 fe4c 	bl	800280c <UART_Start_Receive_IT>
 8001b74:	0003      	movs	r3, r0
 8001b76:	e000      	b.n	8001b7a <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
  }
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b008      	add	sp, #32
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b0ab      	sub	sp, #172	; 0xac
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	22a4      	movs	r2, #164	; 0xa4
 8001b94:	18b9      	adds	r1, r7, r2
 8001b96:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	20a0      	movs	r0, #160	; 0xa0
 8001ba0:	1839      	adds	r1, r7, r0
 8001ba2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	219c      	movs	r1, #156	; 0x9c
 8001bac:	1879      	adds	r1, r7, r1
 8001bae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001bb0:	0011      	movs	r1, r2
 8001bb2:	18bb      	adds	r3, r7, r2
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a99      	ldr	r2, [pc, #612]	; (8001e1c <HAL_UART_IRQHandler+0x298>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2298      	movs	r2, #152	; 0x98
 8001bbc:	18bc      	adds	r4, r7, r2
 8001bbe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001bc0:	18bb      	adds	r3, r7, r2
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d114      	bne.n	8001bf2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d00f      	beq.n	8001bf2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001bd2:	183b      	adds	r3, r7, r0
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d00a      	beq.n	8001bf2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d100      	bne.n	8001be6 <HAL_UART_IRQHandler+0x62>
 8001be4:	e296      	b.n	8002114 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	0010      	movs	r0, r2
 8001bee:	4798      	blx	r3
      }
      return;
 8001bf0:	e290      	b.n	8002114 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001bf2:	2398      	movs	r3, #152	; 0x98
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d100      	bne.n	8001bfe <HAL_UART_IRQHandler+0x7a>
 8001bfc:	e114      	b.n	8001e28 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001bfe:	239c      	movs	r3, #156	; 0x9c
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	d106      	bne.n	8001c18 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001c0a:	23a0      	movs	r3, #160	; 0xa0
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a83      	ldr	r2, [pc, #524]	; (8001e20 <HAL_UART_IRQHandler+0x29c>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	d100      	bne.n	8001c18 <HAL_UART_IRQHandler+0x94>
 8001c16:	e107      	b.n	8001e28 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001c18:	23a4      	movs	r3, #164	; 0xa4
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4013      	ands	r3, r2
 8001c22:	d012      	beq.n	8001c4a <HAL_UART_IRQHandler+0xc6>
 8001c24:	23a0      	movs	r3, #160	; 0xa0
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d00b      	beq.n	8001c4a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2201      	movs	r2, #1
 8001c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2280      	movs	r2, #128	; 0x80
 8001c3e:	589b      	ldr	r3, [r3, r2]
 8001c40:	2201      	movs	r2, #1
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c4a:	23a4      	movs	r3, #164	; 0xa4
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2202      	movs	r2, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	d011      	beq.n	8001c7a <HAL_UART_IRQHandler+0xf6>
 8001c56:	239c      	movs	r3, #156	; 0x9c
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d00b      	beq.n	8001c7a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2202      	movs	r2, #2
 8001c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	589b      	ldr	r3, [r3, r2]
 8001c70:	2204      	movs	r2, #4
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2180      	movs	r1, #128	; 0x80
 8001c78:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c7a:	23a4      	movs	r3, #164	; 0xa4
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2204      	movs	r2, #4
 8001c82:	4013      	ands	r3, r2
 8001c84:	d011      	beq.n	8001caa <HAL_UART_IRQHandler+0x126>
 8001c86:	239c      	movs	r3, #156	; 0x9c
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d00b      	beq.n	8001caa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2204      	movs	r2, #4
 8001c98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2280      	movs	r2, #128	; 0x80
 8001c9e:	589b      	ldr	r3, [r3, r2]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001caa:	23a4      	movs	r3, #164	; 0xa4
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d017      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001cb6:	23a0      	movs	r3, #160	; 0xa0
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d105      	bne.n	8001cce <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001cc2:	239c      	movs	r3, #156	; 0x9c
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	589b      	ldr	r3, [r3, r2]
 8001cdc:	2208      	movs	r2, #8
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001ce6:	23a4      	movs	r3, #164	; 0xa4
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_UART_IRQHandler+0x198>
 8001cf4:	23a0      	movs	r3, #160	; 0xa0
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	04db      	lsls	r3, r3, #19
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d00c      	beq.n	8001d1c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	589b      	ldr	r3, [r3, r2]
 8001d12:	2220      	movs	r2, #32
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	589b      	ldr	r3, [r3, r2]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d100      	bne.n	8001d28 <HAL_UART_IRQHandler+0x1a4>
 8001d26:	e1f7      	b.n	8002118 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d28:	23a4      	movs	r3, #164	; 0xa4
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	4013      	ands	r3, r2
 8001d32:	d00e      	beq.n	8001d52 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d34:	23a0      	movs	r3, #160	; 0xa0
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d008      	beq.n	8001d52 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	0010      	movs	r0, r2
 8001d50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2280      	movs	r2, #128	; 0x80
 8001d56:	589b      	ldr	r3, [r3, r2]
 8001d58:	2194      	movs	r1, #148	; 0x94
 8001d5a:	187a      	adds	r2, r7, r1
 8001d5c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2240      	movs	r2, #64	; 0x40
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b40      	cmp	r3, #64	; 0x40
 8001d6a:	d004      	beq.n	8001d76 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2228      	movs	r2, #40	; 0x28
 8001d72:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d74:	d047      	beq.n	8001e06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f000 fdf7 	bl	800296c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2240      	movs	r2, #64	; 0x40
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b40      	cmp	r3, #64	; 0x40
 8001d8a:	d137      	bne.n	8001dfc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8001d90:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d94:	2090      	movs	r0, #144	; 0x90
 8001d96:	183a      	adds	r2, r7, r0
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001da0:	f383 8810 	msr	PRIMASK, r3
}
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2140      	movs	r1, #64	; 0x40
 8001db2:	438a      	bics	r2, r1
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	183b      	adds	r3, r7, r0
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dbe:	f383 8810 	msr	PRIMASK, r3
}
 8001dc2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d012      	beq.n	8001df2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <HAL_UART_IRQHandler+0x2a0>)
 8001dd2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7fe fe43 	bl	8000a64 <HAL_DMA_Abort_IT>
 8001dde:	1e03      	subs	r3, r0, #0
 8001de0:	d01a      	beq.n	8001e18 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	0018      	movs	r0, r3
 8001dee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001df0:	e012      	b.n	8001e18 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f000 f9ad 	bl	8002154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dfa:	e00d      	b.n	8001e18 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f000 f9a8 	bl	8002154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e04:	e008      	b.n	8001e18 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f000 f9a3 	bl	8002154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2280      	movs	r2, #128	; 0x80
 8001e12:	2100      	movs	r1, #0
 8001e14:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001e16:	e17f      	b.n	8002118 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e18:	46c0      	nop			; (mov r8, r8)
    return;
 8001e1a:	e17d      	b.n	8002118 <HAL_UART_IRQHandler+0x594>
 8001e1c:	0000080f 	.word	0x0000080f
 8001e20:	04000120 	.word	0x04000120
 8001e24:	08002a31 	.word	0x08002a31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d000      	beq.n	8001e32 <HAL_UART_IRQHandler+0x2ae>
 8001e30:	e131      	b.n	8002096 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001e32:	23a4      	movs	r3, #164	; 0xa4
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d100      	bne.n	8001e40 <HAL_UART_IRQHandler+0x2bc>
 8001e3e:	e12a      	b.n	8002096 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001e40:	23a0      	movs	r3, #160	; 0xa0
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2210      	movs	r2, #16
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d100      	bne.n	8001e4e <HAL_UART_IRQHandler+0x2ca>
 8001e4c:	e123      	b.n	8002096 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2210      	movs	r2, #16
 8001e54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2240      	movs	r2, #64	; 0x40
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b40      	cmp	r3, #64	; 0x40
 8001e62:	d000      	beq.n	8001e66 <HAL_UART_IRQHandler+0x2e2>
 8001e64:	e09b      	b.n	8001f9e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	217e      	movs	r1, #126	; 0x7e
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001e74:	187b      	adds	r3, r7, r1
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d100      	bne.n	8001e7e <HAL_UART_IRQHandler+0x2fa>
 8001e7c:	e14e      	b.n	800211c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2258      	movs	r2, #88	; 0x58
 8001e82:	5a9b      	ldrh	r3, [r3, r2]
 8001e84:	187a      	adds	r2, r7, r1
 8001e86:	8812      	ldrh	r2, [r2, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d300      	bcc.n	8001e8e <HAL_UART_IRQHandler+0x30a>
 8001e8c:	e146      	b.n	800211c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	187a      	adds	r2, r7, r1
 8001e92:	215a      	movs	r1, #90	; 0x5a
 8001e94:	8812      	ldrh	r2, [r2, #0]
 8001e96:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d06e      	beq.n	8001f80 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001eaa:	67bb      	str	r3, [r7, #120]	; 0x78
 8001eac:	2301      	movs	r3, #1
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb2:	f383 8810 	msr	PRIMASK, r3
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	499a      	ldr	r1, [pc, #616]	; (800212c <HAL_UART_IRQHandler+0x5a8>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ece:	f383 8810 	msr	PRIMASK, r3
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8001ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001edc:	677b      	str	r3, [r7, #116]	; 0x74
 8001ede:	2301      	movs	r3, #1
 8001ee0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee4:	f383 8810 	msr	PRIMASK, r3
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	438a      	bics	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001efc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f00:	f383 8810 	msr	PRIMASK, r3
}
 8001f04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f06:	f3ef 8310 	mrs	r3, PRIMASK
 8001f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8001f10:	2301      	movs	r3, #1
 8001f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f16:	f383 8810 	msr	PRIMASK, r3
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2140      	movs	r1, #64	; 0x40
 8001f28:	438a      	bics	r2, r1
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f2e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f32:	f383 8810 	msr	PRIMASK, r3
}
 8001f36:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f44:	f3ef 8310 	mrs	r3, PRIMASK
 8001f48:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f4e:	2301      	movs	r3, #1
 8001f50:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f54:	f383 8810 	msr	PRIMASK, r3
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2110      	movs	r1, #16
 8001f66:	438a      	bics	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f70:	f383 8810 	msr	PRIMASK, r3
}
 8001f74:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7fe fd3a 	bl	80009f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2258      	movs	r2, #88	; 0x58
 8001f84:	5a9a      	ldrh	r2, [r3, r2]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	215a      	movs	r1, #90	; 0x5a
 8001f8a:	5a5b      	ldrh	r3, [r3, r1]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0011      	movs	r1, r2
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 f8e4 	bl	8002164 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001f9c:	e0be      	b.n	800211c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2258      	movs	r2, #88	; 0x58
 8001fa2:	5a99      	ldrh	r1, [r3, r2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	225a      	movs	r2, #90	; 0x5a
 8001fa8:	5a9b      	ldrh	r3, [r3, r2]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	208e      	movs	r0, #142	; 0x8e
 8001fae:	183b      	adds	r3, r7, r0
 8001fb0:	1a8a      	subs	r2, r1, r2
 8001fb2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	225a      	movs	r2, #90	; 0x5a
 8001fb8:	5a9b      	ldrh	r3, [r3, r2]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d100      	bne.n	8001fc2 <HAL_UART_IRQHandler+0x43e>
 8001fc0:	e0ae      	b.n	8002120 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8001fc2:	183b      	adds	r3, r7, r0
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d100      	bne.n	8001fcc <HAL_UART_IRQHandler+0x448>
 8001fca:	e0a9      	b.n	8002120 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8001fd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fd4:	2488      	movs	r4, #136	; 0x88
 8001fd6:	193a      	adds	r2, r7, r4
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	2301      	movs	r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f383 8810 	msr	PRIMASK, r3
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	494f      	ldr	r1, [pc, #316]	; (8002130 <HAL_UART_IRQHandler+0x5ac>)
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	193b      	adds	r3, r7, r4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f383 8810 	msr	PRIMASK, r3
}
 8002002:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002004:	f3ef 8310 	mrs	r3, PRIMASK
 8002008:	61bb      	str	r3, [r7, #24]
  return(result);
 800200a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200c:	2484      	movs	r4, #132	; 0x84
 800200e:	193a      	adds	r2, r7, r4
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	2301      	movs	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f383 8810 	msr	PRIMASK, r3
}
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	438a      	bics	r2, r1
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	193b      	adds	r3, r7, r4
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	f383 8810 	msr	PRIMASK, r3
}
 800203a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800204e:	f3ef 8310 	mrs	r3, PRIMASK
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002056:	2480      	movs	r4, #128	; 0x80
 8002058:	193a      	adds	r2, r7, r4
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	2301      	movs	r3, #1
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	f383 8810 	msr	PRIMASK, r3
}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2110      	movs	r1, #16
 8002074:	438a      	bics	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	193b      	adds	r3, r7, r4
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	f383 8810 	msr	PRIMASK, r3
}
 8002084:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002086:	183b      	adds	r3, r7, r0
 8002088:	881a      	ldrh	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0011      	movs	r1, r2
 800208e:	0018      	movs	r0, r3
 8002090:	f000 f868 	bl	8002164 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002094:	e044      	b.n	8002120 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002096:	23a4      	movs	r3, #164	; 0xa4
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	035b      	lsls	r3, r3, #13
 80020a0:	4013      	ands	r3, r2
 80020a2:	d010      	beq.n	80020c6 <HAL_UART_IRQHandler+0x542>
 80020a4:	239c      	movs	r3, #156	; 0x9c
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	03db      	lsls	r3, r3, #15
 80020ae:	4013      	ands	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	0352      	lsls	r2, r2, #13
 80020ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	0018      	movs	r0, r3
 80020c0:	f000 fe60 	bl	8002d84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80020c4:	e02f      	b.n	8002126 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80020c6:	23a4      	movs	r3, #164	; 0xa4
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	4013      	ands	r3, r2
 80020d0:	d00f      	beq.n	80020f2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80020d2:	23a0      	movs	r3, #160	; 0xa0
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	4013      	ands	r3, r2
 80020dc:	d009      	beq.n	80020f2 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d01e      	beq.n	8002124 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	0010      	movs	r0, r2
 80020ee:	4798      	blx	r3
    }
    return;
 80020f0:	e018      	b.n	8002124 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80020f2:	23a4      	movs	r3, #164	; 0xa4
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2240      	movs	r2, #64	; 0x40
 80020fa:	4013      	ands	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_UART_IRQHandler+0x5a2>
 80020fe:	23a0      	movs	r3, #160	; 0xa0
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2240      	movs	r2, #64	; 0x40
 8002106:	4013      	ands	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0018      	movs	r0, r3
 800210e:	f000 fca6 	bl	8002a5e <UART_EndTransmit_IT>
    return;
 8002112:	e008      	b.n	8002126 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	e006      	b.n	8002126 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	e004      	b.n	8002126 <HAL_UART_IRQHandler+0x5a2>
      return;
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	e002      	b.n	8002126 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	e000      	b.n	8002126 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002124:	46c0      	nop			; (mov r8, r8)
  }

}
 8002126:	46bd      	mov	sp, r7
 8002128:	b02b      	add	sp, #172	; 0xac
 800212a:	bd90      	pop	{r4, r7, pc}
 800212c:	fffffeff 	.word	0xfffffeff
 8002130:	fffffedf 	.word	0xfffffedf

08002134 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b002      	add	sp, #8
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	000a      	movs	r2, r1
 800216e:	1cbb      	adds	r3, r7, #2
 8002170:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	b002      	add	sp, #8
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002184:	231e      	movs	r3, #30
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4aaf      	ldr	r2, [pc, #700]	; (8002468 <UART_SetConfig+0x2ec>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4aaa      	ldr	r2, [pc, #680]	; (800246c <UART_SetConfig+0x2f0>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4aa1      	ldr	r2, [pc, #644]	; (8002470 <UART_SetConfig+0x2f4>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a9d      	ldr	r2, [pc, #628]	; (8002474 <UART_SetConfig+0x2f8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d127      	bne.n	8002252 <UART_SetConfig+0xd6>
 8002202:	4b9d      	ldr	r3, [pc, #628]	; (8002478 <UART_SetConfig+0x2fc>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	2203      	movs	r2, #3
 8002208:	4013      	ands	r3, r2
 800220a:	2b03      	cmp	r3, #3
 800220c:	d00d      	beq.n	800222a <UART_SetConfig+0xae>
 800220e:	d81b      	bhi.n	8002248 <UART_SetConfig+0xcc>
 8002210:	2b02      	cmp	r3, #2
 8002212:	d014      	beq.n	800223e <UART_SetConfig+0xc2>
 8002214:	d818      	bhi.n	8002248 <UART_SetConfig+0xcc>
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <UART_SetConfig+0xa4>
 800221a:	2b01      	cmp	r3, #1
 800221c:	d00a      	beq.n	8002234 <UART_SetConfig+0xb8>
 800221e:	e013      	b.n	8002248 <UART_SetConfig+0xcc>
 8002220:	231f      	movs	r3, #31
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e065      	b.n	80022f6 <UART_SetConfig+0x17a>
 800222a:	231f      	movs	r3, #31
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	2202      	movs	r2, #2
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e060      	b.n	80022f6 <UART_SetConfig+0x17a>
 8002234:	231f      	movs	r3, #31
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	2204      	movs	r2, #4
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	e05b      	b.n	80022f6 <UART_SetConfig+0x17a>
 800223e:	231f      	movs	r3, #31
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	2208      	movs	r2, #8
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e056      	b.n	80022f6 <UART_SetConfig+0x17a>
 8002248:	231f      	movs	r3, #31
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	2210      	movs	r2, #16
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e051      	b.n	80022f6 <UART_SetConfig+0x17a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a89      	ldr	r2, [pc, #548]	; (800247c <UART_SetConfig+0x300>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d134      	bne.n	80022c6 <UART_SetConfig+0x14a>
 800225c:	4b86      	ldr	r3, [pc, #536]	; (8002478 <UART_SetConfig+0x2fc>)
 800225e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002260:	23c0      	movs	r3, #192	; 0xc0
 8002262:	029b      	lsls	r3, r3, #10
 8002264:	4013      	ands	r3, r2
 8002266:	22c0      	movs	r2, #192	; 0xc0
 8002268:	0292      	lsls	r2, r2, #10
 800226a:	4293      	cmp	r3, r2
 800226c:	d017      	beq.n	800229e <UART_SetConfig+0x122>
 800226e:	22c0      	movs	r2, #192	; 0xc0
 8002270:	0292      	lsls	r2, r2, #10
 8002272:	4293      	cmp	r3, r2
 8002274:	d822      	bhi.n	80022bc <UART_SetConfig+0x140>
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	0292      	lsls	r2, r2, #10
 800227a:	4293      	cmp	r3, r2
 800227c:	d019      	beq.n	80022b2 <UART_SetConfig+0x136>
 800227e:	2280      	movs	r2, #128	; 0x80
 8002280:	0292      	lsls	r2, r2, #10
 8002282:	4293      	cmp	r3, r2
 8002284:	d81a      	bhi.n	80022bc <UART_SetConfig+0x140>
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <UART_SetConfig+0x118>
 800228a:	2280      	movs	r2, #128	; 0x80
 800228c:	0252      	lsls	r2, r2, #9
 800228e:	4293      	cmp	r3, r2
 8002290:	d00a      	beq.n	80022a8 <UART_SetConfig+0x12c>
 8002292:	e013      	b.n	80022bc <UART_SetConfig+0x140>
 8002294:	231f      	movs	r3, #31
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
 800229c:	e02b      	b.n	80022f6 <UART_SetConfig+0x17a>
 800229e:	231f      	movs	r3, #31
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e026      	b.n	80022f6 <UART_SetConfig+0x17a>
 80022a8:	231f      	movs	r3, #31
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	2204      	movs	r2, #4
 80022ae:	701a      	strb	r2, [r3, #0]
 80022b0:	e021      	b.n	80022f6 <UART_SetConfig+0x17a>
 80022b2:	231f      	movs	r3, #31
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	2208      	movs	r2, #8
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e01c      	b.n	80022f6 <UART_SetConfig+0x17a>
 80022bc:	231f      	movs	r3, #31
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2210      	movs	r2, #16
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e017      	b.n	80022f6 <UART_SetConfig+0x17a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a6d      	ldr	r2, [pc, #436]	; (8002480 <UART_SetConfig+0x304>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d104      	bne.n	80022da <UART_SetConfig+0x15e>
 80022d0:	231f      	movs	r3, #31
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	e00d      	b.n	80022f6 <UART_SetConfig+0x17a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a69      	ldr	r2, [pc, #420]	; (8002484 <UART_SetConfig+0x308>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d104      	bne.n	80022ee <UART_SetConfig+0x172>
 80022e4:	231f      	movs	r3, #31
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e003      	b.n	80022f6 <UART_SetConfig+0x17a>
 80022ee:	231f      	movs	r3, #31
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	2210      	movs	r2, #16
 80022f4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69da      	ldr	r2, [r3, #28]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	429a      	cmp	r2, r3
 8002300:	d15d      	bne.n	80023be <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8002302:	231f      	movs	r3, #31
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b08      	cmp	r3, #8
 800230a:	d015      	beq.n	8002338 <UART_SetConfig+0x1bc>
 800230c:	dc18      	bgt.n	8002340 <UART_SetConfig+0x1c4>
 800230e:	2b04      	cmp	r3, #4
 8002310:	d00d      	beq.n	800232e <UART_SetConfig+0x1b2>
 8002312:	dc15      	bgt.n	8002340 <UART_SetConfig+0x1c4>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <UART_SetConfig+0x1a2>
 8002318:	2b02      	cmp	r3, #2
 800231a:	d005      	beq.n	8002328 <UART_SetConfig+0x1ac>
 800231c:	e010      	b.n	8002340 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800231e:	f7ff fa67 	bl	80017f0 <HAL_RCC_GetPCLK1Freq>
 8002322:	0003      	movs	r3, r0
 8002324:	61bb      	str	r3, [r7, #24]
        break;
 8002326:	e012      	b.n	800234e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002328:	4b57      	ldr	r3, [pc, #348]	; (8002488 <UART_SetConfig+0x30c>)
 800232a:	61bb      	str	r3, [r7, #24]
        break;
 800232c:	e00f      	b.n	800234e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800232e:	f7ff f9d5 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 8002332:	0003      	movs	r3, r0
 8002334:	61bb      	str	r3, [r7, #24]
        break;
 8002336:	e00a      	b.n	800234e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	61bb      	str	r3, [r7, #24]
        break;
 800233e:	e006      	b.n	800234e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002344:	231e      	movs	r3, #30
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
        break;
 800234c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d100      	bne.n	8002356 <UART_SetConfig+0x1da>
 8002354:	e07b      	b.n	800244e <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	005a      	lsls	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	18d2      	adds	r2, r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	0019      	movs	r1, r3
 8002368:	0010      	movs	r0, r2
 800236a:	f7fd fecd 	bl	8000108 <__udivsi3>
 800236e:	0003      	movs	r3, r0
 8002370:	b29b      	uxth	r3, r3
 8002372:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	d91c      	bls.n	80023b4 <UART_SetConfig+0x238>
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	025b      	lsls	r3, r3, #9
 8002380:	429a      	cmp	r2, r3
 8002382:	d217      	bcs.n	80023b4 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	b29a      	uxth	r2, r3
 8002388:	200e      	movs	r0, #14
 800238a:	183b      	adds	r3, r7, r0
 800238c:	210f      	movs	r1, #15
 800238e:	438a      	bics	r2, r1
 8002390:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	b29b      	uxth	r3, r3
 8002398:	2207      	movs	r2, #7
 800239a:	4013      	ands	r3, r2
 800239c:	b299      	uxth	r1, r3
 800239e:	183b      	adds	r3, r7, r0
 80023a0:	183a      	adds	r2, r7, r0
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	183a      	adds	r2, r7, r0
 80023ae:	8812      	ldrh	r2, [r2, #0]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	e04c      	b.n	800244e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80023b4:	231e      	movs	r3, #30
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	e047      	b.n	800244e <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023be:	231f      	movs	r3, #31
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d015      	beq.n	80023f4 <UART_SetConfig+0x278>
 80023c8:	dc18      	bgt.n	80023fc <UART_SetConfig+0x280>
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d00d      	beq.n	80023ea <UART_SetConfig+0x26e>
 80023ce:	dc15      	bgt.n	80023fc <UART_SetConfig+0x280>
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <UART_SetConfig+0x25e>
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d005      	beq.n	80023e4 <UART_SetConfig+0x268>
 80023d8:	e010      	b.n	80023fc <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023da:	f7ff fa09 	bl	80017f0 <HAL_RCC_GetPCLK1Freq>
 80023de:	0003      	movs	r3, r0
 80023e0:	61bb      	str	r3, [r7, #24]
        break;
 80023e2:	e012      	b.n	800240a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023e4:	4b28      	ldr	r3, [pc, #160]	; (8002488 <UART_SetConfig+0x30c>)
 80023e6:	61bb      	str	r3, [r7, #24]
        break;
 80023e8:	e00f      	b.n	800240a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023ea:	f7ff f977 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 80023ee:	0003      	movs	r3, r0
 80023f0:	61bb      	str	r3, [r7, #24]
        break;
 80023f2:	e00a      	b.n	800240a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	61bb      	str	r3, [r7, #24]
        break;
 80023fa:	e006      	b.n	800240a <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002400:	231e      	movs	r3, #30
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
        break;
 8002408:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01e      	beq.n	800244e <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	085a      	lsrs	r2, r3, #1
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	18d2      	adds	r2, r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	0019      	movs	r1, r3
 8002420:	0010      	movs	r0, r2
 8002422:	f7fd fe71 	bl	8000108 <__udivsi3>
 8002426:	0003      	movs	r3, r0
 8002428:	b29b      	uxth	r3, r3
 800242a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	d909      	bls.n	8002446 <UART_SetConfig+0x2ca>
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	025b      	lsls	r3, r3, #9
 8002438:	429a      	cmp	r2, r3
 800243a:	d204      	bcs.n	8002446 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	e003      	b.n	800244e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002446:	231e      	movs	r3, #30
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800245a:	231e      	movs	r3, #30
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	781b      	ldrb	r3, [r3, #0]
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b008      	add	sp, #32
 8002466:	bd80      	pop	{r7, pc}
 8002468:	efff69f3 	.word	0xefff69f3
 800246c:	ffffcfff 	.word	0xffffcfff
 8002470:	fffff4ff 	.word	0xfffff4ff
 8002474:	40013800 	.word	0x40013800
 8002478:	40021000 	.word	0x40021000
 800247c:	40004400 	.word	0x40004400
 8002480:	40004800 	.word	0x40004800
 8002484:	40004c00 	.word	0x40004c00
 8002488:	007a1200 	.word	0x007a1200

0800248c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	2201      	movs	r2, #1
 800249a:	4013      	ands	r3, r2
 800249c:	d00b      	beq.n	80024b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a4a      	ldr	r2, [pc, #296]	; (80025d0 <UART_AdvFeatureConfig+0x144>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	2202      	movs	r2, #2
 80024bc:	4013      	ands	r3, r2
 80024be:	d00b      	beq.n	80024d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4a43      	ldr	r2, [pc, #268]	; (80025d4 <UART_AdvFeatureConfig+0x148>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	2204      	movs	r2, #4
 80024de:	4013      	ands	r3, r2
 80024e0:	d00b      	beq.n	80024fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a3b      	ldr	r2, [pc, #236]	; (80025d8 <UART_AdvFeatureConfig+0x14c>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	2208      	movs	r2, #8
 8002500:	4013      	ands	r3, r2
 8002502:	d00b      	beq.n	800251c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4a34      	ldr	r2, [pc, #208]	; (80025dc <UART_AdvFeatureConfig+0x150>)
 800250c:	4013      	ands	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	2210      	movs	r2, #16
 8002522:	4013      	ands	r3, r2
 8002524:	d00b      	beq.n	800253e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a2c      	ldr	r2, [pc, #176]	; (80025e0 <UART_AdvFeatureConfig+0x154>)
 800252e:	4013      	ands	r3, r2
 8002530:	0019      	movs	r1, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	2220      	movs	r2, #32
 8002544:	4013      	ands	r3, r2
 8002546:	d00b      	beq.n	8002560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4a25      	ldr	r2, [pc, #148]	; (80025e4 <UART_AdvFeatureConfig+0x158>)
 8002550:	4013      	ands	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2240      	movs	r2, #64	; 0x40
 8002566:	4013      	ands	r3, r2
 8002568:	d01d      	beq.n	80025a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a1d      	ldr	r2, [pc, #116]	; (80025e8 <UART_AdvFeatureConfig+0x15c>)
 8002572:	4013      	ands	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	035b      	lsls	r3, r3, #13
 800258a:	429a      	cmp	r2, r3
 800258c:	d10b      	bne.n	80025a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a15      	ldr	r2, [pc, #84]	; (80025ec <UART_AdvFeatureConfig+0x160>)
 8002596:	4013      	ands	r3, r2
 8002598:	0019      	movs	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	4013      	ands	r3, r2
 80025ae:	d00b      	beq.n	80025c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <UART_AdvFeatureConfig+0x164>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]
  }
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b002      	add	sp, #8
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	fffdffff 	.word	0xfffdffff
 80025d4:	fffeffff 	.word	0xfffeffff
 80025d8:	fffbffff 	.word	0xfffbffff
 80025dc:	ffff7fff 	.word	0xffff7fff
 80025e0:	ffffefff 	.word	0xffffefff
 80025e4:	ffffdfff 	.word	0xffffdfff
 80025e8:	ffefffff 	.word	0xffefffff
 80025ec:	ff9fffff 	.word	0xff9fffff
 80025f0:	fff7ffff 	.word	0xfff7ffff

080025f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	2100      	movs	r1, #0
 8002602:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002604:	f7fe f8ea 	bl	80007dc <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2208      	movs	r2, #8
 8002614:	4013      	ands	r3, r2
 8002616:	2b08      	cmp	r3, #8
 8002618:	d10c      	bne.n	8002634 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2280      	movs	r2, #128	; 0x80
 800261e:	0391      	lsls	r1, r2, #14
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4a17      	ldr	r2, [pc, #92]	; (8002680 <UART_CheckIdleState+0x8c>)
 8002624:	9200      	str	r2, [sp, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	f000 f82c 	bl	8002684 <UART_WaitOnFlagUntilTimeout>
 800262c:	1e03      	subs	r3, r0, #0
 800262e:	d001      	beq.n	8002634 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e021      	b.n	8002678 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2204      	movs	r2, #4
 800263c:	4013      	ands	r3, r2
 800263e:	2b04      	cmp	r3, #4
 8002640:	d10c      	bne.n	800265c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	03d1      	lsls	r1, r2, #15
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <UART_CheckIdleState+0x8c>)
 800264c:	9200      	str	r2, [sp, #0]
 800264e:	2200      	movs	r2, #0
 8002650:	f000 f818 	bl	8002684 <UART_WaitOnFlagUntilTimeout>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d001      	beq.n	800265c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e00d      	b.n	8002678 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2220      	movs	r2, #32
 8002666:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2274      	movs	r2, #116	; 0x74
 8002672:	2100      	movs	r1, #0
 8002674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b004      	add	sp, #16
 800267e:	bd80      	pop	{r7, pc}
 8002680:	01ffffff 	.word	0x01ffffff

08002684 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b094      	sub	sp, #80	; 0x50
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	1dfb      	adds	r3, r7, #7
 8002692:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002694:	e0a3      	b.n	80027de <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002698:	3301      	adds	r3, #1
 800269a:	d100      	bne.n	800269e <UART_WaitOnFlagUntilTimeout+0x1a>
 800269c:	e09f      	b.n	80027de <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269e:	f7fe f89d 	bl	80007dc <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d302      	bcc.n	80026b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80026ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d13d      	bne.n	8002730 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026b4:	f3ef 8310 	mrs	r3, PRIMASK
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
 80026be:	2301      	movs	r3, #1
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c4:	f383 8810 	msr	PRIMASK, r3
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	494c      	ldr	r1, [pc, #304]	; (8002808 <UART_WaitOnFlagUntilTimeout+0x184>)
 80026d6:	400a      	ands	r2, r1
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	f383 8810 	msr	PRIMASK, r3
}
 80026e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80026ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
 80026f0:	2301      	movs	r3, #1
 80026f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	f383 8810 	msr	PRIMASK, r3
}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2101      	movs	r1, #1
 8002708:	438a      	bics	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002712:	f383 8810 	msr	PRIMASK, r3
}
 8002716:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2274      	movs	r2, #116	; 0x74
 8002728:	2100      	movs	r1, #0
 800272a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e067      	b.n	8002800 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2204      	movs	r2, #4
 8002738:	4013      	ands	r3, r2
 800273a:	d050      	beq.n	80027de <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69da      	ldr	r2, [r3, #28]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	401a      	ands	r2, r3
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	429a      	cmp	r2, r3
 800274e:	d146      	bne.n	80027de <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	0112      	lsls	r2, r2, #4
 8002758:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275a:	f3ef 8310 	mrs	r3, PRIMASK
 800275e:	613b      	str	r3, [r7, #16]
  return(result);
 8002760:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002764:	2301      	movs	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f383 8810 	msr	PRIMASK, r3
}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4923      	ldr	r1, [pc, #140]	; (8002808 <UART_WaitOnFlagUntilTimeout+0x184>)
 800277c:	400a      	ands	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002782:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f383 8810 	msr	PRIMASK, r3
}
 800278a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278c:	f3ef 8310 	mrs	r3, PRIMASK
 8002790:	61fb      	str	r3, [r7, #28]
  return(result);
 8002792:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002794:	64bb      	str	r3, [r7, #72]	; 0x48
 8002796:	2301      	movs	r3, #1
 8002798:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	f383 8810 	msr	PRIMASK, r3
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	438a      	bics	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f383 8810 	msr	PRIMASK, r3
}
 80027bc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	2120      	movs	r1, #32
 80027d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2274      	movs	r2, #116	; 0x74
 80027d6:	2100      	movs	r1, #0
 80027d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e010      	b.n	8002800 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	4013      	ands	r3, r2
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	425a      	negs	r2, r3
 80027ee:	4153      	adcs	r3, r2
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	001a      	movs	r2, r3
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d100      	bne.n	80027fe <UART_WaitOnFlagUntilTimeout+0x17a>
 80027fc:	e74b      	b.n	8002696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b014      	add	sp, #80	; 0x50
 8002806:	bd80      	pop	{r7, pc}
 8002808:	fffffe5f 	.word	0xfffffe5f

0800280c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	; 0x30
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	1dbb      	adds	r3, r7, #6
 8002818:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1dba      	adds	r2, r7, #6
 8002824:	2158      	movs	r1, #88	; 0x58
 8002826:	8812      	ldrh	r2, [r2, #0]
 8002828:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1dba      	adds	r2, r7, #6
 800282e:	215a      	movs	r1, #90	; 0x5a
 8002830:	8812      	ldrh	r2, [r2, #0]
 8002832:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	015b      	lsls	r3, r3, #5
 8002842:	429a      	cmp	r2, r3
 8002844:	d10d      	bne.n	8002862 <UART_Start_Receive_IT+0x56>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <UART_Start_Receive_IT+0x4c>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	225c      	movs	r2, #92	; 0x5c
 8002852:	4943      	ldr	r1, [pc, #268]	; (8002960 <UART_Start_Receive_IT+0x154>)
 8002854:	5299      	strh	r1, [r3, r2]
 8002856:	e02e      	b.n	80028b6 <UART_Start_Receive_IT+0xaa>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	225c      	movs	r2, #92	; 0x5c
 800285c:	21ff      	movs	r1, #255	; 0xff
 800285e:	5299      	strh	r1, [r3, r2]
 8002860:	e029      	b.n	80028b6 <UART_Start_Receive_IT+0xaa>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10d      	bne.n	8002886 <UART_Start_Receive_IT+0x7a>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d104      	bne.n	800287c <UART_Start_Receive_IT+0x70>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	225c      	movs	r2, #92	; 0x5c
 8002876:	21ff      	movs	r1, #255	; 0xff
 8002878:	5299      	strh	r1, [r3, r2]
 800287a:	e01c      	b.n	80028b6 <UART_Start_Receive_IT+0xaa>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	225c      	movs	r2, #92	; 0x5c
 8002880:	217f      	movs	r1, #127	; 0x7f
 8002882:	5299      	strh	r1, [r3, r2]
 8002884:	e017      	b.n	80028b6 <UART_Start_Receive_IT+0xaa>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	055b      	lsls	r3, r3, #21
 800288e:	429a      	cmp	r2, r3
 8002890:	d10d      	bne.n	80028ae <UART_Start_Receive_IT+0xa2>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d104      	bne.n	80028a4 <UART_Start_Receive_IT+0x98>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	225c      	movs	r2, #92	; 0x5c
 800289e:	217f      	movs	r1, #127	; 0x7f
 80028a0:	5299      	strh	r1, [r3, r2]
 80028a2:	e008      	b.n	80028b6 <UART_Start_Receive_IT+0xaa>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	225c      	movs	r2, #92	; 0x5c
 80028a8:	213f      	movs	r1, #63	; 0x3f
 80028aa:	5299      	strh	r1, [r3, r2]
 80028ac:	e003      	b.n	80028b6 <UART_Start_Receive_IT+0xaa>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	225c      	movs	r2, #92	; 0x5c
 80028b2:	2100      	movs	r1, #0
 80028b4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	2100      	movs	r1, #0
 80028bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2222      	movs	r2, #34	; 0x22
 80028c2:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c4:	f3ef 8310 	mrs	r3, PRIMASK
 80028c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80028ca:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ce:	2301      	movs	r3, #1
 80028d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f383 8810 	msr	PRIMASK, r3
}
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2101      	movs	r1, #1
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	f383 8810 	msr	PRIMASK, r3
}
 80028f4:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	015b      	lsls	r3, r3, #5
 80028fe:	429a      	cmp	r2, r3
 8002900:	d107      	bne.n	8002912 <UART_Start_Receive_IT+0x106>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4a15      	ldr	r2, [pc, #84]	; (8002964 <UART_Start_Receive_IT+0x158>)
 800290e:	665a      	str	r2, [r3, #100]	; 0x64
 8002910:	e002      	b.n	8002918 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <UART_Start_Receive_IT+0x15c>)
 8002916:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2274      	movs	r2, #116	; 0x74
 800291c:	2100      	movs	r1, #0
 800291e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002920:	f3ef 8310 	mrs	r3, PRIMASK
 8002924:	613b      	str	r3, [r7, #16]
  return(result);
 8002926:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
 800292a:	2301      	movs	r3, #1
 800292c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f383 8810 	msr	PRIMASK, r3
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2190      	movs	r1, #144	; 0x90
 8002942:	0049      	lsls	r1, r1, #1
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f383 8810 	msr	PRIMASK, r3
}
 8002952:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b00c      	add	sp, #48	; 0x30
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	000001ff 	.word	0x000001ff
 8002964:	08002c1d 	.word	0x08002c1d
 8002968:	08002ab5 	.word	0x08002ab5

0800296c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002974:	f3ef 8310 	mrs	r3, PRIMASK
 8002978:	617b      	str	r3, [r7, #20]
  return(result);
 800297a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
 800297e:	2301      	movs	r3, #1
 8002980:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f383 8810 	msr	PRIMASK, r3
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4925      	ldr	r1, [pc, #148]	; (8002a2c <UART_EndRxTransfer+0xc0>)
 8002996:	400a      	ands	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f383 8810 	msr	PRIMASK, r3
}
 80029a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a6:	f3ef 8310 	mrs	r3, PRIMASK
 80029aa:	623b      	str	r3, [r7, #32]
  return(result);
 80029ac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
 80029b0:	2301      	movs	r3, #1
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	f383 8810 	msr	PRIMASK, r3
}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2101      	movs	r1, #1
 80029c8:	438a      	bics	r2, r1
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	f383 8810 	msr	PRIMASK, r3
}
 80029d6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d118      	bne.n	8002a12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e0:	f3ef 8310 	mrs	r3, PRIMASK
 80029e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80029e6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ea:	2301      	movs	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f383 8810 	msr	PRIMASK, r3
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2110      	movs	r1, #16
 8002a02:	438a      	bics	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f383 8810 	msr	PRIMASK, r3
}
 8002a10:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b00e      	add	sp, #56	; 0x38
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	fffffedf 	.word	0xfffffedf

08002a30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	225a      	movs	r2, #90	; 0x5a
 8002a42:	2100      	movs	r1, #0
 8002a44:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2252      	movs	r2, #82	; 0x52
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7ff fb7f 	bl	8002154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b004      	add	sp, #16
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a66:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	2301      	movs	r3, #1
 8002a72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2140      	movs	r1, #64	; 0x40
 8002a88:	438a      	bics	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7ff fb44 	bl	8002134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b006      	add	sp, #24
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b090      	sub	sp, #64	; 0x40
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002abc:	203e      	movs	r0, #62	; 0x3e
 8002abe:	183b      	adds	r3, r7, r0
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	215c      	movs	r1, #92	; 0x5c
 8002ac4:	5a52      	ldrh	r2, [r2, r1]
 8002ac6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002acc:	2b22      	cmp	r3, #34	; 0x22
 8002ace:	d000      	beq.n	8002ad2 <UART_RxISR_8BIT+0x1e>
 8002ad0:	e095      	b.n	8002bfe <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	213c      	movs	r1, #60	; 0x3c
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002adc:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	183b      	adds	r3, r7, r0
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b2d9      	uxtb	r1, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	400a      	ands	r2, r1
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	225a      	movs	r2, #90	; 0x5a
 8002b02:	5a9b      	ldrh	r3, [r3, r2]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b299      	uxth	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	225a      	movs	r2, #90	; 0x5a
 8002b0e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	225a      	movs	r2, #90	; 0x5a
 8002b14:	5a9b      	ldrh	r3, [r3, r2]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d178      	bne.n	8002c0e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b20:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b22:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b24:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b26:	2301      	movs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f383 8810 	msr	PRIMASK, r3
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4936      	ldr	r1, [pc, #216]	; (8002c18 <UART_RxISR_8BIT+0x164>)
 8002b3e:	400a      	ands	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f383 8810 	msr	PRIMASK, r3
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
 8002b58:	2301      	movs	r3, #1
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	f383 8810 	msr	PRIMASK, r3
}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2101      	movs	r1, #1
 8002b70:	438a      	bics	r2, r1
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7a:	f383 8810 	msr	PRIMASK, r3
}
 8002b7e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d12f      	bne.n	8002bf4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ba0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f383 8810 	msr	PRIMASK, r3
}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2110      	movs	r1, #16
 8002bbc:	438a      	bics	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f383 8810 	msr	PRIMASK, r3
}
 8002bca:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b10      	cmp	r3, #16
 8002bd8:	d103      	bne.n	8002be2 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2210      	movs	r2, #16
 8002be0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2258      	movs	r2, #88	; 0x58
 8002be6:	5a9a      	ldrh	r2, [r3, r2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	0011      	movs	r1, r2
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7ff fab9 	bl	8002164 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002bf2:	e00c      	b.n	8002c0e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7ff faa4 	bl	8002144 <HAL_UART_RxCpltCallback>
}
 8002bfc:	e007      	b.n	8002c0e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2108      	movs	r1, #8
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	619a      	str	r2, [r3, #24]
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b010      	add	sp, #64	; 0x40
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	fffffedf 	.word	0xfffffedf

08002c1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b090      	sub	sp, #64	; 0x40
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002c24:	203e      	movs	r0, #62	; 0x3e
 8002c26:	183b      	adds	r3, r7, r0
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	215c      	movs	r1, #92	; 0x5c
 8002c2c:	5a52      	ldrh	r2, [r2, r1]
 8002c2e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c34:	2b22      	cmp	r3, #34	; 0x22
 8002c36:	d000      	beq.n	8002c3a <UART_RxISR_16BIT+0x1e>
 8002c38:	e095      	b.n	8002d66 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	213c      	movs	r1, #60	; 0x3c
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002c44:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8002c4c:	187b      	adds	r3, r7, r1
 8002c4e:	183a      	adds	r2, r7, r0
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	8812      	ldrh	r2, [r2, #0]
 8002c54:	4013      	ands	r3, r2
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c60:	1c9a      	adds	r2, r3, #2
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	225a      	movs	r2, #90	; 0x5a
 8002c6a:	5a9b      	ldrh	r3, [r3, r2]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b299      	uxth	r1, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	225a      	movs	r2, #90	; 0x5a
 8002c76:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	225a      	movs	r2, #90	; 0x5a
 8002c7c:	5a9b      	ldrh	r3, [r3, r2]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d178      	bne.n	8002d76 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c84:	f3ef 8310 	mrs	r3, PRIMASK
 8002c88:	617b      	str	r3, [r7, #20]
  return(result);
 8002c8a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f383 8810 	msr	PRIMASK, r3
}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4936      	ldr	r1, [pc, #216]	; (8002d80 <UART_RxISR_16BIT+0x164>)
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f383 8810 	msr	PRIMASK, r3
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cba:	623b      	str	r3, [r7, #32]
  return(result);
 8002cbc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	f383 8810 	msr	PRIMASK, r3
}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	438a      	bics	r2, r1
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	f383 8810 	msr	PRIMASK, r3
}
 8002ce6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d12f      	bne.n	8002d5c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d02:	f3ef 8310 	mrs	r3, PRIMASK
 8002d06:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d08:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f383 8810 	msr	PRIMASK, r3
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2110      	movs	r1, #16
 8002d24:	438a      	bics	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f383 8810 	msr	PRIMASK, r3
}
 8002d32:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	2210      	movs	r2, #16
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d103      	bne.n	8002d4a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2210      	movs	r2, #16
 8002d48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2258      	movs	r2, #88	; 0x58
 8002d4e:	5a9a      	ldrh	r2, [r3, r2]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	0011      	movs	r1, r2
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7ff fa05 	bl	8002164 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002d5a:	e00c      	b.n	8002d76 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7ff f9f0 	bl	8002144 <HAL_UART_RxCpltCallback>
}
 8002d64:	e007      	b.n	8002d76 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2108      	movs	r1, #8
 8002d72:	430a      	orrs	r2, r1
 8002d74:	619a      	str	r2, [r3, #24]
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b010      	add	sp, #64	; 0x40
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	fffffedf 	.word	0xfffffedf

08002d84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <__libc_init_array>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	2600      	movs	r6, #0
 8002d98:	4d0c      	ldr	r5, [pc, #48]	; (8002dcc <__libc_init_array+0x38>)
 8002d9a:	4c0d      	ldr	r4, [pc, #52]	; (8002dd0 <__libc_init_array+0x3c>)
 8002d9c:	1b64      	subs	r4, r4, r5
 8002d9e:	10a4      	asrs	r4, r4, #2
 8002da0:	42a6      	cmp	r6, r4
 8002da2:	d109      	bne.n	8002db8 <__libc_init_array+0x24>
 8002da4:	2600      	movs	r6, #0
 8002da6:	f000 f821 	bl	8002dec <_init>
 8002daa:	4d0a      	ldr	r5, [pc, #40]	; (8002dd4 <__libc_init_array+0x40>)
 8002dac:	4c0a      	ldr	r4, [pc, #40]	; (8002dd8 <__libc_init_array+0x44>)
 8002dae:	1b64      	subs	r4, r4, r5
 8002db0:	10a4      	asrs	r4, r4, #2
 8002db2:	42a6      	cmp	r6, r4
 8002db4:	d105      	bne.n	8002dc2 <__libc_init_array+0x2e>
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	00b3      	lsls	r3, r6, #2
 8002dba:	58eb      	ldr	r3, [r5, r3]
 8002dbc:	4798      	blx	r3
 8002dbe:	3601      	adds	r6, #1
 8002dc0:	e7ee      	b.n	8002da0 <__libc_init_array+0xc>
 8002dc2:	00b3      	lsls	r3, r6, #2
 8002dc4:	58eb      	ldr	r3, [r5, r3]
 8002dc6:	4798      	blx	r3
 8002dc8:	3601      	adds	r6, #1
 8002dca:	e7f2      	b.n	8002db2 <__libc_init_array+0x1e>
 8002dcc:	08002e3c 	.word	0x08002e3c
 8002dd0:	08002e3c 	.word	0x08002e3c
 8002dd4:	08002e3c 	.word	0x08002e3c
 8002dd8:	08002e40 	.word	0x08002e40

08002ddc <memset>:
 8002ddc:	0003      	movs	r3, r0
 8002dde:	1882      	adds	r2, r0, r2
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memset+0xa>
 8002de4:	4770      	bx	lr
 8002de6:	7019      	strb	r1, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	e7f9      	b.n	8002de0 <memset+0x4>

08002dec <_init>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr

08002df8 <_fini>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfe:	bc08      	pop	{r3}
 8002e00:	469e      	mov	lr, r3
 8002e02:	4770      	bx	lr
