/*
 * lidar.c
 *
 *  Created on: Oct 14, 2021
 *      Author: Thomas VERNOUX
 */


#include "lidar.h"
#include "usart.h"
#include "gpio.h"
#include "main.h"
#include "tim.h"
#include <string.h>
#include <stdio.h>

enum BIT_STATE {start1, start2, size, data, end}; // structure pour le prochain bit qu'on va recevoir du lidar
enum BIT_STATE last_bit_state = end;
enum BIT_STATE bit_state;

enum LIDAR_STATE {stop, scan, force_scan};
enum LIDAR_STATE lidar_state = stop;



uint8_t taille_message_recu;
uint8_t lidar_message_recu [20];
int index_ecriture_message_recu;

uint8_t octet_recu;

int num_frame_scan = 0; // numerot de la frame en scan (pour le debug)

/// variables du mode scan
int compteur = 0;


// reducteur de trames
int NUMtrame = 0;



// DEBUG
uint8_t historique_reception [1000];
int indice_historique_reception = 0;

int historique_angle [100];
int indice_historique_angle = 0;





void demarrer_pwm_lidar(){

  TIM1->CCR1 = 30000;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  return;

  // debug
  memset(historique_reception,0,sizeof(historique_reception));


  }

/*
 * Test
 */
void tests_lidar(){

	reset_lidar();

	lidar_force_scan();
	HAL_Delay(1000);


	//uint8_t Data[2] = {0xA5, 0x25};
	//HAL_UART_Transmit(&huart3, Data, 2, 100);


	//HAL_Delay(100);

	memset(lidar_message_recu,0,sizeof(lidar_message_recu));



	//reset_lidar();
	//HAL_Delay(100);

	//lidar_get_info();

	//lidar_scan();




	return;
}



void mouvement_moteur(int vitesse){

}

void reset_lidar(){
	uint8_t Data[2] = {0xA5, 0x40};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	memset(lidar_message_recu,0,sizeof(lidar_message_recu));
	HAL_Delay(1000);
	return;
}

void lidar_get_info(){
	uint8_t Data[2] = {0xA5, 0x50};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}

void lidar_scan(){
	uint8_t Data[2] = {0xA5, 0x20};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}

void lidar_force_scan(){
	uint8_t Data[2] = {0xA5, 0x21};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}

void lidar_stop(){
	uint8_t Data[2] = {0xA5, 0x25};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}

void uart_lidar_recieve(){

	octet_recu = UART3_rxBuffer;

	historique_reception[indice_historique_reception] = UART3_rxBuffer;
	indice_historique_reception ++;



	if (indice_historique_reception == 500){
		int a = 3;
		indice_historique_reception = 0;

		indice_historique_angle = 0;
	}


	switch (lidar_state){

		case stop: // le lidar n'est pas en scan

			if ((octet_recu == 0xA5) && (last_bit_state == end) ){  // on recoit l'octet de start
				bit_state = start1;
				taille_message_recu = 0; // on remet a zero la taille du message recu
				index_ecriture_message_recu = 0;
				memset(lidar_message_recu,0,sizeof(lidar_message_recu)); // on efface le buffer
				}

			else if ((last_bit_state == start1) && (octet_recu == 0x5A)){ // on recoit le deuxième octet de start
				bit_state = start2;
			}

			else if (last_bit_state == start2){   // on a l'octet qui donne la taille de la communication
				bit_state = size;
				taille_message_recu = octet_recu;
			}

			else if ((last_bit_state == size) || (last_bit_state == data)){     // on a une data
				bit_state = data;
				reception_octet_data();

			}



			last_bit_state = bit_state; // machine d'état

			break;

		case scan :



			if (compteur == 4){
				num_frame_scan ++;
				compteur = 0;

				if (error_check() == 0){
					compteur = 4;
				}

				uint8_t a1 = lidar_message_recu[1] >> 1;
				uint8_t a2 = lidar_message_recu[2];
				uint8_t d1 = lidar_message_recu[3];
				uint8_t d2 = lidar_message_recu[4];

				historique_angle[indice_historique_angle] = (int)(256*(int)a2 + (int)a1)/64;
				indice_historique_angle ++;




				uint8_t lidar_message_a_transmettre[5] = {1, a1, a2, d1, d2};

				// on reduit le nombre de trames qu'on envoit
				if (NUMtrame >= 10){
					HAL_UART_Transmit(&huart2, lidar_message_a_transmettre, 5, 100);
					NUMtrame = 0;
				}
				NUMtrame ++;
			}

			lidar_message_recu[compteur] = octet_recu;

			compteur ++;


			break;

		default:
			break;


		}

	return;
}

void reception_octet_data(){
		lidar_message_recu[index_ecriture_message_recu] = octet_recu;
		index_ecriture_message_recu ++;
		if (index_ecriture_message_recu == taille_message_recu){
			bit_state = end;
			lidar_fin_du_message_recu();
		}


	return;
}


void lidar_fin_du_message_recu(){      // on transmet le message au PC

	// on est en mode scan
	if((lidar_message_recu[0] == 0x0) && (lidar_message_recu[1] == 0x0) && (lidar_message_recu[2] == 0x40) && (lidar_message_recu[3] == 0x81)){
		lidar_state = scan;
	}




	return;



}


int error_check(){

	uint8_t trame_copie = lidar_message_recu[0];
	trame_copie &= 0b11000000;


	if (trame_copie == 0b11000000 || trame_copie == 0b00000000){
		index_ecriture_message_recu = 0;
		return 1; // erreur sur le bit S et S/
	}

	uint8_t trame_copie2 = lidar_message_recu[1];
	trame_copie2 &= 0b10000000;
	if (trame_copie2 == 0B0 && index_ecriture_message_recu >= 1){
		index_ecriture_message_recu = 0;
		return 1;
	}

	return 0;
}













