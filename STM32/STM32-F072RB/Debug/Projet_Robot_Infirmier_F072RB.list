
Projet_Robot_Infirmier_F072RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002310  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080023d0  080023d0  000123d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002400  08002400  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002400  08002400  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002400  08002400  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002400  08002400  00012400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002404  08002404  00012404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002414  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002414  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000888a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001649  00000000  00000000  000288be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00029f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fee  00000000  00000000  0002aff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a754  00000000  00000000  00043fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e60  00000000  00000000  0004e732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1592  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef8  00000000  00000000  000e15e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023b8 	.word	0x080023b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080023b8 	.word	0x080023b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB1   ------> S_TIM14_CH1
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	; 0x2c
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2414      	movs	r4, #20
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f002 f8b9 	bl	80023a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b5b      	ldr	r3, [pc, #364]	; (80003a4 <MX_GPIO_Init+0x184>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b5a      	ldr	r3, [pc, #360]	; (80003a4 <MX_GPIO_Init+0x184>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0309      	lsls	r1, r1, #12
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b57      	ldr	r3, [pc, #348]	; (80003a4 <MX_GPIO_Init+0x184>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	031b      	lsls	r3, r3, #12
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000252:	4b54      	ldr	r3, [pc, #336]	; (80003a4 <MX_GPIO_Init+0x184>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b53      	ldr	r3, [pc, #332]	; (80003a4 <MX_GPIO_Init+0x184>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	03c9      	lsls	r1, r1, #15
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b50      	ldr	r3, [pc, #320]	; (80003a4 <MX_GPIO_Init+0x184>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	03db      	lsls	r3, r3, #15
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b4d      	ldr	r3, [pc, #308]	; (80003a4 <MX_GPIO_Init+0x184>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b4c      	ldr	r3, [pc, #304]	; (80003a4 <MX_GPIO_Init+0x184>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	0289      	lsls	r1, r1, #10
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b49      	ldr	r3, [pc, #292]	; (80003a4 <MX_GPIO_Init+0x184>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028a:	4b46      	ldr	r3, [pc, #280]	; (80003a4 <MX_GPIO_Init+0x184>)
 800028c:	695a      	ldr	r2, [r3, #20]
 800028e:	4b45      	ldr	r3, [pc, #276]	; (80003a4 <MX_GPIO_Init+0x184>)
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	02c9      	lsls	r1, r1, #11
 8000294:	430a      	orrs	r2, r1
 8000296:	615a      	str	r2, [r3, #20]
 8000298:	4b42      	ldr	r3, [pc, #264]	; (80003a4 <MX_GPIO_Init+0x184>)
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	02db      	lsls	r3, r3, #11
 80002a0:	4013      	ands	r3, r2
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80002a6:	2390      	movs	r3, #144	; 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2201      	movs	r2, #1
 80002ac:	2104      	movs	r1, #4
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fd2a 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|LD2_Pin, GPIO_PIN_RESET);
 80002b4:	2390      	movs	r3, #144	; 0x90
 80002b6:	05db      	lsls	r3, r3, #23
 80002b8:	2200      	movs	r2, #0
 80002ba:	2128      	movs	r1, #40	; 0x28
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 fd23 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWM_moteur_GPIO_Port, PWM_moteur_Pin, GPIO_PIN_RESET);
 80002c2:	4b39      	ldr	r3, [pc, #228]	; (80003a8 <MX_GPIO_Init+0x188>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	2110      	movs	r1, #16
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fd1d 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80002ce:	2380      	movs	r3, #128	; 0x80
 80002d0:	00db      	lsls	r3, r3, #3
 80002d2:	4836      	ldr	r0, [pc, #216]	; (80003ac <MX_GPIO_Init+0x18c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	0019      	movs	r1, r3
 80002d8:	f000 fd16 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	0192      	lsls	r2, r2, #6
 80002e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	2284      	movs	r2, #132	; 0x84
 80002e8:	0392      	lsls	r2, r2, #14
 80002ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	4a2c      	ldr	r2, [pc, #176]	; (80003a8 <MX_GPIO_Init+0x188>)
 80002f6:	0019      	movs	r1, r3
 80002f8:	0010      	movs	r0, r2
 80002fa:	f000 fb8d 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|LD2_Pin;
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	222c      	movs	r2, #44	; 0x2c
 8000302:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000304:	193b      	adds	r3, r7, r4
 8000306:	2201      	movs	r2, #1
 8000308:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	193b      	adds	r3, r7, r4
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000310:	193b      	adds	r3, r7, r4
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000316:	193a      	adds	r2, r7, r4
 8000318:	2390      	movs	r3, #144	; 0x90
 800031a:	05db      	lsls	r3, r3, #23
 800031c:	0011      	movs	r1, r2
 800031e:	0018      	movs	r0, r3
 8000320:	f000 fb7a 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_moteur_Pin;
 8000324:	193b      	adds	r3, r7, r4
 8000326:	2210      	movs	r2, #16
 8000328:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	193b      	adds	r3, r7, r4
 800032c:	2201      	movs	r2, #1
 800032e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000330:	193b      	adds	r3, r7, r4
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	193b      	adds	r3, r7, r4
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PWM_moteur_GPIO_Port, &GPIO_InitStruct);
 800033c:	193b      	adds	r3, r7, r4
 800033e:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <MX_GPIO_Init+0x188>)
 8000340:	0019      	movs	r1, r3
 8000342:	0010      	movs	r0, r2
 8000344:	f000 fb68 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000348:	193b      	adds	r3, r7, r4
 800034a:	2202      	movs	r2, #2
 800034c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800034e:	193b      	adds	r3, r7, r4
 8000350:	2202      	movs	r2, #2
 8000352:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	193b      	adds	r3, r7, r4
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	193b      	adds	r3, r7, r4
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8000360:	193b      	adds	r3, r7, r4
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000366:	193b      	adds	r3, r7, r4
 8000368:	4a10      	ldr	r2, [pc, #64]	; (80003ac <MX_GPIO_Init+0x18c>)
 800036a:	0019      	movs	r1, r3
 800036c:	0010      	movs	r0, r2
 800036e:	f000 fb53 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000372:	0021      	movs	r1, r4
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	00d2      	lsls	r2, r2, #3
 800037a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2201      	movs	r2, #1
 8000380:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800038e:	187b      	adds	r3, r7, r1
 8000390:	4a06      	ldr	r2, [pc, #24]	; (80003ac <MX_GPIO_Init+0x18c>)
 8000392:	0019      	movs	r1, r3
 8000394:	0010      	movs	r0, r2
 8000396:	f000 fb3f 	bl	8000a18 <HAL_GPIO_Init>

}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b00b      	add	sp, #44	; 0x2c
 80003a0:	bd90      	pop	{r4, r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	40021000 	.word	0x40021000
 80003a8:	48000800 	.word	0x48000800
 80003ac:	48000400 	.word	0x48000400

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b4:	f000 f9f4 	bl	80007a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b8:	f000 f822 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003bc:	f7ff ff30 	bl	8000220 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003c0:	f000 f8ae 	bl	8000520 <MX_TIM1_Init>
	  HAL_UART_Transmit(&huart1, Data, sizeof(Data), 1000);
	  HAL_Delay(10);
	  HAL_UART_Transmit(&huart2, Data, sizeof(Data), 1000);
	  */

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80003c4:	2390      	movs	r3, #144	; 0x90
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	2104      	movs	r1, #4
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 fcb9 	bl	8000d42 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80003d0:	2390      	movs	r3, #144	; 0x90
 80003d2:	05db      	lsls	r3, r3, #23
 80003d4:	2108      	movs	r1, #8
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 fcb3 	bl	8000d42 <HAL_GPIO_TogglePin>

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80003dc:	2380      	movs	r3, #128	; 0x80
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	4a06      	ldr	r2, [pc, #24]	; (80003fc <main+0x4c>)
 80003e2:	0019      	movs	r1, r3
 80003e4:	0010      	movs	r0, r2
 80003e6:	f000 fcac 	bl	8000d42 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <main+0x4c>)
 80003ec:	2110      	movs	r1, #16
 80003ee:	0018      	movs	r0, r3
 80003f0:	f000 fca7 	bl	8000d42 <HAL_GPIO_TogglePin>

	  //send_lidar_request();
	  HAL_Delay(10);
 80003f4:	200a      	movs	r0, #10
 80003f6:	f000 fa37 	bl	8000868 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80003fa:	e7e3      	b.n	80003c4 <main+0x14>
 80003fc:	48000400 	.word	0x48000400

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b093      	sub	sp, #76	; 0x4c
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	2414      	movs	r4, #20
 8000408:	193b      	adds	r3, r7, r4
 800040a:	0018      	movs	r0, r3
 800040c:	2334      	movs	r3, #52	; 0x34
 800040e:	001a      	movs	r2, r3
 8000410:	2100      	movs	r1, #0
 8000412:	f001 ffc9 	bl	80023a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	0018      	movs	r0, r3
 800041a:	2310      	movs	r3, #16
 800041c:	001a      	movs	r2, r3
 800041e:	2100      	movs	r1, #0
 8000420:	f001 ffc2 	bl	80023a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000424:	0021      	movs	r1, r4
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2202      	movs	r2, #2
 800042a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2201      	movs	r2, #1
 8000430:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2210      	movs	r2, #16
 8000436:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2202      	movs	r2, #2
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	0212      	lsls	r2, r2, #8
 8000444:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	22a0      	movs	r2, #160	; 0xa0
 800044a:	0392      	lsls	r2, r2, #14
 800044c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2201      	movs	r2, #1
 8000452:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	187b      	adds	r3, r7, r1
 8000456:	0018      	movs	r0, r3
 8000458:	f000 fc8e 	bl	8000d78 <HAL_RCC_OscConfig>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000460:	f000 f819 	bl	8000496 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2207      	movs	r2, #7
 8000468:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2202      	movs	r2, #2
 800046e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2101      	movs	r1, #1
 8000480:	0018      	movs	r0, r3
 8000482:	f000 ffff 	bl	8001484 <HAL_RCC_ClockConfig>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800048a:	f000 f804 	bl	8000496 <Error_Handler>
  }
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b013      	add	sp, #76	; 0x4c
 8000494:	bd90      	pop	{r4, r7, pc}

08000496 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049a:	b672      	cpsid	i
}
 800049c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049e:	e7fe      	b.n	800049e <Error_Handler+0x8>

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_MspInit+0x44>)
 80004a8:	699a      	ldr	r2, [r3, #24]
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <HAL_MspInit+0x44>)
 80004ac:	2101      	movs	r1, #1
 80004ae:	430a      	orrs	r2, r1
 80004b0:	619a      	str	r2, [r3, #24]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <HAL_MspInit+0x44>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	2201      	movs	r2, #1
 80004b8:	4013      	ands	r3, r2
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <HAL_MspInit+0x44>)
 80004c0:	69da      	ldr	r2, [r3, #28]
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_MspInit+0x44>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0549      	lsls	r1, r1, #21
 80004c8:	430a      	orrs	r2, r1
 80004ca:	61da      	str	r2, [r3, #28]
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <HAL_MspInit+0x44>)
 80004ce:	69da      	ldr	r2, [r3, #28]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	055b      	lsls	r3, r3, #21
 80004d4:	4013      	ands	r3, r2
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <NMI_Handler+0x4>

080004ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <HardFault_Handler+0x4>

080004f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050c:	f000 f990 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b096      	sub	sp, #88	; 0x58
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000526:	2348      	movs	r3, #72	; 0x48
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	0018      	movs	r0, r3
 800052c:	2310      	movs	r3, #16
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f001 ff39 	bl	80023a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000536:	2340      	movs	r3, #64	; 0x40
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	0018      	movs	r0, r3
 800053c:	2308      	movs	r3, #8
 800053e:	001a      	movs	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f001 ff31 	bl	80023a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000546:	2324      	movs	r3, #36	; 0x24
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	0018      	movs	r0, r3
 800054c:	231c      	movs	r3, #28
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f001 ff29 	bl	80023a8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	0018      	movs	r0, r3
 800055a:	2320      	movs	r3, #32
 800055c:	001a      	movs	r2, r3
 800055e:	2100      	movs	r1, #0
 8000560:	f001 ff22 	bl	80023a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000564:	4b46      	ldr	r3, [pc, #280]	; (8000680 <MX_TIM1_Init+0x160>)
 8000566:	4a47      	ldr	r2, [pc, #284]	; (8000684 <MX_TIM1_Init+0x164>)
 8000568:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800056a:	4b45      	ldr	r3, [pc, #276]	; (8000680 <MX_TIM1_Init+0x160>)
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000570:	4b43      	ldr	r3, [pc, #268]	; (8000680 <MX_TIM1_Init+0x160>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000576:	4b42      	ldr	r3, [pc, #264]	; (8000680 <MX_TIM1_Init+0x160>)
 8000578:	4a43      	ldr	r2, [pc, #268]	; (8000688 <MX_TIM1_Init+0x168>)
 800057a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057c:	4b40      	ldr	r3, [pc, #256]	; (8000680 <MX_TIM1_Init+0x160>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000582:	4b3f      	ldr	r3, [pc, #252]	; (8000680 <MX_TIM1_Init+0x160>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000588:	4b3d      	ldr	r3, [pc, #244]	; (8000680 <MX_TIM1_Init+0x160>)
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800058e:	4b3c      	ldr	r3, [pc, #240]	; (8000680 <MX_TIM1_Init+0x160>)
 8000590:	0018      	movs	r0, r3
 8000592:	f001 f8d1 	bl	8001738 <HAL_TIM_Base_Init>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800059a:	f7ff ff7c 	bl	8000496 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059e:	2148      	movs	r1, #72	; 0x48
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	0152      	lsls	r2, r2, #5
 80005a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005a8:	187a      	adds	r2, r7, r1
 80005aa:	4b35      	ldr	r3, [pc, #212]	; (8000680 <MX_TIM1_Init+0x160>)
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 fa30 	bl	8001a14 <HAL_TIM_ConfigClockSource>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80005b8:	f7ff ff6d 	bl	8000496 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <MX_TIM1_Init+0x160>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 f90a 	bl	80017d8 <HAL_TIM_PWM_Init>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80005c8:	f7ff ff65 	bl	8000496 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005cc:	2140      	movs	r1, #64	; 0x40
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005da:	187a      	adds	r2, r7, r1
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <MX_TIM1_Init+0x160>)
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 fe01 	bl	80021e8 <HAL_TIMEx_MasterConfigSynchronization>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80005ea:	f7ff ff54 	bl	8000496 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ee:	2124      	movs	r1, #36	; 0x24
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2260      	movs	r2, #96	; 0x60
 80005f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 100;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2264      	movs	r2, #100	; 0x64
 80005fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800061a:	1879      	adds	r1, r7, r1
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_TIM1_Init+0x160>)
 800061e:	2200      	movs	r2, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f001 f931 	bl	8001888 <HAL_TIM_PWM_ConfigChannel>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800062a:	f7ff ff34 	bl	8000496 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	0192      	lsls	r2, r2, #6
 8000652:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800065a:	1d3a      	adds	r2, r7, #4
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_TIM1_Init+0x160>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fe1f 	bl	80022a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800066a:	f7ff ff14 	bl	8000496 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <MX_TIM1_Init+0x160>)
 8000670:	0018      	movs	r0, r3
 8000672:	f000 f82b 	bl	80006cc <HAL_TIM_MspPostInit>

}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b016      	add	sp, #88	; 0x58
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000028 	.word	0x20000028
 8000684:	40012c00 	.word	0x40012c00
 8000688:	0000ffff 	.word	0x0000ffff

0800068c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <HAL_TIM_Base_MspInit+0x38>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d10d      	bne.n	80006ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_TIM_Base_MspInit+0x3c>)
 80006a0:	699a      	ldr	r2, [r3, #24]
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_TIM_Base_MspInit+0x3c>)
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	0109      	lsls	r1, r1, #4
 80006a8:	430a      	orrs	r2, r1
 80006aa:	619a      	str	r2, [r3, #24]
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_TIM_Base_MspInit+0x3c>)
 80006ae:	699a      	ldr	r2, [r3, #24]
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	011b      	lsls	r3, r3, #4
 80006b4:	4013      	ands	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b004      	add	sp, #16
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	40012c00 	.word	0x40012c00
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	240c      	movs	r4, #12
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	0018      	movs	r0, r3
 80006da:	2314      	movs	r3, #20
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f001 fe62 	bl	80023a8 <memset>
  if(timHandle->Instance==TIM1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a16      	ldr	r2, [pc, #88]	; (8000744 <HAL_TIM_MspPostInit+0x78>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d125      	bne.n	800073a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_TIM_MspPostInit+0x7c>)
 80006f0:	695a      	ldr	r2, [r3, #20]
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_TIM_MspPostInit+0x7c>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	0289      	lsls	r1, r1, #10
 80006f8:	430a      	orrs	r2, r1
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_TIM_MspPostInit+0x7c>)
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	029b      	lsls	r3, r3, #10
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	0021      	movs	r1, r4
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2202      	movs	r2, #2
 8000718:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2202      	movs	r2, #2
 800072a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	187a      	adds	r2, r7, r1
 800072e:	2390      	movs	r3, #144	; 0x90
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f000 f96f 	bl	8000a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b009      	add	sp, #36	; 0x24
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40012c00 	.word	0x40012c00
 8000748:	40021000 	.word	0x40021000

0800074c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <LoopForever+0x6>)
  ldr r1, =_edata
 8000752:	490e      	ldr	r1, [pc, #56]	; (800078c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <LoopForever+0xe>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000768:	4c0b      	ldr	r4, [pc, #44]	; (8000798 <LoopForever+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000776:	f7ff fece 	bl	8000516 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800077a:	f001 fdf1 	bl	8002360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fe17 	bl	80003b0 <main>

08000782 <LoopForever>:

LoopForever:
    b LoopForever
 8000782:	e7fe      	b.n	8000782 <LoopForever>
  ldr   r0, =_estack
 8000784:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000790:	08002408 	.word	0x08002408
  ldr r2, =_sbss
 8000794:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000798:	20000074 	.word	0x20000074

0800079c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC1_COMP_IRQHandler>
	...

080007a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <HAL_Init+0x24>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_Init+0x24>)
 80007aa:	2110      	movs	r1, #16
 80007ac:	430a      	orrs	r2, r1
 80007ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 f809 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b6:	f7ff fe73 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_InitTick+0x5c>)
 80007d2:	681c      	ldr	r4, [r3, #0]
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <HAL_InitTick+0x60>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	0019      	movs	r1, r3
 80007da:	23fa      	movs	r3, #250	; 0xfa
 80007dc:	0098      	lsls	r0, r3, #2
 80007de:	f7ff fc93 	bl	8000108 <__udivsi3>
 80007e2:	0003      	movs	r3, r0
 80007e4:	0019      	movs	r1, r3
 80007e6:	0020      	movs	r0, r4
 80007e8:	f7ff fc8e 	bl	8000108 <__udivsi3>
 80007ec:	0003      	movs	r3, r0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 f905 	bl	80009fe <HAL_SYSTICK_Config>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e00f      	b.n	800081c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d80b      	bhi.n	800081a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	2301      	movs	r3, #1
 8000806:	425b      	negs	r3, r3
 8000808:	2200      	movs	r2, #0
 800080a:	0018      	movs	r0, r3
 800080c:	f000 f8e2 	bl	80009d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_InitTick+0x64>)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e000      	b.n	800081c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	0018      	movs	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	b003      	add	sp, #12
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000008 	.word	0x20000008
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x1c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	001a      	movs	r2, r3
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_IncTick+0x20>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	18d2      	adds	r2, r2, r3
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <HAL_IncTick+0x20>)
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	20000008 	.word	0x20000008
 8000850:	20000070 	.word	0x20000070

08000854 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b02      	ldr	r3, [pc, #8]	; (8000864 <HAL_GetTick+0x10>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	0018      	movs	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	20000070 	.word	0x20000070

08000868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff fff0 	bl	8000854 <HAL_GetTick>
 8000874:	0003      	movs	r3, r0
 8000876:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	3301      	adds	r3, #1
 8000880:	d005      	beq.n	800088e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_Delay+0x44>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	001a      	movs	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	189b      	adds	r3, r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	f7ff ffe0 	bl	8000854 <HAL_GetTick>
 8000894:	0002      	movs	r2, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	429a      	cmp	r2, r3
 800089e:	d8f7      	bhi.n	8000890 <HAL_Delay+0x28>
  {
  }
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b004      	add	sp, #16
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	20000008 	.word	0x20000008

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	0002      	movs	r2, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b7f      	cmp	r3, #127	; 0x7f
 80008c4:	d828      	bhi.n	8000918 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c6:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <__NVIC_SetPriority+0xd4>)
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	33c0      	adds	r3, #192	; 0xc0
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	589b      	ldr	r3, [r3, r2]
 80008d6:	1dfa      	adds	r2, r7, #7
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	0011      	movs	r1, r2
 80008dc:	2203      	movs	r2, #3
 80008de:	400a      	ands	r2, r1
 80008e0:	00d2      	lsls	r2, r2, #3
 80008e2:	21ff      	movs	r1, #255	; 0xff
 80008e4:	4091      	lsls	r1, r2
 80008e6:	000a      	movs	r2, r1
 80008e8:	43d2      	mvns	r2, r2
 80008ea:	401a      	ands	r2, r3
 80008ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	019b      	lsls	r3, r3, #6
 80008f2:	22ff      	movs	r2, #255	; 0xff
 80008f4:	401a      	ands	r2, r3
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	0018      	movs	r0, r3
 80008fc:	2303      	movs	r3, #3
 80008fe:	4003      	ands	r3, r0
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000904:	481f      	ldr	r0, [pc, #124]	; (8000984 <__NVIC_SetPriority+0xd4>)
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b25b      	sxtb	r3, r3
 800090c:	089b      	lsrs	r3, r3, #2
 800090e:	430a      	orrs	r2, r1
 8000910:	33c0      	adds	r3, #192	; 0xc0
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000916:	e031      	b.n	800097c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000918:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <__NVIC_SetPriority+0xd8>)
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	0019      	movs	r1, r3
 8000920:	230f      	movs	r3, #15
 8000922:	400b      	ands	r3, r1
 8000924:	3b08      	subs	r3, #8
 8000926:	089b      	lsrs	r3, r3, #2
 8000928:	3306      	adds	r3, #6
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	18d3      	adds	r3, r2, r3
 800092e:	3304      	adds	r3, #4
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	1dfa      	adds	r2, r7, #7
 8000934:	7812      	ldrb	r2, [r2, #0]
 8000936:	0011      	movs	r1, r2
 8000938:	2203      	movs	r2, #3
 800093a:	400a      	ands	r2, r1
 800093c:	00d2      	lsls	r2, r2, #3
 800093e:	21ff      	movs	r1, #255	; 0xff
 8000940:	4091      	lsls	r1, r2
 8000942:	000a      	movs	r2, r1
 8000944:	43d2      	mvns	r2, r2
 8000946:	401a      	ands	r2, r3
 8000948:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	019b      	lsls	r3, r3, #6
 800094e:	22ff      	movs	r2, #255	; 0xff
 8000950:	401a      	ands	r2, r3
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	0018      	movs	r0, r3
 8000958:	2303      	movs	r3, #3
 800095a:	4003      	ands	r3, r0
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <__NVIC_SetPriority+0xd8>)
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	001c      	movs	r4, r3
 8000968:	230f      	movs	r3, #15
 800096a:	4023      	ands	r3, r4
 800096c:	3b08      	subs	r3, #8
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	430a      	orrs	r2, r1
 8000972:	3306      	adds	r3, #6
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	18c3      	adds	r3, r0, r3
 8000978:	3304      	adds	r3, #4
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b003      	add	sp, #12
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	045b      	lsls	r3, r3, #17
 800099c:	429a      	cmp	r2, r3
 800099e:	d301      	bcc.n	80009a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a0:	2301      	movs	r3, #1
 80009a2:	e010      	b.n	80009c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <SysTick_Config+0x44>)
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	3a01      	subs	r2, #1
 80009aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ac:	2301      	movs	r3, #1
 80009ae:	425b      	negs	r3, r3
 80009b0:	2103      	movs	r1, #3
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff ff7c 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SysTick_Config+0x44>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SysTick_Config+0x44>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	0018      	movs	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b002      	add	sp, #8
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	210f      	movs	r1, #15
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	1c02      	adds	r2, r0, #0
 80009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff ff5d 	bl	80008b0 <__NVIC_SetPriority>
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b004      	add	sp, #16
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff ffbf 	bl	800098c <SysTick_Config>
 8000a0e:	0003      	movs	r3, r0
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a26:	e155      	b.n	8000cd4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	4091      	lsls	r1, r2
 8000a32:	000a      	movs	r2, r1
 8000a34:	4013      	ands	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d100      	bne.n	8000a40 <HAL_GPIO_Init+0x28>
 8000a3e:	e146      	b.n	8000cce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2203      	movs	r2, #3
 8000a46:	4013      	ands	r3, r2
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d005      	beq.n	8000a58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2203      	movs	r2, #3
 8000a52:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d130      	bne.n	8000aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	2203      	movs	r2, #3
 8000a64:	409a      	lsls	r2, r3
 8000a66:	0013      	movs	r3, r2
 8000a68:	43da      	mvns	r2, r3
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68da      	ldr	r2, [r3, #12]
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a8e:	2201      	movs	r2, #1
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
 8000a94:	0013      	movs	r3, r2
 8000a96:	43da      	mvns	r2, r3
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	091b      	lsrs	r3, r3, #4
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	0013      	movs	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2203      	movs	r2, #3
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d017      	beq.n	8000af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	2203      	movs	r2, #3
 8000afc:	4013      	ands	r3, r2
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d123      	bne.n	8000b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	08da      	lsrs	r2, r3, #3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3208      	adds	r2, #8
 8000b0a:	0092      	lsls	r2, r2, #2
 8000b0c:	58d3      	ldr	r3, [r2, r3]
 8000b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	2207      	movs	r2, #7
 8000b14:	4013      	ands	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	220f      	movs	r2, #15
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	691a      	ldr	r2, [r3, #16]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2107      	movs	r1, #7
 8000b2e:	400b      	ands	r3, r1
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	08da      	lsrs	r2, r3, #3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3208      	adds	r2, #8
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	6939      	ldr	r1, [r7, #16]
 8000b48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2203      	movs	r2, #3
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	2203      	movs	r2, #3
 8000b68:	401a      	ands	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	23c0      	movs	r3, #192	; 0xc0
 8000b84:	029b      	lsls	r3, r3, #10
 8000b86:	4013      	ands	r3, r2
 8000b88:	d100      	bne.n	8000b8c <HAL_GPIO_Init+0x174>
 8000b8a:	e0a0      	b.n	8000cce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8c:	4b57      	ldr	r3, [pc, #348]	; (8000cec <HAL_GPIO_Init+0x2d4>)
 8000b8e:	699a      	ldr	r2, [r3, #24]
 8000b90:	4b56      	ldr	r3, [pc, #344]	; (8000cec <HAL_GPIO_Init+0x2d4>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	430a      	orrs	r2, r1
 8000b96:	619a      	str	r2, [r3, #24]
 8000b98:	4b54      	ldr	r3, [pc, #336]	; (8000cec <HAL_GPIO_Init+0x2d4>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ba4:	4a52      	ldr	r2, [pc, #328]	; (8000cf0 <HAL_GPIO_Init+0x2d8>)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	3302      	adds	r3, #2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	589b      	ldr	r3, [r3, r2]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	220f      	movs	r2, #15
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	2390      	movs	r3, #144	; 0x90
 8000bcc:	05db      	lsls	r3, r3, #23
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d019      	beq.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a47      	ldr	r2, [pc, #284]	; (8000cf4 <HAL_GPIO_Init+0x2dc>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d013      	beq.n	8000c02 <HAL_GPIO_Init+0x1ea>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a46      	ldr	r2, [pc, #280]	; (8000cf8 <HAL_GPIO_Init+0x2e0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d00d      	beq.n	8000bfe <HAL_GPIO_Init+0x1e6>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a45      	ldr	r2, [pc, #276]	; (8000cfc <HAL_GPIO_Init+0x2e4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d007      	beq.n	8000bfa <HAL_GPIO_Init+0x1e2>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a44      	ldr	r2, [pc, #272]	; (8000d00 <HAL_GPIO_Init+0x2e8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_GPIO_Init+0x1de>
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	e008      	b.n	8000c08 <HAL_GPIO_Init+0x1f0>
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	e006      	b.n	8000c08 <HAL_GPIO_Init+0x1f0>
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e004      	b.n	8000c08 <HAL_GPIO_Init+0x1f0>
 8000bfe:	2302      	movs	r3, #2
 8000c00:	e002      	b.n	8000c08 <HAL_GPIO_Init+0x1f0>
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <HAL_GPIO_Init+0x1f0>
 8000c06:	2300      	movs	r3, #0
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	4093      	lsls	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c18:	4935      	ldr	r1, [pc, #212]	; (8000cf0 <HAL_GPIO_Init+0x2d8>)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	3302      	adds	r3, #2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c26:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <HAL_GPIO_Init+0x2ec>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	025b      	lsls	r3, r3, #9
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c4a:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <HAL_GPIO_Init+0x2ec>)
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c50:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <HAL_GPIO_Init+0x2ec>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43da      	mvns	r2, r3
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	029b      	lsls	r3, r3, #10
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <HAL_GPIO_Init+0x2ec>)
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c7a:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <HAL_GPIO_Init+0x2ec>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	43da      	mvns	r2, r3
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	035b      	lsls	r3, r3, #13
 8000c92:	4013      	ands	r3, r2
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_GPIO_Init+0x2ec>)
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_GPIO_Init+0x2ec>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43da      	mvns	r2, r3
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	039b      	lsls	r3, r3, #14
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_GPIO_Init+0x2ec>)
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	40da      	lsrs	r2, r3
 8000cdc:	1e13      	subs	r3, r2, #0
 8000cde:	d000      	beq.n	8000ce2 <HAL_GPIO_Init+0x2ca>
 8000ce0:	e6a2      	b.n	8000a28 <HAL_GPIO_Init+0x10>
  } 
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b006      	add	sp, #24
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010000 	.word	0x40010000
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000c00 	.word	0x48000c00
 8000d00:	48001000 	.word	0x48001000
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	0008      	movs	r0, r1
 8000d12:	0011      	movs	r1, r2
 8000d14:	1cbb      	adds	r3, r7, #2
 8000d16:	1c02      	adds	r2, r0, #0
 8000d18:	801a      	strh	r2, [r3, #0]
 8000d1a:	1c7b      	adds	r3, r7, #1
 8000d1c:	1c0a      	adds	r2, r1, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d20:	1c7b      	adds	r3, r7, #1
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d004      	beq.n	8000d32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d28:	1cbb      	adds	r3, r7, #2
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d30:	e003      	b.n	8000d3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d32:	1cbb      	adds	r3, r7, #2
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	000a      	movs	r2, r1
 8000d4c:	1cbb      	adds	r3, r7, #2
 8000d4e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d56:	1cbb      	adds	r3, r7, #2
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	041a      	lsls	r2, r3, #16
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	1cb9      	adds	r1, r7, #2
 8000d66:	8809      	ldrh	r1, [r1, #0]
 8000d68:	400b      	ands	r3, r1
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	619a      	str	r2, [r3, #24]
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b004      	add	sp, #16
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f000 fb76 	bl	8001478 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2201      	movs	r2, #1
 8000d92:	4013      	ands	r3, r2
 8000d94:	d100      	bne.n	8000d98 <HAL_RCC_OscConfig+0x20>
 8000d96:	e08e      	b.n	8000eb6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d98:	4bc5      	ldr	r3, [pc, #788]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	220c      	movs	r2, #12
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d00e      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da4:	4bc2      	ldr	r3, [pc, #776]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	220c      	movs	r2, #12
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d117      	bne.n	8000de0 <HAL_RCC_OscConfig+0x68>
 8000db0:	4bbf      	ldr	r3, [pc, #764]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	23c0      	movs	r3, #192	; 0xc0
 8000db6:	025b      	lsls	r3, r3, #9
 8000db8:	401a      	ands	r2, r3
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	025b      	lsls	r3, r3, #9
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d10e      	bne.n	8000de0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc2:	4bbb      	ldr	r3, [pc, #748]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	029b      	lsls	r3, r3, #10
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x58>
 8000dce:	e071      	b.n	8000eb4 <HAL_RCC_OscConfig+0x13c>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d000      	beq.n	8000dda <HAL_RCC_OscConfig+0x62>
 8000dd8:	e06c      	b.n	8000eb4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f000 fb4c 	bl	8001478 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d107      	bne.n	8000df8 <HAL_RCC_OscConfig+0x80>
 8000de8:	4bb1      	ldr	r3, [pc, #708]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4bb0      	ldr	r3, [pc, #704]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	0249      	lsls	r1, r1, #9
 8000df2:	430a      	orrs	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e02f      	b.n	8000e58 <HAL_RCC_OscConfig+0xe0>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10c      	bne.n	8000e1a <HAL_RCC_OscConfig+0xa2>
 8000e00:	4bab      	ldr	r3, [pc, #684]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4baa      	ldr	r3, [pc, #680]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e06:	49ab      	ldr	r1, [pc, #684]	; (80010b4 <HAL_RCC_OscConfig+0x33c>)
 8000e08:	400a      	ands	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	4ba8      	ldr	r3, [pc, #672]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4ba7      	ldr	r3, [pc, #668]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e12:	49a9      	ldr	r1, [pc, #676]	; (80010b8 <HAL_RCC_OscConfig+0x340>)
 8000e14:	400a      	ands	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e01e      	b.n	8000e58 <HAL_RCC_OscConfig+0xe0>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b05      	cmp	r3, #5
 8000e20:	d10e      	bne.n	8000e40 <HAL_RCC_OscConfig+0xc8>
 8000e22:	4ba3      	ldr	r3, [pc, #652]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4ba2      	ldr	r3, [pc, #648]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	02c9      	lsls	r1, r1, #11
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	4b9f      	ldr	r3, [pc, #636]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b9e      	ldr	r3, [pc, #632]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	0249      	lsls	r1, r1, #9
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e00b      	b.n	8000e58 <HAL_RCC_OscConfig+0xe0>
 8000e40:	4b9b      	ldr	r3, [pc, #620]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b9a      	ldr	r3, [pc, #616]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e46:	499b      	ldr	r1, [pc, #620]	; (80010b4 <HAL_RCC_OscConfig+0x33c>)
 8000e48:	400a      	ands	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	4b98      	ldr	r3, [pc, #608]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b97      	ldr	r3, [pc, #604]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e52:	4999      	ldr	r1, [pc, #612]	; (80010b8 <HAL_RCC_OscConfig+0x340>)
 8000e54:	400a      	ands	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d014      	beq.n	8000e8a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e60:	f7ff fcf8 	bl	8000854 <HAL_GetTick>
 8000e64:	0003      	movs	r3, r0
 8000e66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fcf3 	bl	8000854 <HAL_GetTick>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b64      	cmp	r3, #100	; 0x64
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e2fd      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7c:	4b8c      	ldr	r3, [pc, #560]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	029b      	lsls	r3, r3, #10
 8000e84:	4013      	ands	r3, r2
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0xf2>
 8000e88:	e015      	b.n	8000eb6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fce3 	bl	8000854 <HAL_GetTick>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e94:	f7ff fcde 	bl	8000854 <HAL_GetTick>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b64      	cmp	r3, #100	; 0x64
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e2e8      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea6:	4b82      	ldr	r3, [pc, #520]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	029b      	lsls	r3, r3, #10
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d1f0      	bne.n	8000e94 <HAL_RCC_OscConfig+0x11c>
 8000eb2:	e000      	b.n	8000eb6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2202      	movs	r2, #2
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d100      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x14a>
 8000ec0:	e06c      	b.n	8000f9c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ec2:	4b7b      	ldr	r3, [pc, #492]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d00e      	beq.n	8000eea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ecc:	4b78      	ldr	r3, [pc, #480]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	220c      	movs	r2, #12
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d11f      	bne.n	8000f18 <HAL_RCC_OscConfig+0x1a0>
 8000ed8:	4b75      	ldr	r3, [pc, #468]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	23c0      	movs	r3, #192	; 0xc0
 8000ede:	025b      	lsls	r3, r3, #9
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d116      	bne.n	8000f18 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eea:	4b71      	ldr	r3, [pc, #452]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2202      	movs	r2, #2
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d005      	beq.n	8000f00 <HAL_RCC_OscConfig+0x188>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d001      	beq.n	8000f00 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e2bb      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f00:	4b6b      	ldr	r3, [pc, #428]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	22f8      	movs	r2, #248	; 0xf8
 8000f06:	4393      	bics	r3, r2
 8000f08:	0019      	movs	r1, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	00da      	lsls	r2, r3, #3
 8000f10:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f16:	e041      	b.n	8000f9c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d024      	beq.n	8000f6a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f20:	4b63      	ldr	r3, [pc, #396]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b62      	ldr	r3, [pc, #392]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fc92 	bl	8000854 <HAL_GetTick>
 8000f30:	0003      	movs	r3, r0
 8000f32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f36:	f7ff fc8d 	bl	8000854 <HAL_GetTick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e297      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f48:	4b59      	ldr	r3, [pc, #356]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d0f1      	beq.n	8000f36 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f52:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	22f8      	movs	r2, #248	; 0xf8
 8000f58:	4393      	bics	r3, r2
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	00da      	lsls	r2, r3, #3
 8000f62:	4b53      	ldr	r3, [pc, #332]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000f64:	430a      	orrs	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e018      	b.n	8000f9c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6a:	4b51      	ldr	r3, [pc, #324]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000f70:	2101      	movs	r1, #1
 8000f72:	438a      	bics	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f76:	f7ff fc6d 	bl	8000854 <HAL_GetTick>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f80:	f7ff fc68 	bl	8000854 <HAL_GetTick>
 8000f84:	0002      	movs	r2, r0
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e272      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2202      	movs	r2, #2
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d1f1      	bne.n	8000f80 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d036      	beq.n	8001014 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d019      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb2:	4b3f      	ldr	r3, [pc, #252]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fba:	f7ff fc4b 	bl	8000854 <HAL_GetTick>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fc46 	bl	8000854 <HAL_GetTick>
 8000fc8:	0002      	movs	r2, r0
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e250      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd6:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	2202      	movs	r2, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d0f1      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x24c>
 8000fe0:	e018      	b.n	8001014 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fe2:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe6:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	438a      	bics	r2, r1
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fee:	f7ff fc31 	bl	8000854 <HAL_GetTick>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff8:	f7ff fc2c 	bl	8000854 <HAL_GetTick>
 8000ffc:	0002      	movs	r2, r0
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e236      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100e:	2202      	movs	r2, #2
 8001010:	4013      	ands	r3, r2
 8001012:	d1f1      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2204      	movs	r2, #4
 800101a:	4013      	ands	r3, r2
 800101c:	d100      	bne.n	8001020 <HAL_RCC_OscConfig+0x2a8>
 800101e:	e0b5      	b.n	800118c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001020:	201f      	movs	r0, #31
 8001022:	183b      	adds	r3, r7, r0
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 800102a:	69da      	ldr	r2, [r3, #28]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	055b      	lsls	r3, r3, #21
 8001030:	4013      	ands	r3, r2
 8001032:	d110      	bne.n	8001056 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8001036:	69da      	ldr	r2, [r3, #28]
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	0549      	lsls	r1, r1, #21
 800103e:	430a      	orrs	r2, r1
 8001040:	61da      	str	r2, [r3, #28]
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8001044:	69da      	ldr	r2, [r3, #28]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	055b      	lsls	r3, r3, #21
 800104a:	4013      	ands	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001050:	183b      	adds	r3, r7, r0
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_RCC_OscConfig+0x344>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4013      	ands	r3, r2
 8001060:	d11a      	bne.n	8001098 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <HAL_RCC_OscConfig+0x344>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_RCC_OscConfig+0x344>)
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	0049      	lsls	r1, r1, #1
 800106c:	430a      	orrs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001070:	f7ff fbf0 	bl	8000854 <HAL_GetTick>
 8001074:	0003      	movs	r3, r0
 8001076:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800107a:	f7ff fbeb 	bl	8000854 <HAL_GetTick>
 800107e:	0002      	movs	r2, r0
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b64      	cmp	r3, #100	; 0x64
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e1f5      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_RCC_OscConfig+0x344>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4013      	ands	r3, r2
 8001096:	d0f0      	beq.n	800107a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10f      	bne.n	80010c0 <HAL_RCC_OscConfig+0x348>
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 80010a2:	6a1a      	ldr	r2, [r3, #32]
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	430a      	orrs	r2, r1
 80010aa:	621a      	str	r2, [r3, #32]
 80010ac:	e036      	b.n	800111c <HAL_RCC_OscConfig+0x3a4>
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	40021000 	.word	0x40021000
 80010b4:	fffeffff 	.word	0xfffeffff
 80010b8:	fffbffff 	.word	0xfffbffff
 80010bc:	40007000 	.word	0x40007000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10c      	bne.n	80010e2 <HAL_RCC_OscConfig+0x36a>
 80010c8:	4bca      	ldr	r3, [pc, #808]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80010ca:	6a1a      	ldr	r2, [r3, #32]
 80010cc:	4bc9      	ldr	r3, [pc, #804]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80010ce:	2101      	movs	r1, #1
 80010d0:	438a      	bics	r2, r1
 80010d2:	621a      	str	r2, [r3, #32]
 80010d4:	4bc7      	ldr	r3, [pc, #796]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80010d6:	6a1a      	ldr	r2, [r3, #32]
 80010d8:	4bc6      	ldr	r3, [pc, #792]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80010da:	2104      	movs	r1, #4
 80010dc:	438a      	bics	r2, r1
 80010de:	621a      	str	r2, [r3, #32]
 80010e0:	e01c      	b.n	800111c <HAL_RCC_OscConfig+0x3a4>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0x38c>
 80010ea:	4bc2      	ldr	r3, [pc, #776]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80010ec:	6a1a      	ldr	r2, [r3, #32]
 80010ee:	4bc1      	ldr	r3, [pc, #772]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80010f0:	2104      	movs	r1, #4
 80010f2:	430a      	orrs	r2, r1
 80010f4:	621a      	str	r2, [r3, #32]
 80010f6:	4bbf      	ldr	r3, [pc, #764]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80010f8:	6a1a      	ldr	r2, [r3, #32]
 80010fa:	4bbe      	ldr	r3, [pc, #760]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80010fc:	2101      	movs	r1, #1
 80010fe:	430a      	orrs	r2, r1
 8001100:	621a      	str	r2, [r3, #32]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0x3a4>
 8001104:	4bbb      	ldr	r3, [pc, #748]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001106:	6a1a      	ldr	r2, [r3, #32]
 8001108:	4bba      	ldr	r3, [pc, #744]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 800110a:	2101      	movs	r1, #1
 800110c:	438a      	bics	r2, r1
 800110e:	621a      	str	r2, [r3, #32]
 8001110:	4bb8      	ldr	r3, [pc, #736]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001112:	6a1a      	ldr	r2, [r3, #32]
 8001114:	4bb7      	ldr	r3, [pc, #732]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001116:	2104      	movs	r1, #4
 8001118:	438a      	bics	r2, r1
 800111a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d014      	beq.n	800114e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001124:	f7ff fb96 	bl	8000854 <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800112c:	e009      	b.n	8001142 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800112e:	f7ff fb91 	bl	8000854 <HAL_GetTick>
 8001132:	0002      	movs	r2, r0
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	4aaf      	ldr	r2, [pc, #700]	; (80013f8 <HAL_RCC_OscConfig+0x680>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e19a      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001142:	4bac      	ldr	r3, [pc, #688]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	2202      	movs	r2, #2
 8001148:	4013      	ands	r3, r2
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x3b6>
 800114c:	e013      	b.n	8001176 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff fb81 	bl	8000854 <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001156:	e009      	b.n	800116c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001158:	f7ff fb7c 	bl	8000854 <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	4aa5      	ldr	r2, [pc, #660]	; (80013f8 <HAL_RCC_OscConfig+0x680>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e185      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800116c:	4ba1      	ldr	r3, [pc, #644]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	2202      	movs	r2, #2
 8001172:	4013      	ands	r3, r2
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001176:	231f      	movs	r3, #31
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001180:	4b9c      	ldr	r3, [pc, #624]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001182:	69da      	ldr	r2, [r3, #28]
 8001184:	4b9b      	ldr	r3, [pc, #620]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001186:	499d      	ldr	r1, [pc, #628]	; (80013fc <HAL_RCC_OscConfig+0x684>)
 8001188:	400a      	ands	r2, r1
 800118a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2210      	movs	r2, #16
 8001192:	4013      	ands	r3, r2
 8001194:	d063      	beq.n	800125e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12a      	bne.n	80011f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800119e:	4b95      	ldr	r3, [pc, #596]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80011a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a2:	4b94      	ldr	r3, [pc, #592]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80011a4:	2104      	movs	r1, #4
 80011a6:	430a      	orrs	r2, r1
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011aa:	4b92      	ldr	r3, [pc, #584]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80011ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ae:	4b91      	ldr	r3, [pc, #580]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80011b0:	2101      	movs	r1, #1
 80011b2:	430a      	orrs	r2, r1
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fb4d 	bl	8000854 <HAL_GetTick>
 80011ba:	0003      	movs	r3, r0
 80011bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011c0:	f7ff fb48 	bl	8000854 <HAL_GetTick>
 80011c4:	0002      	movs	r2, r0
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e152      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011d2:	4b88      	ldr	r3, [pc, #544]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80011d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d6:	2202      	movs	r2, #2
 80011d8:	4013      	ands	r3, r2
 80011da:	d0f1      	beq.n	80011c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011dc:	4b85      	ldr	r3, [pc, #532]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80011de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e0:	22f8      	movs	r2, #248	; 0xf8
 80011e2:	4393      	bics	r3, r2
 80011e4:	0019      	movs	r1, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	00da      	lsls	r2, r3, #3
 80011ec:	4b81      	ldr	r3, [pc, #516]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80011ee:	430a      	orrs	r2, r1
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
 80011f2:	e034      	b.n	800125e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	3305      	adds	r3, #5
 80011fa:	d111      	bne.n	8001220 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011fc:	4b7d      	ldr	r3, [pc, #500]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80011fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001200:	4b7c      	ldr	r3, [pc, #496]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001202:	2104      	movs	r1, #4
 8001204:	438a      	bics	r2, r1
 8001206:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001208:	4b7a      	ldr	r3, [pc, #488]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 800120a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120c:	22f8      	movs	r2, #248	; 0xf8
 800120e:	4393      	bics	r3, r2
 8001210:	0019      	movs	r1, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	00da      	lsls	r2, r3, #3
 8001218:	4b76      	ldr	r3, [pc, #472]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 800121a:	430a      	orrs	r2, r1
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
 800121e:	e01e      	b.n	800125e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001220:	4b74      	ldr	r3, [pc, #464]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001224:	4b73      	ldr	r3, [pc, #460]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001226:	2104      	movs	r1, #4
 8001228:	430a      	orrs	r2, r1
 800122a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800122c:	4b71      	ldr	r3, [pc, #452]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 800122e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001230:	4b70      	ldr	r3, [pc, #448]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001232:	2101      	movs	r1, #1
 8001234:	438a      	bics	r2, r1
 8001236:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001238:	f7ff fb0c 	bl	8000854 <HAL_GetTick>
 800123c:	0003      	movs	r3, r0
 800123e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001242:	f7ff fb07 	bl	8000854 <HAL_GetTick>
 8001246:	0002      	movs	r2, r0
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e111      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001254:	4b67      	ldr	r3, [pc, #412]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001258:	2202      	movs	r2, #2
 800125a:	4013      	ands	r3, r2
 800125c:	d1f1      	bne.n	8001242 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2220      	movs	r2, #32
 8001264:	4013      	ands	r3, r2
 8001266:	d05c      	beq.n	8001322 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001268:	4b62      	ldr	r3, [pc, #392]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	220c      	movs	r2, #12
 800126e:	4013      	ands	r3, r2
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d00e      	beq.n	8001292 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001274:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	220c      	movs	r2, #12
 800127a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800127c:	2b08      	cmp	r3, #8
 800127e:	d114      	bne.n	80012aa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001280:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	23c0      	movs	r3, #192	; 0xc0
 8001286:	025b      	lsls	r3, r3, #9
 8001288:	401a      	ands	r2, r3
 800128a:	23c0      	movs	r3, #192	; 0xc0
 800128c:	025b      	lsls	r3, r3, #9
 800128e:	429a      	cmp	r2, r3
 8001290:	d10b      	bne.n	80012aa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001292:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	025b      	lsls	r3, r3, #9
 800129a:	4013      	ands	r3, r2
 800129c:	d040      	beq.n	8001320 <HAL_RCC_OscConfig+0x5a8>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d03c      	beq.n	8001320 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0e6      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d01b      	beq.n	80012ea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80012b2:	4b50      	ldr	r3, [pc, #320]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80012b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b6:	4b4f      	ldr	r3, [pc, #316]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	0249      	lsls	r1, r1, #9
 80012bc:	430a      	orrs	r2, r1
 80012be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fac8 	bl	8000854 <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ca:	f7ff fac3 	bl	8000854 <HAL_GetTick>
 80012ce:	0002      	movs	r2, r0
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e0cd      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80012dc:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80012de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	025b      	lsls	r3, r3, #9
 80012e4:	4013      	ands	r3, r2
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x552>
 80012e8:	e01b      	b.n	8001322 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80012ea:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80012ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ee:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80012f0:	4943      	ldr	r1, [pc, #268]	; (8001400 <HAL_RCC_OscConfig+0x688>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff faad 	bl	8000854 <HAL_GetTick>
 80012fa:	0003      	movs	r3, r0
 80012fc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001300:	f7ff faa8 	bl	8000854 <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e0b2      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	4013      	ands	r3, r2
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x588>
 800131e:	e000      	b.n	8001322 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001320:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	2b00      	cmp	r3, #0
 8001328:	d100      	bne.n	800132c <HAL_RCC_OscConfig+0x5b4>
 800132a:	e0a4      	b.n	8001476 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	220c      	movs	r2, #12
 8001332:	4013      	ands	r3, r2
 8001334:	2b08      	cmp	r3, #8
 8001336:	d100      	bne.n	800133a <HAL_RCC_OscConfig+0x5c2>
 8001338:	e078      	b.n	800142c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	2b02      	cmp	r3, #2
 8001340:	d14c      	bne.n	80013dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001342:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001348:	492e      	ldr	r1, [pc, #184]	; (8001404 <HAL_RCC_OscConfig+0x68c>)
 800134a:	400a      	ands	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fa81 	bl	8000854 <HAL_GetTick>
 8001352:	0003      	movs	r3, r0
 8001354:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff fa7c 	bl	8000854 <HAL_GetTick>
 800135c:	0002      	movs	r2, r0
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e086      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	049b      	lsls	r3, r3, #18
 8001372:	4013      	ands	r3, r2
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137a:	220f      	movs	r2, #15
 800137c:	4393      	bics	r3, r2
 800137e:	0019      	movs	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 8001386:	430a      	orrs	r2, r1
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <HAL_RCC_OscConfig+0x690>)
 8001390:	4013      	ands	r3, r2
 8001392:	0019      	movs	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	431a      	orrs	r2, r3
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80013a0:	430a      	orrs	r2, r1
 80013a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80013aa:	2180      	movs	r1, #128	; 0x80
 80013ac:	0449      	lsls	r1, r1, #17
 80013ae:	430a      	orrs	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fa4f 	bl	8000854 <HAL_GetTick>
 80013b6:	0003      	movs	r3, r0
 80013b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013bc:	f7ff fa4a 	bl	8000854 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e054      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	049b      	lsls	r3, r3, #18
 80013d6:	4013      	ands	r3, r2
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0x644>
 80013da:	e04c      	b.n	8001476 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HAL_RCC_OscConfig+0x67c>)
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <HAL_RCC_OscConfig+0x68c>)
 80013e4:	400a      	ands	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fa34 	bl	8000854 <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f0:	e015      	b.n	800141e <HAL_RCC_OscConfig+0x6a6>
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	40021000 	.word	0x40021000
 80013f8:	00001388 	.word	0x00001388
 80013fc:	efffffff 	.word	0xefffffff
 8001400:	fffeffff 	.word	0xfffeffff
 8001404:	feffffff 	.word	0xfeffffff
 8001408:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff fa22 	bl	8000854 <HAL_GetTick>
 8001410:	0002      	movs	r2, r0
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e02c      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_RCC_OscConfig+0x708>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	049b      	lsls	r3, r3, #18
 8001426:	4013      	ands	r3, r2
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x694>
 800142a:	e024      	b.n	8001476 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e01f      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_RCC_OscConfig+0x708>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_RCC_OscConfig+0x708>)
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	23c0      	movs	r3, #192	; 0xc0
 8001448:	025b      	lsls	r3, r3, #9
 800144a:	401a      	ands	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	429a      	cmp	r2, r3
 8001452:	d10e      	bne.n	8001472 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	220f      	movs	r2, #15
 8001458:	401a      	ands	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800145e:	429a      	cmp	r2, r3
 8001460:	d107      	bne.n	8001472 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	23f0      	movs	r3, #240	; 0xf0
 8001466:	039b      	lsls	r3, r3, #14
 8001468:	401a      	ands	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d001      	beq.n	8001476 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b008      	add	sp, #32
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0bf      	b.n	8001618 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001498:	4b61      	ldr	r3, [pc, #388]	; (8001620 <HAL_RCC_ClockConfig+0x19c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2201      	movs	r2, #1
 800149e:	4013      	ands	r3, r2
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d911      	bls.n	80014ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b5e      	ldr	r3, [pc, #376]	; (8001620 <HAL_RCC_ClockConfig+0x19c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2201      	movs	r2, #1
 80014ac:	4393      	bics	r3, r2
 80014ae:	0019      	movs	r1, r3
 80014b0:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <HAL_RCC_ClockConfig+0x19c>)
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b8:	4b59      	ldr	r3, [pc, #356]	; (8001620 <HAL_RCC_ClockConfig+0x19c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0a6      	b.n	8001618 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2202      	movs	r2, #2
 80014d0:	4013      	ands	r3, r2
 80014d2:	d015      	beq.n	8001500 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2204      	movs	r2, #4
 80014da:	4013      	ands	r3, r2
 80014dc:	d006      	beq.n	80014ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014de:	4b51      	ldr	r3, [pc, #324]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4b50      	ldr	r3, [pc, #320]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 80014e4:	21e0      	movs	r1, #224	; 0xe0
 80014e6:	00c9      	lsls	r1, r1, #3
 80014e8:	430a      	orrs	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ec:	4b4d      	ldr	r3, [pc, #308]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	22f0      	movs	r2, #240	; 0xf0
 80014f2:	4393      	bics	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	4b4a      	ldr	r3, [pc, #296]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 80014fc:	430a      	orrs	r2, r1
 80014fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	4013      	ands	r3, r2
 8001508:	d04c      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b44      	ldr	r3, [pc, #272]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	029b      	lsls	r3, r3, #10
 800151a:	4013      	ands	r3, r2
 800151c:	d120      	bne.n	8001560 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e07a      	b.n	8001618 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	049b      	lsls	r3, r3, #18
 8001532:	4013      	ands	r3, r2
 8001534:	d114      	bne.n	8001560 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e06e      	b.n	8001618 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001542:	4b38      	ldr	r3, [pc, #224]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 8001544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	025b      	lsls	r3, r3, #9
 800154a:	4013      	ands	r3, r2
 800154c:	d108      	bne.n	8001560 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e062      	b.n	8001618 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2202      	movs	r2, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e05b      	b.n	8001618 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001560:	4b30      	ldr	r3, [pc, #192]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2203      	movs	r2, #3
 8001566:	4393      	bics	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 8001570:	430a      	orrs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001574:	f7ff f96e 	bl	8000854 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157c:	e009      	b.n	8001592 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157e:	f7ff f969 	bl	8000854 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	4a27      	ldr	r2, [pc, #156]	; (8001628 <HAL_RCC_ClockConfig+0x1a4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e042      	b.n	8001618 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	220c      	movs	r2, #12
 8001598:	401a      	ands	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d1ec      	bne.n	800157e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <HAL_RCC_ClockConfig+0x19c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2201      	movs	r2, #1
 80015aa:	4013      	ands	r3, r2
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d211      	bcs.n	80015d6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_RCC_ClockConfig+0x19c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	4393      	bics	r3, r2
 80015ba:	0019      	movs	r1, r3
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_RCC_ClockConfig+0x19c>)
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_RCC_ClockConfig+0x19c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2201      	movs	r2, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e020      	b.n	8001618 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2204      	movs	r2, #4
 80015dc:	4013      	ands	r3, r2
 80015de:	d009      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a11      	ldr	r2, [pc, #68]	; (800162c <HAL_RCC_ClockConfig+0x1a8>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015f4:	f000 f820 	bl	8001638 <HAL_RCC_GetSysClockFreq>
 80015f8:	0001      	movs	r1, r0
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_RCC_ClockConfig+0x1a0>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	220f      	movs	r2, #15
 8001602:	4013      	ands	r3, r2
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <HAL_RCC_ClockConfig+0x1ac>)
 8001606:	5cd3      	ldrb	r3, [r2, r3]
 8001608:	000a      	movs	r2, r1
 800160a:	40da      	lsrs	r2, r3
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_ClockConfig+0x1b0>)
 800160e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff f8d9 	bl	80007c8 <HAL_InitTick>
  
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b004      	add	sp, #16
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40022000 	.word	0x40022000
 8001624:	40021000 	.word	0x40021000
 8001628:	00001388 	.word	0x00001388
 800162c:	fffff8ff 	.word	0xfffff8ff
 8001630:	080023f0 	.word	0x080023f0
 8001634:	20000000 	.word	0x20000000

08001638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b08f      	sub	sp, #60	; 0x3c
 800163c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800163e:	2314      	movs	r3, #20
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	4a38      	ldr	r2, [pc, #224]	; (8001724 <HAL_RCC_GetSysClockFreq+0xec>)
 8001644:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001646:	c313      	stmia	r3!, {r0, r1, r4}
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4a36      	ldr	r2, [pc, #216]	; (8001728 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001650:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001652:	c313      	stmia	r3!, {r0, r1, r4}
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <HAL_RCC_GetSysClockFreq+0xf4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001674:	220c      	movs	r2, #12
 8001676:	4013      	ands	r3, r2
 8001678:	2b0c      	cmp	r3, #12
 800167a:	d047      	beq.n	800170c <HAL_RCC_GetSysClockFreq+0xd4>
 800167c:	d849      	bhi.n	8001712 <HAL_RCC_GetSysClockFreq+0xda>
 800167e:	2b04      	cmp	r3, #4
 8001680:	d002      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x50>
 8001682:	2b08      	cmp	r3, #8
 8001684:	d003      	beq.n	800168e <HAL_RCC_GetSysClockFreq+0x56>
 8001686:	e044      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001688:	4b29      	ldr	r3, [pc, #164]	; (8001730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800168c:	e044      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	0c9b      	lsrs	r3, r3, #18
 8001692:	220f      	movs	r2, #15
 8001694:	4013      	ands	r3, r2
 8001696:	2214      	movs	r2, #20
 8001698:	18ba      	adds	r2, r7, r2
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_RCC_GetSysClockFreq+0xf4>)
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	220f      	movs	r2, #15
 80016a4:	4013      	ands	r3, r2
 80016a6:	1d3a      	adds	r2, r7, #4
 80016a8:	5cd3      	ldrb	r3, [r2, r3]
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ae:	23c0      	movs	r3, #192	; 0xc0
 80016b0:	025b      	lsls	r3, r3, #9
 80016b2:	401a      	ands	r2, r3
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	025b      	lsls	r3, r3, #9
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d109      	bne.n	80016d0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016be:	481c      	ldr	r0, [pc, #112]	; (8001730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016c0:	f7fe fd22 	bl	8000108 <__udivsi3>
 80016c4:	0003      	movs	r3, r0
 80016c6:	001a      	movs	r2, r3
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	4353      	muls	r3, r2
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
 80016ce:	e01a      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80016d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d2:	23c0      	movs	r3, #192	; 0xc0
 80016d4:	025b      	lsls	r3, r3, #9
 80016d6:	401a      	ands	r2, r3
 80016d8:	23c0      	movs	r3, #192	; 0xc0
 80016da:	025b      	lsls	r3, r3, #9
 80016dc:	429a      	cmp	r2, r3
 80016de:	d109      	bne.n	80016f4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016e2:	4814      	ldr	r0, [pc, #80]	; (8001734 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016e4:	f7fe fd10 	bl	8000108 <__udivsi3>
 80016e8:	0003      	movs	r3, r0
 80016ea:	001a      	movs	r2, r3
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	4353      	muls	r3, r2
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
 80016f2:	e008      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016f8:	f7fe fd06 	bl	8000108 <__udivsi3>
 80016fc:	0003      	movs	r3, r0
 80016fe:	001a      	movs	r2, r3
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	4353      	muls	r3, r2
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800170a:	e005      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_RCC_GetSysClockFreq+0xfc>)
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001710:	e002      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001716:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b00f      	add	sp, #60	; 0x3c
 8001720:	bd90      	pop	{r4, r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	080023d0 	.word	0x080023d0
 8001728:	080023e0 	.word	0x080023e0
 800172c:	40021000 	.word	0x40021000
 8001730:	007a1200 	.word	0x007a1200
 8001734:	02dc6c00 	.word	0x02dc6c00

08001738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e042      	b.n	80017d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	223d      	movs	r2, #61	; 0x3d
 800174e:	5c9b      	ldrb	r3, [r3, r2]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d107      	bne.n	8001766 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	223c      	movs	r2, #60	; 0x3c
 800175a:	2100      	movs	r1, #0
 800175c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f7fe ff93 	bl	800068c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	223d      	movs	r2, #61	; 0x3d
 800176a:	2102      	movs	r1, #2
 800176c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3304      	adds	r3, #4
 8001776:	0019      	movs	r1, r3
 8001778:	0010      	movs	r0, r2
 800177a:	f000 fa1f 	bl	8001bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2246      	movs	r2, #70	; 0x46
 8001782:	2101      	movs	r1, #1
 8001784:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	223e      	movs	r2, #62	; 0x3e
 800178a:	2101      	movs	r1, #1
 800178c:	5499      	strb	r1, [r3, r2]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	223f      	movs	r2, #63	; 0x3f
 8001792:	2101      	movs	r1, #1
 8001794:	5499      	strb	r1, [r3, r2]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2240      	movs	r2, #64	; 0x40
 800179a:	2101      	movs	r1, #1
 800179c:	5499      	strb	r1, [r3, r2]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2241      	movs	r2, #65	; 0x41
 80017a2:	2101      	movs	r1, #1
 80017a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2242      	movs	r2, #66	; 0x42
 80017aa:	2101      	movs	r1, #1
 80017ac:	5499      	strb	r1, [r3, r2]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2243      	movs	r2, #67	; 0x43
 80017b2:	2101      	movs	r1, #1
 80017b4:	5499      	strb	r1, [r3, r2]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2244      	movs	r2, #68	; 0x44
 80017ba:	2101      	movs	r1, #1
 80017bc:	5499      	strb	r1, [r3, r2]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2245      	movs	r2, #69	; 0x45
 80017c2:	2101      	movs	r1, #1
 80017c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	223d      	movs	r2, #61	; 0x3d
 80017ca:	2101      	movs	r1, #1
 80017cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b002      	add	sp, #8
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e042      	b.n	8001870 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	223d      	movs	r2, #61	; 0x3d
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d107      	bne.n	8001806 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	223c      	movs	r2, #60	; 0x3c
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0018      	movs	r0, r3
 8001802:	f000 f839 	bl	8001878 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	223d      	movs	r2, #61	; 0x3d
 800180a:	2102      	movs	r1, #2
 800180c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3304      	adds	r3, #4
 8001816:	0019      	movs	r1, r3
 8001818:	0010      	movs	r0, r2
 800181a:	f000 f9cf 	bl	8001bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2246      	movs	r2, #70	; 0x46
 8001822:	2101      	movs	r1, #1
 8001824:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	223e      	movs	r2, #62	; 0x3e
 800182a:	2101      	movs	r1, #1
 800182c:	5499      	strb	r1, [r3, r2]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	223f      	movs	r2, #63	; 0x3f
 8001832:	2101      	movs	r1, #1
 8001834:	5499      	strb	r1, [r3, r2]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2240      	movs	r2, #64	; 0x40
 800183a:	2101      	movs	r1, #1
 800183c:	5499      	strb	r1, [r3, r2]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2241      	movs	r2, #65	; 0x41
 8001842:	2101      	movs	r1, #1
 8001844:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2242      	movs	r2, #66	; 0x42
 800184a:	2101      	movs	r1, #1
 800184c:	5499      	strb	r1, [r3, r2]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2243      	movs	r2, #67	; 0x43
 8001852:	2101      	movs	r1, #1
 8001854:	5499      	strb	r1, [r3, r2]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2244      	movs	r2, #68	; 0x44
 800185a:	2101      	movs	r1, #1
 800185c:	5499      	strb	r1, [r3, r2]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2245      	movs	r2, #69	; 0x45
 8001862:	2101      	movs	r1, #1
 8001864:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	223d      	movs	r2, #61	; 0x3d
 800186a:	2101      	movs	r1, #1
 800186c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b002      	add	sp, #8
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001894:	2317      	movs	r3, #23
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	223c      	movs	r2, #60	; 0x3c
 80018a0:	5c9b      	ldrb	r3, [r3, r2]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_TIM_PWM_ConfigChannel+0x22>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e0ad      	b.n	8001a06 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	223c      	movs	r2, #60	; 0x3c
 80018ae:	2101      	movs	r1, #1
 80018b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0c      	cmp	r3, #12
 80018b6:	d100      	bne.n	80018ba <HAL_TIM_PWM_ConfigChannel+0x32>
 80018b8:	e076      	b.n	80019a8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b0c      	cmp	r3, #12
 80018be:	d900      	bls.n	80018c2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80018c0:	e095      	b.n	80019ee <HAL_TIM_PWM_ConfigChannel+0x166>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d04e      	beq.n	8001966 <HAL_TIM_PWM_ConfigChannel+0xde>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d900      	bls.n	80018d0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80018ce:	e08e      	b.n	80019ee <HAL_TIM_PWM_ConfigChannel+0x166>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_TIM_PWM_ConfigChannel+0x56>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d021      	beq.n	8001920 <HAL_TIM_PWM_ConfigChannel+0x98>
 80018dc:	e087      	b.n	80019ee <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	0011      	movs	r1, r2
 80018e6:	0018      	movs	r0, r3
 80018e8:	f000 f9e8 	bl	8001cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2108      	movs	r1, #8
 80018f8:	430a      	orrs	r2, r1
 80018fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2104      	movs	r1, #4
 8001908:	438a      	bics	r2, r1
 800190a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6999      	ldr	r1, [r3, #24]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	691a      	ldr	r2, [r3, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	619a      	str	r2, [r3, #24]
      break;
 800191e:	e06b      	b.n	80019f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	0011      	movs	r1, r2
 8001928:	0018      	movs	r0, r3
 800192a:	f000 fa4f 	bl	8001dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	0109      	lsls	r1, r1, #4
 800193c:	430a      	orrs	r2, r1
 800193e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699a      	ldr	r2, [r3, #24]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4931      	ldr	r1, [pc, #196]	; (8001a10 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800194c:	400a      	ands	r2, r1
 800194e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6999      	ldr	r1, [r3, #24]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	021a      	lsls	r2, r3, #8
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	619a      	str	r2, [r3, #24]
      break;
 8001964:	e048      	b.n	80019f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	0011      	movs	r1, r2
 800196e:	0018      	movs	r0, r3
 8001970:	f000 fab0 	bl	8001ed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2108      	movs	r1, #8
 8001980:	430a      	orrs	r2, r1
 8001982:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69da      	ldr	r2, [r3, #28]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2104      	movs	r1, #4
 8001990:	438a      	bics	r2, r1
 8001992:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	69d9      	ldr	r1, [r3, #28]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	61da      	str	r2, [r3, #28]
      break;
 80019a6:	e027      	b.n	80019f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	0011      	movs	r1, r2
 80019b0:	0018      	movs	r0, r3
 80019b2:	f000 fb15 	bl	8001fe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	69da      	ldr	r2, [r3, #28]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	0109      	lsls	r1, r1, #4
 80019c4:	430a      	orrs	r2, r1
 80019c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	69da      	ldr	r2, [r3, #28]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	490f      	ldr	r1, [pc, #60]	; (8001a10 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69d9      	ldr	r1, [r3, #28]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	021a      	lsls	r2, r3, #8
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	61da      	str	r2, [r3, #28]
      break;
 80019ec:	e004      	b.n	80019f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80019ee:	2317      	movs	r3, #23
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
      break;
 80019f6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	223c      	movs	r2, #60	; 0x3c
 80019fc:	2100      	movs	r1, #0
 80019fe:	5499      	strb	r1, [r3, r2]

  return status;
 8001a00:	2317      	movs	r3, #23
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	781b      	ldrb	r3, [r3, #0]
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b006      	add	sp, #24
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	fffffbff 	.word	0xfffffbff

08001a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1e:	230f      	movs	r3, #15
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	223c      	movs	r2, #60	; 0x3c
 8001a2a:	5c9b      	ldrb	r3, [r3, r2]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_TIM_ConfigClockSource+0x20>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e0bc      	b.n	8001bae <HAL_TIM_ConfigClockSource+0x19a>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	223c      	movs	r2, #60	; 0x3c
 8001a38:	2101      	movs	r1, #1
 8001a3a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	223d      	movs	r2, #61	; 0x3d
 8001a40:	2102      	movs	r1, #2
 8001a42:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2277      	movs	r2, #119	; 0x77
 8001a50:	4393      	bics	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	0192      	lsls	r2, r2, #6
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d040      	beq.n	8001af2 <HAL_TIM_ConfigClockSource+0xde>
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	0192      	lsls	r2, r2, #6
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d900      	bls.n	8001a7a <HAL_TIM_ConfigClockSource+0x66>
 8001a78:	e088      	b.n	8001b8c <HAL_TIM_ConfigClockSource+0x178>
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	0152      	lsls	r2, r2, #5
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d100      	bne.n	8001a84 <HAL_TIM_ConfigClockSource+0x70>
 8001a82:	e088      	b.n	8001b96 <HAL_TIM_ConfigClockSource+0x182>
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	0152      	lsls	r2, r2, #5
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d900      	bls.n	8001a8e <HAL_TIM_ConfigClockSource+0x7a>
 8001a8c:	e07e      	b.n	8001b8c <HAL_TIM_ConfigClockSource+0x178>
 8001a8e:	2b70      	cmp	r3, #112	; 0x70
 8001a90:	d018      	beq.n	8001ac4 <HAL_TIM_ConfigClockSource+0xb0>
 8001a92:	d900      	bls.n	8001a96 <HAL_TIM_ConfigClockSource+0x82>
 8001a94:	e07a      	b.n	8001b8c <HAL_TIM_ConfigClockSource+0x178>
 8001a96:	2b60      	cmp	r3, #96	; 0x60
 8001a98:	d04f      	beq.n	8001b3a <HAL_TIM_ConfigClockSource+0x126>
 8001a9a:	d900      	bls.n	8001a9e <HAL_TIM_ConfigClockSource+0x8a>
 8001a9c:	e076      	b.n	8001b8c <HAL_TIM_ConfigClockSource+0x178>
 8001a9e:	2b50      	cmp	r3, #80	; 0x50
 8001aa0:	d03b      	beq.n	8001b1a <HAL_TIM_ConfigClockSource+0x106>
 8001aa2:	d900      	bls.n	8001aa6 <HAL_TIM_ConfigClockSource+0x92>
 8001aa4:	e072      	b.n	8001b8c <HAL_TIM_ConfigClockSource+0x178>
 8001aa6:	2b40      	cmp	r3, #64	; 0x40
 8001aa8:	d057      	beq.n	8001b5a <HAL_TIM_ConfigClockSource+0x146>
 8001aaa:	d900      	bls.n	8001aae <HAL_TIM_ConfigClockSource+0x9a>
 8001aac:	e06e      	b.n	8001b8c <HAL_TIM_ConfigClockSource+0x178>
 8001aae:	2b30      	cmp	r3, #48	; 0x30
 8001ab0:	d063      	beq.n	8001b7a <HAL_TIM_ConfigClockSource+0x166>
 8001ab2:	d86b      	bhi.n	8001b8c <HAL_TIM_ConfigClockSource+0x178>
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d060      	beq.n	8001b7a <HAL_TIM_ConfigClockSource+0x166>
 8001ab8:	d868      	bhi.n	8001b8c <HAL_TIM_ConfigClockSource+0x178>
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d05d      	beq.n	8001b7a <HAL_TIM_ConfigClockSource+0x166>
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	d05b      	beq.n	8001b7a <HAL_TIM_ConfigClockSource+0x166>
 8001ac2:	e063      	b.n	8001b8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6899      	ldr	r1, [r3, #8]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f000 fb68 	bl	80021a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2277      	movs	r2, #119	; 0x77
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	609a      	str	r2, [r3, #8]
      break;
 8001af0:	e052      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6899      	ldr	r1, [r3, #8]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f000 fb51 	bl	80021a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	01c9      	lsls	r1, r1, #7
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
      break;
 8001b18:	e03e      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6859      	ldr	r1, [r3, #4]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	001a      	movs	r2, r3
 8001b28:	f000 fac4 	bl	80020b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2150      	movs	r1, #80	; 0x50
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 fb1e 	bl	8002174 <TIM_ITRx_SetConfig>
      break;
 8001b38:	e02e      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6859      	ldr	r1, [r3, #4]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	001a      	movs	r2, r3
 8001b48:	f000 fae2 	bl	8002110 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2160      	movs	r1, #96	; 0x60
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 fb0e 	bl	8002174 <TIM_ITRx_SetConfig>
      break;
 8001b58:	e01e      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6859      	ldr	r1, [r3, #4]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	001a      	movs	r2, r3
 8001b68:	f000 faa4 	bl	80020b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2140      	movs	r1, #64	; 0x40
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 fafe 	bl	8002174 <TIM_ITRx_SetConfig>
      break;
 8001b78:	e00e      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0019      	movs	r1, r3
 8001b84:	0010      	movs	r0, r2
 8001b86:	f000 faf5 	bl	8002174 <TIM_ITRx_SetConfig>
      break;
 8001b8a:	e005      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
      break;
 8001b94:	e000      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001b96:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	223d      	movs	r2, #61	; 0x3d
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	223c      	movs	r2, #60	; 0x3c
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	5499      	strb	r1, [r3, r2]

  return status;
 8001ba8:	230f      	movs	r3, #15
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	781b      	ldrb	r3, [r3, #0]
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	ffff00ff 	.word	0xffff00ff

08001bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a34      	ldr	r2, [pc, #208]	; (8001ca0 <TIM_Base_SetConfig+0xe4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d008      	beq.n	8001be6 <TIM_Base_SetConfig+0x2a>
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	05db      	lsls	r3, r3, #23
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d003      	beq.n	8001be6 <TIM_Base_SetConfig+0x2a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a30      	ldr	r2, [pc, #192]	; (8001ca4 <TIM_Base_SetConfig+0xe8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d108      	bne.n	8001bf8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2270      	movs	r2, #112	; 0x70
 8001bea:	4393      	bics	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a29      	ldr	r2, [pc, #164]	; (8001ca0 <TIM_Base_SetConfig+0xe4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d018      	beq.n	8001c32 <TIM_Base_SetConfig+0x76>
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	05db      	lsls	r3, r3, #23
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d013      	beq.n	8001c32 <TIM_Base_SetConfig+0x76>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <TIM_Base_SetConfig+0xe8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00f      	beq.n	8001c32 <TIM_Base_SetConfig+0x76>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <TIM_Base_SetConfig+0xec>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00b      	beq.n	8001c32 <TIM_Base_SetConfig+0x76>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <TIM_Base_SetConfig+0xf0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <TIM_Base_SetConfig+0x76>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <TIM_Base_SetConfig+0xf4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d003      	beq.n	8001c32 <TIM_Base_SetConfig+0x76>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a21      	ldr	r2, [pc, #132]	; (8001cb4 <TIM_Base_SetConfig+0xf8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d108      	bne.n	8001c44 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <TIM_Base_SetConfig+0xfc>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	4393      	bics	r3, r2
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <TIM_Base_SetConfig+0xe4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00b      	beq.n	8001c8a <TIM_Base_SetConfig+0xce>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <TIM_Base_SetConfig+0xf0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <TIM_Base_SetConfig+0xce>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <TIM_Base_SetConfig+0xf4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d003      	beq.n	8001c8a <TIM_Base_SetConfig+0xce>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <TIM_Base_SetConfig+0xf8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d103      	bne.n	8001c92 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	615a      	str	r2, [r3, #20]
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b004      	add	sp, #16
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40012c00 	.word	0x40012c00
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40002000 	.word	0x40002000
 8001cac:	40014000 	.word	0x40014000
 8001cb0:	40014400 	.word	0x40014400
 8001cb4:	40014800 	.word	0x40014800
 8001cb8:	fffffcff 	.word	0xfffffcff

08001cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4393      	bics	r3, r2
 8001cce:	001a      	movs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2270      	movs	r2, #112	; 0x70
 8001cea:	4393      	bics	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2202      	movs	r2, #2
 8001d04:	4393      	bics	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a27      	ldr	r2, [pc, #156]	; (8001db4 <TIM_OC1_SetConfig+0xf8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00b      	beq.n	8001d32 <TIM_OC1_SetConfig+0x76>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <TIM_OC1_SetConfig+0xfc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <TIM_OC1_SetConfig+0x76>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <TIM_OC1_SetConfig+0x100>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d003      	beq.n	8001d32 <TIM_OC1_SetConfig+0x76>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <TIM_OC1_SetConfig+0x104>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d10c      	bne.n	8001d4c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2208      	movs	r2, #8
 8001d36:	4393      	bics	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2204      	movs	r2, #4
 8001d48:	4393      	bics	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <TIM_OC1_SetConfig+0xf8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00b      	beq.n	8001d6c <TIM_OC1_SetConfig+0xb0>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <TIM_OC1_SetConfig+0xfc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <TIM_OC1_SetConfig+0xb0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <TIM_OC1_SetConfig+0x100>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d003      	beq.n	8001d6c <TIM_OC1_SetConfig+0xb0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <TIM_OC1_SetConfig+0x104>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d111      	bne.n	8001d90 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <TIM_OC1_SetConfig+0x108>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <TIM_OC1_SetConfig+0x10c>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	621a      	str	r2, [r3, #32]
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b006      	add	sp, #24
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	40012c00 	.word	0x40012c00
 8001db8:	40014000 	.word	0x40014000
 8001dbc:	40014400 	.word	0x40014400
 8001dc0:	40014800 	.word	0x40014800
 8001dc4:	fffffeff 	.word	0xfffffeff
 8001dc8:	fffffdff 	.word	0xfffffdff

08001dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	2210      	movs	r2, #16
 8001ddc:	4393      	bics	r3, r2
 8001dde:	001a      	movs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4a2e      	ldr	r2, [pc, #184]	; (8001eb4 <TIM_OC2_SetConfig+0xe8>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4a2d      	ldr	r2, [pc, #180]	; (8001eb8 <TIM_OC2_SetConfig+0xec>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2220      	movs	r2, #32
 8001e16:	4393      	bics	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a24      	ldr	r2, [pc, #144]	; (8001ebc <TIM_OC2_SetConfig+0xf0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d10d      	bne.n	8001e4a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	4393      	bics	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2240      	movs	r2, #64	; 0x40
 8001e46:	4393      	bics	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <TIM_OC2_SetConfig+0xf0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00b      	beq.n	8001e6a <TIM_OC2_SetConfig+0x9e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <TIM_OC2_SetConfig+0xf4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <TIM_OC2_SetConfig+0x9e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <TIM_OC2_SetConfig+0xf8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d003      	beq.n	8001e6a <TIM_OC2_SetConfig+0x9e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <TIM_OC2_SetConfig+0xfc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d113      	bne.n	8001e92 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <TIM_OC2_SetConfig+0x100>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4a16      	ldr	r2, [pc, #88]	; (8001ed0 <TIM_OC2_SetConfig+0x104>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	621a      	str	r2, [r3, #32]
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b006      	add	sp, #24
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	ffff8fff 	.word	0xffff8fff
 8001eb8:	fffffcff 	.word	0xfffffcff
 8001ebc:	40012c00 	.word	0x40012c00
 8001ec0:	40014000 	.word	0x40014000
 8001ec4:	40014400 	.word	0x40014400
 8001ec8:	40014800 	.word	0x40014800
 8001ecc:	fffffbff 	.word	0xfffffbff
 8001ed0:	fffff7ff 	.word	0xfffff7ff

08001ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a35      	ldr	r2, [pc, #212]	; (8001fb8 <TIM_OC3_SetConfig+0xe4>)
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2270      	movs	r2, #112	; 0x70
 8001f00:	4393      	bics	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2203      	movs	r2, #3
 8001f08:	4393      	bics	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	4a28      	ldr	r2, [pc, #160]	; (8001fbc <TIM_OC3_SetConfig+0xe8>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a24      	ldr	r2, [pc, #144]	; (8001fc0 <TIM_OC3_SetConfig+0xec>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10d      	bne.n	8001f4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	4a23      	ldr	r2, [pc, #140]	; (8001fc4 <TIM_OC3_SetConfig+0xf0>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <TIM_OC3_SetConfig+0xf4>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <TIM_OC3_SetConfig+0xec>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00b      	beq.n	8001f6e <TIM_OC3_SetConfig+0x9a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1c      	ldr	r2, [pc, #112]	; (8001fcc <TIM_OC3_SetConfig+0xf8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <TIM_OC3_SetConfig+0x9a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <TIM_OC3_SetConfig+0xfc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d003      	beq.n	8001f6e <TIM_OC3_SetConfig+0x9a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <TIM_OC3_SetConfig+0x100>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d113      	bne.n	8001f96 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <TIM_OC3_SetConfig+0x104>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <TIM_OC3_SetConfig+0x108>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	621a      	str	r2, [r3, #32]
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b006      	add	sp, #24
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	fffffeff 	.word	0xfffffeff
 8001fbc:	fffffdff 	.word	0xfffffdff
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	fffff7ff 	.word	0xfffff7ff
 8001fc8:	fffffbff 	.word	0xfffffbff
 8001fcc:	40014000 	.word	0x40014000
 8001fd0:	40014400 	.word	0x40014400
 8001fd4:	40014800 	.word	0x40014800
 8001fd8:	ffffefff 	.word	0xffffefff
 8001fdc:	ffffdfff 	.word	0xffffdfff

08001fe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a28      	ldr	r2, [pc, #160]	; (8002090 <TIM_OC4_SetConfig+0xb0>)
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4a22      	ldr	r2, [pc, #136]	; (8002094 <TIM_OC4_SetConfig+0xb4>)
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a21      	ldr	r2, [pc, #132]	; (8002098 <TIM_OC4_SetConfig+0xb8>)
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <TIM_OC4_SetConfig+0xbc>)
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	031b      	lsls	r3, r3, #12
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <TIM_OC4_SetConfig+0xc0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00b      	beq.n	8002058 <TIM_OC4_SetConfig+0x78>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <TIM_OC4_SetConfig+0xc4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <TIM_OC4_SetConfig+0x78>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <TIM_OC4_SetConfig+0xc8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d003      	beq.n	8002058 <TIM_OC4_SetConfig+0x78>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a16      	ldr	r2, [pc, #88]	; (80020ac <TIM_OC4_SetConfig+0xcc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d109      	bne.n	800206c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <TIM_OC4_SetConfig+0xd0>)
 800205c:	4013      	ands	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	621a      	str	r2, [r3, #32]
}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b006      	add	sp, #24
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	ffffefff 	.word	0xffffefff
 8002094:	ffff8fff 	.word	0xffff8fff
 8002098:	fffffcff 	.word	0xfffffcff
 800209c:	ffffdfff 	.word	0xffffdfff
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40014000 	.word	0x40014000
 80020a8:	40014400 	.word	0x40014400
 80020ac:	40014800 	.word	0x40014800
 80020b0:	ffffbfff 	.word	0xffffbfff

080020b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	2201      	movs	r2, #1
 80020cc:	4393      	bics	r3, r2
 80020ce:	001a      	movs	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	22f0      	movs	r2, #240	; 0xf0
 80020de:	4393      	bics	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	220a      	movs	r2, #10
 80020f0:	4393      	bics	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	621a      	str	r2, [r3, #32]
}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	b006      	add	sp, #24
 800210e:	bd80      	pop	{r7, pc}

08002110 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	2210      	movs	r2, #16
 8002122:	4393      	bics	r3, r2
 8002124:	001a      	movs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <TIM_TI2_ConfigInputStage+0x60>)
 800213a:	4013      	ands	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	031b      	lsls	r3, r3, #12
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	22a0      	movs	r2, #160	; 0xa0
 800214c:	4393      	bics	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	621a      	str	r2, [r3, #32]
}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b006      	add	sp, #24
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	ffff0fff 	.word	0xffff0fff

08002174 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2270      	movs	r2, #112	; 0x70
 8002188:	4393      	bics	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	2207      	movs	r2, #7
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	609a      	str	r2, [r3, #8]
}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b004      	add	sp, #16
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <TIM_ETR_SetConfig+0x3c>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	021a      	lsls	r2, r3, #8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b006      	add	sp, #24
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	ffff00ff 	.word	0xffff00ff

080021e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	223c      	movs	r2, #60	; 0x3c
 80021f6:	5c9b      	ldrb	r3, [r3, r2]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e047      	b.n	8002290 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	223c      	movs	r2, #60	; 0x3c
 8002204:	2101      	movs	r1, #1
 8002206:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	223d      	movs	r2, #61	; 0x3d
 800220c:	2102      	movs	r1, #2
 800220e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2270      	movs	r2, #112	; 0x70
 8002224:	4393      	bics	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a16      	ldr	r2, [pc, #88]	; (8002298 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d00f      	beq.n	8002264 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	05db      	lsls	r3, r3, #23
 800224c:	429a      	cmp	r2, r3
 800224e:	d009      	beq.n	8002264 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a11      	ldr	r2, [pc, #68]	; (800229c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d004      	beq.n	8002264 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d10c      	bne.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	4393      	bics	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4313      	orrs	r3, r2
 8002274:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	223d      	movs	r2, #61	; 0x3d
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	223c      	movs	r2, #60	; 0x3c
 800228a:	2100      	movs	r1, #0
 800228c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40012c00 	.word	0x40012c00
 800229c:	40000400 	.word	0x40000400
 80022a0:	40014000 	.word	0x40014000

080022a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	223c      	movs	r2, #60	; 0x3c
 80022b6:	5c9b      	ldrb	r3, [r3, r2]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80022bc:	2302      	movs	r3, #2
 80022be:	e03e      	b.n	800233e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	223c      	movs	r2, #60	; 0x3c
 80022c4:	2101      	movs	r1, #1
 80022c6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	22ff      	movs	r2, #255	; 0xff
 80022cc:	4393      	bics	r3, r2
 80022ce:	001a      	movs	r2, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80022dc:	401a      	ands	r2, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80022ea:	401a      	ands	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a16      	ldr	r2, [pc, #88]	; (8002350 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80022f8:	401a      	ands	r2, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4a13      	ldr	r2, [pc, #76]	; (8002354 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002306:	401a      	ands	r2, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002314:	401a      	ands	r2, r3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a0e      	ldr	r2, [pc, #56]	; (800235c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002322:	401a      	ands	r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	223c      	movs	r2, #60	; 0x3c
 8002338:	2100      	movs	r1, #0
 800233a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	0018      	movs	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	b004      	add	sp, #16
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	fffffcff 	.word	0xfffffcff
 800234c:	fffffbff 	.word	0xfffffbff
 8002350:	fffff7ff 	.word	0xfffff7ff
 8002354:	ffffefff 	.word	0xffffefff
 8002358:	ffffdfff 	.word	0xffffdfff
 800235c:	ffffbfff 	.word	0xffffbfff

08002360 <__libc_init_array>:
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	2600      	movs	r6, #0
 8002364:	4d0c      	ldr	r5, [pc, #48]	; (8002398 <__libc_init_array+0x38>)
 8002366:	4c0d      	ldr	r4, [pc, #52]	; (800239c <__libc_init_array+0x3c>)
 8002368:	1b64      	subs	r4, r4, r5
 800236a:	10a4      	asrs	r4, r4, #2
 800236c:	42a6      	cmp	r6, r4
 800236e:	d109      	bne.n	8002384 <__libc_init_array+0x24>
 8002370:	2600      	movs	r6, #0
 8002372:	f000 f821 	bl	80023b8 <_init>
 8002376:	4d0a      	ldr	r5, [pc, #40]	; (80023a0 <__libc_init_array+0x40>)
 8002378:	4c0a      	ldr	r4, [pc, #40]	; (80023a4 <__libc_init_array+0x44>)
 800237a:	1b64      	subs	r4, r4, r5
 800237c:	10a4      	asrs	r4, r4, #2
 800237e:	42a6      	cmp	r6, r4
 8002380:	d105      	bne.n	800238e <__libc_init_array+0x2e>
 8002382:	bd70      	pop	{r4, r5, r6, pc}
 8002384:	00b3      	lsls	r3, r6, #2
 8002386:	58eb      	ldr	r3, [r5, r3]
 8002388:	4798      	blx	r3
 800238a:	3601      	adds	r6, #1
 800238c:	e7ee      	b.n	800236c <__libc_init_array+0xc>
 800238e:	00b3      	lsls	r3, r6, #2
 8002390:	58eb      	ldr	r3, [r5, r3]
 8002392:	4798      	blx	r3
 8002394:	3601      	adds	r6, #1
 8002396:	e7f2      	b.n	800237e <__libc_init_array+0x1e>
 8002398:	08002400 	.word	0x08002400
 800239c:	08002400 	.word	0x08002400
 80023a0:	08002400 	.word	0x08002400
 80023a4:	08002404 	.word	0x08002404

080023a8 <memset>:
 80023a8:	0003      	movs	r3, r0
 80023aa:	1882      	adds	r2, r0, r2
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d100      	bne.n	80023b2 <memset+0xa>
 80023b0:	4770      	bx	lr
 80023b2:	7019      	strb	r1, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	e7f9      	b.n	80023ac <memset+0x4>

080023b8 <_init>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023be:	bc08      	pop	{r3}
 80023c0:	469e      	mov	lr, r3
 80023c2:	4770      	bx	lr

080023c4 <_fini>:
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ca:	bc08      	pop	{r3}
 80023cc:	469e      	mov	lr, r3
 80023ce:	4770      	bx	lr
