
LPUART_TwoBoards_ComIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c64  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e7c  08003e7c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003e7c  08003e7c  00013e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e84  08003e84  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000074  08003f00  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003f00  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000b459  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000c3e5  00000000  00000000  0002b4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d89  00000000  00000000  000378e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  00039670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b2cfd  00000000  00000000  0003a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000009c0  00000000  00000000  000ecde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c414  00000000  00000000  000ed7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109bbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e4  00000000  00000000  00109c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003e24 	.word	0x08003e24

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	08003e24 	.word	0x08003e24

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490e      	ldr	r1, [pc, #56]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0b      	ldr	r4, [pc, #44]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800053a:	f000 faa7 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053e:	f003 fc45 	bl	8003dcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000542:	f000 f80f 	bl	8000564 <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000554:	08003e8c 	.word	0x08003e8c
  ldr r2, =_sbss
 8000558:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800055c:	20000188 	.word	0x20000188

08000560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_2_IRQHandler>
	...

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 faa6 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f860 	bl	8000630 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8000570:	2000      	movs	r0, #0
 8000572:	f000 fa29 	bl	80009c8 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f90b 	bl	8000790 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800057a:	f000 f8bf 	bl	80006fc <MX_LPUART1_UART_Init>
#else

  /* The board receives the message and sends it back */

  /*##-1- Put LPUART peripheral in reception process #########################*/
  if(HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 800057e:	2260      	movs	r2, #96	; 0x60
 8000580:	4926      	ldr	r1, [pc, #152]	; (800061c <main+0xb8>)
 8000582:	4827      	ldr	r0, [pc, #156]	; (8000620 <main+0xbc>)
 8000584:	f001 ff5a 	bl	800243c <HAL_UART_Receive_IT>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <main+0x2e>
  {
    Error_Handler();
 800058e:	f000 f969 	bl	8000864 <Error_Handler>
  }

  /*##-2- Wait for the end of the transfer ###################################*/
  while ((UartReady != SET)&&(UartError != SET))
 8000592:	bf00      	nop
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <main+0xc0>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b01      	cmp	r3, #1
 800059c:	d004      	beq.n	80005a8 <main+0x44>
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <main+0xc4>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d1f5      	bne.n	8000594 <main+0x30>
  {
  }

  /* Check there was no error */
  if(UartError == SET)
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <main+0xc4>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d101      	bne.n	80005b6 <main+0x52>
  {
    Error_Handler();
 80005b2:	f000 f957 	bl	8000864 <Error_Handler>
  }

  /* Reset transmission flag */
  UartReady = RESET;
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <main+0xc0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]

  /* Wait some ms for synchronization */
  HAL_Delay(100);
 80005bc:	2064      	movs	r0, #100	; 0x64
 80005be:	f000 faeb 	bl	8000b98 <HAL_Delay>

  /*##-3- Start the transmission process #####################################*/
  /* While the LPUART in reception process, user can transmit data through
     "aTxBuffer" buffer */
  if(HAL_UART_Transmit_IT(&hlpuart1, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 80005c2:	2260      	movs	r2, #96	; 0x60
 80005c4:	4919      	ldr	r1, [pc, #100]	; (800062c <main+0xc8>)
 80005c6:	4816      	ldr	r0, [pc, #88]	; (8000620 <main+0xbc>)
 80005c8:	f001 feb4 	bl	8002334 <HAL_UART_Transmit_IT>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <main+0x72>
  {
    Error_Handler();
 80005d2:	f000 f947 	bl	8000864 <Error_Handler>
  }

#endif /* TRANSMITTER_BOARD */

  /*##-4- Wait for the end of the transfer ###################################*/
  while ((UartReady != SET)&&(UartError != SET))
 80005d6:	bf00      	nop
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <main+0xc0>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d004      	beq.n	80005ec <main+0x88>
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <main+0xc4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d1f5      	bne.n	80005d8 <main+0x74>
  {
  }

  /* Check there was no error */
  if(UartError == SET)
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <main+0xc4>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d101      	bne.n	80005fa <main+0x96>
  {
    Error_Handler();
 80005f6:	f000 f935 	bl	8000864 <Error_Handler>
  }

  /* Reset transmission flag */
  UartReady = RESET;
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <main+0xc0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]

  /*##-5- Compare the sent and received buffers ##############################*/
  if(Buffercmp((uint8_t*)aTxBuffer,(uint8_t*)aRxBuffer,RXBUFFERSIZE))
 8000600:	2260      	movs	r2, #96	; 0x60
 8000602:	4906      	ldr	r1, [pc, #24]	; (800061c <main+0xb8>)
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <main+0xc8>)
 8000606:	f000 f90b 	bl	8000820 <Buffercmp>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <main+0xb0>
  {
    Error_Handler();
 8000610:	f000 f928 	bl	8000864 <Error_Handler>
  }

  /* Turn LED2 on: Transfer process is correct */
  BSP_LED_On(LED2);
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fa0d 	bl	8000a34 <BSP_LED_On>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061a:	e7fe      	b.n	800061a <main+0xb6>
 800061c:	20000124 	.word	0x20000124
 8000620:	20000094 	.word	0x20000094
 8000624:	20000090 	.word	0x20000090
 8000628:	20000091 	.word	0x20000091
 800062c:	20000000 	.word	0x20000000

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0a4      	sub	sp, #144	; 0x90
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800063a:	2238      	movs	r2, #56	; 0x38
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fbe8 	bl	8003e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	2244      	movs	r2, #68	; 0x44
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fbda 	bl	8003e14 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fe3f 	bl	80012e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000666:	2302      	movs	r3, #2
 8000668:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2340      	movs	r3, #64	; 0x40
 8000672:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800067c:	2304      	movs	r3, #4
 800067e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000680:	2355      	movs	r3, #85	; 0x55
 8000682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fed5 	bl	800144c <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006a8:	f000 f8dc 	bl	8000864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2303      	movs	r3, #3
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f9d8 	bl	8001a7c <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006d2:	f000 f8c7 	bl	8000864 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80006d6:	2320      	movs	r3, #32
 80006d8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80006da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006de:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fbe6 	bl	8001eb4 <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 f8b9 	bl	8000864 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3790      	adds	r7, #144	; 0x90
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <MX_LPUART1_UART_Init+0x90>)
 8000704:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800073e:	4812      	ldr	r0, [pc, #72]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	f001 fda8 	bl	8002294 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f88b 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074e:	2100      	movs	r1, #0
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000752:	f003 fa70 	bl	8003c36 <HAL_UARTEx_SetTxFifoThreshold>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800075c:	f000 f882 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000760:	2100      	movs	r1, #0
 8000762:	4809      	ldr	r0, [pc, #36]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	f003 faa5 	bl	8003cb2 <HAL_UARTEx_SetRxFifoThreshold>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800076e:	f000 f879 	bl	8000864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000774:	f003 fa26 	bl	8003bc4 <HAL_UARTEx_DisableFifoMode>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800077e:	f000 f871 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000094 	.word	0x20000094
 800078c:	40008000 	.word	0x40008000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_GPIO_Init+0x2c>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <MX_GPIO_Init+0x2c>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_GPIO_Init+0x2c>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <HAL_UART_TxCpltCallback+0x1c>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000090 	.word	0x20000090

080007e0 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <HAL_UART_RxCpltCallback+0x1c>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000090 	.word	0x20000090

08000800 <HAL_UART_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Set error flag */
  UartError = SET;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <HAL_UART_ErrorCallback+0x1c>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000091 	.word	0x20000091

08000820 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	4613      	mov	r3, r2
 800082c:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 800082e:	e00d      	b.n	800084c <Buffercmp+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	781a      	ldrb	r2, [r3, #0]
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	429a      	cmp	r2, r3
 800083a:	d001      	beq.n	8000840 <Buffercmp+0x20>
    {
      return BufferLength;
 800083c:	88fb      	ldrh	r3, [r7, #6]
 800083e:	e00b      	b.n	8000858 <Buffercmp+0x38>
    }
    pBuffer1++;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	3301      	adds	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	3301      	adds	r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 800084c:	88fb      	ldrh	r3, [r7, #6]
 800084e:	1e5a      	subs	r2, r3, #1
 8000850:	80fa      	strh	r2, [r7, #6]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1ec      	bne.n	8000830 <Buffercmp+0x10>
  }

  return 0;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    /* Error if LED2 is slowly blinking (1 sec. period) */
    BSP_LED_Toggle(LED2);
 8000868:	2000      	movs	r0, #0
 800086a:	f000 f8f9 	bl	8000a60 <BSP_LED_Toggle>
    HAL_Delay(1000);
 800086e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000872:	f000 f991 	bl	8000b98 <HAL_Delay>
    BSP_LED_Toggle(LED2);
 8000876:	e7f7      	b.n	8000868 <Error_Handler+0x4>

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_MspInit+0x44>)
 8000880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_MspInit+0x44>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6613      	str	r3, [r2, #96]	; 0x60
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_MspInit+0x44>)
 800088c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x44>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_MspInit+0x44>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6593      	str	r3, [r2, #88]	; 0x58
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_MspInit+0x44>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ae:	f000 fdbd 	bl	800142c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <HAL_UART_MspInit+0x8c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d12f      	bne.n	8000942 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <HAL_UART_MspInit+0x90>)
 80008e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008e6:	4a1a      	ldr	r2, [pc, #104]	; (8000950 <HAL_UART_MspInit+0x90>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <HAL_UART_MspInit+0x90>)
 80008f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_UART_MspInit+0x90>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a14      	ldr	r2, [pc, #80]	; (8000950 <HAL_UART_MspInit+0x90>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_UART_MspInit+0x90>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000912:	2303      	movs	r3, #3
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091a:	2301      	movs	r3, #1
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000922:	2308      	movs	r3, #8
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <HAL_UART_MspInit+0x94>)
 800092e:	f000 fb25 	bl	8000f7c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2101      	movs	r1, #1
 8000936:	205b      	movs	r0, #91	; 0x5b
 8000938:	f000 fa2b 	bl	8000d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800093c:	205b      	movs	r0, #91	; 0x5b
 800093e:	f000 fa42 	bl	8000dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	; 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40008000 	.word	0x40008000
 8000950:	40021000 	.word	0x40021000
 8000954:	48000800 	.word	0x48000800

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f8d6 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <LPUART1_IRQHandler+0x10>)
 80009ba:	f001 fd85 	bl	80024c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000094 	.word	0x20000094

080009c8 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <BSP_LED_Init+0x64>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <BSP_LED_Init+0x64>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <BSP_LED_Init+0x64>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80009ea:	2320      	movs	r3, #32
 80009ec:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <BSP_LED_Init+0x68>)
 80009fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a02:	f107 020c 	add.w	r2, r7, #12
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 fab7 	bl	8000f7c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <BSP_LED_Init+0x68>)
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	2120      	movs	r1, #32
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fc30 	bl	8001280 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	20000064 	.word	0x20000064

08000a34 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <BSP_LED_On+0x28>)
 8000a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a46:	2120      	movs	r1, #32
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fc18 	bl	8001280 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000064 	.word	0x20000064

08000a60 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <BSP_LED_Toggle+0x28>)
 8000a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a72:	2220      	movs	r2, #32
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fc1a 	bl	80012b0 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000064 	.word	0x20000064

08000a8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <SystemInit+0x28>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a96:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <SystemInit+0x28>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SystemInit+0x28>)
 8000aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa6:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f000 f95a 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f000 f80d 	bl	8000ae8 <HAL_InitTick>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	e001      	b.n	8000ade <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ada:	f7ff fecd 	bl	8000878 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ade:	79fb      	ldrb	r3, [r7, #7]

}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_InitTick+0x68>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d022      	beq.n	8000b42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_InitTick+0x6c>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_InitTick+0x68>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f966 	bl	8000de2 <HAL_SYSTICK_Config>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10f      	bne.n	8000b3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b0f      	cmp	r3, #15
 8000b20:	d809      	bhi.n	8000b36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b22:	2200      	movs	r2, #0
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2a:	f000 f932 	bl	8000d92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_InitTick+0x70>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	e007      	b.n	8000b46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	73fb      	strb	r3, [r7, #15]
 8000b3a:	e004      	b.n	8000b46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e001      	b.n	8000b46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000070 	.word	0x20000070
 8000b54:	20000068 	.word	0x20000068
 8000b58:	2000006c 	.word	0x2000006c

08000b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_IncTick+0x1c>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_IncTick+0x20>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <HAL_IncTick+0x1c>)
 8000b6c:	6013      	str	r3, [r2, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	20000184 	.word	0x20000184
 8000b7c:	20000070 	.word	0x20000070

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000184 	.word	0x20000184

08000b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff ffee 	bl	8000b80 <HAL_GetTick>
 8000ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb0:	d004      	beq.n	8000bbc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_Delay+0x40>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bbc:	bf00      	nop
 8000bbe:	f7ff ffdf 	bl	8000b80 <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d8f7      	bhi.n	8000bbe <HAL_Delay+0x26>
  {
  }
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000070 	.word	0x20000070

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff29 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da0:	f7ff ff40 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000da4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff ff90 	bl	8000cd0 <NVIC_EncodePriority>
 8000db0:	4602      	mov	r2, r0
 8000db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff5f 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff33 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffa4 	bl	8000d38 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d005      	beq.n	8000e1e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2204      	movs	r2, #4
 8000e16:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
 8000e1c:	e037      	b.n	8000e8e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 020e 	bic.w	r2, r2, #14
 8000e2c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e3c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0201 	bic.w	r2, r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f003 021f 	and.w	r2, r3, #31
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e60:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e6a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00c      	beq.n	8000e8e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e82:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e8c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d00d      	beq.n	8000ee0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e047      	b.n	8000f70 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 020e 	bic.w	r2, r2, #14
 8000eee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0201 	bic.w	r2, r2, #1
 8000efe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f22:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f2c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00c      	beq.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f4e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	4798      	blx	r3
    }
  }
  return status;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f8a:	e15a      	b.n	8001242 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2101      	movs	r1, #1
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 814c 	beq.w	800123c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d00b      	beq.n	8000fc4 <HAL_GPIO_Init+0x48>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d007      	beq.n	8000fc4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb8:	2b11      	cmp	r3, #17
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b12      	cmp	r3, #18
 8000fc2:	d130      	bne.n	8001026 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	f003 0201 	and.w	r2, r3, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0xea>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b12      	cmp	r3, #18
 8001064:	d123      	bne.n	80010ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	691a      	ldr	r2, [r3, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	6939      	ldr	r1, [r7, #16]
 80010aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0203 	and.w	r2, r3, #3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 80a6 	beq.w	800123c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	4b5b      	ldr	r3, [pc, #364]	; (8001260 <HAL_GPIO_Init+0x2e4>)
 80010f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f4:	4a5a      	ldr	r2, [pc, #360]	; (8001260 <HAL_GPIO_Init+0x2e4>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6613      	str	r3, [r2, #96]	; 0x60
 80010fc:	4b58      	ldr	r3, [pc, #352]	; (8001260 <HAL_GPIO_Init+0x2e4>)
 80010fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001108:	4a56      	ldr	r2, [pc, #344]	; (8001264 <HAL_GPIO_Init+0x2e8>)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001132:	d01f      	beq.n	8001174 <HAL_GPIO_Init+0x1f8>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a4c      	ldr	r2, [pc, #304]	; (8001268 <HAL_GPIO_Init+0x2ec>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d019      	beq.n	8001170 <HAL_GPIO_Init+0x1f4>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a4b      	ldr	r2, [pc, #300]	; (800126c <HAL_GPIO_Init+0x2f0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d013      	beq.n	800116c <HAL_GPIO_Init+0x1f0>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a4a      	ldr	r2, [pc, #296]	; (8001270 <HAL_GPIO_Init+0x2f4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d00d      	beq.n	8001168 <HAL_GPIO_Init+0x1ec>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a49      	ldr	r2, [pc, #292]	; (8001274 <HAL_GPIO_Init+0x2f8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d007      	beq.n	8001164 <HAL_GPIO_Init+0x1e8>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a48      	ldr	r2, [pc, #288]	; (8001278 <HAL_GPIO_Init+0x2fc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d101      	bne.n	8001160 <HAL_GPIO_Init+0x1e4>
 800115c:	2305      	movs	r3, #5
 800115e:	e00a      	b.n	8001176 <HAL_GPIO_Init+0x1fa>
 8001160:	2306      	movs	r3, #6
 8001162:	e008      	b.n	8001176 <HAL_GPIO_Init+0x1fa>
 8001164:	2304      	movs	r3, #4
 8001166:	e006      	b.n	8001176 <HAL_GPIO_Init+0x1fa>
 8001168:	2303      	movs	r3, #3
 800116a:	e004      	b.n	8001176 <HAL_GPIO_Init+0x1fa>
 800116c:	2302      	movs	r3, #2
 800116e:	e002      	b.n	8001176 <HAL_GPIO_Init+0x1fa>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_GPIO_Init+0x1fa>
 8001174:	2300      	movs	r3, #0
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	f002 0203 	and.w	r2, r2, #3
 800117c:	0092      	lsls	r2, r2, #2
 800117e:	4093      	lsls	r3, r2
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001186:	4937      	ldr	r1, [pc, #220]	; (8001264 <HAL_GPIO_Init+0x2e8>)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <HAL_GPIO_Init+0x300>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b8:	4a30      	ldr	r2, [pc, #192]	; (800127c <HAL_GPIO_Init+0x300>)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011be:	4b2f      	ldr	r3, [pc, #188]	; (800127c <HAL_GPIO_Init+0x300>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011e2:	4a26      	ldr	r2, [pc, #152]	; (800127c <HAL_GPIO_Init+0x300>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_GPIO_Init+0x300>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <HAL_GPIO_Init+0x300>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_GPIO_Init+0x300>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <HAL_GPIO_Init+0x300>)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	f47f ae9d 	bne.w	8000f8c <HAL_GPIO_Init+0x10>
  }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000
 8001268:	48000400 	.word	0x48000400
 800126c:	48000800 	.word	0x48000800
 8001270:	48000c00 	.word	0x48000c00
 8001274:	48001000 	.word	0x48001000
 8001278:	48001400 	.word	0x48001400
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	041a      	lsls	r2, r3, #16
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43d9      	mvns	r1, r3
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	400b      	ands	r3, r1
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d141      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012f2:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fe:	d131      	bne.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001300:	4b47      	ldr	r3, [pc, #284]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001306:	4a46      	ldr	r2, [pc, #280]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800130c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001310:	4b43      	ldr	r3, [pc, #268]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001318:	4a41      	ldr	r2, [pc, #260]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001320:	4b40      	ldr	r3, [pc, #256]	; (8001424 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2232      	movs	r2, #50	; 0x32
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	4a3f      	ldr	r2, [pc, #252]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	0c9b      	lsrs	r3, r3, #18
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001336:	e002      	b.n	800133e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800133e:	4b38      	ldr	r3, [pc, #224]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134a:	d102      	bne.n	8001352 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f2      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001352:	4b33      	ldr	r3, [pc, #204]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800135e:	d158      	bne.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e057      	b.n	8001414 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800136a:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001370:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001374:	e04d      	b.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800137c:	d141      	bne.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d131      	bne.n	80013f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001392:	4a23      	ldr	r2, [pc, #140]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001398:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2232      	movs	r2, #50	; 0x32
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013b8:	fba2 2303 	umull	r2, r3, r2, r3
 80013bc:	0c9b      	lsrs	r3, r3, #18
 80013be:	3301      	adds	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c2:	e002      	b.n	80013ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d6:	d102      	bne.n	80013de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f2      	bne.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ea:	d112      	bne.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e011      	b.n	8001414 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001400:	e007      	b.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001410:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40007000 	.word	0x40007000
 8001424:	20000068 	.word	0x20000068
 8001428:	431bde83 	.word	0x431bde83

0800142c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143a:	6093      	str	r3, [r2, #8]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40007000 	.word	0x40007000

0800144c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e308      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d075      	beq.n	8001556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146a:	4ba3      	ldr	r3, [pc, #652]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001474:	4ba0      	ldr	r3, [pc, #640]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b0c      	cmp	r3, #12
 8001482:	d102      	bne.n	800148a <HAL_RCC_OscConfig+0x3e>
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d002      	beq.n	8001490 <HAL_RCC_OscConfig+0x44>
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b08      	cmp	r3, #8
 800148e:	d10b      	bne.n	80014a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	4b99      	ldr	r3, [pc, #612]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d05b      	beq.n	8001554 <HAL_RCC_OscConfig+0x108>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d157      	bne.n	8001554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e2e3      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x74>
 80014b2:	4b91      	ldr	r3, [pc, #580]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a90      	ldr	r2, [pc, #576]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e01d      	b.n	80014fc <HAL_RCC_OscConfig+0xb0>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x98>
 80014ca:	4b8b      	ldr	r3, [pc, #556]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a8a      	ldr	r2, [pc, #552]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a87      	ldr	r2, [pc, #540]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0xb0>
 80014e4:	4b84      	ldr	r3, [pc, #528]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a83      	ldr	r2, [pc, #524]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a80      	ldr	r2, [pc, #512]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fb3c 	bl	8000b80 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fb38 	bl	8000b80 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e2a8      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151e:	4b76      	ldr	r3, [pc, #472]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0xc0>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fb28 	bl	8000b80 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fb24 	bl	8000b80 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e294      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0xe8>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d075      	beq.n	800164e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001562:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800156c:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b0c      	cmp	r3, #12
 800157a:	d102      	bne.n	8001582 <HAL_RCC_OscConfig+0x136>
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d002      	beq.n	8001588 <HAL_RCC_OscConfig+0x13c>
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b04      	cmp	r3, #4
 8001586:	d11f      	bne.n	80015c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001588:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x154>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e267      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	4952      	ldr	r1, [pc, #328]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015b4:	4b51      	ldr	r3, [pc, #324]	; (80016fc <HAL_RCC_OscConfig+0x2b0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fa95 	bl	8000ae8 <HAL_InitTick>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d043      	beq.n	800164c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e253      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d023      	beq.n	8001618 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a48      	ldr	r2, [pc, #288]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fad0 	bl	8000b80 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff facc 	bl	8000b80 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e23c      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f6:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b3d      	ldr	r3, [pc, #244]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	061b      	lsls	r3, r3, #24
 8001610:	4939      	ldr	r1, [pc, #228]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
 8001616:	e01a      	b.n	800164e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001618:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a36      	ldr	r2, [pc, #216]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 800161e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff faac 	bl	8000b80 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162c:	f7ff faa8 	bl	8000b80 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e218      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800163e:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x1e0>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d03c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d01c      	beq.n	800169c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001668:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff fa85 	bl	8000b80 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167a:	f7ff fa81 	bl	8000b80 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1f1      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0ef      	beq.n	800167a <HAL_RCC_OscConfig+0x22e>
 800169a:	e01b      	b.n	80016d4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 800169e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fa68 	bl	8000b80 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fa64 	bl	8000b80 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1d4      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ef      	bne.n	80016b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80ab 	beq.w	8001838 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_OscConfig+0x2b4>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e005      	b.n	8001702 <HAL_RCC_OscConfig+0x2b6>
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	2000006c 	.word	0x2000006c
 8001700:	2300      	movs	r3, #0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00d      	beq.n	8001722 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4baf      	ldr	r3, [pc, #700]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	4aae      	ldr	r2, [pc, #696]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6593      	str	r3, [r2, #88]	; 0x58
 8001712:	4bac      	ldr	r3, [pc, #688]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800171e:	2301      	movs	r3, #1
 8001720:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001722:	4ba9      	ldr	r3, [pc, #676]	; (80019c8 <HAL_RCC_OscConfig+0x57c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d118      	bne.n	8001760 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800172e:	4ba6      	ldr	r3, [pc, #664]	; (80019c8 <HAL_RCC_OscConfig+0x57c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4aa5      	ldr	r2, [pc, #660]	; (80019c8 <HAL_RCC_OscConfig+0x57c>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173a:	f7ff fa21 	bl	8000b80 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001742:	f7ff fa1d 	bl	8000b80 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e18d      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001754:	4b9c      	ldr	r3, [pc, #624]	; (80019c8 <HAL_RCC_OscConfig+0x57c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d108      	bne.n	800177a <HAL_RCC_OscConfig+0x32e>
 8001768:	4b96      	ldr	r3, [pc, #600]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176e:	4a95      	ldr	r2, [pc, #596]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001778:	e024      	b.n	80017c4 <HAL_RCC_OscConfig+0x378>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d110      	bne.n	80017a4 <HAL_RCC_OscConfig+0x358>
 8001782:	4b90      	ldr	r3, [pc, #576]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001788:	4a8e      	ldr	r2, [pc, #568]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001792:	4b8c      	ldr	r3, [pc, #560]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001798:	4a8a      	ldr	r2, [pc, #552]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a2:	e00f      	b.n	80017c4 <HAL_RCC_OscConfig+0x378>
 80017a4:	4b87      	ldr	r3, [pc, #540]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017aa:	4a86      	ldr	r2, [pc, #536]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b4:	4b83      	ldr	r3, [pc, #524]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ba:	4a82      	ldr	r2, [pc, #520]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d016      	beq.n	80017fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff f9d8 	bl	8000b80 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff f9d4 	bl	8000b80 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e142      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ea:	4b76      	ldr	r3, [pc, #472]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80017ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0ed      	beq.n	80017d4 <HAL_RCC_OscConfig+0x388>
 80017f8:	e015      	b.n	8001826 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff f9c1 	bl	8000b80 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7ff f9bd 	bl	8000b80 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e12b      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001818:	4b6a      	ldr	r3, [pc, #424]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1ed      	bne.n	8001802 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182c:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001830:	4a64      	ldr	r2, [pc, #400]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001836:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0320 	and.w	r3, r3, #32
 8001840:	2b00      	cmp	r3, #0
 8001842:	d03c      	beq.n	80018be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01c      	beq.n	8001886 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800184c:	4b5d      	ldr	r3, [pc, #372]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800184e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001852:	4a5c      	ldr	r2, [pc, #368]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff f990 	bl	8000b80 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001864:	f7ff f98c 	bl	8000b80 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0fc      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001876:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001878:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ef      	beq.n	8001864 <HAL_RCC_OscConfig+0x418>
 8001884:	e01b      	b.n	80018be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001886:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800188c:	4a4d      	ldr	r2, [pc, #308]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff f973 	bl	8000b80 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800189e:	f7ff f96f 	bl	8000b80 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0df      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b0:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80018b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ef      	bne.n	800189e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80d3 	beq.w	8001a6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018c8:	4b3e      	ldr	r3, [pc, #248]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	f000 808d 	beq.w	80019f0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d15a      	bne.n	8001994 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a38      	ldr	r2, [pc, #224]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80018e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff f949 	bl	8000b80 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f2:	f7ff f945 	bl	8000b80 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0b5      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001910:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_RCC_OscConfig+0x580>)
 8001916:	4013      	ands	r3, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6a11      	ldr	r1, [r2, #32]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001920:	3a01      	subs	r2, #1
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	4311      	orrs	r1, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800192a:	0212      	lsls	r2, r2, #8
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001932:	0852      	lsrs	r2, r2, #1
 8001934:	3a01      	subs	r2, #1
 8001936:	0552      	lsls	r2, r2, #21
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800193e:	0852      	lsrs	r2, r2, #1
 8001940:	3a01      	subs	r2, #1
 8001942:	0652      	lsls	r2, r2, #25
 8001944:	4311      	orrs	r1, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800194a:	06d2      	lsls	r2, r2, #27
 800194c:	430a      	orrs	r2, r1
 800194e:	491d      	ldr	r1, [pc, #116]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001950:	4313      	orrs	r3, r2
 8001952:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800195a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff f908 	bl	8000b80 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f904 	bl	8000b80 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e074      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x528>
 8001992:	e06c      	b.n	8001a6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 800199a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800199e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80019a6:	f023 0303 	bic.w	r3, r3, #3
 80019aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_RCC_OscConfig+0x578>)
 80019b2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f8e0 	bl	8000b80 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c2:	e00e      	b.n	80019e2 <HAL_RCC_OscConfig+0x596>
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40007000 	.word	0x40007000
 80019cc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f8d6 	bl	8000b80 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e046      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_RCC_OscConfig+0x62c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x584>
 80019ee:	e03e      	b.n	8001a6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e039      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_RCC_OscConfig+0x62c>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d12c      	bne.n	8001a6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d123      	bne.n	8001a6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d11b      	bne.n	8001a6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d113      	bne.n	8001a6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d109      	bne.n	8001a6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a60:	085b      	lsrs	r3, r3, #1
 8001a62:	3b01      	subs	r3, #1
 8001a64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000

08001a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e11e      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a94:	4b91      	ldr	r3, [pc, #580]	; (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d910      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b8e      	ldr	r3, [pc, #568]	; (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 020f 	bic.w	r2, r3, #15
 8001aaa:	498c      	ldr	r1, [pc, #560]	; (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b8a      	ldr	r3, [pc, #552]	; (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e106      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d073      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d129      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad8:	4b81      	ldr	r3, [pc, #516]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0f4      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ae8:	f000 f99e 	bl	8001e28 <RCC_GetSysClockFreqFromPLLSource>
 8001aec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4a7c      	ldr	r2, [pc, #496]	; (8001ce4 <HAL_RCC_ClockConfig+0x268>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d93f      	bls.n	8001b76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001af6:	4b7a      	ldr	r3, [pc, #488]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d033      	beq.n	8001b76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d12f      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b16:	4b72      	ldr	r3, [pc, #456]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b1e:	4a70      	ldr	r2, [pc, #448]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e024      	b.n	8001b76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b34:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0c6      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b44:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0be      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b54:	f000 f8ce 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4a61      	ldr	r2, [pc, #388]	; (8001ce4 <HAL_RCC_ClockConfig+0x268>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d909      	bls.n	8001b76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b62:	4b5f      	ldr	r3, [pc, #380]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b6a:	4a5d      	ldr	r2, [pc, #372]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b5a      	ldr	r3, [pc, #360]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4957      	ldr	r1, [pc, #348]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b88:	f7fe fffa 	bl	8000b80 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7fe fff6 	bl	8000b80 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e095      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 020c 	and.w	r2, r3, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1eb      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d023      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd0:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a42      	ldr	r2, [pc, #264]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001bd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001be8:	4b3d      	ldr	r3, [pc, #244]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001bf0:	4a3b      	ldr	r2, [pc, #236]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4936      	ldr	r1, [pc, #216]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b80      	cmp	r3, #128	; 0x80
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c12:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	4a32      	ldr	r2, [pc, #200]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001c18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d21d      	bcs.n	8001c68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2c:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 020f 	bic.w	r2, r3, #15
 8001c34:	4929      	ldr	r1, [pc, #164]	; (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c3c:	f7fe ffa0 	bl	8000b80 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7fe ff9c 	bl	8000b80 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e03b      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_RCC_ClockConfig+0x260>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d1ed      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4917      	ldr	r1, [pc, #92]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	490f      	ldr	r1, [pc, #60]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ca6:	f000 f825 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001caa:	4602      	mov	r2, r0
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_RCC_ClockConfig+0x264>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	490c      	ldr	r1, [pc, #48]	; (8001ce8 <HAL_RCC_ClockConfig+0x26c>)
 8001cb8:	5ccb      	ldrb	r3, [r1, r3]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_RCC_ClockConfig+0x270>)
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_RCC_ClockConfig+0x274>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe ff0c 	bl	8000ae8 <HAL_InitTick>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40022000 	.word	0x40022000
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	04c4b400 	.word	0x04c4b400
 8001ce8:	08003e3c 	.word	0x08003e3c
 8001cec:	20000068 	.word	0x20000068
 8001cf0:	2000006c 	.word	0x2000006c

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d102      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d06:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	e047      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d18:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	e03e      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d1e:	4b23      	ldr	r3, [pc, #140]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d136      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3301      	adds	r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d10c      	bne.n	8001d62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d48:	4a1a      	ldr	r2, [pc, #104]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	4a16      	ldr	r2, [pc, #88]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d52:	68d2      	ldr	r2, [r2, #12]
 8001d54:	0a12      	lsrs	r2, r2, #8
 8001d56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
      break;
 8001d60:	e00c      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d62:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	4a10      	ldr	r2, [pc, #64]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6c:	68d2      	ldr	r2, [r2, #12]
 8001d6e:	0a12      	lsrs	r2, r2, #8
 8001d70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
      break;
 8001d7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0e5b      	lsrs	r3, r3, #25
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	3301      	adds	r3, #1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	e001      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d9c:	693b      	ldr	r3, [r7, #16]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	016e3600 	.word	0x016e3600

08001db8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000068 	.word	0x20000068

08001dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dd4:	f7ff fff0 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4904      	ldr	r1, [pc, #16]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	08003e4c 	.word	0x08003e4c

08001dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e00:	f7ff ffda 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	0adb      	lsrs	r3, r3, #11
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4904      	ldr	r1, [pc, #16]	; (8001e24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08003e4c 	.word	0x08003e4c

08001e28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3301      	adds	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d10c      	bne.n	8001e66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e4c:	4a17      	ldr	r2, [pc, #92]	; (8001eac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e56:	68d2      	ldr	r2, [r2, #12]
 8001e58:	0a12      	lsrs	r2, r2, #8
 8001e5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
    break;
 8001e64:	e00c      	b.n	8001e80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e70:	68d2      	ldr	r2, [r2, #12]
 8001e72:	0a12      	lsrs	r2, r2, #8
 8001e74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    break;
 8001e7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0e5b      	lsrs	r3, r3, #25
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e9a:	687b      	ldr	r3, [r7, #4]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	016e3600 	.word	0x016e3600
 8001eb0:	00f42400 	.word	0x00f42400

08001eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 8098 	beq.w	8002002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed6:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	4a3f      	ldr	r2, [pc, #252]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	; 0x58
 8001eee:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001efe:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a39      	ldr	r2, [pc, #228]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f0a:	f7fe fe39 	bl	8000b80 <HAL_GetTick>
 8001f0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f10:	e009      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f12:	f7fe fe35 	bl	8000b80 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d902      	bls.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	74fb      	strb	r3, [r7, #19]
        break;
 8001f24:	e005      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0ef      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f32:	7cfb      	ldrb	r3, [r7, #19]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d159      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f38:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01e      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d019      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f60:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f80:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7fe fdf5 	bl	8000b80 <HAL_GetTick>
 8001f96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f98:	e00b      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7fe fdf1 	bl	8000b80 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d902      	bls.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	74fb      	strb	r3, [r7, #19]
            break;
 8001fb0:	e006      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ec      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10b      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4903      	ldr	r1, [pc, #12]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fde:	7cfb      	ldrb	r3, [r7, #19]
 8001fe0:	74bb      	strb	r3, [r7, #18]
 8001fe2:	e005      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fec:	7cfb      	ldrb	r3, [r7, #19]
 8001fee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff0:	7c7b      	ldrb	r3, [r7, #17]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d105      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff6:	4ba6      	ldr	r3, [pc, #664]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	4aa5      	ldr	r2, [pc, #660]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002000:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800200e:	4ba0      	ldr	r3, [pc, #640]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002014:	f023 0203 	bic.w	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	499c      	ldr	r1, [pc, #624]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002030:	4b97      	ldr	r3, [pc, #604]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	f023 020c 	bic.w	r2, r3, #12
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	4994      	ldr	r1, [pc, #592]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002052:	4b8f      	ldr	r3, [pc, #572]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002058:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	498b      	ldr	r1, [pc, #556]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002074:	4b86      	ldr	r3, [pc, #536]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	4983      	ldr	r1, [pc, #524]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002096:	4b7e      	ldr	r3, [pc, #504]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	497a      	ldr	r1, [pc, #488]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020b8:	4b75      	ldr	r3, [pc, #468]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	4972      	ldr	r1, [pc, #456]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	4969      	ldr	r1, [pc, #420]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020fc:	4b64      	ldr	r3, [pc, #400]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4961      	ldr	r1, [pc, #388]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800211e:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	4958      	ldr	r1, [pc, #352]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	4950      	ldr	r1, [pc, #320]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800215e:	d105      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002160:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a4a      	ldr	r2, [pc, #296]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800216a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002174:	2b00      	cmp	r3, #0
 8002176:	d015      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002178:	4b45      	ldr	r3, [pc, #276]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	4942      	ldr	r1, [pc, #264]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002196:	d105      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a3c      	ldr	r2, [pc, #240]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d015      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021b0:	4b37      	ldr	r3, [pc, #220]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4934      	ldr	r1, [pc, #208]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ce:	d105      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a2e      	ldr	r2, [pc, #184]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d015      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f6:	4926      	ldr	r1, [pc, #152]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002206:	d105      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4a20      	ldr	r2, [pc, #128]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002212:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d015      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	4918      	ldr	r1, [pc, #96]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800223e:	d105      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4a12      	ldr	r2, [pc, #72]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800224a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	490a      	ldr	r1, [pc, #40]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002276:	d105      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002282:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002284:	7cbb      	ldrb	r3, [r7, #18]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000

08002294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e042      	b.n	800232c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d106      	bne.n	80022be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7fe fb01 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2224      	movs	r2, #36	; 0x24
 80022c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fb36 	bl	8002948 <UART_SetConfig>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e022      	b.n	800232c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fdc8 	bl	8002e84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fe4f 	bl	8002fc8 <UART_CheckIdleState>
 800232a:	4603      	mov	r3, r0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002348:	2b20      	cmp	r3, #32
 800234a:	d168      	bne.n	800241e <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_UART_Transmit_IT+0x24>
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e061      	b.n	8002420 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_UART_Transmit_IT+0x36>
 8002366:	2302      	movs	r3, #2
 8002368:	e05a      	b.n	8002420 <HAL_UART_Transmit_IT+0xec>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	88fa      	ldrh	r2, [r7, #6]
 800237c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2221      	movs	r2, #33	; 0x21
 800239a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023a6:	d11c      	bne.n	80023e2 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b0:	d107      	bne.n	80023c2 <HAL_UART_Transmit_IT+0x8e>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d103      	bne.n	80023c2 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a1b      	ldr	r2, [pc, #108]	; (800242c <HAL_UART_Transmit_IT+0xf8>)
 80023be:	675a      	str	r2, [r3, #116]	; 0x74
 80023c0:	e002      	b.n	80023c8 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <HAL_UART_Transmit_IT+0xfc>)
 80023c6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	e01b      	b.n	800241a <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ea:	d107      	bne.n	80023fc <HAL_UART_Transmit_IT+0xc8>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d103      	bne.n	80023fc <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_UART_Transmit_IT+0x100>)
 80023f8:	675a      	str	r2, [r3, #116]	; 0x74
 80023fa:	e002      	b.n	8002402 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <HAL_UART_Transmit_IT+0x104>)
 8002400:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002418:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e000      	b.n	8002420 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800241e:	2302      	movs	r3, #2
  }
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	080034f9 	.word	0x080034f9
 8002430:	0800345f 	.word	0x0800345f
 8002434:	080033e1 	.word	0x080033e1
 8002438:	0800336d 	.word	0x0800336d

0800243c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002450:	2b20      	cmp	r3, #32
 8002452:	d131      	bne.n	80024b8 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_UART_Receive_IT+0x24>
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e02a      	b.n	80024ba <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_UART_Receive_IT+0x36>
 800246e:	2302      	movs	r3, #2
 8002470:	e023      	b.n	80024ba <HAL_UART_Receive_IT+0x7e>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <HAL_UART_Receive_IT+0x88>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00e      	beq.n	80024a8 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024a6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	461a      	mov	r2, r3
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fe56 	bl	8003160 <UART_Start_Receive_IT>
 80024b4:	4603      	mov	r3, r0
 80024b6:	e000      	b.n	80024ba <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40008000 	.word	0x40008000

080024c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d118      	bne.n	800252a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d013      	beq.n	800252a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d104      	bne.n	8002516 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 81fb 	beq.w	8002916 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4798      	blx	r3
      }
      return;
 8002528:	e1f5      	b.n	8002916 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80ef 	beq.w	8002710 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4b73      	ldr	r3, [pc, #460]	; (8002704 <HAL_UART_IRQHandler+0x23c>)
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4b72      	ldr	r3, [pc, #456]	; (8002708 <HAL_UART_IRQHandler+0x240>)
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80e4 	beq.w	8002710 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_UART_IRQHandler+0xac>
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2201      	movs	r2, #1
 8002562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d010      	beq.n	80025a0 <HAL_UART_IRQHandler+0xd8>
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00b      	beq.n	80025a0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2202      	movs	r2, #2
 800258e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002596:	f043 0204 	orr.w	r2, r3, #4
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d010      	beq.n	80025cc <HAL_UART_IRQHandler+0x104>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00b      	beq.n	80025cc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2204      	movs	r2, #4
 80025ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025c2:	f043 0202 	orr.w	r2, r3, #2
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d015      	beq.n	8002602 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4b48      	ldr	r3, [pc, #288]	; (8002704 <HAL_UART_IRQHandler+0x23c>)
 80025e4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2208      	movs	r2, #8
 80025f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f8:	f043 0208 	orr.w	r2, r3, #8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002608:	2b00      	cmp	r3, #0
 800260a:	d011      	beq.n	8002630 <HAL_UART_IRQHandler+0x168>
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00c      	beq.n	8002630 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800261e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 816f 	beq.w	800291a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b00      	cmp	r3, #0
 8002644:	d011      	beq.n	800266a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d104      	bne.n	800265a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002670:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d004      	beq.n	800268a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002686:	2b00      	cmp	r3, #0
 8002688:	d031      	beq.n	80026ee <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fe26 	bl	80032dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	d123      	bne.n	80026e6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d013      	beq.n	80026de <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ba:	4a14      	ldr	r2, [pc, #80]	; (800270c <HAL_UART_IRQHandler+0x244>)
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fbf2 	bl	8000eac <HAL_DMA_Abort_IT>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d017      	beq.n	80026fe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80026d8:	4610      	mov	r0, r2
 80026da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	e00f      	b.n	80026fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe f88e 	bl	8000800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e4:	e00b      	b.n	80026fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe f88a 	bl	8000800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ec:	e007      	b.n	80026fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe f886 	bl	8000800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80026fc:	e10d      	b.n	800291a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026fe:	bf00      	nop
    return;
 8002700:	e10b      	b.n	800291a <HAL_UART_IRQHandler+0x452>
 8002702:	bf00      	nop
 8002704:	10000001 	.word	0x10000001
 8002708:	04000120 	.word	0x04000120
 800270c:	08003341 	.word	0x08003341

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002714:	2b01      	cmp	r3, #1
 8002716:	f040 80ab 	bne.w	8002870 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80a5 	beq.w	8002870 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 809f 	beq.w	8002870 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2210      	movs	r2, #16
 8002738:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002744:	2b40      	cmp	r3, #64	; 0x40
 8002746:	d155      	bne.n	80027f4 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002752:	893b      	ldrh	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80e2 	beq.w	800291e <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002760:	893a      	ldrh	r2, [r7, #8]
 8002762:	429a      	cmp	r2, r3
 8002764:	f080 80db 	bcs.w	800291e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	893a      	ldrh	r2, [r7, #8]
 800276c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d12b      	bne.n	80027d8 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800278e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ae:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0210 	bic.w	r2, r2, #16
 80027cc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fb11 	bl	8000dfa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f89f 	bl	8002930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027f2:	e094      	b.n	800291e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002800:	b29b      	uxth	r3, r3
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8087 	beq.w	8002922 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002814:	897b      	ldrh	r3, [r7, #10]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8083 	beq.w	8002922 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800282a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0210 	bic.w	r2, r2, #16
 8002862:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002864:	897b      	ldrh	r3, [r7, #10]
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f861 	bl	8002930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800286e:	e058      	b.n	8002922 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00d      	beq.n	8002896 <HAL_UART_IRQHandler+0x3ce>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800288c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f001 f97a 	bl	8003b88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002894:	e048      	b.n	8002928 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289c:	2b00      	cmp	r3, #0
 800289e:	d012      	beq.n	80028c6 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d034      	beq.n	8002926 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
    }
    return;
 80028c4:	e02f      	b.n	8002926 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_UART_IRQHandler+0x41a>
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fe5e 	bl	800359c <UART_EndTransmit_IT>
    return;
 80028e0:	e022      	b.n	8002928 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_UART_IRQHandler+0x436>
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f001 f95a 	bl	8003bb0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80028fc:	e014      	b.n	8002928 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00f      	beq.n	8002928 <HAL_UART_IRQHandler+0x460>
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	da0c      	bge.n	8002928 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f001 f944 	bl	8003b9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002914:	e008      	b.n	8002928 <HAL_UART_IRQHandler+0x460>
      return;
 8002916:	bf00      	nop
 8002918:	e006      	b.n	8002928 <HAL_UART_IRQHandler+0x460>
    return;
 800291a:	bf00      	nop
 800291c:	e004      	b.n	8002928 <HAL_UART_IRQHandler+0x460>
      return;
 800291e:	bf00      	nop
 8002920:	e002      	b.n	8002928 <HAL_UART_IRQHandler+0x460>
      return;
 8002922:	bf00      	nop
 8002924:	e000      	b.n	8002928 <HAL_UART_IRQHandler+0x460>
    return;
 8002926:	bf00      	nop
  }
}
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop

08002930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002948:	b5b0      	push	{r4, r5, r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	4313      	orrs	r3, r2
 800296a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4baf      	ldr	r3, [pc, #700]	; (8002c30 <UART_SetConfig+0x2e8>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	69f9      	ldr	r1, [r7, #28]
 800297c:	430b      	orrs	r3, r1
 800297e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4aa4      	ldr	r2, [pc, #656]	; (8002c34 <UART_SetConfig+0x2ec>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d004      	beq.n	80029b0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80029ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	69f9      	ldr	r1, [r7, #28]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	f023 010f 	bic.w	r1, r3, #15
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a95      	ldr	r2, [pc, #596]	; (8002c38 <UART_SetConfig+0x2f0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d120      	bne.n	8002a2a <UART_SetConfig+0xe2>
 80029e8:	4b94      	ldr	r3, [pc, #592]	; (8002c3c <UART_SetConfig+0x2f4>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d816      	bhi.n	8002a24 <UART_SetConfig+0xdc>
 80029f6:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <UART_SetConfig+0xb4>)
 80029f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fc:	08002a0d 	.word	0x08002a0d
 8002a00:	08002a19 	.word	0x08002a19
 8002a04:	08002a13 	.word	0x08002a13
 8002a08:	08002a1f 	.word	0x08002a1f
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	76fb      	strb	r3, [r7, #27]
 8002a10:	e0bc      	b.n	8002b8c <UART_SetConfig+0x244>
 8002a12:	2302      	movs	r3, #2
 8002a14:	76fb      	strb	r3, [r7, #27]
 8002a16:	e0b9      	b.n	8002b8c <UART_SetConfig+0x244>
 8002a18:	2304      	movs	r3, #4
 8002a1a:	76fb      	strb	r3, [r7, #27]
 8002a1c:	e0b6      	b.n	8002b8c <UART_SetConfig+0x244>
 8002a1e:	2308      	movs	r3, #8
 8002a20:	76fb      	strb	r3, [r7, #27]
 8002a22:	e0b3      	b.n	8002b8c <UART_SetConfig+0x244>
 8002a24:	2310      	movs	r3, #16
 8002a26:	76fb      	strb	r3, [r7, #27]
 8002a28:	e0b0      	b.n	8002b8c <UART_SetConfig+0x244>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a84      	ldr	r2, [pc, #528]	; (8002c40 <UART_SetConfig+0x2f8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d132      	bne.n	8002a9a <UART_SetConfig+0x152>
 8002a34:	4b81      	ldr	r3, [pc, #516]	; (8002c3c <UART_SetConfig+0x2f4>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d828      	bhi.n	8002a94 <UART_SetConfig+0x14c>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <UART_SetConfig+0x100>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a7d 	.word	0x08002a7d
 8002a4c:	08002a95 	.word	0x08002a95
 8002a50:	08002a95 	.word	0x08002a95
 8002a54:	08002a95 	.word	0x08002a95
 8002a58:	08002a89 	.word	0x08002a89
 8002a5c:	08002a95 	.word	0x08002a95
 8002a60:	08002a95 	.word	0x08002a95
 8002a64:	08002a95 	.word	0x08002a95
 8002a68:	08002a83 	.word	0x08002a83
 8002a6c:	08002a95 	.word	0x08002a95
 8002a70:	08002a95 	.word	0x08002a95
 8002a74:	08002a95 	.word	0x08002a95
 8002a78:	08002a8f 	.word	0x08002a8f
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	76fb      	strb	r3, [r7, #27]
 8002a80:	e084      	b.n	8002b8c <UART_SetConfig+0x244>
 8002a82:	2302      	movs	r3, #2
 8002a84:	76fb      	strb	r3, [r7, #27]
 8002a86:	e081      	b.n	8002b8c <UART_SetConfig+0x244>
 8002a88:	2304      	movs	r3, #4
 8002a8a:	76fb      	strb	r3, [r7, #27]
 8002a8c:	e07e      	b.n	8002b8c <UART_SetConfig+0x244>
 8002a8e:	2308      	movs	r3, #8
 8002a90:	76fb      	strb	r3, [r7, #27]
 8002a92:	e07b      	b.n	8002b8c <UART_SetConfig+0x244>
 8002a94:	2310      	movs	r3, #16
 8002a96:	76fb      	strb	r3, [r7, #27]
 8002a98:	e078      	b.n	8002b8c <UART_SetConfig+0x244>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a69      	ldr	r2, [pc, #420]	; (8002c44 <UART_SetConfig+0x2fc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d120      	bne.n	8002ae6 <UART_SetConfig+0x19e>
 8002aa4:	4b65      	ldr	r3, [pc, #404]	; (8002c3c <UART_SetConfig+0x2f4>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002aae:	2b30      	cmp	r3, #48	; 0x30
 8002ab0:	d013      	beq.n	8002ada <UART_SetConfig+0x192>
 8002ab2:	2b30      	cmp	r3, #48	; 0x30
 8002ab4:	d814      	bhi.n	8002ae0 <UART_SetConfig+0x198>
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d009      	beq.n	8002ace <UART_SetConfig+0x186>
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d810      	bhi.n	8002ae0 <UART_SetConfig+0x198>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <UART_SetConfig+0x180>
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d006      	beq.n	8002ad4 <UART_SetConfig+0x18c>
 8002ac6:	e00b      	b.n	8002ae0 <UART_SetConfig+0x198>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	76fb      	strb	r3, [r7, #27]
 8002acc:	e05e      	b.n	8002b8c <UART_SetConfig+0x244>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	76fb      	strb	r3, [r7, #27]
 8002ad2:	e05b      	b.n	8002b8c <UART_SetConfig+0x244>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	76fb      	strb	r3, [r7, #27]
 8002ad8:	e058      	b.n	8002b8c <UART_SetConfig+0x244>
 8002ada:	2308      	movs	r3, #8
 8002adc:	76fb      	strb	r3, [r7, #27]
 8002ade:	e055      	b.n	8002b8c <UART_SetConfig+0x244>
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	76fb      	strb	r3, [r7, #27]
 8002ae4:	e052      	b.n	8002b8c <UART_SetConfig+0x244>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a57      	ldr	r2, [pc, #348]	; (8002c48 <UART_SetConfig+0x300>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d120      	bne.n	8002b32 <UART_SetConfig+0x1ea>
 8002af0:	4b52      	ldr	r3, [pc, #328]	; (8002c3c <UART_SetConfig+0x2f4>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002afa:	2bc0      	cmp	r3, #192	; 0xc0
 8002afc:	d013      	beq.n	8002b26 <UART_SetConfig+0x1de>
 8002afe:	2bc0      	cmp	r3, #192	; 0xc0
 8002b00:	d814      	bhi.n	8002b2c <UART_SetConfig+0x1e4>
 8002b02:	2b80      	cmp	r3, #128	; 0x80
 8002b04:	d009      	beq.n	8002b1a <UART_SetConfig+0x1d2>
 8002b06:	2b80      	cmp	r3, #128	; 0x80
 8002b08:	d810      	bhi.n	8002b2c <UART_SetConfig+0x1e4>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <UART_SetConfig+0x1cc>
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d006      	beq.n	8002b20 <UART_SetConfig+0x1d8>
 8002b12:	e00b      	b.n	8002b2c <UART_SetConfig+0x1e4>
 8002b14:	2300      	movs	r3, #0
 8002b16:	76fb      	strb	r3, [r7, #27]
 8002b18:	e038      	b.n	8002b8c <UART_SetConfig+0x244>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	76fb      	strb	r3, [r7, #27]
 8002b1e:	e035      	b.n	8002b8c <UART_SetConfig+0x244>
 8002b20:	2304      	movs	r3, #4
 8002b22:	76fb      	strb	r3, [r7, #27]
 8002b24:	e032      	b.n	8002b8c <UART_SetConfig+0x244>
 8002b26:	2308      	movs	r3, #8
 8002b28:	76fb      	strb	r3, [r7, #27]
 8002b2a:	e02f      	b.n	8002b8c <UART_SetConfig+0x244>
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	76fb      	strb	r3, [r7, #27]
 8002b30:	e02c      	b.n	8002b8c <UART_SetConfig+0x244>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a3f      	ldr	r2, [pc, #252]	; (8002c34 <UART_SetConfig+0x2ec>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d125      	bne.n	8002b88 <UART_SetConfig+0x240>
 8002b3c:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <UART_SetConfig+0x2f4>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b4a:	d017      	beq.n	8002b7c <UART_SetConfig+0x234>
 8002b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b50:	d817      	bhi.n	8002b82 <UART_SetConfig+0x23a>
 8002b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b56:	d00b      	beq.n	8002b70 <UART_SetConfig+0x228>
 8002b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5c:	d811      	bhi.n	8002b82 <UART_SetConfig+0x23a>
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <UART_SetConfig+0x222>
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b66:	d006      	beq.n	8002b76 <UART_SetConfig+0x22e>
 8002b68:	e00b      	b.n	8002b82 <UART_SetConfig+0x23a>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	76fb      	strb	r3, [r7, #27]
 8002b6e:	e00d      	b.n	8002b8c <UART_SetConfig+0x244>
 8002b70:	2302      	movs	r3, #2
 8002b72:	76fb      	strb	r3, [r7, #27]
 8002b74:	e00a      	b.n	8002b8c <UART_SetConfig+0x244>
 8002b76:	2304      	movs	r3, #4
 8002b78:	76fb      	strb	r3, [r7, #27]
 8002b7a:	e007      	b.n	8002b8c <UART_SetConfig+0x244>
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	76fb      	strb	r3, [r7, #27]
 8002b80:	e004      	b.n	8002b8c <UART_SetConfig+0x244>
 8002b82:	2310      	movs	r3, #16
 8002b84:	76fb      	strb	r3, [r7, #27]
 8002b86:	e001      	b.n	8002b8c <UART_SetConfig+0x244>
 8002b88:	2310      	movs	r3, #16
 8002b8a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a28      	ldr	r2, [pc, #160]	; (8002c34 <UART_SetConfig+0x2ec>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	f040 809e 	bne.w	8002cd4 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b98:	7efb      	ldrb	r3, [r7, #27]
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d823      	bhi.n	8002be6 <UART_SetConfig+0x29e>
 8002b9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <UART_SetConfig+0x25c>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002bc9 	.word	0x08002bc9
 8002ba8:	08002be7 	.word	0x08002be7
 8002bac:	08002bd1 	.word	0x08002bd1
 8002bb0:	08002be7 	.word	0x08002be7
 8002bb4:	08002bd7 	.word	0x08002bd7
 8002bb8:	08002be7 	.word	0x08002be7
 8002bbc:	08002be7 	.word	0x08002be7
 8002bc0:	08002be7 	.word	0x08002be7
 8002bc4:	08002bdf 	.word	0x08002bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bc8:	f7ff f902 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8002bcc:	6178      	str	r0, [r7, #20]
        break;
 8002bce:	e00f      	b.n	8002bf0 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <UART_SetConfig+0x304>)
 8002bd2:	617b      	str	r3, [r7, #20]
        break;
 8002bd4:	e00c      	b.n	8002bf0 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bd6:	f7ff f88d 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8002bda:	6178      	str	r0, [r7, #20]
        break;
 8002bdc:	e008      	b.n	8002bf0 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002be2:	617b      	str	r3, [r7, #20]
        break;
 8002be4:	e004      	b.n	8002bf0 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	76bb      	strb	r3, [r7, #26]
        break;
 8002bee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 812e 	beq.w	8002e54 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <UART_SetConfig+0x308>)
 8002bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c02:	461a      	mov	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d305      	bcc.n	8002c28 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d915      	bls.n	8002c54 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	76bb      	strb	r3, [r7, #26]
 8002c2c:	e112      	b.n	8002e54 <UART_SetConfig+0x50c>
 8002c2e:	bf00      	nop
 8002c30:	cfff69f3 	.word	0xcfff69f3
 8002c34:	40008000 	.word	0x40008000
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40004400 	.word	0x40004400
 8002c44:	40004800 	.word	0x40004800
 8002c48:	40004c00 	.word	0x40004c00
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	08003e54 	.word	0x08003e54
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f04f 0100 	mov.w	r1, #0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	4a86      	ldr	r2, [pc, #536]	; (8002e7c <UART_SetConfig+0x534>)
 8002c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	f7fd fad4 	bl	8000218 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	020b      	lsls	r3, r1, #8
 8002c82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002c86:	0202      	lsls	r2, r0, #8
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	6849      	ldr	r1, [r1, #4]
 8002c8c:	0849      	lsrs	r1, r1, #1
 8002c8e:	4608      	mov	r0, r1
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	1814      	adds	r4, r2, r0
 8002c96:	eb43 0501 	adc.w	r5, r3, r1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	f7fd fab6 	bl	8000218 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cba:	d308      	bcc.n	8002cce <UART_SetConfig+0x386>
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cc2:	d204      	bcs.n	8002cce <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	e0c2      	b.n	8002e54 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	76bb      	strb	r3, [r7, #26]
 8002cd2:	e0bf      	b.n	8002e54 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cdc:	d165      	bne.n	8002daa <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8002cde:	7efb      	ldrb	r3, [r7, #27]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d828      	bhi.n	8002d36 <UART_SetConfig+0x3ee>
 8002ce4:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <UART_SetConfig+0x3a4>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002d11 	.word	0x08002d11
 8002cf0:	08002d19 	.word	0x08002d19
 8002cf4:	08002d21 	.word	0x08002d21
 8002cf8:	08002d37 	.word	0x08002d37
 8002cfc:	08002d27 	.word	0x08002d27
 8002d00:	08002d37 	.word	0x08002d37
 8002d04:	08002d37 	.word	0x08002d37
 8002d08:	08002d37 	.word	0x08002d37
 8002d0c:	08002d2f 	.word	0x08002d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d10:	f7ff f85e 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8002d14:	6178      	str	r0, [r7, #20]
        break;
 8002d16:	e013      	b.n	8002d40 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d18:	f7ff f870 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
 8002d1c:	6178      	str	r0, [r7, #20]
        break;
 8002d1e:	e00f      	b.n	8002d40 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d20:	4b57      	ldr	r3, [pc, #348]	; (8002e80 <UART_SetConfig+0x538>)
 8002d22:	617b      	str	r3, [r7, #20]
        break;
 8002d24:	e00c      	b.n	8002d40 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d26:	f7fe ffe5 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8002d2a:	6178      	str	r0, [r7, #20]
        break;
 8002d2c:	e008      	b.n	8002d40 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d32:	617b      	str	r3, [r7, #20]
        break;
 8002d34:	e004      	b.n	8002d40 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	76bb      	strb	r3, [r7, #26]
        break;
 8002d3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8086 	beq.w	8002e54 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	4a4b      	ldr	r2, [pc, #300]	; (8002e7c <UART_SetConfig+0x534>)
 8002d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d52:	461a      	mov	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d5a:	005a      	lsls	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	441a      	add	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b0f      	cmp	r3, #15
 8002d74:	d916      	bls.n	8002da4 <UART_SetConfig+0x45c>
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7c:	d212      	bcs.n	8002da4 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	f023 030f 	bic.w	r3, r3, #15
 8002d86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	89fb      	ldrh	r3, [r7, #14]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	89fa      	ldrh	r2, [r7, #14]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	e057      	b.n	8002e54 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	76bb      	strb	r3, [r7, #26]
 8002da8:	e054      	b.n	8002e54 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002daa:	7efb      	ldrb	r3, [r7, #27]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d828      	bhi.n	8002e02 <UART_SetConfig+0x4ba>
 8002db0:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <UART_SetConfig+0x470>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002ddd 	.word	0x08002ddd
 8002dbc:	08002de5 	.word	0x08002de5
 8002dc0:	08002ded 	.word	0x08002ded
 8002dc4:	08002e03 	.word	0x08002e03
 8002dc8:	08002df3 	.word	0x08002df3
 8002dcc:	08002e03 	.word	0x08002e03
 8002dd0:	08002e03 	.word	0x08002e03
 8002dd4:	08002e03 	.word	0x08002e03
 8002dd8:	08002dfb 	.word	0x08002dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ddc:	f7fe fff8 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8002de0:	6178      	str	r0, [r7, #20]
        break;
 8002de2:	e013      	b.n	8002e0c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002de4:	f7ff f80a 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
 8002de8:	6178      	str	r0, [r7, #20]
        break;
 8002dea:	e00f      	b.n	8002e0c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <UART_SetConfig+0x538>)
 8002dee:	617b      	str	r3, [r7, #20]
        break;
 8002df0:	e00c      	b.n	8002e0c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002df2:	f7fe ff7f 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8002df6:	6178      	str	r0, [r7, #20]
        break;
 8002df8:	e008      	b.n	8002e0c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dfe:	617b      	str	r3, [r7, #20]
        break;
 8002e00:	e004      	b.n	8002e0c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	76bb      	strb	r3, [r7, #26]
        break;
 8002e0a:	bf00      	nop
    }

    if (pclk != 0U)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d020      	beq.n	8002e54 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <UART_SetConfig+0x534>)
 8002e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	441a      	add	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d908      	bls.n	8002e50 <UART_SetConfig+0x508>
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d204      	bcs.n	8002e50 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	e001      	b.n	8002e54 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002e70:	7ebb      	ldrb	r3, [r7, #26]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bdb0      	pop	{r4, r5, r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	08003e54 	.word	0x08003e54
 8002e80:	00f42400 	.word	0x00f42400

08002e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01a      	beq.n	8002f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f82:	d10a      	bne.n	8002f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd8:	f7fd fdd2 	bl	8000b80 <HAL_GetTick>
 8002fdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d10e      	bne.n	800300a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f82f 	bl	800305e <UART_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e025      	b.n	8003056 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b04      	cmp	r3, #4
 8003016:	d10e      	bne.n	8003036 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f819 	bl	800305e <UART_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e00f      	b.n	8003056 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306e:	e062      	b.n	8003136 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d05e      	beq.n	8003136 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003078:	f7fd fd82 	bl	8000b80 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	429a      	cmp	r2, r3
 8003086:	d302      	bcc.n	800308e <UART_WaitOnFlagUntilTimeout+0x30>
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d11d      	bne.n	80030ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800309c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e045      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d02e      	beq.n	8003136 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e6:	d126      	bne.n	8003136 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003100:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e00f      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4013      	ands	r3, r2
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	429a      	cmp	r2, r3
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	429a      	cmp	r2, r3
 8003152:	d08d      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003192:	d10e      	bne.n	80031b2 <UART_Start_Receive_IT+0x52>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <UART_Start_Receive_IT+0x48>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80031a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031a6:	e02d      	b.n	8003204 <UART_Start_Receive_IT+0xa4>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	22ff      	movs	r2, #255	; 0xff
 80031ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031b0:	e028      	b.n	8003204 <UART_Start_Receive_IT+0xa4>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10d      	bne.n	80031d6 <UART_Start_Receive_IT+0x76>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <UART_Start_Receive_IT+0x6c>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	22ff      	movs	r2, #255	; 0xff
 80031c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031ca:	e01b      	b.n	8003204 <UART_Start_Receive_IT+0xa4>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	227f      	movs	r2, #127	; 0x7f
 80031d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031d4:	e016      	b.n	8003204 <UART_Start_Receive_IT+0xa4>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031de:	d10d      	bne.n	80031fc <UART_Start_Receive_IT+0x9c>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d104      	bne.n	80031f2 <UART_Start_Receive_IT+0x92>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	227f      	movs	r2, #127	; 0x7f
 80031ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031f0:	e008      	b.n	8003204 <UART_Start_Receive_IT+0xa4>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	223f      	movs	r2, #63	; 0x3f
 80031f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80031fa:	e003      	b.n	8003204 <UART_Start_Receive_IT+0xa4>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2222      	movs	r2, #34	; 0x22
 8003210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800322c:	d12a      	bne.n	8003284 <UART_Start_Receive_IT+0x124>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	429a      	cmp	r2, r3
 8003238:	d324      	bcc.n	8003284 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003242:	d107      	bne.n	8003254 <UART_Start_Receive_IT+0xf4>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d103      	bne.n	8003254 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <UART_Start_Receive_IT+0x16c>)
 8003250:	671a      	str	r2, [r3, #112]	; 0x70
 8003252:	e002      	b.n	800325a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <UART_Start_Receive_IT+0x170>)
 8003258:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003270:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	e01b      	b.n	80032bc <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328c:	d107      	bne.n	800329e <UART_Start_Receive_IT+0x13e>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d103      	bne.n	800329e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <UART_Start_Receive_IT+0x174>)
 800329a:	671a      	str	r2, [r3, #112]	; 0x70
 800329c:	e002      	b.n	80032a4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <UART_Start_Receive_IT+0x178>)
 80032a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80032ba:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	08003985 	.word	0x08003985
 80032d0:	08003781 	.word	0x08003781
 80032d4:	080036a9 	.word	0x080036a9
 80032d8:	080035d1 	.word	0x080035d1

080032dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0210 	bic.w	r2, r2, #16
 800331e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7fd fa4e 	bl	8000800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800337a:	2b21      	cmp	r3, #33	; 0x21
 800337c:	d12a      	bne.n	80033d4 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d110      	bne.n	80033ac <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003398:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80033aa:	e013      	b.n	80033d4 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ee:	2b21      	cmp	r3, #33	; 0x21
 80033f0:	d12f      	bne.n	8003452 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d110      	bne.n	8003420 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800340c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800341c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800341e:	e018      	b.n	8003452 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003424:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003434:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343a:	1c9a      	adds	r2, r3, #2
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346c:	2b21      	cmp	r3, #33	; 0x21
 800346e:	d13d      	bne.n	80034ec <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003476:	81fb      	strh	r3, [r7, #14]
 8003478:	e035      	b.n	80034e6 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d111      	bne.n	80034aa <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003494:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a4:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80034a6:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80034a8:	e020      	b.n	80034ec <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80034e0:	89fb      	ldrh	r3, [r7, #14]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	81fb      	strh	r3, [r7, #14]
 80034e6:	89fb      	ldrh	r3, [r7, #14]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1c6      	bne.n	800347a <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003506:	2b21      	cmp	r3, #33	; 0x21
 8003508:	d142      	bne.n	8003590 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003510:	81fb      	strh	r3, [r7, #14]
 8003512:	e03a      	b.n	800358a <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d111      	bne.n	8003544 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800352e:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353e:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8003540:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8003542:	e025      	b.n	8003590 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354e:	2b00      	cmp	r3, #0
 8003550:	d018      	beq.n	8003584 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003556:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003566:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356c:	1c9a      	adds	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003584:	89fb      	ldrh	r3, [r7, #14]
 8003586:	3b01      	subs	r3, #1
 8003588:	81fb      	strh	r3, [r7, #14]
 800358a:	89fb      	ldrh	r3, [r7, #14]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1c1      	bne.n	8003514 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fd f8fc 	bl	80007c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80035de:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	2b22      	cmp	r3, #34	; 0x22
 80035e8:	d152      	bne.n	8003690 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035f2:	89bb      	ldrh	r3, [r7, #12]
 80035f4:	b2d9      	uxtb	r1, r3
 80035f6:	89fb      	ldrh	r3, [r7, #14]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	400a      	ands	r2, r1
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d139      	bne.n	80036a0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800363a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365e:	2b01      	cmp	r3, #1
 8003660:	d10f      	bne.n	8003682 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0210 	bic.w	r2, r2, #16
 8003670:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003678:	4619      	mov	r1, r3
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff f958 	bl	8002930 <HAL_UARTEx_RxEventCallback>
 8003680:	e002      	b.n	8003688 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd f8ac 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800368e:	e007      	b.n	80036a0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0208 	orr.w	r2, r2, #8
 800369e:	619a      	str	r2, [r3, #24]
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80036b6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	2b22      	cmp	r3, #34	; 0x22
 80036c0:	d152      	bne.n	8003768 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80036d0:	89ba      	ldrh	r2, [r7, #12]
 80036d2:	89fb      	ldrh	r3, [r7, #14]
 80036d4:	4013      	ands	r3, r2
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	1c9a      	adds	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d139      	bne.n	8003778 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003712:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003736:	2b01      	cmp	r3, #1
 8003738:	d10f      	bne.n	800375a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0210 	bic.w	r2, r2, #16
 8003748:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003750:	4619      	mov	r1, r3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff f8ec 	bl	8002930 <HAL_UARTEx_RxEventCallback>
 8003758:	e002      	b.n	8003760 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fd f840 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003766:	e007      	b.n	8003778 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0208 	orr.w	r2, r2, #8
 8003776:	619a      	str	r2, [r3, #24]
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800378e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	2b22      	cmp	r3, #34	; 0x22
 80037b0:	f040 80da 	bne.w	8003968 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80037ba:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80037bc:	e0aa      	b.n	8003914 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037c6:	89bb      	ldrh	r3, [r7, #12]
 80037c8:	b2d9      	uxtb	r1, r3
 80037ca:	8b7b      	ldrh	r3, [r7, #26]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	400a      	ands	r2, r1
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	2b00      	cmp	r3, #0
 8003804:	d04d      	beq.n	80038a2 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d010      	beq.n	8003832 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2201      	movs	r2, #1
 8003820:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d010      	beq.n	800385e <UART_RxISR_8BIT_FIFOEN+0xde>
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2202      	movs	r2, #2
 800384c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003854:	f043 0204 	orr.w	r2, r3, #4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d010      	beq.n	800388a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2204      	movs	r2, #4
 8003878:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003880:	f043 0202 	orr.w	r2, r3, #2
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7fc ffb3 	bl	8000800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d132      	bne.n	8003914 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038bc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d10f      	bne.n	8003908 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0210 	bic.w	r2, r2, #16
 80038f6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038fe:	4619      	mov	r1, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff f815 	bl	8002930 <HAL_UARTEx_RxEventCallback>
 8003906:	e002      	b.n	800390e <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7fc ff69 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003914:	89fb      	ldrh	r3, [r7, #14]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	f47f af4c 	bne.w	80037be <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800392c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800392e:	897b      	ldrh	r3, [r7, #10]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d021      	beq.n	8003978 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800393a:	897a      	ldrh	r2, [r7, #10]
 800393c:	429a      	cmp	r2, r3
 800393e:	d21b      	bcs.n	8003978 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800394e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8003954:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0220 	orr.w	r2, r2, #32
 8003964:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003966:	e007      	b.n	8003978 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0208 	orr.w	r2, r2, #8
 8003976:	619a      	str	r2, [r3, #24]
}
 8003978:	bf00      	nop
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	080035d1 	.word	0x080035d1

08003984 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003992:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	2b22      	cmp	r3, #34	; 0x22
 80039b4:	f040 80da 	bne.w	8003b6c <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80039be:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80039c0:	e0aa      	b.n	8003b18 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80039d0:	8aba      	ldrh	r2, [r7, #20]
 80039d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039d4:	4013      	ands	r3, r2
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	1c9a      	adds	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d04d      	beq.n	8003aa6 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d010      	beq.n	8003a36 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2201      	movs	r2, #1
 8003a24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <UART_RxISR_16BIT_FIFOEN+0xde>
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <UART_RxISR_16BIT_FIFOEN+0x10a>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a84:	f043 0202 	orr.w	r2, r3, #2
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d006      	beq.n	8003aa6 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7fc feb1 	bl	8000800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d132      	bne.n	8003b18 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d10f      	bne.n	8003b0c <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0210 	bic.w	r2, r2, #16
 8003afa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b02:	4619      	mov	r1, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7fe ff13 	bl	8002930 <HAL_UARTEx_RxEventCallback>
 8003b0a:	e002      	b.n	8003b12 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7fc fe67 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003b18:	8afb      	ldrh	r3, [r7, #22]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f47f af4c 	bne.w	80039c2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003b30:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003b32:	89fb      	ldrh	r3, [r7, #14]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d021      	beq.n	8003b7c <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003b3e:	89fa      	ldrh	r2, [r7, #14]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d21b      	bcs.n	8003b7c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003b52:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a0b      	ldr	r2, [pc, #44]	; (8003b84 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8003b58:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0220 	orr.w	r2, r2, #32
 8003b68:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b6a:	e007      	b.n	8003b7c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0208 	orr.w	r2, r2, #8
 8003b7a:	619a      	str	r2, [r3, #24]
}
 8003b7c:	bf00      	nop
 8003b7e:	3728      	adds	r7, #40	; 0x28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	080036a9 	.word	0x080036a9

08003b88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_UARTEx_DisableFifoMode+0x16>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e027      	b.n	8003c2a <HAL_UARTEx_DisableFifoMode+0x66>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2224      	movs	r2, #36	; 0x24
 8003be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0201 	bic.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003c08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e02d      	b.n	8003caa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2224      	movs	r2, #36	; 0x24
 8003c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f850 	bl	8003d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e02d      	b.n	8003d26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2224      	movs	r2, #36	; 0x24
 8003cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0201 	bic.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f812 	bl	8003d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d108      	bne.n	8003d52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d50:	e031      	b.n	8003db6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d52:	2308      	movs	r3, #8
 8003d54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d56:	2308      	movs	r3, #8
 8003d58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	0e5b      	lsrs	r3, r3, #25
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	0f5b      	lsrs	r3, r3, #29
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d7a:	7bbb      	ldrb	r3, [r7, #14]
 8003d7c:	7b3a      	ldrb	r2, [r7, #12]
 8003d7e:	4911      	ldr	r1, [pc, #68]	; (8003dc4 <UARTEx_SetNbDataToProcess+0x94>)
 8003d80:	5c8a      	ldrb	r2, [r1, r2]
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d86:	7b3a      	ldrb	r2, [r7, #12]
 8003d88:	490f      	ldr	r1, [pc, #60]	; (8003dc8 <UARTEx_SetNbDataToProcess+0x98>)
 8003d8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	7b7a      	ldrb	r2, [r7, #13]
 8003d9c:	4909      	ldr	r1, [pc, #36]	; (8003dc4 <UARTEx_SetNbDataToProcess+0x94>)
 8003d9e:	5c8a      	ldrb	r2, [r1, r2]
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003da4:	7b7a      	ldrb	r2, [r7, #13]
 8003da6:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <UARTEx_SetNbDataToProcess+0x98>)
 8003da8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003daa:	fb93 f3f2 	sdiv	r3, r3, r2
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	08003e6c 	.word	0x08003e6c
 8003dc8:	08003e74 	.word	0x08003e74

08003dcc <__libc_init_array>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	4d0d      	ldr	r5, [pc, #52]	; (8003e04 <__libc_init_array+0x38>)
 8003dd0:	4c0d      	ldr	r4, [pc, #52]	; (8003e08 <__libc_init_array+0x3c>)
 8003dd2:	1b64      	subs	r4, r4, r5
 8003dd4:	10a4      	asrs	r4, r4, #2
 8003dd6:	2600      	movs	r6, #0
 8003dd8:	42a6      	cmp	r6, r4
 8003dda:	d109      	bne.n	8003df0 <__libc_init_array+0x24>
 8003ddc:	4d0b      	ldr	r5, [pc, #44]	; (8003e0c <__libc_init_array+0x40>)
 8003dde:	4c0c      	ldr	r4, [pc, #48]	; (8003e10 <__libc_init_array+0x44>)
 8003de0:	f000 f820 	bl	8003e24 <_init>
 8003de4:	1b64      	subs	r4, r4, r5
 8003de6:	10a4      	asrs	r4, r4, #2
 8003de8:	2600      	movs	r6, #0
 8003dea:	42a6      	cmp	r6, r4
 8003dec:	d105      	bne.n	8003dfa <__libc_init_array+0x2e>
 8003dee:	bd70      	pop	{r4, r5, r6, pc}
 8003df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df4:	4798      	blx	r3
 8003df6:	3601      	adds	r6, #1
 8003df8:	e7ee      	b.n	8003dd8 <__libc_init_array+0xc>
 8003dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfe:	4798      	blx	r3
 8003e00:	3601      	adds	r6, #1
 8003e02:	e7f2      	b.n	8003dea <__libc_init_array+0x1e>
 8003e04:	08003e84 	.word	0x08003e84
 8003e08:	08003e84 	.word	0x08003e84
 8003e0c:	08003e84 	.word	0x08003e84
 8003e10:	08003e88 	.word	0x08003e88

08003e14 <memset>:
 8003e14:	4402      	add	r2, r0
 8003e16:	4603      	mov	r3, r0
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d100      	bne.n	8003e1e <memset+0xa>
 8003e1c:	4770      	bx	lr
 8003e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e22:	e7f9      	b.n	8003e18 <memset+0x4>

08003e24 <_init>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	bf00      	nop
 8003e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2a:	bc08      	pop	{r3}
 8003e2c:	469e      	mov	lr, r3
 8003e2e:	4770      	bx	lr

08003e30 <_fini>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	bf00      	nop
 8003e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e36:	bc08      	pop	{r3}
 8003e38:	469e      	mov	lr, r3
 8003e3a:	4770      	bx	lr
