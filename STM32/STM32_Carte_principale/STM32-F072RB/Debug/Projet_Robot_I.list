
Projet_Robot_I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c60  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d60  08003d60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d60  08003d60  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d60  08003d60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  08003d74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003d74  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebe4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b5  00000000  00000000  0002ec18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00030dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00031a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197f1  00000000  00000000  00032648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010132  00000000  00000000  0004be39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094d6f  00000000  00000000  0005bf6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0cda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb8  00000000  00000000  000f0d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d08 	.word	0x08003d08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003d08 	.word	0x08003d08

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * EXTI
     PA14   ------> USART2_TX
     PA15   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	240c      	movs	r4, #12
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f003 fd61 	bl	8003cf8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b45      	ldr	r3, [pc, #276]	; (800034c <MX_GPIO_Init+0x12c>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b44      	ldr	r3, [pc, #272]	; (800034c <MX_GPIO_Init+0x12c>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0309      	lsls	r1, r1, #12
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b41      	ldr	r3, [pc, #260]	; (800034c <MX_GPIO_Init+0x12c>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	031b      	lsls	r3, r3, #12
 800024c:	4013      	ands	r3, r2
 800024e:	60bb      	str	r3, [r7, #8]
 8000250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000252:	4b3e      	ldr	r3, [pc, #248]	; (800034c <MX_GPIO_Init+0x12c>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b3d      	ldr	r3, [pc, #244]	; (800034c <MX_GPIO_Init+0x12c>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	03c9      	lsls	r1, r1, #15
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b3a      	ldr	r3, [pc, #232]	; (800034c <MX_GPIO_Init+0x12c>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	03db      	lsls	r3, r3, #15
 8000268:	4013      	ands	r3, r2
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b37      	ldr	r3, [pc, #220]	; (800034c <MX_GPIO_Init+0x12c>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b36      	ldr	r3, [pc, #216]	; (800034c <MX_GPIO_Init+0x12c>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	0289      	lsls	r1, r1, #10
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b33      	ldr	r3, [pc, #204]	; (800034c <MX_GPIO_Init+0x12c>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4013      	ands	r3, r2
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800028a:	2390      	movs	r3, #144	; 0x90
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	2200      	movs	r2, #0
 8000290:	2120      	movs	r1, #32
 8000292:	0018      	movs	r0, r3
 8000294:	f000 fefa 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000298:	193b      	adds	r3, r7, r4
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	0192      	lsls	r2, r2, #6
 800029e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	2284      	movs	r2, #132	; 0x84
 80002a4:	0392      	lsls	r2, r2, #14
 80002a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ae:	193b      	adds	r3, r7, r4
 80002b0:	4a27      	ldr	r2, [pc, #156]	; (8000350 <MX_GPIO_Init+0x130>)
 80002b2:	0019      	movs	r1, r3
 80002b4:	0010      	movs	r0, r2
 80002b6:	f000 fd71 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002ba:	193b      	adds	r3, r7, r4
 80002bc:	2220      	movs	r2, #32
 80002be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2201      	movs	r2, #1
 80002c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002d2:	193a      	adds	r2, r7, r4
 80002d4:	2390      	movs	r3, #144	; 0x90
 80002d6:	05db      	lsls	r3, r3, #23
 80002d8:	0011      	movs	r1, r2
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 fd5e 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80002e0:	0021      	movs	r1, r4
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2280      	movs	r2, #128	; 0x80
 80002e6:	01d2      	lsls	r2, r2, #7
 80002e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002ea:	000c      	movs	r4, r1
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2202      	movs	r2, #2
 80002f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	2203      	movs	r2, #3
 80002fc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	2201      	movs	r2, #1
 8000302:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000304:	193a      	adds	r2, r7, r4
 8000306:	2390      	movs	r3, #144	; 0x90
 8000308:	05db      	lsls	r3, r3, #23
 800030a:	0011      	movs	r1, r2
 800030c:	0018      	movs	r0, r3
 800030e:	f000 fd45 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 8000312:	0021      	movs	r1, r4
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2280      	movs	r2, #128	; 0x80
 8000318:	0212      	lsls	r2, r2, #8
 800031a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2202      	movs	r2, #2
 8000320:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2201      	movs	r2, #1
 8000332:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000334:	187a      	adds	r2, r7, r1
 8000336:	2390      	movs	r3, #144	; 0x90
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	0011      	movs	r1, r2
 800033c:	0018      	movs	r0, r3
 800033e:	f000 fd2d 	bl	8000d9c <HAL_GPIO_Init>

}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b009      	add	sp, #36	; 0x24
 8000348:	bd90      	pop	{r4, r7, pc}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	40021000 	.word	0x40021000
 8000350:	48000800 	.word	0x48000800

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035a:	f000 fb3b 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035e:	f000 f837 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000362:	f7ff ff5d 	bl	8000220 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000366:	f000 fa11 	bl	800078c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800036a:	f000 f8f7 	bl	800055c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800036e:	f000 fa3d 	bl	80007ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 8000372:	4912      	ldr	r1, [pc, #72]	; (80003bc <main+0x68>)
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <main+0x6c>)
 8000376:	2214      	movs	r2, #20
 8000378:	0018      	movs	r0, r3
 800037a:	f002 fb30 	bl	80029de <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, UART2_rxBuffer, sizeof(UART2_rxBuffer));
 800037e:	4911      	ldr	r1, [pc, #68]	; (80003c4 <main+0x70>)
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <main+0x74>)
 8000382:	2214      	movs	r2, #20
 8000384:	0018      	movs	r0, r3
 8000386:	f002 fb2a 	bl	80029de <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char Data[] = "coucou";
 800038a:	003b      	movs	r3, r7
 800038c:	4a0f      	ldr	r2, [pc, #60]	; (80003cc <main+0x78>)
 800038e:	6811      	ldr	r1, [r2, #0]
 8000390:	6019      	str	r1, [r3, #0]
 8000392:	8891      	ldrh	r1, [r2, #4]
 8000394:	8099      	strh	r1, [r3, #4]
 8000396:	7992      	ldrb	r2, [r2, #6]
 8000398:	719a      	strb	r2, [r3, #6]
	  HAL_UART_Transmit(&huart1, Data, 10, 100);
 800039a:	0039      	movs	r1, r7
 800039c:	4808      	ldr	r0, [pc, #32]	; (80003c0 <main+0x6c>)
 800039e:	2364      	movs	r3, #100	; 0x64
 80003a0:	220a      	movs	r2, #10
 80003a2:	f002 fa73 	bl	800288c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, Data, 10, 100);
 80003a6:	0039      	movs	r1, r7
 80003a8:	4807      	ldr	r0, [pc, #28]	; (80003c8 <main+0x74>)
 80003aa:	2364      	movs	r3, #100	; 0x64
 80003ac:	220a      	movs	r2, #10
 80003ae:	f002 fa6d 	bl	800288c <HAL_UART_Transmit>
	  HAL_Delay(100);
 80003b2:	2064      	movs	r0, #100	; 0x64
 80003b4:	f000 fb72 	bl	8000a9c <HAL_Delay>
  {
 80003b8:	e7e7      	b.n	800038a <main+0x36>
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	20000050 	.word	0x20000050
 80003c0:	20000144 	.word	0x20000144
 80003c4:	20000028 	.word	0x20000028
 80003c8:	200000c0 	.word	0x200000c0
 80003cc:	08003d20 	.word	0x08003d20

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b099      	sub	sp, #100	; 0x64
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	242c      	movs	r4, #44	; 0x2c
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	0018      	movs	r0, r3
 80003dc:	2334      	movs	r3, #52	; 0x34
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f003 fc89 	bl	8003cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e6:	231c      	movs	r3, #28
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	0018      	movs	r0, r3
 80003ec:	2310      	movs	r3, #16
 80003ee:	001a      	movs	r2, r3
 80003f0:	2100      	movs	r1, #0
 80003f2:	f003 fc81 	bl	8003cf8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f6:	003b      	movs	r3, r7
 80003f8:	0018      	movs	r0, r3
 80003fa:	231c      	movs	r3, #28
 80003fc:	001a      	movs	r2, r3
 80003fe:	2100      	movs	r1, #0
 8000400:	f003 fc7a 	bl	8003cf8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000404:	0021      	movs	r1, r4
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2202      	movs	r2, #2
 800040a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2201      	movs	r2, #1
 8000410:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2210      	movs	r2, #16
 8000416:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2202      	movs	r2, #2
 800041c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2280      	movs	r2, #128	; 0x80
 8000422:	0212      	lsls	r2, r2, #8
 8000424:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	22a0      	movs	r2, #160	; 0xa0
 800042a:	0392      	lsls	r2, r2, #14
 800042c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2201      	movs	r2, #1
 8000432:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	187b      	adds	r3, r7, r1
 8000436:	0018      	movs	r0, r3
 8000438:	f000 fe46 	bl	80010c8 <HAL_RCC_OscConfig>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000440:	f000 f828 	bl	8000494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000444:	211c      	movs	r1, #28
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2207      	movs	r2, #7
 800044a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2202      	movs	r2, #2
 8000450:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2101      	movs	r1, #1
 8000462:	0018      	movs	r0, r3
 8000464:	f001 f9b6 	bl	80017d4 <HAL_RCC_ClockConfig>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800046c:	f000 f812 	bl	8000494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000470:	003b      	movs	r3, r7
 8000472:	2201      	movs	r2, #1
 8000474:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000476:	003b      	movs	r3, r7
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047c:	003b      	movs	r3, r7
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fb22 	bl	8001ac8 <HAL_RCCEx_PeriphCLKConfig>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000488:	f000 f804 	bl	8000494 <Error_Handler>
  }
}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b019      	add	sp, #100	; 0x64
 8000492:	bd90      	pop	{r4, r7, pc}

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	e7fe      	b.n	800049c <Error_Handler+0x8>
	...

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_MspInit+0x44>)
 80004a8:	699a      	ldr	r2, [r3, #24]
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <HAL_MspInit+0x44>)
 80004ac:	2101      	movs	r1, #1
 80004ae:	430a      	orrs	r2, r1
 80004b0:	619a      	str	r2, [r3, #24]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <HAL_MspInit+0x44>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	2201      	movs	r2, #1
 80004b8:	4013      	ands	r3, r2
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <HAL_MspInit+0x44>)
 80004c0:	69da      	ldr	r2, [r3, #28]
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_MspInit+0x44>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0549      	lsls	r1, r1, #21
 80004c8:	430a      	orrs	r2, r1
 80004ca:	61da      	str	r2, [r3, #28]
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <HAL_MspInit+0x44>)
 80004ce:	69da      	ldr	r2, [r3, #28]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	055b      	lsls	r3, r3, #21
 80004d4:	4013      	ands	r3, r2
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <NMI_Handler+0x4>

080004ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <HardFault_Handler+0x4>

080004f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050c:	f000 faaa 	bl	8000a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	int a = 3;
 800051e:	2303      	movs	r3, #3
 8000520:	607b      	str	r3, [r7, #4]

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000522:	4b04      	ldr	r3, [pc, #16]	; (8000534 <USART1_IRQHandler+0x1c>)
 8000524:	0018      	movs	r0, r3
 8000526:	f002 fabb 	bl	8002aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b002      	add	sp, #8
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	20000144 	.word	0x20000144

08000538 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <USART3_4_IRQHandler+0x14>)
 800053e:	0018      	movs	r0, r3
 8000540:	f002 faae 	bl	8002aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	200000c0 	.word	0x200000c0

08000550 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b096      	sub	sp, #88	; 0x58
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000562:	2344      	movs	r3, #68	; 0x44
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	0018      	movs	r0, r3
 8000568:	2314      	movs	r3, #20
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f003 fbc3 	bl	8003cf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000572:	233c      	movs	r3, #60	; 0x3c
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	0018      	movs	r0, r3
 8000578:	2308      	movs	r3, #8
 800057a:	001a      	movs	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	f003 fbbb 	bl	8003cf8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000582:	2320      	movs	r3, #32
 8000584:	18fb      	adds	r3, r7, r3
 8000586:	0018      	movs	r0, r3
 8000588:	231c      	movs	r3, #28
 800058a:	001a      	movs	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	f003 fbb3 	bl	8003cf8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000592:	003b      	movs	r3, r7
 8000594:	0018      	movs	r0, r3
 8000596:	2320      	movs	r3, #32
 8000598:	001a      	movs	r2, r3
 800059a:	2100      	movs	r1, #0
 800059c:	f003 fbac 	bl	8003cf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005a0:	4b47      	ldr	r3, [pc, #284]	; (80006c0 <MX_TIM1_Init+0x164>)
 80005a2:	4a48      	ldr	r2, [pc, #288]	; (80006c4 <MX_TIM1_Init+0x168>)
 80005a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005a6:	4b46      	ldr	r3, [pc, #280]	; (80006c0 <MX_TIM1_Init+0x164>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ac:	4b44      	ldr	r3, [pc, #272]	; (80006c0 <MX_TIM1_Init+0x164>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005b2:	4b43      	ldr	r3, [pc, #268]	; (80006c0 <MX_TIM1_Init+0x164>)
 80005b4:	4a44      	ldr	r2, [pc, #272]	; (80006c8 <MX_TIM1_Init+0x16c>)
 80005b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b8:	4b41      	ldr	r3, [pc, #260]	; (80006c0 <MX_TIM1_Init+0x164>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005be:	4b40      	ldr	r3, [pc, #256]	; (80006c0 <MX_TIM1_Init+0x164>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b3e      	ldr	r3, [pc, #248]	; (80006c0 <MX_TIM1_Init+0x164>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005ca:	4b3d      	ldr	r3, [pc, #244]	; (80006c0 <MX_TIM1_Init+0x164>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fb79 	bl	8001cc4 <HAL_TIM_Base_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80005d6:	f7ff ff5d 	bl	8000494 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80005da:	4b39      	ldr	r3, [pc, #228]	; (80006c0 <MX_TIM1_Init+0x164>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fbc1 	bl	8001d64 <HAL_TIM_OC_Init>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80005e6:	f7ff ff55 	bl	8000494 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80005ea:	2144      	movs	r1, #68	; 0x44
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2207      	movs	r2, #7
 80005f0:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80005f8:	187a      	adds	r2, r7, r1
 80005fa:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <MX_TIM1_Init+0x164>)
 80005fc:	0011      	movs	r1, r2
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 fc60 	bl	8001ec4 <HAL_TIM_SlaveConfigSynchro>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000608:	f7ff ff44 	bl	8000494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060c:	213c      	movs	r1, #60	; 0x3c
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800061a:	187a      	adds	r2, r7, r1
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_TIM1_Init+0x164>)
 800061e:	0011      	movs	r1, r2
 8000620:	0018      	movs	r0, r3
 8000622:	f002 f823 	bl	800266c <HAL_TIMEx_MasterConfigSynchronization>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800062a:	f7ff ff33 	bl	8000494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800062e:	2120      	movs	r1, #32
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800065a:	1879      	adds	r1, r7, r1
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_TIM1_Init+0x164>)
 800065e:	2200      	movs	r2, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fbd7 	bl	8001e14 <HAL_TIM_OC_ConfigChannel>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800066a:	f7ff ff13 	bl	8000494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800066e:	003b      	movs	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000674:	003b      	movs	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800067a:	003b      	movs	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000680:	003b      	movs	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000686:	003b      	movs	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800068c:	003b      	movs	r3, r7
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	0192      	lsls	r2, r2, #6
 8000692:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000694:	003b      	movs	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800069a:	003a      	movs	r2, r7
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_TIM1_Init+0x164>)
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f002 f841 	bl	8002728 <HAL_TIMEx_ConfigBreakDeadTime>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 80006aa:	f7ff fef3 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <MX_TIM1_Init+0x164>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 f82b 	bl	800070c <HAL_TIM_MspPostInit>

}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b016      	add	sp, #88	; 0x58
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	20000078 	.word	0x20000078
 80006c4:	40012c00 	.word	0x40012c00
 80006c8:	0000ffff 	.word	0x0000ffff

080006cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <HAL_TIM_Base_MspInit+0x38>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d10d      	bne.n	80006fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <HAL_TIM_Base_MspInit+0x3c>)
 80006e0:	699a      	ldr	r2, [r3, #24]
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_TIM_Base_MspInit+0x3c>)
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	0109      	lsls	r1, r1, #4
 80006e8:	430a      	orrs	r2, r1
 80006ea:	619a      	str	r2, [r3, #24]
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_TIM_Base_MspInit+0x3c>)
 80006ee:	699a      	ldr	r2, [r3, #24]
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	4013      	ands	r3, r2
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b004      	add	sp, #16
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	40012c00 	.word	0x40012c00
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	240c      	movs	r4, #12
 8000716:	193b      	adds	r3, r7, r4
 8000718:	0018      	movs	r0, r3
 800071a:	2314      	movs	r3, #20
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f003 faea 	bl	8003cf8 <memset>
  if(timHandle->Instance==TIM1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a16      	ldr	r2, [pc, #88]	; (8000784 <HAL_TIM_MspPostInit+0x78>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d125      	bne.n	800077a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <HAL_TIM_MspPostInit+0x7c>)
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_TIM_MspPostInit+0x7c>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0289      	lsls	r1, r1, #10
 8000738:	430a      	orrs	r2, r1
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_TIM_MspPostInit+0x7c>)
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	029b      	lsls	r3, r3, #10
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	0021      	movs	r1, r4
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2202      	movs	r2, #2
 8000758:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2202      	movs	r2, #2
 800076a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	187a      	adds	r2, r7, r1
 800076e:	2390      	movs	r3, #144	; 0x90
 8000770:	05db      	lsls	r3, r3, #23
 8000772:	0011      	movs	r1, r2
 8000774:	0018      	movs	r0, r3
 8000776:	f000 fb11 	bl	8000d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b009      	add	sp, #36	; 0x24
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40012c00 	.word	0x40012c00
 8000788:	40021000 	.word	0x40021000

0800078c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_USART1_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_USART1_UART_Init+0x58>)
 8000798:	22e1      	movs	r2, #225	; 0xe1
 800079a:	0252      	lsls	r2, r2, #9
 800079c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART1_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_USART1_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART1_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART1_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART1_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART1_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART1_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART1_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <MX_USART1_UART_Init+0x58>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f002 f807 	bl	80027e4 <HAL_UART_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f7ff fe5b 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000144 	.word	0x20000144
 80007e8:	40013800 	.word	0x40013800

080007ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USART3_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <MX_USART3_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_USART3_UART_Init+0x58>)
 80007f8:	22e1      	movs	r2, #225	; 0xe1
 80007fa:	0252      	lsls	r2, r2, #9
 80007fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART3_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USART3_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART3_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART3_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART3_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART3_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART3_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART3_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <MX_USART3_UART_Init+0x58>)
 8000830:	0018      	movs	r0, r3
 8000832:	f001 ffd7 	bl	80027e4 <HAL_UART_Init>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f7ff fe2b 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000c0 	.word	0x200000c0
 8000848:	40004800 	.word	0x40004800

0800084c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b08d      	sub	sp, #52	; 0x34
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	241c      	movs	r4, #28
 8000856:	193b      	adds	r3, r7, r4
 8000858:	0018      	movs	r0, r3
 800085a:	2314      	movs	r3, #20
 800085c:	001a      	movs	r2, r3
 800085e:	2100      	movs	r1, #0
 8000860:	f003 fa4a 	bl	8003cf8 <memset>
  if(uartHandle->Instance==USART1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a41      	ldr	r2, [pc, #260]	; (8000970 <HAL_UART_MspInit+0x124>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d13c      	bne.n	80008e8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <HAL_UART_MspInit+0x128>)
 8000870:	699a      	ldr	r2, [r3, #24]
 8000872:	4b40      	ldr	r3, [pc, #256]	; (8000974 <HAL_UART_MspInit+0x128>)
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	01c9      	lsls	r1, r1, #7
 8000878:	430a      	orrs	r2, r1
 800087a:	619a      	str	r2, [r3, #24]
 800087c:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <HAL_UART_MspInit+0x128>)
 800087e:	699a      	ldr	r2, [r3, #24]
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	01db      	lsls	r3, r3, #7
 8000884:	4013      	ands	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <HAL_UART_MspInit+0x128>)
 800088c:	695a      	ldr	r2, [r3, #20]
 800088e:	4b39      	ldr	r3, [pc, #228]	; (8000974 <HAL_UART_MspInit+0x128>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0289      	lsls	r1, r1, #10
 8000894:	430a      	orrs	r2, r1
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	4b36      	ldr	r3, [pc, #216]	; (8000974 <HAL_UART_MspInit+0x128>)
 800089a:	695a      	ldr	r2, [r3, #20]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	029b      	lsls	r3, r3, #10
 80008a0:	4013      	ands	r3, r2
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	22c0      	movs	r2, #192	; 0xc0
 80008aa:	00d2      	lsls	r2, r2, #3
 80008ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2202      	movs	r2, #2
 80008b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2203      	movs	r2, #3
 80008c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2201      	movs	r2, #1
 80008c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	187a      	adds	r2, r7, r1
 80008ca:	2390      	movs	r3, #144	; 0x90
 80008cc:	05db      	lsls	r3, r3, #23
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fa63 	bl	8000d9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	201b      	movs	r0, #27
 80008dc:	f000 f9ae 	bl	8000c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008e0:	201b      	movs	r0, #27
 80008e2:	f000 f9c0 	bl	8000c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80008e6:	e03e      	b.n	8000966 <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART3)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a22      	ldr	r2, [pc, #136]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d139      	bne.n	8000966 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <HAL_UART_MspInit+0x128>)
 80008f4:	69da      	ldr	r2, [r3, #28]
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <HAL_UART_MspInit+0x128>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	02c9      	lsls	r1, r1, #11
 80008fc:	430a      	orrs	r2, r1
 80008fe:	61da      	str	r2, [r3, #28]
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_UART_MspInit+0x128>)
 8000902:	69da      	ldr	r2, [r3, #28]
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	02db      	lsls	r3, r3, #11
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_UART_MspInit+0x128>)
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_UART_MspInit+0x128>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0309      	lsls	r1, r1, #12
 8000918:	430a      	orrs	r2, r1
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_UART_MspInit+0x128>)
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	031b      	lsls	r3, r3, #12
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800092a:	211c      	movs	r1, #28
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2230      	movs	r2, #48	; 0x30
 8000930:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2202      	movs	r2, #2
 8000936:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2203      	movs	r2, #3
 8000942:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2201      	movs	r2, #1
 8000948:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	187b      	adds	r3, r7, r1
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <HAL_UART_MspInit+0x130>)
 800094e:	0019      	movs	r1, r3
 8000950:	0010      	movs	r0, r2
 8000952:	f000 fa23 	bl	8000d9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	201d      	movs	r0, #29
 800095c:	f000 f96e 	bl	8000c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000960:	201d      	movs	r0, #29
 8000962:	f000 f980 	bl	8000c66 <HAL_NVIC_EnableIRQ>
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b00d      	add	sp, #52	; 0x34
 800096c:	bd90      	pop	{r4, r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	40013800 	.word	0x40013800
 8000974:	40021000 	.word	0x40021000
 8000978:	40004800 	.word	0x40004800
 800097c:	48000800 	.word	0x48000800

08000980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490e      	ldr	r1, [pc, #56]	; (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0b      	ldr	r4, [pc, #44]	; (80009cc <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009aa:	f7ff fdd1 	bl	8000550 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009ae:	f003 f97f 	bl	8003cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b2:	f7ff fccf 	bl	8000354 <main>

080009b6 <LoopForever>:

LoopForever:
    b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   r0, =_estack
 80009b8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c4:	08003d68 	.word	0x08003d68
  ldr r2, =_sbss
 80009c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009cc:	200001cc 	.word	0x200001cc

080009d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_COMP_IRQHandler>
	...

080009d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <HAL_Init+0x24>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_Init+0x24>)
 80009de:	2110      	movs	r1, #16
 80009e0:	430a      	orrs	r2, r1
 80009e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 f809 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ea:	f7ff fd59 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a06:	681c      	ldr	r4, [r3, #0]
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_InitTick+0x60>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	23fa      	movs	r3, #250	; 0xfa
 8000a10:	0098      	lsls	r0, r3, #2
 8000a12:	f7ff fb79 	bl	8000108 <__udivsi3>
 8000a16:	0003      	movs	r3, r0
 8000a18:	0019      	movs	r1, r3
 8000a1a:	0020      	movs	r0, r4
 8000a1c:	f7ff fb74 	bl	8000108 <__udivsi3>
 8000a20:	0003      	movs	r3, r0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 f92f 	bl	8000c86 <HAL_SYSTICK_Config>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e00f      	b.n	8000a50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d80b      	bhi.n	8000a4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	425b      	negs	r3, r3
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 f8fc 	bl	8000c3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_InitTick+0x64>)
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b003      	add	sp, #12
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000004 	.word	0x20000004

08000a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x1c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_IncTick+0x20>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	18d2      	adds	r2, r2, r3
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_IncTick+0x20>)
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	20000008 	.word	0x20000008
 8000a84:	200001c8 	.word	0x200001c8

08000a88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <HAL_GetTick+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	200001c8 	.word	0x200001c8

08000a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff fff0 	bl	8000a88 <HAL_GetTick>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	d005      	beq.n	8000ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_Delay+0x44>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	001a      	movs	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	189b      	adds	r3, r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	f7ff ffe0 	bl	8000a88 <HAL_GetTick>
 8000ac8:	0002      	movs	r2, r0
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d8f7      	bhi.n	8000ac4 <HAL_Delay+0x28>
  {
  }
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b004      	add	sp, #16
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	0002      	movs	r2, r0
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b7f      	cmp	r3, #127	; 0x7f
 8000af6:	d809      	bhi.n	8000b0c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	001a      	movs	r2, r3
 8000afe:	231f      	movs	r3, #31
 8000b00:	401a      	ands	r2, r3
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__NVIC_EnableIRQ+0x30>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	4091      	lsls	r1, r2
 8000b08:	000a      	movs	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]
  }
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b002      	add	sp, #8
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	0002      	movs	r2, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b2c:	d828      	bhi.n	8000b80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2e:	4a2f      	ldr	r2, [pc, #188]	; (8000bec <__NVIC_SetPriority+0xd4>)
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	33c0      	adds	r3, #192	; 0xc0
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	589b      	ldr	r3, [r3, r2]
 8000b3e:	1dfa      	adds	r2, r7, #7
 8000b40:	7812      	ldrb	r2, [r2, #0]
 8000b42:	0011      	movs	r1, r2
 8000b44:	2203      	movs	r2, #3
 8000b46:	400a      	ands	r2, r1
 8000b48:	00d2      	lsls	r2, r2, #3
 8000b4a:	21ff      	movs	r1, #255	; 0xff
 8000b4c:	4091      	lsls	r1, r2
 8000b4e:	000a      	movs	r2, r1
 8000b50:	43d2      	mvns	r2, r2
 8000b52:	401a      	ands	r2, r3
 8000b54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	019b      	lsls	r3, r3, #6
 8000b5a:	22ff      	movs	r2, #255	; 0xff
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	0018      	movs	r0, r3
 8000b64:	2303      	movs	r3, #3
 8000b66:	4003      	ands	r3, r0
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b6c:	481f      	ldr	r0, [pc, #124]	; (8000bec <__NVIC_SetPriority+0xd4>)
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b25b      	sxtb	r3, r3
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	430a      	orrs	r2, r1
 8000b78:	33c0      	adds	r3, #192	; 0xc0
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b7e:	e031      	b.n	8000be4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <__NVIC_SetPriority+0xd8>)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	0019      	movs	r1, r3
 8000b88:	230f      	movs	r3, #15
 8000b8a:	400b      	ands	r3, r1
 8000b8c:	3b08      	subs	r3, #8
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	3306      	adds	r3, #6
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	18d3      	adds	r3, r2, r3
 8000b96:	3304      	adds	r3, #4
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	1dfa      	adds	r2, r7, #7
 8000b9c:	7812      	ldrb	r2, [r2, #0]
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	400a      	ands	r2, r1
 8000ba4:	00d2      	lsls	r2, r2, #3
 8000ba6:	21ff      	movs	r1, #255	; 0xff
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	000a      	movs	r2, r1
 8000bac:	43d2      	mvns	r2, r2
 8000bae:	401a      	ands	r2, r3
 8000bb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	019b      	lsls	r3, r3, #6
 8000bb6:	22ff      	movs	r2, #255	; 0xff
 8000bb8:	401a      	ands	r2, r3
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	4003      	ands	r3, r0
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <__NVIC_SetPriority+0xd8>)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	001c      	movs	r4, r3
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	4023      	ands	r3, r4
 8000bd4:	3b08      	subs	r3, #8
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	3306      	adds	r3, #6
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	18c3      	adds	r3, r0, r3
 8000be0:	3304      	adds	r3, #4
 8000be2:	601a      	str	r2, [r3, #0]
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b003      	add	sp, #12
 8000bea:	bd90      	pop	{r4, r7, pc}
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	1e5a      	subs	r2, r3, #1
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	045b      	lsls	r3, r3, #17
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d301      	bcc.n	8000c0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e010      	b.n	8000c2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <SysTick_Config+0x44>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	3a01      	subs	r2, #1
 8000c12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c14:	2301      	movs	r3, #1
 8000c16:	425b      	negs	r3, r3
 8000c18:	2103      	movs	r1, #3
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff ff7c 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SysTick_Config+0x44>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SysTick_Config+0x44>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	210f      	movs	r1, #15
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	1c02      	adds	r2, r0, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	0011      	movs	r1, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ff5d 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ff33 	bl	8000ae4 <__NVIC_EnableIRQ>
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff ffaf 	bl	8000bf4 <SysTick_Config>
 8000c96:	0003      	movs	r3, r0
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2221      	movs	r2, #33	; 0x21
 8000cac:	5c9b      	ldrb	r3, [r3, r2]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d008      	beq.n	8000cc6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2220      	movs	r2, #32
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e020      	b.n	8000d08 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	210e      	movs	r1, #14
 8000cd2:	438a      	bics	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	438a      	bics	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cee:	2101      	movs	r1, #1
 8000cf0:	4091      	lsls	r1, r2
 8000cf2:	000a      	movs	r2, r1
 8000cf4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2221      	movs	r2, #33	; 0x21
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d18:	210f      	movs	r1, #15
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2221      	movs	r2, #33	; 0x21
 8000d24:	5c9b      	ldrb	r3, [r3, r2]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d006      	beq.n	8000d3a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2204      	movs	r2, #4
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e028      	b.n	8000d8c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	210e      	movs	r1, #14
 8000d46:	438a      	bics	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	438a      	bics	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d62:	2101      	movs	r1, #1
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2221      	movs	r2, #33	; 0x21
 8000d6e:	2101      	movs	r1, #1
 8000d70:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2220      	movs	r2, #32
 8000d76:	2100      	movs	r1, #0
 8000d78:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d004      	beq.n	8000d8c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	0010      	movs	r0, r2
 8000d8a:	4798      	blx	r3
    } 
  }
  return status;
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	781b      	ldrb	r3, [r3, #0]
}
 8000d92:	0018      	movs	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000daa:	e155      	b.n	8001058 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4091      	lsls	r1, r2
 8000db6:	000a      	movs	r2, r1
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d100      	bne.n	8000dc4 <HAL_GPIO_Init+0x28>
 8000dc2:	e146      	b.n	8001052 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2203      	movs	r2, #3
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d005      	beq.n	8000ddc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d130      	bne.n	8000e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	409a      	lsls	r2, r3
 8000dea:	0013      	movs	r3, r2
 8000dec:	43da      	mvns	r2, r3
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	0013      	movs	r3, r2
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e12:	2201      	movs	r2, #1
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	2201      	movs	r2, #1
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2203      	movs	r2, #3
 8000e44:	4013      	ands	r3, r2
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d017      	beq.n	8000e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	409a      	lsls	r2, r3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2203      	movs	r2, #3
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d123      	bne.n	8000ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	58d3      	ldr	r3, [r2, r3]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	2207      	movs	r2, #7
 8000e98:	4013      	ands	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	691a      	ldr	r2, [r3, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2107      	movs	r1, #7
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	6939      	ldr	r1, [r7, #16]
 8000ecc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2203      	movs	r2, #3
 8000eec:	401a      	ands	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	23c0      	movs	r3, #192	; 0xc0
 8000f08:	029b      	lsls	r3, r3, #10
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d100      	bne.n	8000f10 <HAL_GPIO_Init+0x174>
 8000f0e:	e0a0      	b.n	8001052 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f10:	4b57      	ldr	r3, [pc, #348]	; (8001070 <HAL_GPIO_Init+0x2d4>)
 8000f12:	699a      	ldr	r2, [r3, #24]
 8000f14:	4b56      	ldr	r3, [pc, #344]	; (8001070 <HAL_GPIO_Init+0x2d4>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	619a      	str	r2, [r3, #24]
 8000f1c:	4b54      	ldr	r3, [pc, #336]	; (8001070 <HAL_GPIO_Init+0x2d4>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4013      	ands	r3, r2
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f28:	4a52      	ldr	r2, [pc, #328]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	589b      	ldr	r3, [r3, r2]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2203      	movs	r2, #3
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	409a      	lsls	r2, r3
 8000f42:	0013      	movs	r3, r2
 8000f44:	43da      	mvns	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	2390      	movs	r3, #144	; 0x90
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x1ee>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a47      	ldr	r2, [pc, #284]	; (8001078 <HAL_GPIO_Init+0x2dc>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x1ea>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a46      	ldr	r2, [pc, #280]	; (800107c <HAL_GPIO_Init+0x2e0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x1e6>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a45      	ldr	r2, [pc, #276]	; (8001080 <HAL_GPIO_Init+0x2e4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x1e2>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a44      	ldr	r2, [pc, #272]	; (8001084 <HAL_GPIO_Init+0x2e8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x1de>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e008      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e004      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	2103      	movs	r1, #3
 8000f90:	400a      	ands	r2, r1
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	4093      	lsls	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f9c:	4935      	ldr	r1, [pc, #212]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000faa:	4b37      	ldr	r3, [pc, #220]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	025b      	lsls	r3, r3, #9
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fce:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43da      	mvns	r2, r3
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	029b      	lsls	r3, r3, #10
 8000fec:	4013      	ands	r3, r2
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43da      	mvns	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	035b      	lsls	r3, r3, #13
 8001016:	4013      	ands	r3, r2
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43da      	mvns	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	039b      	lsls	r3, r3, #14
 8001040:	4013      	ands	r3, r2
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	40da      	lsrs	r2, r3
 8001060:	1e13      	subs	r3, r2, #0
 8001062:	d000      	beq.n	8001066 <HAL_GPIO_Init+0x2ca>
 8001064:	e6a2      	b.n	8000dac <HAL_GPIO_Init+0x10>
  } 
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b006      	add	sp, #24
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000
 8001078:	48000400 	.word	0x48000400
 800107c:	48000800 	.word	0x48000800
 8001080:	48000c00 	.word	0x48000c00
 8001084:	48001000 	.word	0x48001000
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	0008      	movs	r0, r1
 8001096:	0011      	movs	r1, r2
 8001098:	1cbb      	adds	r3, r7, #2
 800109a:	1c02      	adds	r2, r0, #0
 800109c:	801a      	strh	r2, [r3, #0]
 800109e:	1c7b      	adds	r3, r7, #1
 80010a0:	1c0a      	adds	r2, r1, #0
 80010a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a4:	1c7b      	adds	r3, r7, #1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ac:	1cbb      	adds	r3, r7, #2
 80010ae:	881a      	ldrh	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b4:	e003      	b.n	80010be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b6:	1cbb      	adds	r3, r7, #2
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b002      	add	sp, #8
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f000 fb76 	bl	80017c8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2201      	movs	r2, #1
 80010e2:	4013      	ands	r3, r2
 80010e4:	d100      	bne.n	80010e8 <HAL_RCC_OscConfig+0x20>
 80010e6:	e08e      	b.n	8001206 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010e8:	4bc5      	ldr	r3, [pc, #788]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	220c      	movs	r2, #12
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d00e      	beq.n	8001112 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010f4:	4bc2      	ldr	r3, [pc, #776]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	220c      	movs	r2, #12
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d117      	bne.n	8001130 <HAL_RCC_OscConfig+0x68>
 8001100:	4bbf      	ldr	r3, [pc, #764]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	23c0      	movs	r3, #192	; 0xc0
 8001106:	025b      	lsls	r3, r3, #9
 8001108:	401a      	ands	r2, r3
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	025b      	lsls	r3, r3, #9
 800110e:	429a      	cmp	r2, r3
 8001110:	d10e      	bne.n	8001130 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001112:	4bbb      	ldr	r3, [pc, #748]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	029b      	lsls	r3, r3, #10
 800111a:	4013      	ands	r3, r2
 800111c:	d100      	bne.n	8001120 <HAL_RCC_OscConfig+0x58>
 800111e:	e071      	b.n	8001204 <HAL_RCC_OscConfig+0x13c>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d000      	beq.n	800112a <HAL_RCC_OscConfig+0x62>
 8001128:	e06c      	b.n	8001204 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	f000 fb4c 	bl	80017c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d107      	bne.n	8001148 <HAL_RCC_OscConfig+0x80>
 8001138:	4bb1      	ldr	r3, [pc, #708]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4bb0      	ldr	r3, [pc, #704]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	0249      	lsls	r1, r1, #9
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e02f      	b.n	80011a8 <HAL_RCC_OscConfig+0xe0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10c      	bne.n	800116a <HAL_RCC_OscConfig+0xa2>
 8001150:	4bab      	ldr	r3, [pc, #684]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4baa      	ldr	r3, [pc, #680]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001156:	49ab      	ldr	r1, [pc, #684]	; (8001404 <HAL_RCC_OscConfig+0x33c>)
 8001158:	400a      	ands	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	4ba8      	ldr	r3, [pc, #672]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4ba7      	ldr	r3, [pc, #668]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001162:	49a9      	ldr	r1, [pc, #676]	; (8001408 <HAL_RCC_OscConfig+0x340>)
 8001164:	400a      	ands	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e01e      	b.n	80011a8 <HAL_RCC_OscConfig+0xe0>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b05      	cmp	r3, #5
 8001170:	d10e      	bne.n	8001190 <HAL_RCC_OscConfig+0xc8>
 8001172:	4ba3      	ldr	r3, [pc, #652]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4ba2      	ldr	r3, [pc, #648]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001178:	2180      	movs	r1, #128	; 0x80
 800117a:	02c9      	lsls	r1, r1, #11
 800117c:	430a      	orrs	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	4b9f      	ldr	r3, [pc, #636]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b9e      	ldr	r3, [pc, #632]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	0249      	lsls	r1, r1, #9
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e00b      	b.n	80011a8 <HAL_RCC_OscConfig+0xe0>
 8001190:	4b9b      	ldr	r3, [pc, #620]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b9a      	ldr	r3, [pc, #616]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001196:	499b      	ldr	r1, [pc, #620]	; (8001404 <HAL_RCC_OscConfig+0x33c>)
 8001198:	400a      	ands	r2, r1
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	4b98      	ldr	r3, [pc, #608]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b97      	ldr	r3, [pc, #604]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80011a2:	4999      	ldr	r1, [pc, #612]	; (8001408 <HAL_RCC_OscConfig+0x340>)
 80011a4:	400a      	ands	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d014      	beq.n	80011da <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc6a 	bl	8000a88 <HAL_GetTick>
 80011b4:	0003      	movs	r3, r0
 80011b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ba:	f7ff fc65 	bl	8000a88 <HAL_GetTick>
 80011be:	0002      	movs	r2, r0
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b64      	cmp	r3, #100	; 0x64
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e2fd      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011cc:	4b8c      	ldr	r3, [pc, #560]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	029b      	lsls	r3, r3, #10
 80011d4:	4013      	ands	r3, r2
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0xf2>
 80011d8:	e015      	b.n	8001206 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011da:	f7ff fc55 	bl	8000a88 <HAL_GetTick>
 80011de:	0003      	movs	r3, r0
 80011e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fc50 	bl	8000a88 <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e2e8      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b82      	ldr	r3, [pc, #520]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	4013      	ands	r3, r2
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x11c>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2202      	movs	r2, #2
 800120c:	4013      	ands	r3, r2
 800120e:	d100      	bne.n	8001212 <HAL_RCC_OscConfig+0x14a>
 8001210:	e06c      	b.n	80012ec <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001212:	4b7b      	ldr	r3, [pc, #492]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	220c      	movs	r2, #12
 8001218:	4013      	ands	r3, r2
 800121a:	d00e      	beq.n	800123a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800121c:	4b78      	ldr	r3, [pc, #480]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	220c      	movs	r2, #12
 8001222:	4013      	ands	r3, r2
 8001224:	2b08      	cmp	r3, #8
 8001226:	d11f      	bne.n	8001268 <HAL_RCC_OscConfig+0x1a0>
 8001228:	4b75      	ldr	r3, [pc, #468]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	23c0      	movs	r3, #192	; 0xc0
 800122e:	025b      	lsls	r3, r3, #9
 8001230:	401a      	ands	r2, r3
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	429a      	cmp	r2, r3
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	4b71      	ldr	r3, [pc, #452]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d005      	beq.n	8001250 <HAL_RCC_OscConfig+0x188>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d001      	beq.n	8001250 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e2bb      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b6b      	ldr	r3, [pc, #428]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	22f8      	movs	r2, #248	; 0xf8
 8001256:	4393      	bics	r3, r2
 8001258:	0019      	movs	r1, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00da      	lsls	r2, r3, #3
 8001260:	4b67      	ldr	r3, [pc, #412]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	e041      	b.n	80012ec <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d024      	beq.n	80012ba <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	4b63      	ldr	r3, [pc, #396]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b62      	ldr	r3, [pc, #392]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001276:	2101      	movs	r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fc04 	bl	8000a88 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001286:	f7ff fbff 	bl	8000a88 <HAL_GetTick>
 800128a:	0002      	movs	r2, r0
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e297      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001298:	4b59      	ldr	r3, [pc, #356]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2202      	movs	r2, #2
 800129e:	4013      	ands	r3, r2
 80012a0:	d0f1      	beq.n	8001286 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b57      	ldr	r3, [pc, #348]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	22f8      	movs	r2, #248	; 0xf8
 80012a8:	4393      	bics	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	00da      	lsls	r2, r3, #3
 80012b2:	4b53      	ldr	r3, [pc, #332]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e018      	b.n	80012ec <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ba:	4b51      	ldr	r3, [pc, #324]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b50      	ldr	r3, [pc, #320]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	438a      	bics	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fbdf 	bl	8000a88 <HAL_GetTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fbda 	bl	8000a88 <HAL_GetTick>
 80012d4:	0002      	movs	r2, r0
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e272      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	4b47      	ldr	r3, [pc, #284]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2202      	movs	r2, #2
 80012e8:	4013      	ands	r3, r2
 80012ea:	d1f1      	bne.n	80012d0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2208      	movs	r2, #8
 80012f2:	4013      	ands	r3, r2
 80012f4:	d036      	beq.n	8001364 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d019      	beq.n	8001332 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fe:	4b40      	ldr	r3, [pc, #256]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001302:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001304:	2101      	movs	r1, #1
 8001306:	430a      	orrs	r2, r1
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7ff fbbd 	bl	8000a88 <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001314:	f7ff fbb8 	bl	8000a88 <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e250      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	d0f1      	beq.n	8001314 <HAL_RCC_OscConfig+0x24c>
 8001330:	e018      	b.n	8001364 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001336:	4b32      	ldr	r3, [pc, #200]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001338:	2101      	movs	r1, #1
 800133a:	438a      	bics	r2, r1
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fba3 	bl	8000a88 <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff fb9e 	bl	8000a88 <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e236      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	2202      	movs	r2, #2
 8001360:	4013      	ands	r3, r2
 8001362:	d1f1      	bne.n	8001348 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2204      	movs	r2, #4
 800136a:	4013      	ands	r3, r2
 800136c:	d100      	bne.n	8001370 <HAL_RCC_OscConfig+0x2a8>
 800136e:	e0b5      	b.n	80014dc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001370:	201f      	movs	r0, #31
 8001372:	183b      	adds	r3, r7, r0
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800137a:	69da      	ldr	r2, [r3, #28]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	055b      	lsls	r3, r3, #21
 8001380:	4013      	ands	r3, r2
 8001382:	d110      	bne.n	80013a6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001386:	69da      	ldr	r2, [r3, #28]
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	0549      	lsls	r1, r1, #21
 800138e:	430a      	orrs	r2, r1
 8001390:	61da      	str	r2, [r3, #28]
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 8001394:	69da      	ldr	r2, [r3, #28]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	055b      	lsls	r3, r3, #21
 800139a:	4013      	ands	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013a0:	183b      	adds	r3, r7, r0
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_RCC_OscConfig+0x344>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4013      	ands	r3, r2
 80013b0:	d11a      	bne.n	80013e8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_RCC_OscConfig+0x344>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_RCC_OscConfig+0x344>)
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	0049      	lsls	r1, r1, #1
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fb62 	bl	8000a88 <HAL_GetTick>
 80013c4:	0003      	movs	r3, r0
 80013c6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ca:	f7ff fb5d 	bl	8000a88 <HAL_GetTick>
 80013ce:	0002      	movs	r2, r0
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b64      	cmp	r3, #100	; 0x64
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1f5      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_RCC_OscConfig+0x344>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d10f      	bne.n	8001410 <HAL_RCC_OscConfig+0x348>
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80013f2:	6a1a      	ldr	r2, [r3, #32]
 80013f4:	4b02      	ldr	r3, [pc, #8]	; (8001400 <HAL_RCC_OscConfig+0x338>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	430a      	orrs	r2, r1
 80013fa:	621a      	str	r2, [r3, #32]
 80013fc:	e036      	b.n	800146c <HAL_RCC_OscConfig+0x3a4>
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	40021000 	.word	0x40021000
 8001404:	fffeffff 	.word	0xfffeffff
 8001408:	fffbffff 	.word	0xfffbffff
 800140c:	40007000 	.word	0x40007000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <HAL_RCC_OscConfig+0x36a>
 8001418:	4bca      	ldr	r3, [pc, #808]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800141a:	6a1a      	ldr	r2, [r3, #32]
 800141c:	4bc9      	ldr	r3, [pc, #804]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800141e:	2101      	movs	r1, #1
 8001420:	438a      	bics	r2, r1
 8001422:	621a      	str	r2, [r3, #32]
 8001424:	4bc7      	ldr	r3, [pc, #796]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	4bc6      	ldr	r3, [pc, #792]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800142a:	2104      	movs	r1, #4
 800142c:	438a      	bics	r2, r1
 800142e:	621a      	str	r2, [r3, #32]
 8001430:	e01c      	b.n	800146c <HAL_RCC_OscConfig+0x3a4>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b05      	cmp	r3, #5
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0x38c>
 800143a:	4bc2      	ldr	r3, [pc, #776]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800143c:	6a1a      	ldr	r2, [r3, #32]
 800143e:	4bc1      	ldr	r3, [pc, #772]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001440:	2104      	movs	r1, #4
 8001442:	430a      	orrs	r2, r1
 8001444:	621a      	str	r2, [r3, #32]
 8001446:	4bbf      	ldr	r3, [pc, #764]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001448:	6a1a      	ldr	r2, [r3, #32]
 800144a:	4bbe      	ldr	r3, [pc, #760]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800144c:	2101      	movs	r1, #1
 800144e:	430a      	orrs	r2, r1
 8001450:	621a      	str	r2, [r3, #32]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0x3a4>
 8001454:	4bbb      	ldr	r3, [pc, #748]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	4bba      	ldr	r3, [pc, #744]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800145a:	2101      	movs	r1, #1
 800145c:	438a      	bics	r2, r1
 800145e:	621a      	str	r2, [r3, #32]
 8001460:	4bb8      	ldr	r3, [pc, #736]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001462:	6a1a      	ldr	r2, [r3, #32]
 8001464:	4bb7      	ldr	r3, [pc, #732]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001466:	2104      	movs	r1, #4
 8001468:	438a      	bics	r2, r1
 800146a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d014      	beq.n	800149e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff fb08 	bl	8000a88 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	e009      	b.n	8001492 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147e:	f7ff fb03 	bl	8000a88 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	4aaf      	ldr	r2, [pc, #700]	; (8001748 <HAL_RCC_OscConfig+0x680>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e19a      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001492:	4bac      	ldr	r3, [pc, #688]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x3b6>
 800149c:	e013      	b.n	80014c6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff faf3 	bl	8000a88 <HAL_GetTick>
 80014a2:	0003      	movs	r3, r0
 80014a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a6:	e009      	b.n	80014bc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7ff faee 	bl	8000a88 <HAL_GetTick>
 80014ac:	0002      	movs	r2, r0
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	4aa5      	ldr	r2, [pc, #660]	; (8001748 <HAL_RCC_OscConfig+0x680>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e185      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	4ba1      	ldr	r3, [pc, #644]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	2202      	movs	r2, #2
 80014c2:	4013      	ands	r3, r2
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014c6:	231f      	movs	r3, #31
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d0:	4b9c      	ldr	r3, [pc, #624]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80014d2:	69da      	ldr	r2, [r3, #28]
 80014d4:	4b9b      	ldr	r3, [pc, #620]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80014d6:	499d      	ldr	r1, [pc, #628]	; (800174c <HAL_RCC_OscConfig+0x684>)
 80014d8:	400a      	ands	r2, r1
 80014da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2210      	movs	r2, #16
 80014e2:	4013      	ands	r3, r2
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d12a      	bne.n	8001544 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ee:	4b95      	ldr	r3, [pc, #596]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80014f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f2:	4b94      	ldr	r3, [pc, #592]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80014f4:	2104      	movs	r1, #4
 80014f6:	430a      	orrs	r2, r1
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014fa:	4b92      	ldr	r3, [pc, #584]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80014fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fe:	4b91      	ldr	r3, [pc, #580]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001500:	2101      	movs	r1, #1
 8001502:	430a      	orrs	r2, r1
 8001504:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff fabf 	bl	8000a88 <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001510:	f7ff faba 	bl	8000a88 <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e152      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001522:	4b88      	ldr	r3, [pc, #544]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001526:	2202      	movs	r2, #2
 8001528:	4013      	ands	r3, r2
 800152a:	d0f1      	beq.n	8001510 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800152c:	4b85      	ldr	r3, [pc, #532]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	22f8      	movs	r2, #248	; 0xf8
 8001532:	4393      	bics	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	00da      	lsls	r2, r3, #3
 800153c:	4b81      	ldr	r3, [pc, #516]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800153e:	430a      	orrs	r2, r1
 8001540:	635a      	str	r2, [r3, #52]	; 0x34
 8001542:	e034      	b.n	80015ae <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	3305      	adds	r3, #5
 800154a:	d111      	bne.n	8001570 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800154c:	4b7d      	ldr	r3, [pc, #500]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800154e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001550:	4b7c      	ldr	r3, [pc, #496]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001552:	2104      	movs	r1, #4
 8001554:	438a      	bics	r2, r1
 8001556:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001558:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155c:	22f8      	movs	r2, #248	; 0xf8
 800155e:	4393      	bics	r3, r2
 8001560:	0019      	movs	r1, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	00da      	lsls	r2, r3, #3
 8001568:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800156a:	430a      	orrs	r2, r1
 800156c:	635a      	str	r2, [r3, #52]	; 0x34
 800156e:	e01e      	b.n	80015ae <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001570:	4b74      	ldr	r3, [pc, #464]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001574:	4b73      	ldr	r3, [pc, #460]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001576:	2104      	movs	r1, #4
 8001578:	430a      	orrs	r2, r1
 800157a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800157c:	4b71      	ldr	r3, [pc, #452]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800157e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001580:	4b70      	ldr	r3, [pc, #448]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001582:	2101      	movs	r1, #1
 8001584:	438a      	bics	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff fa7e 	bl	8000a88 <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001592:	f7ff fa79 	bl	8000a88 <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e111      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015a4:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80015a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a8:	2202      	movs	r2, #2
 80015aa:	4013      	ands	r3, r2
 80015ac:	d1f1      	bne.n	8001592 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2220      	movs	r2, #32
 80015b4:	4013      	ands	r3, r2
 80015b6:	d05c      	beq.n	8001672 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80015b8:	4b62      	ldr	r3, [pc, #392]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	220c      	movs	r2, #12
 80015be:	4013      	ands	r3, r2
 80015c0:	2b0c      	cmp	r3, #12
 80015c2:	d00e      	beq.n	80015e2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80015c4:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	220c      	movs	r2, #12
 80015ca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d114      	bne.n	80015fa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80015d0:	4b5c      	ldr	r3, [pc, #368]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	23c0      	movs	r3, #192	; 0xc0
 80015d6:	025b      	lsls	r3, r3, #9
 80015d8:	401a      	ands	r2, r3
 80015da:	23c0      	movs	r3, #192	; 0xc0
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	429a      	cmp	r2, r3
 80015e0:	d10b      	bne.n	80015fa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015e2:	4b58      	ldr	r3, [pc, #352]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80015e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	025b      	lsls	r3, r3, #9
 80015ea:	4013      	ands	r3, r2
 80015ec:	d040      	beq.n	8001670 <HAL_RCC_OscConfig+0x5a8>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d03c      	beq.n	8001670 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0e6      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d01b      	beq.n	800163a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001602:	4b50      	ldr	r3, [pc, #320]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001606:	4b4f      	ldr	r3, [pc, #316]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0249      	lsls	r1, r1, #9
 800160c:	430a      	orrs	r2, r1
 800160e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fa3a 	bl	8000a88 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800161a:	f7ff fa35 	bl	8000a88 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0cd      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800162c:	4b45      	ldr	r3, [pc, #276]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800162e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	025b      	lsls	r3, r3, #9
 8001634:	4013      	ands	r3, r2
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x552>
 8001638:	e01b      	b.n	8001672 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800163a:	4b42      	ldr	r3, [pc, #264]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800163c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001640:	4943      	ldr	r1, [pc, #268]	; (8001750 <HAL_RCC_OscConfig+0x688>)
 8001642:	400a      	ands	r2, r1
 8001644:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fa1f 	bl	8000a88 <HAL_GetTick>
 800164a:	0003      	movs	r3, r0
 800164c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001650:	f7ff fa1a 	bl	8000a88 <HAL_GetTick>
 8001654:	0002      	movs	r2, r0
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0b2      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	025b      	lsls	r3, r3, #9
 800166a:	4013      	ands	r3, r2
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x588>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001670:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	2b00      	cmp	r3, #0
 8001678:	d100      	bne.n	800167c <HAL_RCC_OscConfig+0x5b4>
 800167a:	e0a4      	b.n	80017c6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800167c:	4b31      	ldr	r3, [pc, #196]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	220c      	movs	r2, #12
 8001682:	4013      	ands	r3, r2
 8001684:	2b08      	cmp	r3, #8
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0x5c2>
 8001688:	e078      	b.n	800177c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	2b02      	cmp	r3, #2
 8001690:	d14c      	bne.n	800172c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001692:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001698:	492e      	ldr	r1, [pc, #184]	; (8001754 <HAL_RCC_OscConfig+0x68c>)
 800169a:	400a      	ands	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff f9f3 	bl	8000a88 <HAL_GetTick>
 80016a2:	0003      	movs	r3, r0
 80016a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff f9ee 	bl	8000a88 <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e086      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	049b      	lsls	r3, r3, #18
 80016c2:	4013      	ands	r3, r2
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	220f      	movs	r2, #15
 80016cc:	4393      	bics	r3, r2
 80016ce:	0019      	movs	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016d6:	430a      	orrs	r2, r1
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <HAL_RCC_OscConfig+0x690>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	431a      	orrs	r2, r3
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016f0:	430a      	orrs	r2, r1
 80016f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	0449      	lsls	r1, r1, #17
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff f9c1 	bl	8000a88 <HAL_GetTick>
 8001706:	0003      	movs	r3, r0
 8001708:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff f9bc 	bl	8000a88 <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e054      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	049b      	lsls	r3, r3, #18
 8001726:	4013      	ands	r3, r2
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x644>
 800172a:	e04c      	b.n	80017c6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <HAL_RCC_OscConfig+0x67c>)
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <HAL_RCC_OscConfig+0x68c>)
 8001734:	400a      	ands	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff f9a6 	bl	8000a88 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x6a6>
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	40021000 	.word	0x40021000
 8001748:	00001388 	.word	0x00001388
 800174c:	efffffff 	.word	0xefffffff
 8001750:	fffeffff 	.word	0xfffeffff
 8001754:	feffffff 	.word	0xfeffffff
 8001758:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f994 	bl	8000a88 <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e02c      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_RCC_OscConfig+0x708>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	049b      	lsls	r3, r3, #18
 8001776:	4013      	ands	r3, r2
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x694>
 800177a:	e024      	b.n	80017c6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e01f      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_RCC_OscConfig+0x708>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_OscConfig+0x708>)
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	23c0      	movs	r3, #192	; 0xc0
 8001798:	025b      	lsls	r3, r3, #9
 800179a:	401a      	ands	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d10e      	bne.n	80017c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	220f      	movs	r2, #15
 80017a8:	401a      	ands	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	23f0      	movs	r3, #240	; 0xf0
 80017b6:	039b      	lsls	r3, r3, #14
 80017b8:	401a      	ands	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b008      	add	sp, #32
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0bf      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b61      	ldr	r3, [pc, #388]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	4013      	ands	r3, r2
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d911      	bls.n	800181a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b5e      	ldr	r3, [pc, #376]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4393      	bics	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	4b5b      	ldr	r3, [pc, #364]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2201      	movs	r2, #1
 800180e:	4013      	ands	r3, r2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0a6      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d015      	beq.n	8001850 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2204      	movs	r2, #4
 800182a:	4013      	ands	r3, r2
 800182c:	d006      	beq.n	800183c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800182e:	4b51      	ldr	r3, [pc, #324]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 8001834:	21e0      	movs	r1, #224	; 0xe0
 8001836:	00c9      	lsls	r1, r1, #3
 8001838:	430a      	orrs	r2, r1
 800183a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183c:	4b4d      	ldr	r3, [pc, #308]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	22f0      	movs	r2, #240	; 0xf0
 8001842:	4393      	bics	r3, r2
 8001844:	0019      	movs	r1, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	4b4a      	ldr	r3, [pc, #296]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 800184c:	430a      	orrs	r2, r1
 800184e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2201      	movs	r2, #1
 8001856:	4013      	ands	r3, r2
 8001858:	d04c      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b44      	ldr	r3, [pc, #272]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	029b      	lsls	r3, r3, #10
 800186a:	4013      	ands	r3, r2
 800186c:	d120      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e07a      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	049b      	lsls	r3, r3, #18
 8001882:	4013      	ands	r3, r2
 8001884:	d114      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06e      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001892:	4b38      	ldr	r3, [pc, #224]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 8001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	025b      	lsls	r3, r3, #9
 800189a:	4013      	ands	r3, r2
 800189c:	d108      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e062      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4b34      	ldr	r3, [pc, #208]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2202      	movs	r2, #2
 80018a8:	4013      	ands	r3, r2
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e05b      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b0:	4b30      	ldr	r3, [pc, #192]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2203      	movs	r2, #3
 80018b6:	4393      	bics	r3, r2
 80018b8:	0019      	movs	r1, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 80018c0:	430a      	orrs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c4:	f7ff f8e0 	bl	8000a88 <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018cc:	e009      	b.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ce:	f7ff f8db 	bl	8000a88 <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	4a27      	ldr	r2, [pc, #156]	; (8001978 <HAL_RCC_ClockConfig+0x1a4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e042      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	220c      	movs	r2, #12
 80018e8:	401a      	ands	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1ec      	bne.n	80018ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d211      	bcs.n	8001926 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	4393      	bics	r3, r2
 800190a:	0019      	movs	r1, r3
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_RCC_ClockConfig+0x19c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2201      	movs	r2, #1
 800191a:	4013      	ands	r3, r2
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d001      	beq.n	8001926 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e020      	b.n	8001968 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2204      	movs	r2, #4
 800192c:	4013      	ands	r3, r2
 800192e:	d009      	beq.n	8001944 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a11      	ldr	r2, [pc, #68]	; (800197c <HAL_RCC_ClockConfig+0x1a8>)
 8001936:	4013      	ands	r3, r2
 8001938:	0019      	movs	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 8001940:	430a      	orrs	r2, r1
 8001942:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001944:	f000 f820 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8001948:	0001      	movs	r1, r0
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x1a0>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	220f      	movs	r2, #15
 8001952:	4013      	ands	r3, r2
 8001954:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_RCC_ClockConfig+0x1ac>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	000a      	movs	r2, r1
 800195a:	40da      	lsrs	r2, r3
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1b0>)
 800195e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff f84b 	bl	80009fc <HAL_InitTick>
  
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b004      	add	sp, #16
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40022000 	.word	0x40022000
 8001974:	40021000 	.word	0x40021000
 8001978:	00001388 	.word	0x00001388
 800197c:	fffff8ff 	.word	0xfffff8ff
 8001980:	08003d48 	.word	0x08003d48
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b08f      	sub	sp, #60	; 0x3c
 800198c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800198e:	2314      	movs	r3, #20
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	4a38      	ldr	r2, [pc, #224]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xec>)
 8001994:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001996:	c313      	stmia	r3!, {r0, r1, r4}
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4a36      	ldr	r2, [pc, #216]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xf0>)
 80019a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80019a2:	c313      	stmia	r3!, {r0, r1, r4}
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ac:	2300      	movs	r3, #0
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80019bc:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xf4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c4:	220c      	movs	r2, #12
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d047      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0xd4>
 80019cc:	d849      	bhi.n	8001a62 <HAL_RCC_GetSysClockFreq+0xda>
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x50>
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x56>
 80019d6:	e044      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019dc:	e044      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e0:	0c9b      	lsrs	r3, r3, #18
 80019e2:	220f      	movs	r2, #15
 80019e4:	4013      	ands	r3, r2
 80019e6:	2214      	movs	r2, #20
 80019e8:	18ba      	adds	r2, r7, r2
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019ee:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xf4>)
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	220f      	movs	r2, #15
 80019f4:	4013      	ands	r3, r2
 80019f6:	1d3a      	adds	r2, r7, #4
 80019f8:	5cd3      	ldrb	r3, [r2, r3]
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fe:	23c0      	movs	r3, #192	; 0xc0
 8001a00:	025b      	lsls	r3, r3, #9
 8001a02:	401a      	ands	r2, r3
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	025b      	lsls	r3, r3, #9
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d109      	bne.n	8001a20 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a0e:	481c      	ldr	r0, [pc, #112]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a10:	f7fe fb7a 	bl	8000108 <__udivsi3>
 8001a14:	0003      	movs	r3, r0
 8001a16:	001a      	movs	r2, r3
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	4353      	muls	r3, r2
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a1e:	e01a      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a22:	23c0      	movs	r3, #192	; 0xc0
 8001a24:	025b      	lsls	r3, r3, #9
 8001a26:	401a      	ands	r2, r3
 8001a28:	23c0      	movs	r3, #192	; 0xc0
 8001a2a:	025b      	lsls	r3, r3, #9
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d109      	bne.n	8001a44 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a32:	4814      	ldr	r0, [pc, #80]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a34:	f7fe fb68 	bl	8000108 <__udivsi3>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	001a      	movs	r2, r3
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	4353      	muls	r3, r2
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a46:	480e      	ldr	r0, [pc, #56]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a48:	f7fe fb5e 	bl	8000108 <__udivsi3>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	001a      	movs	r2, r3
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	4353      	muls	r3, r2
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a5a:	e005      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a60:	e002      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a66:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b00f      	add	sp, #60	; 0x3c
 8001a70:	bd90      	pop	{r4, r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	08003d28 	.word	0x08003d28
 8001a78:	08003d38 	.word	0x08003d38
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	007a1200 	.word	0x007a1200
 8001a84:	02dc6c00 	.word	0x02dc6c00

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b02      	ldr	r3, [pc, #8]	; (8001a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	20000000 	.word	0x20000000

08001a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001aa0:	f7ff fff2 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa4:	0001      	movs	r1, r0
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	2207      	movs	r2, #7
 8001aae:	4013      	ands	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	000b      	movs	r3, r1
}    
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	08003d58 	.word	0x08003d58

08001ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	025b      	lsls	r3, r3, #9
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d100      	bne.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ae4:	e08e      	b.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ae6:	2017      	movs	r0, #23
 8001ae8:	183b      	adds	r3, r7, r0
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b6e      	ldr	r3, [pc, #440]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af0:	69da      	ldr	r2, [r3, #28]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	055b      	lsls	r3, r3, #21
 8001af6:	4013      	ands	r3, r2
 8001af8:	d110      	bne.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b6b      	ldr	r3, [pc, #428]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	0549      	lsls	r1, r1, #21
 8001b04:	430a      	orrs	r2, r1
 8001b06:	61da      	str	r2, [r3, #28]
 8001b08:	4b67      	ldr	r3, [pc, #412]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b0a:	69da      	ldr	r2, [r3, #28]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	055b      	lsls	r3, r3, #21
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b16:	183b      	adds	r3, r7, r0
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	4b63      	ldr	r3, [pc, #396]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	d11a      	bne.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b28:	4b60      	ldr	r3, [pc, #384]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	0049      	lsls	r1, r1, #1
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7fe ffa7 	bl	8000a88 <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3e:	e008      	b.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b40:	f7fe ffa2 	bl	8000a88 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0a6      	b.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	4b56      	ldr	r3, [pc, #344]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b5e:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b60:	6a1a      	ldr	r2, [r3, #32]
 8001b62:	23c0      	movs	r3, #192	; 0xc0
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d034      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	23c0      	movs	r3, #192	; 0xc0
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d02c      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b80:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b8c:	6a1a      	ldr	r2, [r3, #32]
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	0249      	lsls	r1, r1, #9
 8001b94:	430a      	orrs	r2, r1
 8001b96:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b98:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b9a:	6a1a      	ldr	r2, [r3, #32]
 8001b9c:	4b42      	ldr	r3, [pc, #264]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b9e:	4945      	ldr	r1, [pc, #276]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ba4:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7fe ff69 	bl	8000a88 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bba:	e009      	b.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7fe ff64 	bl	8000a88 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	4a3c      	ldr	r2, [pc, #240]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e067      	b.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bda:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a34      	ldr	r2, [pc, #208]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bea:	430a      	orrs	r2, r1
 8001bec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bee:	2317      	movs	r3, #23
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bfe:	492f      	ldr	r1, [pc, #188]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d009      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	2203      	movs	r2, #3
 8001c14:	4393      	bics	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2220      	movs	r2, #32
 8001c46:	4013      	ands	r3, r2
 8001c48:	d009      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	2210      	movs	r2, #16
 8001c50:	4393      	bics	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	029b      	lsls	r3, r3, #10
 8001c66:	4013      	ands	r3, r2
 8001c68:	d009      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	4393      	bics	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699a      	ldr	r2, [r3, #24]
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4013      	ands	r3, r2
 8001c88:	d009      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	2240      	movs	r2, #64	; 0x40
 8001c90:	4393      	bics	r3, r2
 8001c92:	0019      	movs	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b006      	add	sp, #24
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	fffffcff 	.word	0xfffffcff
 8001cb4:	fffeffff 	.word	0xfffeffff
 8001cb8:	00001388 	.word	0x00001388
 8001cbc:	efffffff 	.word	0xefffffff
 8001cc0:	fffcffff 	.word	0xfffcffff

08001cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e042      	b.n	8001d5c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	223d      	movs	r2, #61	; 0x3d
 8001cda:	5c9b      	ldrb	r3, [r3, r2]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d107      	bne.n	8001cf2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	223c      	movs	r2, #60	; 0x3c
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7fe fced 	bl	80006cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	223d      	movs	r2, #61	; 0x3d
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3304      	adds	r3, #4
 8001d02:	0019      	movs	r1, r3
 8001d04:	0010      	movs	r0, r2
 8001d06:	f000 f923 	bl	8001f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2246      	movs	r2, #70	; 0x46
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	223e      	movs	r2, #62	; 0x3e
 8001d16:	2101      	movs	r1, #1
 8001d18:	5499      	strb	r1, [r3, r2]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	223f      	movs	r2, #63	; 0x3f
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2240      	movs	r2, #64	; 0x40
 8001d26:	2101      	movs	r1, #1
 8001d28:	5499      	strb	r1, [r3, r2]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2241      	movs	r2, #65	; 0x41
 8001d2e:	2101      	movs	r1, #1
 8001d30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2242      	movs	r2, #66	; 0x42
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2243      	movs	r2, #67	; 0x43
 8001d3e:	2101      	movs	r1, #1
 8001d40:	5499      	strb	r1, [r3, r2]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2244      	movs	r2, #68	; 0x44
 8001d46:	2101      	movs	r1, #1
 8001d48:	5499      	strb	r1, [r3, r2]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2245      	movs	r2, #69	; 0x45
 8001d4e:	2101      	movs	r1, #1
 8001d50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	223d      	movs	r2, #61	; 0x3d
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b002      	add	sp, #8
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e042      	b.n	8001dfc <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	223d      	movs	r2, #61	; 0x3d
 8001d7a:	5c9b      	ldrb	r3, [r3, r2]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d107      	bne.n	8001d92 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	223c      	movs	r2, #60	; 0x3c
 8001d86:	2100      	movs	r1, #0
 8001d88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 f839 	bl	8001e04 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	223d      	movs	r2, #61	; 0x3d
 8001d96:	2102      	movs	r1, #2
 8001d98:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3304      	adds	r3, #4
 8001da2:	0019      	movs	r1, r3
 8001da4:	0010      	movs	r0, r2
 8001da6:	f000 f8d3 	bl	8001f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2246      	movs	r2, #70	; 0x46
 8001dae:	2101      	movs	r1, #1
 8001db0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	223e      	movs	r2, #62	; 0x3e
 8001db6:	2101      	movs	r1, #1
 8001db8:	5499      	strb	r1, [r3, r2]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	223f      	movs	r2, #63	; 0x3f
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	5499      	strb	r1, [r3, r2]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2240      	movs	r2, #64	; 0x40
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	5499      	strb	r1, [r3, r2]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2241      	movs	r2, #65	; 0x41
 8001dce:	2101      	movs	r1, #1
 8001dd0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2242      	movs	r2, #66	; 0x42
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	5499      	strb	r1, [r3, r2]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2243      	movs	r2, #67	; 0x43
 8001dde:	2101      	movs	r1, #1
 8001de0:	5499      	strb	r1, [r3, r2]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2244      	movs	r2, #68	; 0x44
 8001de6:	2101      	movs	r1, #1
 8001de8:	5499      	strb	r1, [r3, r2]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2245      	movs	r2, #69	; 0x45
 8001dee:	2101      	movs	r1, #1
 8001df0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	223d      	movs	r2, #61	; 0x3d
 8001df6:	2101      	movs	r1, #1
 8001df8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b002      	add	sp, #8
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e20:	2317      	movs	r3, #23
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	223c      	movs	r2, #60	; 0x3c
 8001e2c:	5c9b      	ldrb	r3, [r3, r2]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_TIM_OC_ConfigChannel+0x22>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e042      	b.n	8001ebc <HAL_TIM_OC_ConfigChannel+0xa8>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	223c      	movs	r2, #60	; 0x3c
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d027      	beq.n	8001e94 <HAL_TIM_OC_ConfigChannel+0x80>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d82c      	bhi.n	8001ea4 <HAL_TIM_OC_ConfigChannel+0x90>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d019      	beq.n	8001e84 <HAL_TIM_OC_ConfigChannel+0x70>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d826      	bhi.n	8001ea4 <HAL_TIM_OC_ConfigChannel+0x90>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_TIM_OC_ConfigChannel+0x50>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d008      	beq.n	8001e74 <HAL_TIM_OC_ConfigChannel+0x60>
 8001e62:	e01f      	b.n	8001ea4 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	0011      	movs	r1, r2
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f000 f8ef 	bl	8002050 <TIM_OC1_SetConfig>
      break;
 8001e72:	e01c      	b.n	8001eae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 f96f 	bl	8002160 <TIM_OC2_SetConfig>
      break;
 8001e82:	e014      	b.n	8001eae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	0011      	movs	r1, r2
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f000 f9eb 	bl	8002268 <TIM_OC3_SetConfig>
      break;
 8001e92:	e00c      	b.n	8001eae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	0011      	movs	r1, r2
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f000 fa69 	bl	8002374 <TIM_OC4_SetConfig>
      break;
 8001ea2:	e004      	b.n	8001eae <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8001ea4:	2317      	movs	r3, #23
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
      break;
 8001eac:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	223c      	movs	r2, #60	; 0x3c
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	5499      	strb	r1, [r3, r2]

  return status;
 8001eb6:	2317      	movs	r3, #23
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	781b      	ldrb	r3, [r3, #0]
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b006      	add	sp, #24
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	223c      	movs	r2, #60	; 0x3c
 8001ed2:	5c9b      	ldrb	r3, [r3, r2]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_TIM_SlaveConfigSynchro+0x18>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e032      	b.n	8001f42 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	223c      	movs	r2, #60	; 0x3c
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	223d      	movs	r2, #61	; 0x3d
 8001ee8:	2102      	movs	r1, #2
 8001eea:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	0011      	movs	r1, r2
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 faa8 	bl	8002448 <TIM_SlaveTimer_SetConfig>
 8001ef8:	1e03      	subs	r3, r0, #0
 8001efa:	d009      	beq.n	8001f10 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	223d      	movs	r2, #61	; 0x3d
 8001f00:	2101      	movs	r1, #1
 8001f02:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	223c      	movs	r2, #60	; 0x3c
 8001f08:	2100      	movs	r1, #0
 8001f0a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e018      	b.n	8001f42 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2140      	movs	r1, #64	; 0x40
 8001f1c:	438a      	bics	r2, r1
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4908      	ldr	r1, [pc, #32]	; (8001f4c <HAL_TIM_SlaveConfigSynchro+0x88>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	223d      	movs	r2, #61	; 0x3d
 8001f34:	2101      	movs	r1, #1
 8001f36:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	223c      	movs	r2, #60	; 0x3c
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b002      	add	sp, #8
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	ffffbfff 	.word	0xffffbfff

08001f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a34      	ldr	r2, [pc, #208]	; (8002034 <TIM_Base_SetConfig+0xe4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d008      	beq.n	8001f7a <TIM_Base_SetConfig+0x2a>
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	05db      	lsls	r3, r3, #23
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d003      	beq.n	8001f7a <TIM_Base_SetConfig+0x2a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a30      	ldr	r2, [pc, #192]	; (8002038 <TIM_Base_SetConfig+0xe8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d108      	bne.n	8001f8c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2270      	movs	r2, #112	; 0x70
 8001f7e:	4393      	bics	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a29      	ldr	r2, [pc, #164]	; (8002034 <TIM_Base_SetConfig+0xe4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d018      	beq.n	8001fc6 <TIM_Base_SetConfig+0x76>
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	05db      	lsls	r3, r3, #23
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d013      	beq.n	8001fc6 <TIM_Base_SetConfig+0x76>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a25      	ldr	r2, [pc, #148]	; (8002038 <TIM_Base_SetConfig+0xe8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00f      	beq.n	8001fc6 <TIM_Base_SetConfig+0x76>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a24      	ldr	r2, [pc, #144]	; (800203c <TIM_Base_SetConfig+0xec>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00b      	beq.n	8001fc6 <TIM_Base_SetConfig+0x76>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a23      	ldr	r2, [pc, #140]	; (8002040 <TIM_Base_SetConfig+0xf0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <TIM_Base_SetConfig+0x76>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a22      	ldr	r2, [pc, #136]	; (8002044 <TIM_Base_SetConfig+0xf4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d003      	beq.n	8001fc6 <TIM_Base_SetConfig+0x76>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a21      	ldr	r2, [pc, #132]	; (8002048 <TIM_Base_SetConfig+0xf8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d108      	bne.n	8001fd8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4a20      	ldr	r2, [pc, #128]	; (800204c <TIM_Base_SetConfig+0xfc>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	4393      	bics	r3, r2
 8001fde:	001a      	movs	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <TIM_Base_SetConfig+0xe4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00b      	beq.n	800201e <TIM_Base_SetConfig+0xce>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <TIM_Base_SetConfig+0xf0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <TIM_Base_SetConfig+0xce>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <TIM_Base_SetConfig+0xf4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d003      	beq.n	800201e <TIM_Base_SetConfig+0xce>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <TIM_Base_SetConfig+0xf8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d103      	bne.n	8002026 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	615a      	str	r2, [r3, #20]
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b004      	add	sp, #16
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40012c00 	.word	0x40012c00
 8002038:	40000400 	.word	0x40000400
 800203c:	40002000 	.word	0x40002000
 8002040:	40014000 	.word	0x40014000
 8002044:	40014400 	.word	0x40014400
 8002048:	40014800 	.word	0x40014800
 800204c:	fffffcff 	.word	0xfffffcff

08002050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	2201      	movs	r2, #1
 8002060:	4393      	bics	r3, r2
 8002062:	001a      	movs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2270      	movs	r2, #112	; 0x70
 800207e:	4393      	bics	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2203      	movs	r2, #3
 8002086:	4393      	bics	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2202      	movs	r2, #2
 8002098:	4393      	bics	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a27      	ldr	r2, [pc, #156]	; (8002148 <TIM_OC1_SetConfig+0xf8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00b      	beq.n	80020c6 <TIM_OC1_SetConfig+0x76>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a26      	ldr	r2, [pc, #152]	; (800214c <TIM_OC1_SetConfig+0xfc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <TIM_OC1_SetConfig+0x76>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a25      	ldr	r2, [pc, #148]	; (8002150 <TIM_OC1_SetConfig+0x100>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d003      	beq.n	80020c6 <TIM_OC1_SetConfig+0x76>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a24      	ldr	r2, [pc, #144]	; (8002154 <TIM_OC1_SetConfig+0x104>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d10c      	bne.n	80020e0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2208      	movs	r2, #8
 80020ca:	4393      	bics	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2204      	movs	r2, #4
 80020dc:	4393      	bics	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a19      	ldr	r2, [pc, #100]	; (8002148 <TIM_OC1_SetConfig+0xf8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00b      	beq.n	8002100 <TIM_OC1_SetConfig+0xb0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a18      	ldr	r2, [pc, #96]	; (800214c <TIM_OC1_SetConfig+0xfc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <TIM_OC1_SetConfig+0xb0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a17      	ldr	r2, [pc, #92]	; (8002150 <TIM_OC1_SetConfig+0x100>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d003      	beq.n	8002100 <TIM_OC1_SetConfig+0xb0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a16      	ldr	r2, [pc, #88]	; (8002154 <TIM_OC1_SetConfig+0x104>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d111      	bne.n	8002124 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <TIM_OC1_SetConfig+0x108>)
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4a14      	ldr	r2, [pc, #80]	; (800215c <TIM_OC1_SetConfig+0x10c>)
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	621a      	str	r2, [r3, #32]
}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46bd      	mov	sp, r7
 8002142:	b006      	add	sp, #24
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	40012c00 	.word	0x40012c00
 800214c:	40014000 	.word	0x40014000
 8002150:	40014400 	.word	0x40014400
 8002154:	40014800 	.word	0x40014800
 8002158:	fffffeff 	.word	0xfffffeff
 800215c:	fffffdff 	.word	0xfffffdff

08002160 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	2210      	movs	r2, #16
 8002170:	4393      	bics	r3, r2
 8002172:	001a      	movs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4a2e      	ldr	r2, [pc, #184]	; (8002248 <TIM_OC2_SetConfig+0xe8>)
 800218e:	4013      	ands	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4a2d      	ldr	r2, [pc, #180]	; (800224c <TIM_OC2_SetConfig+0xec>)
 8002196:	4013      	ands	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2220      	movs	r2, #32
 80021aa:	4393      	bics	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a24      	ldr	r2, [pc, #144]	; (8002250 <TIM_OC2_SetConfig+0xf0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d10d      	bne.n	80021de <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	4393      	bics	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2240      	movs	r2, #64	; 0x40
 80021da:	4393      	bics	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <TIM_OC2_SetConfig+0xf0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00b      	beq.n	80021fe <TIM_OC2_SetConfig+0x9e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <TIM_OC2_SetConfig+0xf4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <TIM_OC2_SetConfig+0x9e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <TIM_OC2_SetConfig+0xf8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d003      	beq.n	80021fe <TIM_OC2_SetConfig+0x9e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a18      	ldr	r2, [pc, #96]	; (800225c <TIM_OC2_SetConfig+0xfc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d113      	bne.n	8002226 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <TIM_OC2_SetConfig+0x100>)
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4a16      	ldr	r2, [pc, #88]	; (8002264 <TIM_OC2_SetConfig+0x104>)
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	621a      	str	r2, [r3, #32]
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b006      	add	sp, #24
 8002246:	bd80      	pop	{r7, pc}
 8002248:	ffff8fff 	.word	0xffff8fff
 800224c:	fffffcff 	.word	0xfffffcff
 8002250:	40012c00 	.word	0x40012c00
 8002254:	40014000 	.word	0x40014000
 8002258:	40014400 	.word	0x40014400
 800225c:	40014800 	.word	0x40014800
 8002260:	fffffbff 	.word	0xfffffbff
 8002264:	fffff7ff 	.word	0xfffff7ff

08002268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4a35      	ldr	r2, [pc, #212]	; (800234c <TIM_OC3_SetConfig+0xe4>)
 8002278:	401a      	ands	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2270      	movs	r2, #112	; 0x70
 8002294:	4393      	bics	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2203      	movs	r2, #3
 800229c:	4393      	bics	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	4a28      	ldr	r2, [pc, #160]	; (8002350 <TIM_OC3_SetConfig+0xe8>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a24      	ldr	r2, [pc, #144]	; (8002354 <TIM_OC3_SetConfig+0xec>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10d      	bne.n	80022e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	4a23      	ldr	r2, [pc, #140]	; (8002358 <TIM_OC3_SetConfig+0xf0>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	; (800235c <TIM_OC3_SetConfig+0xf4>)
 80022de:	4013      	ands	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <TIM_OC3_SetConfig+0xec>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00b      	beq.n	8002302 <TIM_OC3_SetConfig+0x9a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <TIM_OC3_SetConfig+0xf8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <TIM_OC3_SetConfig+0x9a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <TIM_OC3_SetConfig+0xfc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d003      	beq.n	8002302 <TIM_OC3_SetConfig+0x9a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <TIM_OC3_SetConfig+0x100>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d113      	bne.n	800232a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4a19      	ldr	r2, [pc, #100]	; (800236c <TIM_OC3_SetConfig+0x104>)
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4a18      	ldr	r2, [pc, #96]	; (8002370 <TIM_OC3_SetConfig+0x108>)
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	621a      	str	r2, [r3, #32]
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b006      	add	sp, #24
 800234a:	bd80      	pop	{r7, pc}
 800234c:	fffffeff 	.word	0xfffffeff
 8002350:	fffffdff 	.word	0xfffffdff
 8002354:	40012c00 	.word	0x40012c00
 8002358:	fffff7ff 	.word	0xfffff7ff
 800235c:	fffffbff 	.word	0xfffffbff
 8002360:	40014000 	.word	0x40014000
 8002364:	40014400 	.word	0x40014400
 8002368:	40014800 	.word	0x40014800
 800236c:	ffffefff 	.word	0xffffefff
 8002370:	ffffdfff 	.word	0xffffdfff

08002374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a28      	ldr	r2, [pc, #160]	; (8002424 <TIM_OC4_SetConfig+0xb0>)
 8002384:	401a      	ands	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a22      	ldr	r2, [pc, #136]	; (8002428 <TIM_OC4_SetConfig+0xb4>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4a21      	ldr	r2, [pc, #132]	; (800242c <TIM_OC4_SetConfig+0xb8>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <TIM_OC4_SetConfig+0xbc>)
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	031b      	lsls	r3, r3, #12
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a19      	ldr	r2, [pc, #100]	; (8002434 <TIM_OC4_SetConfig+0xc0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d00b      	beq.n	80023ec <TIM_OC4_SetConfig+0x78>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a18      	ldr	r2, [pc, #96]	; (8002438 <TIM_OC4_SetConfig+0xc4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d007      	beq.n	80023ec <TIM_OC4_SetConfig+0x78>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a17      	ldr	r2, [pc, #92]	; (800243c <TIM_OC4_SetConfig+0xc8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d003      	beq.n	80023ec <TIM_OC4_SetConfig+0x78>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a16      	ldr	r2, [pc, #88]	; (8002440 <TIM_OC4_SetConfig+0xcc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d109      	bne.n	8002400 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	4a15      	ldr	r2, [pc, #84]	; (8002444 <TIM_OC4_SetConfig+0xd0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	621a      	str	r2, [r3, #32]
}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	b006      	add	sp, #24
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	ffffefff 	.word	0xffffefff
 8002428:	ffff8fff 	.word	0xffff8fff
 800242c:	fffffcff 	.word	0xfffffcff
 8002430:	ffffdfff 	.word	0xffffdfff
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40014000 	.word	0x40014000
 800243c:	40014400 	.word	0x40014400
 8002440:	40014800 	.word	0x40014800
 8002444:	ffffbfff 	.word	0xffffbfff

08002448 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2317      	movs	r3, #23
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2270      	movs	r2, #112	; 0x70
 8002466:	4393      	bics	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2207      	movs	r2, #7
 8002478:	4393      	bics	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b70      	cmp	r3, #112	; 0x70
 8002494:	d015      	beq.n	80024c2 <TIM_SlaveTimer_SetConfig+0x7a>
 8002496:	d900      	bls.n	800249a <TIM_SlaveTimer_SetConfig+0x52>
 8002498:	e05b      	b.n	8002552 <TIM_SlaveTimer_SetConfig+0x10a>
 800249a:	2b60      	cmp	r3, #96	; 0x60
 800249c:	d04f      	beq.n	800253e <TIM_SlaveTimer_SetConfig+0xf6>
 800249e:	d858      	bhi.n	8002552 <TIM_SlaveTimer_SetConfig+0x10a>
 80024a0:	2b50      	cmp	r3, #80	; 0x50
 80024a2:	d042      	beq.n	800252a <TIM_SlaveTimer_SetConfig+0xe2>
 80024a4:	d855      	bhi.n	8002552 <TIM_SlaveTimer_SetConfig+0x10a>
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d016      	beq.n	80024d8 <TIM_SlaveTimer_SetConfig+0x90>
 80024aa:	d852      	bhi.n	8002552 <TIM_SlaveTimer_SetConfig+0x10a>
 80024ac:	2b30      	cmp	r3, #48	; 0x30
 80024ae:	d055      	beq.n	800255c <TIM_SlaveTimer_SetConfig+0x114>
 80024b0:	d84f      	bhi.n	8002552 <TIM_SlaveTimer_SetConfig+0x10a>
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d052      	beq.n	800255c <TIM_SlaveTimer_SetConfig+0x114>
 80024b6:	d84c      	bhi.n	8002552 <TIM_SlaveTimer_SetConfig+0x10a>
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d04f      	beq.n	800255c <TIM_SlaveTimer_SetConfig+0x114>
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d04d      	beq.n	800255c <TIM_SlaveTimer_SetConfig+0x114>
 80024c0:	e047      	b.n	8002552 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68d9      	ldr	r1, [r3, #12]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f000 f8ab 	bl	800262c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80024d6:	e042      	b.n	800255e <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d101      	bne.n	80024e4 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e03f      	b.n	8002564 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a1a      	ldr	r2, [r3, #32]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2101      	movs	r1, #1
 80024f8:	438a      	bics	r2, r1
 80024fa:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	22f0      	movs	r2, #240	; 0xf0
 8002508:	4393      	bics	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	4313      	orrs	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	621a      	str	r2, [r3, #32]
      break;
 8002528:	e019      	b.n	800255e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6899      	ldr	r1, [r3, #8]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	001a      	movs	r2, r3
 8002538:	f000 f818 	bl	800256c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800253c:	e00f      	b.n	800255e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	001a      	movs	r2, r3
 800254c:	f000 f83c 	bl	80025c8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002550:	e005      	b.n	800255e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002552:	2317      	movs	r3, #23
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
      break;
 800255a:	e000      	b.n	800255e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800255c:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800255e:	2317      	movs	r3, #23
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	781b      	ldrb	r3, [r3, #0]
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b006      	add	sp, #24
 800256a:	bd80      	pop	{r7, pc}

0800256c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	2201      	movs	r2, #1
 8002584:	4393      	bics	r3, r2
 8002586:	001a      	movs	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	22f0      	movs	r2, #240	; 0xf0
 8002596:	4393      	bics	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	220a      	movs	r2, #10
 80025a8:	4393      	bics	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	621a      	str	r2, [r3, #32]
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b006      	add	sp, #24
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	2210      	movs	r2, #16
 80025da:	4393      	bics	r3, r2
 80025dc:	001a      	movs	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <TIM_TI2_ConfigInputStage+0x60>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	031b      	lsls	r3, r3, #12
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	22a0      	movs	r2, #160	; 0xa0
 8002604:	4393      	bics	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	621a      	str	r2, [r3, #32]
}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	46bd      	mov	sp, r7
 8002622:	b006      	add	sp, #24
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	ffff0fff 	.word	0xffff0fff

0800262c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	4a09      	ldr	r2, [pc, #36]	; (8002668 <TIM_ETR_SetConfig+0x3c>)
 8002644:	4013      	ands	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	021a      	lsls	r2, r3, #8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	431a      	orrs	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4313      	orrs	r3, r2
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b006      	add	sp, #24
 8002666:	bd80      	pop	{r7, pc}
 8002668:	ffff00ff 	.word	0xffff00ff

0800266c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	223c      	movs	r2, #60	; 0x3c
 800267a:	5c9b      	ldrb	r3, [r3, r2]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002680:	2302      	movs	r3, #2
 8002682:	e047      	b.n	8002714 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	223c      	movs	r2, #60	; 0x3c
 8002688:	2101      	movs	r1, #1
 800268a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	223d      	movs	r2, #61	; 0x3d
 8002690:	2102      	movs	r1, #2
 8002692:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2270      	movs	r2, #112	; 0x70
 80026a8:	4393      	bics	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a16      	ldr	r2, [pc, #88]	; (800271c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00f      	beq.n	80026e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	05db      	lsls	r3, r3, #23
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d009      	beq.n	80026e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a11      	ldr	r2, [pc, #68]	; (8002720 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a10      	ldr	r2, [pc, #64]	; (8002724 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d10c      	bne.n	8002702 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	4393      	bics	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	223d      	movs	r2, #61	; 0x3d
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	223c      	movs	r2, #60	; 0x3c
 800270e:	2100      	movs	r1, #0
 8002710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b004      	add	sp, #16
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40000400 	.word	0x40000400
 8002724:	40014000 	.word	0x40014000

08002728 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	223c      	movs	r2, #60	; 0x3c
 800273a:	5c9b      	ldrb	r3, [r3, r2]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002740:	2302      	movs	r3, #2
 8002742:	e03e      	b.n	80027c2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	223c      	movs	r2, #60	; 0x3c
 8002748:	2101      	movs	r1, #1
 800274a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	22ff      	movs	r2, #255	; 0xff
 8002750:	4393      	bics	r3, r2
 8002752:	001a      	movs	r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002760:	401a      	ands	r2, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800276e:	401a      	ands	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4313      	orrs	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4a16      	ldr	r2, [pc, #88]	; (80027d4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800277c:	401a      	ands	r2, r3
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800278a:	401a      	ands	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a11      	ldr	r2, [pc, #68]	; (80027dc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002798:	401a      	ands	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80027a6:	401a      	ands	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	223c      	movs	r2, #60	; 0x3c
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b004      	add	sp, #16
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	fffffcff 	.word	0xfffffcff
 80027d0:	fffffbff 	.word	0xfffffbff
 80027d4:	fffff7ff 	.word	0xfffff7ff
 80027d8:	ffffefff 	.word	0xffffefff
 80027dc:	ffffdfff 	.word	0xffffdfff
 80027e0:	ffffbfff 	.word	0xffffbfff

080027e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e044      	b.n	8002880 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d107      	bne.n	800280e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2274      	movs	r2, #116	; 0x74
 8002802:	2100      	movs	r1, #0
 8002804:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0018      	movs	r0, r3
 800280a:	f7fe f81f 	bl	800084c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2224      	movs	r2, #36	; 0x24
 8002812:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2101      	movs	r1, #1
 8002820:	438a      	bics	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0018      	movs	r0, r3
 8002828:	f000 fc36 	bl	8003098 <UART_SetConfig>
 800282c:	0003      	movs	r3, r0
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e024      	b.n	8002880 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0018      	movs	r0, r3
 8002842:	f000 fdb1 	bl	80033a8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	490d      	ldr	r1, [pc, #52]	; (8002888 <HAL_UART_Init+0xa4>)
 8002852:	400a      	ands	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	212a      	movs	r1, #42	; 0x2a
 8002862:	438a      	bics	r2, r1
 8002864:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0018      	movs	r0, r3
 800287a:	f000 fe49 	bl	8003510 <UART_CheckIdleState>
 800287e:	0003      	movs	r3, r0
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}
 8002888:	ffffb7ff 	.word	0xffffb7ff

0800288c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	1dbb      	adds	r3, r7, #6
 800289a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d000      	beq.n	80028a6 <HAL_UART_Transmit+0x1a>
 80028a4:	e096      	b.n	80029d4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_UART_Transmit+0x28>
 80028ac:	1dbb      	adds	r3, r7, #6
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e08e      	b.n	80029d6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	015b      	lsls	r3, r3, #5
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d109      	bne.n	80028d8 <HAL_UART_Transmit+0x4c>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2201      	movs	r2, #1
 80028d0:	4013      	ands	r3, r2
 80028d2:	d001      	beq.n	80028d8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e07e      	b.n	80029d6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2274      	movs	r2, #116	; 0x74
 80028dc:	5c9b      	ldrb	r3, [r3, r2]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_UART_Transmit+0x5a>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e077      	b.n	80029d6 <HAL_UART_Transmit+0x14a>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2274      	movs	r2, #116	; 0x74
 80028ea:	2101      	movs	r1, #1
 80028ec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	2100      	movs	r1, #0
 80028f4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2221      	movs	r2, #33	; 0x21
 80028fa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028fc:	f7fe f8c4 	bl	8000a88 <HAL_GetTick>
 8002900:	0003      	movs	r3, r0
 8002902:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1dba      	adds	r2, r7, #6
 8002908:	2150      	movs	r1, #80	; 0x50
 800290a:	8812      	ldrh	r2, [r2, #0]
 800290c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1dba      	adds	r2, r7, #6
 8002912:	2152      	movs	r1, #82	; 0x52
 8002914:	8812      	ldrh	r2, [r2, #0]
 8002916:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	015b      	lsls	r3, r3, #5
 8002920:	429a      	cmp	r2, r3
 8002922:	d108      	bne.n	8002936 <HAL_UART_Transmit+0xaa>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800292c:	2300      	movs	r3, #0
 800292e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	e003      	b.n	800293e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2274      	movs	r2, #116	; 0x74
 8002942:	2100      	movs	r1, #0
 8002944:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002946:	e02d      	b.n	80029a4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	0013      	movs	r3, r2
 8002952:	2200      	movs	r2, #0
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	f000 fe23 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 800295a:	1e03      	subs	r3, r0, #0
 800295c:	d001      	beq.n	8002962 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e039      	b.n	80029d6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10b      	bne.n	8002980 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	881a      	ldrh	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	05d2      	lsls	r2, r2, #23
 8002972:	0dd2      	lsrs	r2, r2, #23
 8002974:	b292      	uxth	r2, r2
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	3302      	adds	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	e008      	b.n	8002992 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	b292      	uxth	r2, r2
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3301      	adds	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2252      	movs	r2, #82	; 0x52
 8002996:	5a9b      	ldrh	r3, [r3, r2]
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b299      	uxth	r1, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2252      	movs	r2, #82	; 0x52
 80029a2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2252      	movs	r2, #82	; 0x52
 80029a8:	5a9b      	ldrh	r3, [r3, r2]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1cb      	bne.n	8002948 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	0013      	movs	r3, r2
 80029ba:	2200      	movs	r2, #0
 80029bc:	2140      	movs	r1, #64	; 0x40
 80029be:	f000 fdef 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d001      	beq.n	80029ca <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e005      	b.n	80029d6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b008      	add	sp, #32
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b088      	sub	sp, #32
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	1dbb      	adds	r3, r7, #6
 80029ea:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d150      	bne.n	8002a96 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_UART_Receive_IT+0x24>
 80029fa:	1dbb      	adds	r3, r7, #6
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e048      	b.n	8002a98 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	015b      	lsls	r3, r3, #5
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d109      	bne.n	8002a26 <HAL_UART_Receive_IT+0x48>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d001      	beq.n	8002a26 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e038      	b.n	8002a98 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2274      	movs	r2, #116	; 0x74
 8002a2a:	5c9b      	ldrb	r3, [r3, r2]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_UART_Receive_IT+0x56>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e031      	b.n	8002a98 <HAL_UART_Receive_IT+0xba>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2274      	movs	r2, #116	; 0x74
 8002a38:	2101      	movs	r1, #1
 8002a3a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	041b      	lsls	r3, r3, #16
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d019      	beq.n	8002a84 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a50:	f3ef 8310 	mrs	r3, PRIMASK
 8002a54:	613b      	str	r3, [r7, #16]
  return(result);
 8002a56:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f383 8810 	msr	PRIMASK, r3
}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	04c9      	lsls	r1, r1, #19
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f383 8810 	msr	PRIMASK, r3
}
 8002a82:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a84:	1dbb      	adds	r3, r7, #6
 8002a86:	881a      	ldrh	r2, [r3, #0]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 fe4b 	bl	8003728 <UART_Start_Receive_IT>
 8002a92:	0003      	movs	r3, r0
 8002a94:	e000      	b.n	8002a98 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
  }
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b008      	add	sp, #32
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b0ab      	sub	sp, #172	; 0xac
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	22a4      	movs	r2, #164	; 0xa4
 8002ab0:	18b9      	adds	r1, r7, r2
 8002ab2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	20a0      	movs	r0, #160	; 0xa0
 8002abc:	1839      	adds	r1, r7, r0
 8002abe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	219c      	movs	r1, #156	; 0x9c
 8002ac8:	1879      	adds	r1, r7, r1
 8002aca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002acc:	0011      	movs	r1, r2
 8002ace:	18bb      	adds	r3, r7, r2
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a99      	ldr	r2, [pc, #612]	; (8002d38 <HAL_UART_IRQHandler+0x298>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2298      	movs	r2, #152	; 0x98
 8002ad8:	18bc      	adds	r4, r7, r2
 8002ada:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002adc:	18bb      	adds	r3, r7, r2
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d114      	bne.n	8002b0e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	4013      	ands	r3, r2
 8002aec:	d00f      	beq.n	8002b0e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aee:	183b      	adds	r3, r7, r0
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2220      	movs	r2, #32
 8002af4:	4013      	ands	r3, r2
 8002af6:	d00a      	beq.n	8002b0e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d100      	bne.n	8002b02 <HAL_UART_IRQHandler+0x62>
 8002b00:	e296      	b.n	8003030 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	0010      	movs	r0, r2
 8002b0a:	4798      	blx	r3
      }
      return;
 8002b0c:	e290      	b.n	8003030 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b0e:	2398      	movs	r3, #152	; 0x98
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d100      	bne.n	8002b1a <HAL_UART_IRQHandler+0x7a>
 8002b18:	e114      	b.n	8002d44 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b1a:	239c      	movs	r3, #156	; 0x9c
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	4013      	ands	r3, r2
 8002b24:	d106      	bne.n	8002b34 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b26:	23a0      	movs	r3, #160	; 0xa0
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a83      	ldr	r2, [pc, #524]	; (8002d3c <HAL_UART_IRQHandler+0x29c>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d100      	bne.n	8002b34 <HAL_UART_IRQHandler+0x94>
 8002b32:	e107      	b.n	8002d44 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b34:	23a4      	movs	r3, #164	; 0xa4
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d012      	beq.n	8002b66 <HAL_UART_IRQHandler+0xc6>
 8002b40:	23a0      	movs	r3, #160	; 0xa0
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d00b      	beq.n	8002b66 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2201      	movs	r2, #1
 8002b54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2280      	movs	r2, #128	; 0x80
 8002b5a:	589b      	ldr	r3, [r3, r2]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2180      	movs	r1, #128	; 0x80
 8002b64:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b66:	23a4      	movs	r3, #164	; 0xa4
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d011      	beq.n	8002b96 <HAL_UART_IRQHandler+0xf6>
 8002b72:	239c      	movs	r3, #156	; 0x9c
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2202      	movs	r2, #2
 8002b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	589b      	ldr	r3, [r3, r2]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2180      	movs	r1, #128	; 0x80
 8002b94:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b96:	23a4      	movs	r3, #164	; 0xa4
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d011      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x126>
 8002ba2:	239c      	movs	r3, #156	; 0x9c
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	d00b      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2280      	movs	r2, #128	; 0x80
 8002bba:	589b      	ldr	r3, [r3, r2]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bc6:	23a4      	movs	r3, #164	; 0xa4
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2208      	movs	r2, #8
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d017      	beq.n	8002c02 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bd2:	23a0      	movs	r3, #160	; 0xa0
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d105      	bne.n	8002bea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bde:	239c      	movs	r3, #156	; 0x9c
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2201      	movs	r2, #1
 8002be6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002be8:	d00b      	beq.n	8002c02 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2208      	movs	r2, #8
 8002bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	589b      	ldr	r3, [r3, r2]
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2180      	movs	r1, #128	; 0x80
 8002c00:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c02:	23a4      	movs	r3, #164	; 0xa4
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d013      	beq.n	8002c38 <HAL_UART_IRQHandler+0x198>
 8002c10:	23a0      	movs	r3, #160	; 0xa0
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	04db      	lsls	r3, r3, #19
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d00c      	beq.n	8002c38 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	0112      	lsls	r2, r2, #4
 8002c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	589b      	ldr	r3, [r3, r2]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2180      	movs	r1, #128	; 0x80
 8002c36:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2280      	movs	r2, #128	; 0x80
 8002c3c:	589b      	ldr	r3, [r3, r2]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d100      	bne.n	8002c44 <HAL_UART_IRQHandler+0x1a4>
 8002c42:	e1f7      	b.n	8003034 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c44:	23a4      	movs	r3, #164	; 0xa4
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d00e      	beq.n	8002c6e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c50:	23a0      	movs	r3, #160	; 0xa0
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2220      	movs	r2, #32
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d008      	beq.n	8002c6e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	0010      	movs	r0, r2
 8002c6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	589b      	ldr	r3, [r3, r2]
 8002c74:	2194      	movs	r1, #148	; 0x94
 8002c76:	187a      	adds	r2, r7, r1
 8002c78:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2240      	movs	r2, #64	; 0x40
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d004      	beq.n	8002c92 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2228      	movs	r2, #40	; 0x28
 8002c8e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c90:	d047      	beq.n	8002d22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 fdf7 	bl	8003888 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2240      	movs	r2, #64	; 0x40
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d137      	bne.n	8002d18 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cac:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cb0:	2090      	movs	r0, #144	; 0x90
 8002cb2:	183a      	adds	r2, r7, r0
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cbc:	f383 8810 	msr	PRIMASK, r3
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2140      	movs	r1, #64	; 0x40
 8002cce:	438a      	bics	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cda:	f383 8810 	msr	PRIMASK, r3
}
 8002cde:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <HAL_UART_IRQHandler+0x2a0>)
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7fe f80b 	bl	8000d10 <HAL_DMA_Abort_IT>
 8002cfa:	1e03      	subs	r3, r0, #0
 8002cfc:	d01a      	beq.n	8002d34 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	0018      	movs	r0, r3
 8002d0a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0c:	e012      	b.n	8002d34 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 f9ad 	bl	8003070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d16:	e00d      	b.n	8002d34 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 f9a8 	bl	8003070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	e008      	b.n	8002d34 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 f9a3 	bl	8003070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2280      	movs	r2, #128	; 0x80
 8002d2e:	2100      	movs	r1, #0
 8002d30:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002d32:	e17f      	b.n	8003034 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d34:	46c0      	nop			; (mov r8, r8)
    return;
 8002d36:	e17d      	b.n	8003034 <HAL_UART_IRQHandler+0x594>
 8002d38:	0000080f 	.word	0x0000080f
 8002d3c:	04000120 	.word	0x04000120
 8002d40:	0800394d 	.word	0x0800394d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d000      	beq.n	8002d4e <HAL_UART_IRQHandler+0x2ae>
 8002d4c:	e131      	b.n	8002fb2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d4e:	23a4      	movs	r3, #164	; 0xa4
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2210      	movs	r2, #16
 8002d56:	4013      	ands	r3, r2
 8002d58:	d100      	bne.n	8002d5c <HAL_UART_IRQHandler+0x2bc>
 8002d5a:	e12a      	b.n	8002fb2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d5c:	23a0      	movs	r3, #160	; 0xa0
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2210      	movs	r2, #16
 8002d64:	4013      	ands	r3, r2
 8002d66:	d100      	bne.n	8002d6a <HAL_UART_IRQHandler+0x2ca>
 8002d68:	e123      	b.n	8002fb2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2210      	movs	r2, #16
 8002d70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2240      	movs	r2, #64	; 0x40
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d000      	beq.n	8002d82 <HAL_UART_IRQHandler+0x2e2>
 8002d80:	e09b      	b.n	8002eba <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	217e      	movs	r1, #126	; 0x7e
 8002d8c:	187b      	adds	r3, r7, r1
 8002d8e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d100      	bne.n	8002d9a <HAL_UART_IRQHandler+0x2fa>
 8002d98:	e14e      	b.n	8003038 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2258      	movs	r2, #88	; 0x58
 8002d9e:	5a9b      	ldrh	r3, [r3, r2]
 8002da0:	187a      	adds	r2, r7, r1
 8002da2:	8812      	ldrh	r2, [r2, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d300      	bcc.n	8002daa <HAL_UART_IRQHandler+0x30a>
 8002da8:	e146      	b.n	8003038 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	187a      	adds	r2, r7, r1
 8002dae:	215a      	movs	r1, #90	; 0x5a
 8002db0:	8812      	ldrh	r2, [r2, #0]
 8002db2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d06e      	beq.n	8002e9c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dc8:	2301      	movs	r3, #1
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dce:	f383 8810 	msr	PRIMASK, r3
}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	499a      	ldr	r1, [pc, #616]	; (8003048 <HAL_UART_IRQHandler+0x5a8>)
 8002de0:	400a      	ands	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	f383 8810 	msr	PRIMASK, r3
}
 8002dee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df0:	f3ef 8310 	mrs	r3, PRIMASK
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df8:	677b      	str	r3, [r7, #116]	; 0x74
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e00:	f383 8810 	msr	PRIMASK, r3
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2101      	movs	r1, #1
 8002e12:	438a      	bics	r2, r1
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e18:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1c:	f383 8810 	msr	PRIMASK, r3
}
 8002e20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e22:	f3ef 8310 	mrs	r3, PRIMASK
 8002e26:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e32:	f383 8810 	msr	PRIMASK, r3
}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2140      	movs	r1, #64	; 0x40
 8002e44:	438a      	bics	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e4a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e4e:	f383 8810 	msr	PRIMASK, r3
}
 8002e52:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e60:	f3ef 8310 	mrs	r3, PRIMASK
 8002e64:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e70:	f383 8810 	msr	PRIMASK, r3
}
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2110      	movs	r1, #16
 8002e82:	438a      	bics	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e88:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8c:	f383 8810 	msr	PRIMASK, r3
}
 8002e90:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7fd ff02 	bl	8000ca0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2258      	movs	r2, #88	; 0x58
 8002ea0:	5a9a      	ldrh	r2, [r3, r2]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	215a      	movs	r1, #90	; 0x5a
 8002ea6:	5a5b      	ldrh	r3, [r3, r1]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	0011      	movs	r1, r2
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 f8e4 	bl	8003080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002eb8:	e0be      	b.n	8003038 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2258      	movs	r2, #88	; 0x58
 8002ebe:	5a99      	ldrh	r1, [r3, r2]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	225a      	movs	r2, #90	; 0x5a
 8002ec4:	5a9b      	ldrh	r3, [r3, r2]
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	208e      	movs	r0, #142	; 0x8e
 8002eca:	183b      	adds	r3, r7, r0
 8002ecc:	1a8a      	subs	r2, r1, r2
 8002ece:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	225a      	movs	r2, #90	; 0x5a
 8002ed4:	5a9b      	ldrh	r3, [r3, r2]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d100      	bne.n	8002ede <HAL_UART_IRQHandler+0x43e>
 8002edc:	e0ae      	b.n	800303c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8002ede:	183b      	adds	r3, r7, r0
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d100      	bne.n	8002ee8 <HAL_UART_IRQHandler+0x448>
 8002ee6:	e0a9      	b.n	800303c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8002eec:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eee:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef0:	2488      	movs	r4, #136	; 0x88
 8002ef2:	193a      	adds	r2, r7, r4
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f383 8810 	msr	PRIMASK, r3
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	494f      	ldr	r1, [pc, #316]	; (800304c <HAL_UART_IRQHandler+0x5ac>)
 8002f0e:	400a      	ands	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	193b      	adds	r3, r7, r4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f383 8810 	msr	PRIMASK, r3
}
 8002f1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f20:	f3ef 8310 	mrs	r3, PRIMASK
 8002f24:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f26:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f28:	2484      	movs	r4, #132	; 0x84
 8002f2a:	193a      	adds	r2, r7, r4
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	2301      	movs	r3, #1
 8002f30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f383 8810 	msr	PRIMASK, r3
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	438a      	bics	r2, r1
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	193b      	adds	r3, r7, r4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	f383 8810 	msr	PRIMASK, r3
}
 8002f56:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f72:	2480      	movs	r4, #128	; 0x80
 8002f74:	193a      	adds	r2, r7, r4
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	2301      	movs	r3, #1
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	f383 8810 	msr	PRIMASK, r3
}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2110      	movs	r1, #16
 8002f90:	438a      	bics	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	193b      	adds	r3, r7, r4
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	f383 8810 	msr	PRIMASK, r3
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fa2:	183b      	adds	r3, r7, r0
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	0011      	movs	r1, r2
 8002faa:	0018      	movs	r0, r3
 8002fac:	f000 f868 	bl	8003080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fb0:	e044      	b.n	800303c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fb2:	23a4      	movs	r3, #164	; 0xa4
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	035b      	lsls	r3, r3, #13
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d010      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x542>
 8002fc0:	239c      	movs	r3, #156	; 0x9c
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	03db      	lsls	r3, r3, #15
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	0352      	lsls	r2, r2, #13
 8002fd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 fe60 	bl	8003ca0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fe0:	e02f      	b.n	8003042 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fe2:	23a4      	movs	r3, #164	; 0xa4
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	4013      	ands	r3, r2
 8002fec:	d00f      	beq.n	800300e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fee:	23a0      	movs	r3, #160	; 0xa0
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2280      	movs	r2, #128	; 0x80
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d009      	beq.n	800300e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01e      	beq.n	8003040 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	0010      	movs	r0, r2
 800300a:	4798      	blx	r3
    }
    return;
 800300c:	e018      	b.n	8003040 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800300e:	23a4      	movs	r3, #164	; 0xa4
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2240      	movs	r2, #64	; 0x40
 8003016:	4013      	ands	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_UART_IRQHandler+0x5a2>
 800301a:	23a0      	movs	r3, #160	; 0xa0
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2240      	movs	r2, #64	; 0x40
 8003022:	4013      	ands	r3, r2
 8003024:	d00d      	beq.n	8003042 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 fca6 	bl	800397a <UART_EndTransmit_IT>
    return;
 800302e:	e008      	b.n	8003042 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	e006      	b.n	8003042 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	e004      	b.n	8003042 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	e002      	b.n	8003042 <HAL_UART_IRQHandler+0x5a2>
      return;
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	e000      	b.n	8003042 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003040:	46c0      	nop			; (mov r8, r8)
  }

}
 8003042:	46bd      	mov	sp, r7
 8003044:	b02b      	add	sp, #172	; 0xac
 8003046:	bd90      	pop	{r4, r7, pc}
 8003048:	fffffeff 	.word	0xfffffeff
 800304c:	fffffedf 	.word	0xfffffedf

08003050 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003068:	46c0      	nop			; (mov r8, r8)
 800306a:	46bd      	mov	sp, r7
 800306c:	b002      	add	sp, #8
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b002      	add	sp, #8
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	000a      	movs	r2, r1
 800308a:	1cbb      	adds	r3, r7, #2
 800308c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	b002      	add	sp, #8
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030a0:	231e      	movs	r3, #30
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4aaf      	ldr	r2, [pc, #700]	; (8003384 <UART_SetConfig+0x2ec>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4aaa      	ldr	r2, [pc, #680]	; (8003388 <UART_SetConfig+0x2f0>)
 80030de:	4013      	ands	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4aa1      	ldr	r2, [pc, #644]	; (800338c <UART_SetConfig+0x2f4>)
 8003106:	4013      	ands	r3, r2
 8003108:	0019      	movs	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	430a      	orrs	r2, r1
 8003112:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a9d      	ldr	r2, [pc, #628]	; (8003390 <UART_SetConfig+0x2f8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d127      	bne.n	800316e <UART_SetConfig+0xd6>
 800311e:	4b9d      	ldr	r3, [pc, #628]	; (8003394 <UART_SetConfig+0x2fc>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	2203      	movs	r2, #3
 8003124:	4013      	ands	r3, r2
 8003126:	2b03      	cmp	r3, #3
 8003128:	d00d      	beq.n	8003146 <UART_SetConfig+0xae>
 800312a:	d81b      	bhi.n	8003164 <UART_SetConfig+0xcc>
 800312c:	2b02      	cmp	r3, #2
 800312e:	d014      	beq.n	800315a <UART_SetConfig+0xc2>
 8003130:	d818      	bhi.n	8003164 <UART_SetConfig+0xcc>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <UART_SetConfig+0xa4>
 8003136:	2b01      	cmp	r3, #1
 8003138:	d00a      	beq.n	8003150 <UART_SetConfig+0xb8>
 800313a:	e013      	b.n	8003164 <UART_SetConfig+0xcc>
 800313c:	231f      	movs	r3, #31
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e065      	b.n	8003212 <UART_SetConfig+0x17a>
 8003146:	231f      	movs	r3, #31
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2202      	movs	r2, #2
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e060      	b.n	8003212 <UART_SetConfig+0x17a>
 8003150:	231f      	movs	r3, #31
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2204      	movs	r2, #4
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e05b      	b.n	8003212 <UART_SetConfig+0x17a>
 800315a:	231f      	movs	r3, #31
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	2208      	movs	r2, #8
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e056      	b.n	8003212 <UART_SetConfig+0x17a>
 8003164:	231f      	movs	r3, #31
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2210      	movs	r2, #16
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e051      	b.n	8003212 <UART_SetConfig+0x17a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a89      	ldr	r2, [pc, #548]	; (8003398 <UART_SetConfig+0x300>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d134      	bne.n	80031e2 <UART_SetConfig+0x14a>
 8003178:	4b86      	ldr	r3, [pc, #536]	; (8003394 <UART_SetConfig+0x2fc>)
 800317a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317c:	23c0      	movs	r3, #192	; 0xc0
 800317e:	029b      	lsls	r3, r3, #10
 8003180:	4013      	ands	r3, r2
 8003182:	22c0      	movs	r2, #192	; 0xc0
 8003184:	0292      	lsls	r2, r2, #10
 8003186:	4293      	cmp	r3, r2
 8003188:	d017      	beq.n	80031ba <UART_SetConfig+0x122>
 800318a:	22c0      	movs	r2, #192	; 0xc0
 800318c:	0292      	lsls	r2, r2, #10
 800318e:	4293      	cmp	r3, r2
 8003190:	d822      	bhi.n	80031d8 <UART_SetConfig+0x140>
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	0292      	lsls	r2, r2, #10
 8003196:	4293      	cmp	r3, r2
 8003198:	d019      	beq.n	80031ce <UART_SetConfig+0x136>
 800319a:	2280      	movs	r2, #128	; 0x80
 800319c:	0292      	lsls	r2, r2, #10
 800319e:	4293      	cmp	r3, r2
 80031a0:	d81a      	bhi.n	80031d8 <UART_SetConfig+0x140>
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d004      	beq.n	80031b0 <UART_SetConfig+0x118>
 80031a6:	2280      	movs	r2, #128	; 0x80
 80031a8:	0252      	lsls	r2, r2, #9
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00a      	beq.n	80031c4 <UART_SetConfig+0x12c>
 80031ae:	e013      	b.n	80031d8 <UART_SetConfig+0x140>
 80031b0:	231f      	movs	r3, #31
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	e02b      	b.n	8003212 <UART_SetConfig+0x17a>
 80031ba:	231f      	movs	r3, #31
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	2202      	movs	r2, #2
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	e026      	b.n	8003212 <UART_SetConfig+0x17a>
 80031c4:	231f      	movs	r3, #31
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	2204      	movs	r2, #4
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	e021      	b.n	8003212 <UART_SetConfig+0x17a>
 80031ce:	231f      	movs	r3, #31
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2208      	movs	r2, #8
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e01c      	b.n	8003212 <UART_SetConfig+0x17a>
 80031d8:	231f      	movs	r3, #31
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2210      	movs	r2, #16
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e017      	b.n	8003212 <UART_SetConfig+0x17a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6d      	ldr	r2, [pc, #436]	; (800339c <UART_SetConfig+0x304>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d104      	bne.n	80031f6 <UART_SetConfig+0x15e>
 80031ec:	231f      	movs	r3, #31
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	e00d      	b.n	8003212 <UART_SetConfig+0x17a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a69      	ldr	r2, [pc, #420]	; (80033a0 <UART_SetConfig+0x308>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d104      	bne.n	800320a <UART_SetConfig+0x172>
 8003200:	231f      	movs	r3, #31
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
 8003208:	e003      	b.n	8003212 <UART_SetConfig+0x17a>
 800320a:	231f      	movs	r3, #31
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2210      	movs	r2, #16
 8003210:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	429a      	cmp	r2, r3
 800321c:	d15d      	bne.n	80032da <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800321e:	231f      	movs	r3, #31
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d015      	beq.n	8003254 <UART_SetConfig+0x1bc>
 8003228:	dc18      	bgt.n	800325c <UART_SetConfig+0x1c4>
 800322a:	2b04      	cmp	r3, #4
 800322c:	d00d      	beq.n	800324a <UART_SetConfig+0x1b2>
 800322e:	dc15      	bgt.n	800325c <UART_SetConfig+0x1c4>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <UART_SetConfig+0x1a2>
 8003234:	2b02      	cmp	r3, #2
 8003236:	d005      	beq.n	8003244 <UART_SetConfig+0x1ac>
 8003238:	e010      	b.n	800325c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800323a:	f7fe fc2f 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 800323e:	0003      	movs	r3, r0
 8003240:	61bb      	str	r3, [r7, #24]
        break;
 8003242:	e012      	b.n	800326a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003244:	4b57      	ldr	r3, [pc, #348]	; (80033a4 <UART_SetConfig+0x30c>)
 8003246:	61bb      	str	r3, [r7, #24]
        break;
 8003248:	e00f      	b.n	800326a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324a:	f7fe fb9d 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 800324e:	0003      	movs	r3, r0
 8003250:	61bb      	str	r3, [r7, #24]
        break;
 8003252:	e00a      	b.n	800326a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	61bb      	str	r3, [r7, #24]
        break;
 800325a:	e006      	b.n	800326a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003260:	231e      	movs	r3, #30
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	2201      	movs	r2, #1
 8003266:	701a      	strb	r2, [r3, #0]
        break;
 8003268:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d100      	bne.n	8003272 <UART_SetConfig+0x1da>
 8003270:	e07b      	b.n	800336a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	005a      	lsls	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	18d2      	adds	r2, r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	0019      	movs	r1, r3
 8003284:	0010      	movs	r0, r2
 8003286:	f7fc ff3f 	bl	8000108 <__udivsi3>
 800328a:	0003      	movs	r3, r0
 800328c:	b29b      	uxth	r3, r3
 800328e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b0f      	cmp	r3, #15
 8003294:	d91c      	bls.n	80032d0 <UART_SetConfig+0x238>
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	025b      	lsls	r3, r3, #9
 800329c:	429a      	cmp	r2, r3
 800329e:	d217      	bcs.n	80032d0 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	200e      	movs	r0, #14
 80032a6:	183b      	adds	r3, r7, r0
 80032a8:	210f      	movs	r1, #15
 80032aa:	438a      	bics	r2, r1
 80032ac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2207      	movs	r2, #7
 80032b6:	4013      	ands	r3, r2
 80032b8:	b299      	uxth	r1, r3
 80032ba:	183b      	adds	r3, r7, r0
 80032bc:	183a      	adds	r2, r7, r0
 80032be:	8812      	ldrh	r2, [r2, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	183a      	adds	r2, r7, r0
 80032ca:	8812      	ldrh	r2, [r2, #0]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	e04c      	b.n	800336a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80032d0:	231e      	movs	r3, #30
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e047      	b.n	800336a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032da:	231f      	movs	r3, #31
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d015      	beq.n	8003310 <UART_SetConfig+0x278>
 80032e4:	dc18      	bgt.n	8003318 <UART_SetConfig+0x280>
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d00d      	beq.n	8003306 <UART_SetConfig+0x26e>
 80032ea:	dc15      	bgt.n	8003318 <UART_SetConfig+0x280>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <UART_SetConfig+0x25e>
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d005      	beq.n	8003300 <UART_SetConfig+0x268>
 80032f4:	e010      	b.n	8003318 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f6:	f7fe fbd1 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 80032fa:	0003      	movs	r3, r0
 80032fc:	61bb      	str	r3, [r7, #24]
        break;
 80032fe:	e012      	b.n	8003326 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003300:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <UART_SetConfig+0x30c>)
 8003302:	61bb      	str	r3, [r7, #24]
        break;
 8003304:	e00f      	b.n	8003326 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003306:	f7fe fb3f 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 800330a:	0003      	movs	r3, r0
 800330c:	61bb      	str	r3, [r7, #24]
        break;
 800330e:	e00a      	b.n	8003326 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	61bb      	str	r3, [r7, #24]
        break;
 8003316:	e006      	b.n	8003326 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800331c:	231e      	movs	r3, #30
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
        break;
 8003324:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01e      	beq.n	800336a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	085a      	lsrs	r2, r3, #1
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	18d2      	adds	r2, r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	0019      	movs	r1, r3
 800333c:	0010      	movs	r0, r2
 800333e:	f7fc fee3 	bl	8000108 <__udivsi3>
 8003342:	0003      	movs	r3, r0
 8003344:	b29b      	uxth	r3, r3
 8003346:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2b0f      	cmp	r3, #15
 800334c:	d909      	bls.n	8003362 <UART_SetConfig+0x2ca>
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	025b      	lsls	r3, r3, #9
 8003354:	429a      	cmp	r2, r3
 8003356:	d204      	bcs.n	8003362 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	e003      	b.n	800336a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003362:	231e      	movs	r3, #30
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003376:	231e      	movs	r3, #30
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	781b      	ldrb	r3, [r3, #0]
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	b008      	add	sp, #32
 8003382:	bd80      	pop	{r7, pc}
 8003384:	efff69f3 	.word	0xefff69f3
 8003388:	ffffcfff 	.word	0xffffcfff
 800338c:	fffff4ff 	.word	0xfffff4ff
 8003390:	40013800 	.word	0x40013800
 8003394:	40021000 	.word	0x40021000
 8003398:	40004400 	.word	0x40004400
 800339c:	40004800 	.word	0x40004800
 80033a0:	40004c00 	.word	0x40004c00
 80033a4:	007a1200 	.word	0x007a1200

080033a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2201      	movs	r2, #1
 80033b6:	4013      	ands	r3, r2
 80033b8:	d00b      	beq.n	80033d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a4a      	ldr	r2, [pc, #296]	; (80034ec <UART_AdvFeatureConfig+0x144>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	2202      	movs	r2, #2
 80033d8:	4013      	ands	r3, r2
 80033da:	d00b      	beq.n	80033f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4a43      	ldr	r2, [pc, #268]	; (80034f0 <UART_AdvFeatureConfig+0x148>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	0019      	movs	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	2204      	movs	r2, #4
 80033fa:	4013      	ands	r3, r2
 80033fc:	d00b      	beq.n	8003416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4a3b      	ldr	r2, [pc, #236]	; (80034f4 <UART_AdvFeatureConfig+0x14c>)
 8003406:	4013      	ands	r3, r2
 8003408:	0019      	movs	r1, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2208      	movs	r2, #8
 800341c:	4013      	ands	r3, r2
 800341e:	d00b      	beq.n	8003438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4a34      	ldr	r2, [pc, #208]	; (80034f8 <UART_AdvFeatureConfig+0x150>)
 8003428:	4013      	ands	r3, r2
 800342a:	0019      	movs	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2210      	movs	r2, #16
 800343e:	4013      	ands	r3, r2
 8003440:	d00b      	beq.n	800345a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <UART_AdvFeatureConfig+0x154>)
 800344a:	4013      	ands	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2220      	movs	r2, #32
 8003460:	4013      	ands	r3, r2
 8003462:	d00b      	beq.n	800347c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	4a25      	ldr	r2, [pc, #148]	; (8003500 <UART_AdvFeatureConfig+0x158>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	2240      	movs	r2, #64	; 0x40
 8003482:	4013      	ands	r3, r2
 8003484:	d01d      	beq.n	80034c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <UART_AdvFeatureConfig+0x15c>)
 800348e:	4013      	ands	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	035b      	lsls	r3, r3, #13
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d10b      	bne.n	80034c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a15      	ldr	r2, [pc, #84]	; (8003508 <UART_AdvFeatureConfig+0x160>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	0019      	movs	r1, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	4013      	ands	r3, r2
 80034ca:	d00b      	beq.n	80034e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4a0e      	ldr	r2, [pc, #56]	; (800350c <UART_AdvFeatureConfig+0x164>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	0019      	movs	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
  }
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	fffdffff 	.word	0xfffdffff
 80034f0:	fffeffff 	.word	0xfffeffff
 80034f4:	fffbffff 	.word	0xfffbffff
 80034f8:	ffff7fff 	.word	0xffff7fff
 80034fc:	ffffefff 	.word	0xffffefff
 8003500:	ffffdfff 	.word	0xffffdfff
 8003504:	ffefffff 	.word	0xffefffff
 8003508:	ff9fffff 	.word	0xff9fffff
 800350c:	fff7ffff 	.word	0xfff7ffff

08003510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af02      	add	r7, sp, #8
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2280      	movs	r2, #128	; 0x80
 800351c:	2100      	movs	r1, #0
 800351e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003520:	f7fd fab2 	bl	8000a88 <HAL_GetTick>
 8003524:	0003      	movs	r3, r0
 8003526:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2208      	movs	r2, #8
 8003530:	4013      	ands	r3, r2
 8003532:	2b08      	cmp	r3, #8
 8003534:	d10c      	bne.n	8003550 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	0391      	lsls	r1, r2, #14
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4a17      	ldr	r2, [pc, #92]	; (800359c <UART_CheckIdleState+0x8c>)
 8003540:	9200      	str	r2, [sp, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	f000 f82c 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 8003548:	1e03      	subs	r3, r0, #0
 800354a:	d001      	beq.n	8003550 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e021      	b.n	8003594 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2204      	movs	r2, #4
 8003558:	4013      	ands	r3, r2
 800355a:	2b04      	cmp	r3, #4
 800355c:	d10c      	bne.n	8003578 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	03d1      	lsls	r1, r2, #15
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4a0d      	ldr	r2, [pc, #52]	; (800359c <UART_CheckIdleState+0x8c>)
 8003568:	9200      	str	r2, [sp, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	f000 f818 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 8003570:	1e03      	subs	r3, r0, #0
 8003572:	d001      	beq.n	8003578 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e00d      	b.n	8003594 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2274      	movs	r2, #116	; 0x74
 800358e:	2100      	movs	r1, #0
 8003590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b004      	add	sp, #16
 800359a:	bd80      	pop	{r7, pc}
 800359c:	01ffffff 	.word	0x01ffffff

080035a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b094      	sub	sp, #80	; 0x50
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	1dfb      	adds	r3, r7, #7
 80035ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b0:	e0a3      	b.n	80036fa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b4:	3301      	adds	r3, #1
 80035b6:	d100      	bne.n	80035ba <UART_WaitOnFlagUntilTimeout+0x1a>
 80035b8:	e09f      	b.n	80036fa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ba:	f7fd fa65 	bl	8000a88 <HAL_GetTick>
 80035be:	0002      	movs	r2, r0
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d13d      	bne.n	800364c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d0:	f3ef 8310 	mrs	r3, PRIMASK
 80035d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035d8:	647b      	str	r3, [r7, #68]	; 0x44
 80035da:	2301      	movs	r3, #1
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	f383 8810 	msr	PRIMASK, r3
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	494c      	ldr	r1, [pc, #304]	; (8003724 <UART_WaitOnFlagUntilTimeout+0x184>)
 80035f2:	400a      	ands	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	f383 8810 	msr	PRIMASK, r3
}
 8003600:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003602:	f3ef 8310 	mrs	r3, PRIMASK
 8003606:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	643b      	str	r3, [r7, #64]	; 0x40
 800360c:	2301      	movs	r3, #1
 800360e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2101      	movs	r1, #1
 8003624:	438a      	bics	r2, r1
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362e:	f383 8810 	msr	PRIMASK, r3
}
 8003632:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2274      	movs	r2, #116	; 0x74
 8003644:	2100      	movs	r1, #0
 8003646:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e067      	b.n	800371c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2204      	movs	r2, #4
 8003654:	4013      	ands	r3, r2
 8003656:	d050      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	401a      	ands	r2, r3
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	429a      	cmp	r2, r3
 800366a:	d146      	bne.n	80036fa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2280      	movs	r2, #128	; 0x80
 8003672:	0112      	lsls	r2, r2, #4
 8003674:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003676:	f3ef 8310 	mrs	r3, PRIMASK
 800367a:	613b      	str	r3, [r7, #16]
  return(result);
 800367c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800367e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003680:	2301      	movs	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f383 8810 	msr	PRIMASK, r3
}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4923      	ldr	r1, [pc, #140]	; (8003724 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003698:	400a      	ands	r2, r1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f383 8810 	msr	PRIMASK, r3
}
 80036a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80036ae:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80036b2:	2301      	movs	r3, #1
 80036b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f383 8810 	msr	PRIMASK, r3
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2101      	movs	r1, #1
 80036ca:	438a      	bics	r2, r1
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	f383 8810 	msr	PRIMASK, r3
}
 80036d8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2280      	movs	r2, #128	; 0x80
 80036ea:	2120      	movs	r1, #32
 80036ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2274      	movs	r2, #116	; 0x74
 80036f2:	2100      	movs	r1, #0
 80036f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e010      	b.n	800371c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	425a      	negs	r2, r3
 800370a:	4153      	adcs	r3, r2
 800370c:	b2db      	uxtb	r3, r3
 800370e:	001a      	movs	r2, r3
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d100      	bne.n	800371a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003718:	e74b      	b.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	b014      	add	sp, #80	; 0x50
 8003722:	bd80      	pop	{r7, pc}
 8003724:	fffffe5f 	.word	0xfffffe5f

08003728 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08c      	sub	sp, #48	; 0x30
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	1dbb      	adds	r3, r7, #6
 8003734:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1dba      	adds	r2, r7, #6
 8003740:	2158      	movs	r1, #88	; 0x58
 8003742:	8812      	ldrh	r2, [r2, #0]
 8003744:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1dba      	adds	r2, r7, #6
 800374a:	215a      	movs	r1, #90	; 0x5a
 800374c:	8812      	ldrh	r2, [r2, #0]
 800374e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	015b      	lsls	r3, r3, #5
 800375e:	429a      	cmp	r2, r3
 8003760:	d10d      	bne.n	800377e <UART_Start_Receive_IT+0x56>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d104      	bne.n	8003774 <UART_Start_Receive_IT+0x4c>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	225c      	movs	r2, #92	; 0x5c
 800376e:	4943      	ldr	r1, [pc, #268]	; (800387c <UART_Start_Receive_IT+0x154>)
 8003770:	5299      	strh	r1, [r3, r2]
 8003772:	e02e      	b.n	80037d2 <UART_Start_Receive_IT+0xaa>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	225c      	movs	r2, #92	; 0x5c
 8003778:	21ff      	movs	r1, #255	; 0xff
 800377a:	5299      	strh	r1, [r3, r2]
 800377c:	e029      	b.n	80037d2 <UART_Start_Receive_IT+0xaa>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10d      	bne.n	80037a2 <UART_Start_Receive_IT+0x7a>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d104      	bne.n	8003798 <UART_Start_Receive_IT+0x70>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	225c      	movs	r2, #92	; 0x5c
 8003792:	21ff      	movs	r1, #255	; 0xff
 8003794:	5299      	strh	r1, [r3, r2]
 8003796:	e01c      	b.n	80037d2 <UART_Start_Receive_IT+0xaa>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	225c      	movs	r2, #92	; 0x5c
 800379c:	217f      	movs	r1, #127	; 0x7f
 800379e:	5299      	strh	r1, [r3, r2]
 80037a0:	e017      	b.n	80037d2 <UART_Start_Receive_IT+0xaa>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	055b      	lsls	r3, r3, #21
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d10d      	bne.n	80037ca <UART_Start_Receive_IT+0xa2>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d104      	bne.n	80037c0 <UART_Start_Receive_IT+0x98>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	225c      	movs	r2, #92	; 0x5c
 80037ba:	217f      	movs	r1, #127	; 0x7f
 80037bc:	5299      	strh	r1, [r3, r2]
 80037be:	e008      	b.n	80037d2 <UART_Start_Receive_IT+0xaa>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	225c      	movs	r2, #92	; 0x5c
 80037c4:	213f      	movs	r1, #63	; 0x3f
 80037c6:	5299      	strh	r1, [r3, r2]
 80037c8:	e003      	b.n	80037d2 <UART_Start_Receive_IT+0xaa>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	225c      	movs	r2, #92	; 0x5c
 80037ce:	2100      	movs	r1, #0
 80037d0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	2100      	movs	r1, #0
 80037d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2222      	movs	r2, #34	; 0x22
 80037de:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e0:	f3ef 8310 	mrs	r3, PRIMASK
 80037e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80037e6:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ea:	2301      	movs	r3, #1
 80037ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f383 8810 	msr	PRIMASK, r3
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2101      	movs	r1, #1
 8003802:	430a      	orrs	r2, r1
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	f383 8810 	msr	PRIMASK, r3
}
 8003810:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	015b      	lsls	r3, r3, #5
 800381a:	429a      	cmp	r2, r3
 800381c:	d107      	bne.n	800382e <UART_Start_Receive_IT+0x106>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d103      	bne.n	800382e <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a15      	ldr	r2, [pc, #84]	; (8003880 <UART_Start_Receive_IT+0x158>)
 800382a:	665a      	str	r2, [r3, #100]	; 0x64
 800382c:	e002      	b.n	8003834 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <UART_Start_Receive_IT+0x15c>)
 8003832:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2274      	movs	r2, #116	; 0x74
 8003838:	2100      	movs	r1, #0
 800383a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383c:	f3ef 8310 	mrs	r3, PRIMASK
 8003840:	613b      	str	r3, [r7, #16]
  return(result);
 8003842:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
 8003846:	2301      	movs	r3, #1
 8003848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2190      	movs	r1, #144	; 0x90
 800385e:	0049      	lsls	r1, r1, #1
 8003860:	430a      	orrs	r2, r1
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003866:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f383 8810 	msr	PRIMASK, r3
}
 800386e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b00c      	add	sp, #48	; 0x30
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	000001ff 	.word	0x000001ff
 8003880:	08003b39 	.word	0x08003b39
 8003884:	080039d1 	.word	0x080039d1

08003888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08e      	sub	sp, #56	; 0x38
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003890:	f3ef 8310 	mrs	r3, PRIMASK
 8003894:	617b      	str	r3, [r7, #20]
  return(result);
 8003896:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003898:	637b      	str	r3, [r7, #52]	; 0x34
 800389a:	2301      	movs	r3, #1
 800389c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	f383 8810 	msr	PRIMASK, r3
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4925      	ldr	r1, [pc, #148]	; (8003948 <UART_EndRxTransfer+0xc0>)
 80038b2:	400a      	ands	r2, r1
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f383 8810 	msr	PRIMASK, r3
}
 80038c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c2:	f3ef 8310 	mrs	r3, PRIMASK
 80038c6:	623b      	str	r3, [r7, #32]
  return(result);
 80038c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30
 80038cc:	2301      	movs	r3, #1
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	f383 8810 	msr	PRIMASK, r3
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2101      	movs	r1, #1
 80038e4:	438a      	bics	r2, r1
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ee:	f383 8810 	msr	PRIMASK, r3
}
 80038f2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d118      	bne.n	800392e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003900:	60bb      	str	r3, [r7, #8]
  return(result);
 8003902:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003906:	2301      	movs	r3, #1
 8003908:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f383 8810 	msr	PRIMASK, r3
}
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2110      	movs	r1, #16
 800391e:	438a      	bics	r2, r1
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f383 8810 	msr	PRIMASK, r3
}
 800392c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b00e      	add	sp, #56	; 0x38
 8003946:	bd80      	pop	{r7, pc}
 8003948:	fffffedf 	.word	0xfffffedf

0800394c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	225a      	movs	r2, #90	; 0x5a
 800395e:	2100      	movs	r1, #0
 8003960:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2252      	movs	r2, #82	; 0x52
 8003966:	2100      	movs	r1, #0
 8003968:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	0018      	movs	r0, r3
 800396e:	f7ff fb7f 	bl	8003070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	b004      	add	sp, #16
 8003978:	bd80      	pop	{r7, pc}

0800397a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003982:	f3ef 8310 	mrs	r3, PRIMASK
 8003986:	60bb      	str	r3, [r7, #8]
  return(result);
 8003988:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	2301      	movs	r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f383 8810 	msr	PRIMASK, r3
}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2140      	movs	r1, #64	; 0x40
 80039a4:	438a      	bics	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f383 8810 	msr	PRIMASK, r3
}
 80039b2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7ff fb44 	bl	8003050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b006      	add	sp, #24
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b090      	sub	sp, #64	; 0x40
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80039d8:	203e      	movs	r0, #62	; 0x3e
 80039da:	183b      	adds	r3, r7, r0
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	215c      	movs	r1, #92	; 0x5c
 80039e0:	5a52      	ldrh	r2, [r2, r1]
 80039e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039e8:	2b22      	cmp	r3, #34	; 0x22
 80039ea:	d000      	beq.n	80039ee <UART_RxISR_8BIT+0x1e>
 80039ec:	e095      	b.n	8003b1a <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	213c      	movs	r1, #60	; 0x3c
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80039f8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	183b      	adds	r3, r7, r0
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b2d9      	uxtb	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	225a      	movs	r2, #90	; 0x5a
 8003a1e:	5a9b      	ldrh	r3, [r3, r2]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b299      	uxth	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	225a      	movs	r2, #90	; 0x5a
 8003a2a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	225a      	movs	r2, #90	; 0x5a
 8003a30:	5a9b      	ldrh	r3, [r3, r2]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d178      	bne.n	8003b2a <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a38:	f3ef 8310 	mrs	r3, PRIMASK
 8003a3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a3e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a42:	2301      	movs	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f383 8810 	msr	PRIMASK, r3
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4936      	ldr	r1, [pc, #216]	; (8003b34 <UART_RxISR_8BIT+0x164>)
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	2301      	movs	r3, #1
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	f383 8810 	msr	PRIMASK, r3
}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	438a      	bics	r2, r1
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	f383 8810 	msr	PRIMASK, r3
}
 8003a9a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d12f      	bne.n	8003b10 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aba:	60fb      	str	r3, [r7, #12]
  return(result);
 8003abc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003abe:	633b      	str	r3, [r7, #48]	; 0x30
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f383 8810 	msr	PRIMASK, r3
}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2110      	movs	r1, #16
 8003ad8:	438a      	bics	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f383 8810 	msr	PRIMASK, r3
}
 8003ae6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	2210      	movs	r2, #16
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d103      	bne.n	8003afe <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2210      	movs	r2, #16
 8003afc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2258      	movs	r2, #88	; 0x58
 8003b02:	5a9a      	ldrh	r2, [r3, r2]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	0011      	movs	r1, r2
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7ff fab9 	bl	8003080 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b0e:	e00c      	b.n	8003b2a <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7ff faa4 	bl	8003060 <HAL_UART_RxCpltCallback>
}
 8003b18:	e007      	b.n	8003b2a <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2108      	movs	r1, #8
 8003b26:	430a      	orrs	r2, r1
 8003b28:	619a      	str	r2, [r3, #24]
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b010      	add	sp, #64	; 0x40
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	fffffedf 	.word	0xfffffedf

08003b38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b090      	sub	sp, #64	; 0x40
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b40:	203e      	movs	r0, #62	; 0x3e
 8003b42:	183b      	adds	r3, r7, r0
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	215c      	movs	r1, #92	; 0x5c
 8003b48:	5a52      	ldrh	r2, [r2, r1]
 8003b4a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b50:	2b22      	cmp	r3, #34	; 0x22
 8003b52:	d000      	beq.n	8003b56 <UART_RxISR_16BIT+0x1e>
 8003b54:	e095      	b.n	8003c82 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	213c      	movs	r1, #60	; 0x3c
 8003b5c:	187b      	adds	r3, r7, r1
 8003b5e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003b60:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	183a      	adds	r2, r7, r0
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	8812      	ldrh	r2, [r2, #0]
 8003b70:	4013      	ands	r3, r2
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	225a      	movs	r2, #90	; 0x5a
 8003b86:	5a9b      	ldrh	r3, [r3, r2]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b299      	uxth	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	225a      	movs	r2, #90	; 0x5a
 8003b92:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	225a      	movs	r2, #90	; 0x5a
 8003b98:	5a9b      	ldrh	r3, [r3, r2]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d178      	bne.n	8003c92 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ba6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8003baa:	2301      	movs	r3, #1
 8003bac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f383 8810 	msr	PRIMASK, r3
}
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4936      	ldr	r1, [pc, #216]	; (8003c9c <UART_RxISR_16BIT+0x164>)
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f383 8810 	msr	PRIMASK, r3
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd6:	623b      	str	r3, [r7, #32]
  return(result);
 8003bd8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bda:	633b      	str	r3, [r7, #48]	; 0x30
 8003bdc:	2301      	movs	r3, #1
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	f383 8810 	msr	PRIMASK, r3
}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	438a      	bics	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfe:	f383 8810 	msr	PRIMASK, r3
}
 8003c02:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d12f      	bne.n	8003c78 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c22:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c24:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c28:	2301      	movs	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f383 8810 	msr	PRIMASK, r3
}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2110      	movs	r1, #16
 8003c40:	438a      	bics	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f383 8810 	msr	PRIMASK, r3
}
 8003c4e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	2210      	movs	r2, #16
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d103      	bne.n	8003c66 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2210      	movs	r2, #16
 8003c64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2258      	movs	r2, #88	; 0x58
 8003c6a:	5a9a      	ldrh	r2, [r3, r2]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	0011      	movs	r1, r2
 8003c70:	0018      	movs	r0, r3
 8003c72:	f7ff fa05 	bl	8003080 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c76:	e00c      	b.n	8003c92 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f7ff f9f0 	bl	8003060 <HAL_UART_RxCpltCallback>
}
 8003c80:	e007      	b.n	8003c92 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2108      	movs	r1, #8
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	619a      	str	r2, [r3, #24]
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b010      	add	sp, #64	; 0x40
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	fffffedf 	.word	0xfffffedf

08003ca0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ca8:	46c0      	nop			; (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b002      	add	sp, #8
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <__libc_init_array>:
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	2600      	movs	r6, #0
 8003cb4:	4d0c      	ldr	r5, [pc, #48]	; (8003ce8 <__libc_init_array+0x38>)
 8003cb6:	4c0d      	ldr	r4, [pc, #52]	; (8003cec <__libc_init_array+0x3c>)
 8003cb8:	1b64      	subs	r4, r4, r5
 8003cba:	10a4      	asrs	r4, r4, #2
 8003cbc:	42a6      	cmp	r6, r4
 8003cbe:	d109      	bne.n	8003cd4 <__libc_init_array+0x24>
 8003cc0:	2600      	movs	r6, #0
 8003cc2:	f000 f821 	bl	8003d08 <_init>
 8003cc6:	4d0a      	ldr	r5, [pc, #40]	; (8003cf0 <__libc_init_array+0x40>)
 8003cc8:	4c0a      	ldr	r4, [pc, #40]	; (8003cf4 <__libc_init_array+0x44>)
 8003cca:	1b64      	subs	r4, r4, r5
 8003ccc:	10a4      	asrs	r4, r4, #2
 8003cce:	42a6      	cmp	r6, r4
 8003cd0:	d105      	bne.n	8003cde <__libc_init_array+0x2e>
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	00b3      	lsls	r3, r6, #2
 8003cd6:	58eb      	ldr	r3, [r5, r3]
 8003cd8:	4798      	blx	r3
 8003cda:	3601      	adds	r6, #1
 8003cdc:	e7ee      	b.n	8003cbc <__libc_init_array+0xc>
 8003cde:	00b3      	lsls	r3, r6, #2
 8003ce0:	58eb      	ldr	r3, [r5, r3]
 8003ce2:	4798      	blx	r3
 8003ce4:	3601      	adds	r6, #1
 8003ce6:	e7f2      	b.n	8003cce <__libc_init_array+0x1e>
 8003ce8:	08003d60 	.word	0x08003d60
 8003cec:	08003d60 	.word	0x08003d60
 8003cf0:	08003d60 	.word	0x08003d60
 8003cf4:	08003d64 	.word	0x08003d64

08003cf8 <memset>:
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	1882      	adds	r2, r0, r2
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d100      	bne.n	8003d02 <memset+0xa>
 8003d00:	4770      	bx	lr
 8003d02:	7019      	strb	r1, [r3, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	e7f9      	b.n	8003cfc <memset+0x4>

08003d08 <_init>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0e:	bc08      	pop	{r3}
 8003d10:	469e      	mov	lr, r3
 8003d12:	4770      	bx	lr

08003d14 <_fini>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr
