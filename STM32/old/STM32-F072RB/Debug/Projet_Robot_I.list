
Projet_Robot_I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004238  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004350  08004350  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004350  08004350  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004350  08004350  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004350  08004350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000000c  08004364  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08004364  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125e3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f8  00000000  00000000  00032617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00034e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00035d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa1b  00000000  00000000  00036ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e59  00000000  00000000  000514f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a2e7  00000000  00000000  0006534c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff633  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f4  00000000  00000000  000ff688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042e0 	.word	0x080042e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080042e0 	.word	0x080042e0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <envoyer_message_pc>:


/*
 * Envoyer un message depuis le PC
 */
int envoyer_message_pc (char message[50]){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, &message, 50, 100);
 800023c:	1d39      	adds	r1, r7, #4
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <envoyer_message_pc+0x20>)
 8000240:	2364      	movs	r3, #100	; 0x64
 8000242:	2232      	movs	r2, #50	; 0x32
 8000244:	f002 fe06 	bl	8002e54 <HAL_UART_Transmit>

	return 1;
 8000248:	2301      	movs	r3, #1
}
 800024a:	0018      	movs	r0, r3
 800024c:	46bd      	mov	sp, r7
 800024e:	b002      	add	sp, #8
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	2000023c 	.word	0x2000023c

08000258 <recevoir_message_pc>:

/*
 * Cette fonction est activelorsqu'on recoit un message du PC.
 * Elle permet de traiter l'information.
 */
void recevoir_message_pc(){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

	strcpy(UART1_rxBuffer,message_recu_PC);
 800025c:	4a10      	ldr	r2, [pc, #64]	; (80002a0 <recevoir_message_pc+0x48>)
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <recevoir_message_pc+0x4c>)
 8000260:	0011      	movs	r1, r2
 8000262:	0018      	movs	r0, r3
 8000264:	f004 f834 	bl	80042d0 <strcpy>

	if (strcmp(&message_recu_PC,"test")){
 8000268:	4a0f      	ldr	r2, [pc, #60]	; (80002a8 <recevoir_message_pc+0x50>)
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <recevoir_message_pc+0x48>)
 800026c:	0011      	movs	r1, r2
 800026e:	0018      	movs	r0, r3
 8000270:	f7ff ff4a 	bl	8000108 <strcmp>
 8000274:	1e03      	subs	r3, r0, #0
 8000276:	d004      	beq.n	8000282 <recevoir_message_pc+0x2a>
		envoyer_message_pc("test recu");
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <recevoir_message_pc+0x54>)
 800027a:	0018      	movs	r0, r3
 800027c:	f7ff ffda 	bl	8000234 <envoyer_message_pc>
		return;
 8000280:	e00c      	b.n	800029c <recevoir_message_pc+0x44>
	}

	else if (strcmp(&message_recu_PC,"A")){
 8000282:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <recevoir_message_pc+0x58>)
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <recevoir_message_pc+0x48>)
 8000286:	0011      	movs	r1, r2
 8000288:	0018      	movs	r0, r3
 800028a:	f7ff ff3d 	bl	8000108 <strcmp>
 800028e:	1e03      	subs	r3, r0, #0
 8000290:	d004      	beq.n	800029c <recevoir_message_pc+0x44>
		envoyer_message_pc("test recu");
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <recevoir_message_pc+0x54>)
 8000294:	0018      	movs	r0, r3
 8000296:	f7ff ffcd 	bl	8000234 <envoyer_message_pc>
		return;
 800029a:	46c0      	nop			; (mov r8, r8)





}
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000028 	.word	0x20000028
 80002a4:	200000b4 	.word	0x200000b4
 80002a8:	080042f8 	.word	0x080042f8
 80002ac:	08004300 	.word	0x08004300
 80002b0:	0800430c 	.word	0x0800430c

080002b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002b4:	b590      	push	{r4, r7, lr}
 80002b6:	b08b      	sub	sp, #44	; 0x2c
 80002b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ba:	2414      	movs	r4, #20
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	0018      	movs	r0, r3
 80002c0:	2314      	movs	r3, #20
 80002c2:	001a      	movs	r2, r3
 80002c4:	2100      	movs	r1, #0
 80002c6:	f003 fffb 	bl	80042c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ca:	4b33      	ldr	r3, [pc, #204]	; (8000398 <MX_GPIO_Init+0xe4>)
 80002cc:	695a      	ldr	r2, [r3, #20]
 80002ce:	4b32      	ldr	r3, [pc, #200]	; (8000398 <MX_GPIO_Init+0xe4>)
 80002d0:	2180      	movs	r1, #128	; 0x80
 80002d2:	0309      	lsls	r1, r1, #12
 80002d4:	430a      	orrs	r2, r1
 80002d6:	615a      	str	r2, [r3, #20]
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <MX_GPIO_Init+0xe4>)
 80002da:	695a      	ldr	r2, [r3, #20]
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	031b      	lsls	r3, r3, #12
 80002e0:	4013      	ands	r3, r2
 80002e2:	613b      	str	r3, [r7, #16]
 80002e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002e6:	4b2c      	ldr	r3, [pc, #176]	; (8000398 <MX_GPIO_Init+0xe4>)
 80002e8:	695a      	ldr	r2, [r3, #20]
 80002ea:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <MX_GPIO_Init+0xe4>)
 80002ec:	2180      	movs	r1, #128	; 0x80
 80002ee:	03c9      	lsls	r1, r1, #15
 80002f0:	430a      	orrs	r2, r1
 80002f2:	615a      	str	r2, [r3, #20]
 80002f4:	4b28      	ldr	r3, [pc, #160]	; (8000398 <MX_GPIO_Init+0xe4>)
 80002f6:	695a      	ldr	r2, [r3, #20]
 80002f8:	2380      	movs	r3, #128	; 0x80
 80002fa:	03db      	lsls	r3, r3, #15
 80002fc:	4013      	ands	r3, r2
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	4b25      	ldr	r3, [pc, #148]	; (8000398 <MX_GPIO_Init+0xe4>)
 8000304:	695a      	ldr	r2, [r3, #20]
 8000306:	4b24      	ldr	r3, [pc, #144]	; (8000398 <MX_GPIO_Init+0xe4>)
 8000308:	2180      	movs	r1, #128	; 0x80
 800030a:	0289      	lsls	r1, r1, #10
 800030c:	430a      	orrs	r2, r1
 800030e:	615a      	str	r2, [r3, #20]
 8000310:	4b21      	ldr	r3, [pc, #132]	; (8000398 <MX_GPIO_Init+0xe4>)
 8000312:	695a      	ldr	r2, [r3, #20]
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	029b      	lsls	r3, r3, #10
 8000318:	4013      	ands	r3, r2
 800031a:	60bb      	str	r3, [r7, #8]
 800031c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <MX_GPIO_Init+0xe4>)
 8000320:	695a      	ldr	r2, [r3, #20]
 8000322:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <MX_GPIO_Init+0xe4>)
 8000324:	2180      	movs	r1, #128	; 0x80
 8000326:	02c9      	lsls	r1, r1, #11
 8000328:	430a      	orrs	r2, r1
 800032a:	615a      	str	r2, [r3, #20]
 800032c:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <MX_GPIO_Init+0xe4>)
 800032e:	695a      	ldr	r2, [r3, #20]
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	02db      	lsls	r3, r3, #11
 8000334:	4013      	ands	r3, r2
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(test_GPIO_Port, test_Pin, GPIO_PIN_RESET);
 800033a:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_GPIO_Init+0xe8>)
 800033c:	2200      	movs	r2, #0
 800033e:	2140      	movs	r1, #64	; 0x40
 8000340:	0018      	movs	r0, r3
 8000342:	f001 f8cf 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000346:	193b      	adds	r3, r7, r4
 8000348:	2280      	movs	r2, #128	; 0x80
 800034a:	0192      	lsls	r2, r2, #6
 800034c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800034e:	193b      	adds	r3, r7, r4
 8000350:	2284      	movs	r2, #132	; 0x84
 8000352:	0392      	lsls	r2, r2, #14
 8000354:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	193b      	adds	r3, r7, r4
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800035c:	193b      	adds	r3, r7, r4
 800035e:	4a0f      	ldr	r2, [pc, #60]	; (800039c <MX_GPIO_Init+0xe8>)
 8000360:	0019      	movs	r1, r3
 8000362:	0010      	movs	r0, r2
 8000364:	f000 ff46 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = test_Pin;
 8000368:	0021      	movs	r1, r4
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2240      	movs	r2, #64	; 0x40
 800036e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2201      	movs	r2, #1
 8000374:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	187b      	adds	r3, r7, r1
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 8000382:	187b      	adds	r3, r7, r1
 8000384:	4a05      	ldr	r2, [pc, #20]	; (800039c <MX_GPIO_Init+0xe8>)
 8000386:	0019      	movs	r1, r3
 8000388:	0010      	movs	r0, r2
 800038a:	f000 ff33 	bl	80011f4 <HAL_GPIO_Init>

}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b00b      	add	sp, #44	; 0x2c
 8000394:	bd90      	pop	{r4, r7, pc}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	40021000 	.word	0x40021000
 800039c:	48000800 	.word	0x48000800

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a6:	f000 fd41 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003aa:	f000 f86b 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ae:	f7ff ff81 	bl	80002b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003b2:	f000 fafb 	bl	80009ac <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80003b6:	f000 f9e1 	bl	800077c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80003ba:	f000 fb57 	bl	8000a6c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80003be:	f000 fb25 	bl	8000a0c <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80003c2:	f000 fb83 	bl	8000acc <MX_USART4_UART_Init>
  MX_SPI1_Init();
 80003c6:	f000 f8c7 	bl	8000558 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 80003ca:	4924      	ldr	r1, [pc, #144]	; (800045c <main+0xbc>)
 80003cc:	4b24      	ldr	r3, [pc, #144]	; (8000460 <main+0xc0>)
 80003ce:	2232      	movs	r2, #50	; 0x32
 80003d0:	0018      	movs	r0, r3
 80003d2:	f002 fde8 	bl	8002fa6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, sizeof(UART2_rxBuffer));
 80003d6:	4923      	ldr	r1, [pc, #140]	; (8000464 <main+0xc4>)
 80003d8:	4b23      	ldr	r3, [pc, #140]	; (8000468 <main+0xc8>)
 80003da:	220a      	movs	r2, #10
 80003dc:	0018      	movs	r0, r3
 80003de:	f002 fde2 	bl	8002fa6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, sizeof(UART3_rxBuffer));
 80003e2:	4922      	ldr	r1, [pc, #136]	; (800046c <main+0xcc>)
 80003e4:	4b22      	ldr	r3, [pc, #136]	; (8000470 <main+0xd0>)
 80003e6:	220a      	movs	r2, #10
 80003e8:	0018      	movs	r0, r3
 80003ea:	f002 fddc 	bl	8002fa6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, UART4_rxBuffer, sizeof(UART4_rxBuffer));
 80003ee:	4921      	ldr	r1, [pc, #132]	; (8000474 <main+0xd4>)
 80003f0:	4b21      	ldr	r3, [pc, #132]	; (8000478 <main+0xd8>)
 80003f2:	220a      	movs	r2, #10
 80003f4:	0018      	movs	r0, r3
 80003f6:	f002 fdd6 	bl	8002fa6 <HAL_UART_Receive_IT>


int test=0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  {


	  //HAL_GPIO_TogglePin (GPIOC, GPIO_Pin_13);

	  char Data[] = "coucou";
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4a1e      	ldr	r2, [pc, #120]	; (800047c <main+0xdc>)
 8000402:	6811      	ldr	r1, [r2, #0]
 8000404:	6019      	str	r1, [r3, #0]
 8000406:	8891      	ldrh	r1, [r2, #4]
 8000408:	8099      	strh	r1, [r3, #4]
 800040a:	7992      	ldrb	r2, [r2, #6]
 800040c:	719a      	strb	r2, [r3, #6]
	  HAL_UART_Transmit(&huart1, Data, 10, 100);
 800040e:	1d39      	adds	r1, r7, #4
 8000410:	4813      	ldr	r0, [pc, #76]	; (8000460 <main+0xc0>)
 8000412:	2364      	movs	r3, #100	; 0x64
 8000414:	220a      	movs	r2, #10
 8000416:	f002 fd1d 	bl	8002e54 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, Data, 10, 100);
 800041a:	1d39      	adds	r1, r7, #4
 800041c:	4814      	ldr	r0, [pc, #80]	; (8000470 <main+0xd0>)
 800041e:	2364      	movs	r3, #100	; 0x64
 8000420:	220a      	movs	r2, #10
 8000422:	f002 fd17 	bl	8002e54 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000426:	2064      	movs	r0, #100	; 0x64
 8000428:	f000 fd64 	bl	8000ef4 <HAL_Delay>
	  HAL_GPIO_WritePin(test_GPIO_Port, test_Pin, GPIO_PIN_SET);
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <main+0xe0>)
 800042e:	2201      	movs	r2, #1
 8000430:	2140      	movs	r1, #64	; 0x40
 8000432:	0018      	movs	r0, r3
 8000434:	f001 f856 	bl	80014e4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000438:	23fa      	movs	r3, #250	; 0xfa
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	0018      	movs	r0, r3
 800043e:	f000 fd59 	bl	8000ef4 <HAL_Delay>
	  HAL_GPIO_WritePin(test_GPIO_Port, test_Pin, GPIO_PIN_RESET);
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <main+0xe0>)
 8000444:	2200      	movs	r2, #0
 8000446:	2140      	movs	r1, #64	; 0x40
 8000448:	0018      	movs	r0, r3
 800044a:	f001 f84b 	bl	80014e4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800044e:	23fa      	movs	r3, #250	; 0xfa
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	0018      	movs	r0, r3
 8000454:	f000 fd4e 	bl	8000ef4 <HAL_Delay>
  {
 8000458:	e7d1      	b.n	80003fe <main+0x5e>
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	200000b4 	.word	0x200000b4
 8000460:	2000023c 	.word	0x2000023c
 8000464:	20000068 	.word	0x20000068
 8000468:	20000344 	.word	0x20000344
 800046c:	20000074 	.word	0x20000074
 8000470:	200001b8 	.word	0x200001b8
 8000474:	200000e8 	.word	0x200000e8
 8000478:	200002c0 	.word	0x200002c0
 800047c:	08004310 	.word	0x08004310
 8000480:	48000800 	.word	0x48000800

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b099      	sub	sp, #100	; 0x64
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	242c      	movs	r4, #44	; 0x2c
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	2334      	movs	r3, #52	; 0x34
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f003 ff13 	bl	80042c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049a:	231c      	movs	r3, #28
 800049c:	18fb      	adds	r3, r7, r3
 800049e:	0018      	movs	r0, r3
 80004a0:	2310      	movs	r3, #16
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f003 ff0b 	bl	80042c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004aa:	003b      	movs	r3, r7
 80004ac:	0018      	movs	r0, r3
 80004ae:	231c      	movs	r3, #28
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f003 ff04 	bl	80042c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b8:	0021      	movs	r1, r4
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2202      	movs	r2, #2
 80004be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2201      	movs	r2, #1
 80004c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2210      	movs	r2, #16
 80004ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2202      	movs	r2, #2
 80004d0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2280      	movs	r2, #128	; 0x80
 80004d6:	0212      	lsls	r2, r2, #8
 80004d8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	22a0      	movs	r2, #160	; 0xa0
 80004de:	0392      	lsls	r2, r2, #14
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2201      	movs	r2, #1
 80004e6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 f818 	bl	8001520 <HAL_RCC_OscConfig>
 80004f0:	1e03      	subs	r3, r0, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80004f4:	f000 f82b 	bl	800054e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f8:	211c      	movs	r1, #28
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2207      	movs	r2, #7
 80004fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2202      	movs	r2, #2
 8000504:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2101      	movs	r1, #1
 8000516:	0018      	movs	r0, r3
 8000518:	f001 fb88 	bl	8001c2c <HAL_RCC_ClockConfig>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000520:	f000 f815 	bl	800054e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000524:	003b      	movs	r3, r7
 8000526:	2203      	movs	r2, #3
 8000528:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800052a:	003b      	movs	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000530:	003b      	movs	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000536:	003b      	movs	r3, r7
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fcf1 	bl	8001f20 <HAL_RCCEx_PeriphCLKConfig>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000542:	f000 f804 	bl	800054e <Error_Handler>
  }
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b019      	add	sp, #100	; 0x64
 800054c:	bd90      	pop	{r4, r7, pc}

0800054e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000552:	b672      	cpsid	i
}
 8000554:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000556:	e7fe      	b.n	8000556 <Error_Handler+0x8>

08000558 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <MX_SPI1_Init+0x74>)
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <MX_SPI1_Init+0x78>)
 8000560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_SPI1_Init+0x74>)
 8000564:	2282      	movs	r2, #130	; 0x82
 8000566:	0052      	lsls	r2, r2, #1
 8000568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800056a:	4b18      	ldr	r3, [pc, #96]	; (80005cc <MX_SPI1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_SPI1_Init+0x74>)
 8000572:	22c0      	movs	r2, #192	; 0xc0
 8000574:	0092      	lsls	r2, r2, #2
 8000576:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_SPI1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_SPI1_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_SPI1_Init+0x74>)
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	0092      	lsls	r2, r2, #2
 800058a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_SPI1_Init+0x74>)
 800058e:	2218      	movs	r2, #24
 8000590:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_SPI1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_SPI1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_SPI1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_SPI1_Init+0x74>)
 80005a6:	2207      	movs	r2, #7
 80005a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <MX_SPI1_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_SPI1_Init+0x74>)
 80005b2:	2208      	movs	r2, #8
 80005b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <MX_SPI1_Init+0x74>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fdaf 	bl	800211c <HAL_SPI_Init>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005c2:	f7ff ffc4 	bl	800054e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000010c 	.word	0x2000010c
 80005d0:	40013000 	.word	0x40013000

080005d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b08b      	sub	sp, #44	; 0x2c
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	2414      	movs	r4, #20
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2314      	movs	r3, #20
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f003 fe6a 	bl	80042c0 <memset>
  if(spiHandle->Instance==SPI1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a2e      	ldr	r2, [pc, #184]	; (80006ac <HAL_SPI_MspInit+0xd8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d155      	bne.n	80006a2 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <HAL_SPI_MspInit+0xdc>)
 80005f8:	699a      	ldr	r2, [r3, #24]
 80005fa:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <HAL_SPI_MspInit+0xdc>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	0149      	lsls	r1, r1, #5
 8000600:	430a      	orrs	r2, r1
 8000602:	619a      	str	r2, [r3, #24]
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <HAL_SPI_MspInit+0xdc>)
 8000606:	699a      	ldr	r2, [r3, #24]
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	015b      	lsls	r3, r3, #5
 800060c:	4013      	ands	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <HAL_SPI_MspInit+0xdc>)
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <HAL_SPI_MspInit+0xdc>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	0289      	lsls	r1, r1, #10
 800061c:	430a      	orrs	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <HAL_SPI_MspInit+0xdc>)
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	029b      	lsls	r3, r3, #10
 8000628:	4013      	ands	r3, r2
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <HAL_SPI_MspInit+0xdc>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <HAL_SPI_MspInit+0xdc>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	02c9      	lsls	r1, r1, #11
 8000638:	430a      	orrs	r2, r1
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <HAL_SPI_MspInit+0xdc>)
 800063e:	695a      	ldr	r2, [r3, #20]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	02db      	lsls	r3, r3, #11
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	22c0      	movs	r2, #192	; 0xc0
 800064e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	2202      	movs	r2, #2
 8000654:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	193b      	adds	r3, r7, r4
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065c:	193b      	adds	r3, r7, r4
 800065e:	2203      	movs	r2, #3
 8000660:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	193a      	adds	r2, r7, r4
 800066a:	2390      	movs	r3, #144	; 0x90
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	0011      	movs	r1, r2
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fdbf 	bl	80011f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000676:	0021      	movs	r1, r4
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2208      	movs	r2, #8
 800067c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2202      	movs	r2, #2
 8000682:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2203      	movs	r2, #3
 800068e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	187b      	adds	r3, r7, r1
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <HAL_SPI_MspInit+0xe0>)
 800069a:	0019      	movs	r1, r3
 800069c:	0010      	movs	r0, r2
 800069e:	f000 fda9 	bl	80011f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b00b      	add	sp, #44	; 0x2c
 80006a8:	bd90      	pop	{r4, r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40013000 	.word	0x40013000
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000400 	.word	0x48000400

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_MspInit+0x44>)
 80006c0:	699a      	ldr	r2, [r3, #24]
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_MspInit+0x44>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	430a      	orrs	r2, r1
 80006c8:	619a      	str	r2, [r3, #24]
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <HAL_MspInit+0x44>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_MspInit+0x44>)
 80006d8:	69da      	ldr	r2, [r3, #28]
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <HAL_MspInit+0x44>)
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	0549      	lsls	r1, r1, #21
 80006e0:	430a      	orrs	r2, r1
 80006e2:	61da      	str	r2, [r3, #28]
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_MspInit+0x44>)
 80006e6:	69da      	ldr	r2, [r3, #28]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	055b      	lsls	r3, r3, #21
 80006ec:	4013      	ands	r3, r2
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b002      	add	sp, #8
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40021000 	.word	0x40021000

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 fbca 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	recevoir_message_pc();
 8000734:	f7ff fd90 	bl	8000258 <recevoir_message_pc>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <USART1_IRQHandler+0x18>)
 800073a:	0018      	movs	r0, r3
 800073c:	f002 fc94 	bl	8003068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	2000023c 	.word	0x2000023c

0800074c <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <USART3_4_IRQHandler+0x1c>)
 8000752:	0018      	movs	r0, r3
 8000754:	f002 fc88 	bl	8003068 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <USART3_4_IRQHandler+0x20>)
 800075a:	0018      	movs	r0, r3
 800075c:	f002 fc84 	bl	8003068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	200001b8 	.word	0x200001b8
 800076c:	200002c0 	.word	0x200002c0

08000770 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b096      	sub	sp, #88	; 0x58
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000782:	2344      	movs	r3, #68	; 0x44
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	0018      	movs	r0, r3
 8000788:	2314      	movs	r3, #20
 800078a:	001a      	movs	r2, r3
 800078c:	2100      	movs	r1, #0
 800078e:	f003 fd97 	bl	80042c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000792:	233c      	movs	r3, #60	; 0x3c
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	0018      	movs	r0, r3
 8000798:	2308      	movs	r3, #8
 800079a:	001a      	movs	r2, r3
 800079c:	2100      	movs	r1, #0
 800079e:	f003 fd8f 	bl	80042c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a2:	2320      	movs	r3, #32
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	0018      	movs	r0, r3
 80007a8:	231c      	movs	r3, #28
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f003 fd87 	bl	80042c0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b2:	003b      	movs	r3, r7
 80007b4:	0018      	movs	r0, r3
 80007b6:	2320      	movs	r3, #32
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	f003 fd80 	bl	80042c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c0:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <MX_TIM1_Init+0x164>)
 80007c2:	4a48      	ldr	r2, [pc, #288]	; (80008e4 <MX_TIM1_Init+0x168>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007c6:	4b46      	ldr	r3, [pc, #280]	; (80008e0 <MX_TIM1_Init+0x164>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b44      	ldr	r3, [pc, #272]	; (80008e0 <MX_TIM1_Init+0x164>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007d2:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <MX_TIM1_Init+0x164>)
 80007d4:	4a44      	ldr	r2, [pc, #272]	; (80008e8 <MX_TIM1_Init+0x16c>)
 80007d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d8:	4b41      	ldr	r3, [pc, #260]	; (80008e0 <MX_TIM1_Init+0x164>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007de:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <MX_TIM1_Init+0x164>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e4:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <MX_TIM1_Init+0x164>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ea:	4b3d      	ldr	r3, [pc, #244]	; (80008e0 <MX_TIM1_Init+0x164>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fd4d 	bl	800228c <HAL_TIM_Base_Init>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80007f6:	f7ff feaa 	bl	800054e <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80007fa:	4b39      	ldr	r3, [pc, #228]	; (80008e0 <MX_TIM1_Init+0x164>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 fd95 	bl	800232c <HAL_TIM_OC_Init>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000806:	f7ff fea2 	bl	800054e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800080a:	2144      	movs	r1, #68	; 0x44
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2207      	movs	r2, #7
 8000810:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000818:	187a      	adds	r2, r7, r1
 800081a:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <MX_TIM1_Init+0x164>)
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f001 fe34 	bl	800248c <HAL_TIM_SlaveConfigSynchro>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000828:	f7ff fe91 	bl	800054e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	213c      	movs	r1, #60	; 0x3c
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800083a:	187a      	adds	r2, r7, r1
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <MX_TIM1_Init+0x164>)
 800083e:	0011      	movs	r1, r2
 8000840:	0018      	movs	r0, r3
 8000842:	f002 f9f7 	bl	8002c34 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800084a:	f7ff fe80 	bl	800054e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800084e:	2120      	movs	r1, #32
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087a:	1879      	adds	r1, r7, r1
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_TIM1_Init+0x164>)
 800087e:	2200      	movs	r2, #0
 8000880:	0018      	movs	r0, r3
 8000882:	f001 fdab 	bl	80023dc <HAL_TIM_OC_ConfigChannel>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800088a:	f7ff fe60 	bl	800054e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800088e:	003b      	movs	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000894:	003b      	movs	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800089a:	003b      	movs	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008a0:	003b      	movs	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a6:	003b      	movs	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ac:	003b      	movs	r3, r7
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	0192      	lsls	r2, r2, #6
 80008b2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b4:	003b      	movs	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ba:	003a      	movs	r2, r7
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_TIM1_Init+0x164>)
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f002 fa15 	bl	8002cf0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 80008ca:	f7ff fe40 	bl	800054e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <MX_TIM1_Init+0x164>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 f82b 	bl	800092c <HAL_TIM_MspPostInit>

}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b016      	add	sp, #88	; 0x58
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	20000170 	.word	0x20000170
 80008e4:	40012c00 	.word	0x40012c00
 80008e8:	0000ffff 	.word	0x0000ffff

080008ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <HAL_TIM_Base_MspInit+0x38>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d10d      	bne.n	800091a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_TIM_Base_MspInit+0x3c>)
 8000900:	699a      	ldr	r2, [r3, #24]
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_TIM_Base_MspInit+0x3c>)
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	0109      	lsls	r1, r1, #4
 8000908:	430a      	orrs	r2, r1
 800090a:	619a      	str	r2, [r3, #24]
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_TIM_Base_MspInit+0x3c>)
 800090e:	699a      	ldr	r2, [r3, #24]
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b004      	add	sp, #16
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40012c00 	.word	0x40012c00
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	240c      	movs	r4, #12
 8000936:	193b      	adds	r3, r7, r4
 8000938:	0018      	movs	r0, r3
 800093a:	2314      	movs	r3, #20
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f003 fcbe 	bl	80042c0 <memset>
  if(timHandle->Instance==TIM1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <HAL_TIM_MspPostInit+0x78>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d125      	bne.n	800099a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_TIM_MspPostInit+0x7c>)
 8000950:	695a      	ldr	r2, [r3, #20]
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_TIM_MspPostInit+0x7c>)
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	0289      	lsls	r1, r1, #10
 8000958:	430a      	orrs	r2, r1
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_TIM_MspPostInit+0x7c>)
 800095e:	695a      	ldr	r2, [r3, #20]
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	029b      	lsls	r3, r3, #10
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	0021      	movs	r1, r4
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2202      	movs	r2, #2
 8000978:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2202      	movs	r2, #2
 800098a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	187a      	adds	r2, r7, r1
 800098e:	2390      	movs	r3, #144	; 0x90
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fc2d 	bl	80011f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b009      	add	sp, #36	; 0x24
 80009a0:	bd90      	pop	{r4, r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40012c00 	.word	0x40012c00
 80009a8:	40021000 	.word	0x40021000

080009ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009b2:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <MX_USART1_UART_Init+0x5c>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009b8:	22e1      	movs	r2, #225	; 0xe1
 80009ba:	0252      	lsls	r2, r2, #9
 80009bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <MX_USART1_UART_Init+0x58>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 f9db 	bl	8002dac <HAL_UART_Init>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009fa:	f7ff fda8 	bl	800054e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000023c 	.word	0x2000023c
 8000a08:	40013800 	.word	0x40013800

08000a0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <MX_USART2_UART_Init+0x5c>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a18:	2296      	movs	r2, #150	; 0x96
 8000a1a:	0212      	lsls	r2, r2, #8
 8000a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f002 f9ab 	bl	8002dac <HAL_UART_Init>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a5a:	f7ff fd78 	bl	800054e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000344 	.word	0x20000344
 8000a68:	40004400 	.word	0x40004400

08000a6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <MX_USART3_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a78:	22e1      	movs	r2, #225	; 0xe1
 8000a7a:	0252      	lsls	r2, r2, #9
 8000a7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f002 f97b 	bl	8002dac <HAL_UART_Init>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aba:	f7ff fd48 	bl	800054e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200001b8 	.word	0x200001b8
 8000ac8:	40004800 	.word	0x40004800

08000acc <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_USART4_UART_Init+0x58>)
 8000ad2:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <MX_USART4_UART_Init+0x5c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_USART4_UART_Init+0x58>)
 8000ad8:	2296      	movs	r2, #150	; 0x96
 8000ada:	0212      	lsls	r2, r2, #8
 8000adc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USART4_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_USART4_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USART4_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USART4_UART_Init+0x58>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USART4_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USART4_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USART4_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USART4_UART_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <MX_USART4_UART_Init+0x58>)
 8000b10:	0018      	movs	r0, r3
 8000b12:	f002 f94b 	bl	8002dac <HAL_UART_Init>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8000b1a:	f7ff fd18 	bl	800054e <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200002c0 	.word	0x200002c0
 8000b28:	40004c00 	.word	0x40004c00

08000b2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b091      	sub	sp, #68	; 0x44
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	242c      	movs	r4, #44	; 0x2c
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f003 fbbe 	bl	80042c0 <memset>
  if(uartHandle->Instance==USART1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a9d      	ldr	r2, [pc, #628]	; (8000dc0 <HAL_UART_MspInit+0x294>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d13c      	bne.n	8000bc8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b4e:	4b9d      	ldr	r3, [pc, #628]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000b50:	699a      	ldr	r2, [r3, #24]
 8000b52:	4b9c      	ldr	r3, [pc, #624]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	01c9      	lsls	r1, r1, #7
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	619a      	str	r2, [r3, #24]
 8000b5c:	4b99      	ldr	r3, [pc, #612]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000b5e:	699a      	ldr	r2, [r3, #24]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	01db      	lsls	r3, r3, #7
 8000b64:	4013      	ands	r3, r2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b68:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b96      	ldr	r3, [pc, #600]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	4b95      	ldr	r3, [pc, #596]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0289      	lsls	r1, r1, #10
 8000b74:	430a      	orrs	r2, r1
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	4b92      	ldr	r3, [pc, #584]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	029b      	lsls	r3, r3, #10
 8000b80:	4013      	ands	r3, r2
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	22c0      	movs	r2, #192	; 0xc0
 8000b8a:	00d2      	lsls	r2, r2, #3
 8000b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	0021      	movs	r1, r4
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2202      	movs	r2, #2
 8000b94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	187a      	adds	r2, r7, r1
 8000baa:	2390      	movs	r3, #144	; 0x90
 8000bac:	05db      	lsls	r3, r3, #23
 8000bae:	0011      	movs	r1, r2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fb1f 	bl	80011f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	201b      	movs	r0, #27
 8000bbc:	f000 fa6a 	bl	8001094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bc0:	201b      	movs	r0, #27
 8000bc2:	f000 fa7c 	bl	80010be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8000bc6:	e0f7      	b.n	8000db8 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a7e      	ldr	r2, [pc, #504]	; (8000dc8 <HAL_UART_MspInit+0x29c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d14d      	bne.n	8000c6e <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd2:	4b7c      	ldr	r3, [pc, #496]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000bd4:	69da      	ldr	r2, [r3, #28]
 8000bd6:	4b7b      	ldr	r3, [pc, #492]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	0289      	lsls	r1, r1, #10
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	61da      	str	r2, [r3, #28]
 8000be0:	4b78      	ldr	r3, [pc, #480]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000be2:	69da      	ldr	r2, [r3, #28]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	029b      	lsls	r3, r3, #10
 8000be8:	4013      	ands	r3, r2
 8000bea:	623b      	str	r3, [r7, #32]
 8000bec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b75      	ldr	r3, [pc, #468]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000bf0:	695a      	ldr	r2, [r3, #20]
 8000bf2:	4b74      	ldr	r3, [pc, #464]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	0289      	lsls	r1, r1, #10
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	4b71      	ldr	r3, [pc, #452]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000bfe:	695a      	ldr	r2, [r3, #20]
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	029b      	lsls	r3, r3, #10
 8000c04:	4013      	ands	r3, r2
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c0a:	212c      	movs	r1, #44	; 0x2c
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	01d2      	lsls	r2, r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	000c      	movs	r4, r1
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2202      	movs	r2, #2
 8000c1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	2203      	movs	r2, #3
 8000c26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	193a      	adds	r2, r7, r4
 8000c30:	2390      	movs	r3, #144	; 0x90
 8000c32:	05db      	lsls	r3, r3, #23
 8000c34:	0011      	movs	r1, r2
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 fadc 	bl	80011f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_RX_Pin;
 8000c3c:	0021      	movs	r1, r4
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	0212      	lsls	r2, r2, #8
 8000c44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2202      	movs	r2, #2
 8000c4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	187a      	adds	r2, r7, r1
 8000c60:	2390      	movs	r3, #144	; 0x90
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	0011      	movs	r1, r2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fac4 	bl	80011f4 <HAL_GPIO_Init>
}
 8000c6c:	e0a4      	b.n	8000db8 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART3)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a56      	ldr	r2, [pc, #344]	; (8000dcc <HAL_UART_MspInit+0x2a0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d13a      	bne.n	8000cee <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c78:	4b52      	ldr	r3, [pc, #328]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000c7a:	69da      	ldr	r2, [r3, #28]
 8000c7c:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	02c9      	lsls	r1, r1, #11
 8000c82:	430a      	orrs	r2, r1
 8000c84:	61da      	str	r2, [r3, #28]
 8000c86:	4b4f      	ldr	r3, [pc, #316]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000c88:	69da      	ldr	r2, [r3, #28]
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	02db      	lsls	r3, r3, #11
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	4b4b      	ldr	r3, [pc, #300]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000c96:	695a      	ldr	r2, [r3, #20]
 8000c98:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	0309      	lsls	r1, r1, #12
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	615a      	str	r2, [r3, #20]
 8000ca2:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000ca4:	695a      	ldr	r2, [r3, #20]
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	031b      	lsls	r3, r3, #12
 8000caa:	4013      	ands	r3, r2
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cb0:	212c      	movs	r1, #44	; 0x2c
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2230      	movs	r2, #48	; 0x30
 8000cb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2202      	movs	r2, #2
 8000cbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2201      	movs	r2, #1
 8000cce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	4a3f      	ldr	r2, [pc, #252]	; (8000dd0 <HAL_UART_MspInit+0x2a4>)
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	0010      	movs	r0, r2
 8000cd8:	f000 fa8c 	bl	80011f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	201d      	movs	r0, #29
 8000ce2:	f000 f9d7 	bl	8001094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000ce6:	201d      	movs	r0, #29
 8000ce8:	f000 f9e9 	bl	80010be <HAL_NVIC_EnableIRQ>
}
 8000cec:	e064      	b.n	8000db8 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART4)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a38      	ldr	r2, [pc, #224]	; (8000dd4 <HAL_UART_MspInit+0x2a8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d15f      	bne.n	8000db8 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000cf8:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000cfa:	69da      	ldr	r2, [r3, #28]
 8000cfc:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000cfe:	2180      	movs	r1, #128	; 0x80
 8000d00:	0309      	lsls	r1, r1, #12
 8000d02:	430a      	orrs	r2, r1
 8000d04:	61da      	str	r2, [r3, #28]
 8000d06:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000d08:	69da      	ldr	r2, [r3, #28]
 8000d0a:	2380      	movs	r3, #128	; 0x80
 8000d0c:	031b      	lsls	r3, r3, #12
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000d16:	695a      	ldr	r2, [r3, #20]
 8000d18:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000d1a:	2180      	movs	r1, #128	; 0x80
 8000d1c:	0289      	lsls	r1, r1, #10
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000d24:	695a      	ldr	r2, [r3, #20]
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	029b      	lsls	r3, r3, #10
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000d32:	695a      	ldr	r2, [r3, #20]
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	0309      	lsls	r1, r1, #12
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	615a      	str	r2, [r3, #20]
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <HAL_UART_MspInit+0x298>)
 8000d40:	695a      	ldr	r2, [r3, #20]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	031b      	lsls	r3, r3, #12
 8000d46:	4013      	ands	r3, r2
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d4c:	242c      	movs	r4, #44	; 0x2c
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	2202      	movs	r2, #2
 8000d58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d60:	193b      	adds	r3, r7, r4
 8000d62:	2203      	movs	r2, #3
 8000d64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	2204      	movs	r2, #4
 8000d6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	193a      	adds	r2, r7, r4
 8000d6e:	2390      	movs	r3, #144	; 0x90
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	0011      	movs	r1, r2
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 fa3d 	bl	80011f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d7a:	0021      	movs	r1, r4
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2202      	movs	r2, #2
 8000d88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2203      	movs	r2, #3
 8000d94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART4;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <HAL_UART_MspInit+0x2a4>)
 8000da0:	0019      	movs	r1, r3
 8000da2:	0010      	movs	r0, r2
 8000da4:	f000 fa26 	bl	80011f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2100      	movs	r1, #0
 8000dac:	201d      	movs	r0, #29
 8000dae:	f000 f971 	bl	8001094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000db2:	201d      	movs	r0, #29
 8000db4:	f000 f983 	bl	80010be <HAL_NVIC_EnableIRQ>
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b011      	add	sp, #68	; 0x44
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40004800 	.word	0x40004800
 8000dd0:	48000800 	.word	0x48000800
 8000dd4:	40004c00 	.word	0x40004c00

08000dd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dde:	490e      	ldr	r1, [pc, #56]	; (8000e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <LoopForever+0xe>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df4:	4c0b      	ldr	r4, [pc, #44]	; (8000e24 <LoopForever+0x16>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e02:	f7ff fcb5 	bl	8000770 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e06:	f003 fa37 	bl	8004278 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e0a:	f7ff fac9 	bl	80003a0 <main>

08000e0e <LoopForever>:

LoopForever:
    b LoopForever
 8000e0e:	e7fe      	b.n	8000e0e <LoopForever>
  ldr   r0, =_estack
 8000e10:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e1c:	08004358 	.word	0x08004358
  ldr r2, =_sbss
 8000e20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e24:	200003cc 	.word	0x200003cc

08000e28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC1_COMP_IRQHandler>
	...

08000e2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_Init+0x24>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_Init+0x24>)
 8000e36:	2110      	movs	r1, #16
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f000 f809 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e42:	f7ff fc39 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	40022000 	.word	0x40022000

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_InitTick+0x5c>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_InitTick+0x60>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	0019      	movs	r1, r3
 8000e66:	23fa      	movs	r3, #250	; 0xfa
 8000e68:	0098      	lsls	r0, r3, #2
 8000e6a:	f7ff f957 	bl	800011c <__udivsi3>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	0019      	movs	r1, r3
 8000e72:	0020      	movs	r0, r4
 8000e74:	f7ff f952 	bl	800011c <__udivsi3>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 f92f 	bl	80010de <HAL_SYSTICK_Config>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e00f      	b.n	8000ea8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d80b      	bhi.n	8000ea6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	2301      	movs	r3, #1
 8000e92:	425b      	negs	r3, r3
 8000e94:	2200      	movs	r2, #0
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 f8fc 	bl	8001094 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_InitTick+0x64>)
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b003      	add	sp, #12
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000004 	.word	0x20000004

08000ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_IncTick+0x1c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_IncTick+0x20>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	18d2      	adds	r2, r2, r3
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_IncTick+0x20>)
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	200003c8 	.word	0x200003c8

08000ee0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <HAL_GetTick+0x10>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	200003c8 	.word	0x200003c8

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff fff0 	bl	8000ee0 <HAL_GetTick>
 8000f00:	0003      	movs	r3, r0
 8000f02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	001a      	movs	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	189b      	adds	r3, r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	f7ff ffe0 	bl	8000ee0 <HAL_GetTick>
 8000f20:	0002      	movs	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b004      	add	sp, #16
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	20000008 	.word	0x20000008

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	0002      	movs	r2, r0
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f4e:	d809      	bhi.n	8000f64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	001a      	movs	r2, r3
 8000f56:	231f      	movs	r3, #31
 8000f58:	401a      	ands	r2, r3
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_EnableIRQ+0x30>)
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	000a      	movs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
  }
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b002      	add	sp, #8
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	0002      	movs	r2, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b7f      	cmp	r3, #127	; 0x7f
 8000f84:	d828      	bhi.n	8000fd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f86:	4a2f      	ldr	r2, [pc, #188]	; (8001044 <__NVIC_SetPriority+0xd4>)
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	33c0      	adds	r3, #192	; 0xc0
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	589b      	ldr	r3, [r3, r2]
 8000f96:	1dfa      	adds	r2, r7, #7
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	00d2      	lsls	r2, r2, #3
 8000fa2:	21ff      	movs	r1, #255	; 0xff
 8000fa4:	4091      	lsls	r1, r2
 8000fa6:	000a      	movs	r2, r1
 8000fa8:	43d2      	mvns	r2, r2
 8000faa:	401a      	ands	r2, r3
 8000fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	019b      	lsls	r3, r3, #6
 8000fb2:	22ff      	movs	r2, #255	; 0xff
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	4003      	ands	r3, r0
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc4:	481f      	ldr	r0, [pc, #124]	; (8001044 <__NVIC_SetPriority+0xd4>)
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	33c0      	adds	r3, #192	; 0xc0
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fd6:	e031      	b.n	800103c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <__NVIC_SetPriority+0xd8>)
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	0019      	movs	r1, r3
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	3b08      	subs	r3, #8
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3306      	adds	r3, #6
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	18d3      	adds	r3, r2, r3
 8000fee:	3304      	adds	r3, #4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	1dfa      	adds	r2, r7, #7
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	00d2      	lsls	r2, r2, #3
 8000ffe:	21ff      	movs	r1, #255	; 0xff
 8001000:	4091      	lsls	r1, r2
 8001002:	000a      	movs	r2, r1
 8001004:	43d2      	mvns	r2, r2
 8001006:	401a      	ands	r2, r3
 8001008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	019b      	lsls	r3, r3, #6
 800100e:	22ff      	movs	r2, #255	; 0xff
 8001010:	401a      	ands	r2, r3
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	0018      	movs	r0, r3
 8001018:	2303      	movs	r3, #3
 800101a:	4003      	ands	r3, r0
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <__NVIC_SetPriority+0xd8>)
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	001c      	movs	r4, r3
 8001028:	230f      	movs	r3, #15
 800102a:	4023      	ands	r3, r4
 800102c:	3b08      	subs	r3, #8
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	430a      	orrs	r2, r1
 8001032:	3306      	adds	r3, #6
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	18c3      	adds	r3, r0, r3
 8001038:	3304      	adds	r3, #4
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b003      	add	sp, #12
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	045b      	lsls	r3, r3, #17
 800105c:	429a      	cmp	r2, r3
 800105e:	d301      	bcc.n	8001064 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001060:	2301      	movs	r3, #1
 8001062:	e010      	b.n	8001086 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <SysTick_Config+0x44>)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	3a01      	subs	r2, #1
 800106a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106c:	2301      	movs	r3, #1
 800106e:	425b      	negs	r3, r3
 8001070:	2103      	movs	r1, #3
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff ff7c 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x44>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x44>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	210f      	movs	r1, #15
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	1c02      	adds	r2, r0, #0
 80010a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff ff5d 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b004      	add	sp, #16
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	0002      	movs	r2, r0
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ff33 	bl	8000f3c <__NVIC_EnableIRQ>
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b002      	add	sp, #8
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ffaf 	bl	800104c <SysTick_Config>
 80010ee:	0003      	movs	r3, r0
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2221      	movs	r2, #33	; 0x21
 8001104:	5c9b      	ldrb	r3, [r3, r2]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d008      	beq.n	800111e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2204      	movs	r2, #4
 8001110:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2220      	movs	r2, #32
 8001116:	2100      	movs	r1, #0
 8001118:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e020      	b.n	8001160 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	210e      	movs	r1, #14
 800112a:	438a      	bics	r2, r1
 800112c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	438a      	bics	r2, r1
 800113c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001146:	2101      	movs	r1, #1
 8001148:	4091      	lsls	r1, r2
 800114a:	000a      	movs	r2, r1
 800114c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2221      	movs	r2, #33	; 0x21
 8001152:	2101      	movs	r1, #1
 8001154:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2220      	movs	r2, #32
 800115a:	2100      	movs	r1, #0
 800115c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b002      	add	sp, #8
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001170:	210f      	movs	r1, #15
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2221      	movs	r2, #33	; 0x21
 800117c:	5c9b      	ldrb	r3, [r3, r2]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d006      	beq.n	8001192 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2204      	movs	r2, #4
 8001188:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e028      	b.n	80011e4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	210e      	movs	r1, #14
 800119e:	438a      	bics	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	438a      	bics	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ba:	2101      	movs	r1, #1
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2221      	movs	r2, #33	; 0x21
 80011c6:	2101      	movs	r1, #1
 80011c8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2220      	movs	r2, #32
 80011ce:	2100      	movs	r1, #0
 80011d0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d004      	beq.n	80011e4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	0010      	movs	r0, r2
 80011e2:	4798      	blx	r3
    } 
  }
  return status;
 80011e4:	230f      	movs	r3, #15
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	781b      	ldrb	r3, [r3, #0]
}
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b004      	add	sp, #16
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001202:	e155      	b.n	80014b0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4091      	lsls	r1, r2
 800120e:	000a      	movs	r2, r1
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d100      	bne.n	800121c <HAL_GPIO_Init+0x28>
 800121a:	e146      	b.n	80014aa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2203      	movs	r2, #3
 8001222:	4013      	ands	r3, r2
 8001224:	2b01      	cmp	r3, #1
 8001226:	d005      	beq.n	8001234 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2203      	movs	r2, #3
 800122e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001230:	2b02      	cmp	r3, #2
 8001232:	d130      	bne.n	8001296 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	409a      	lsls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	43da      	mvns	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	409a      	lsls	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126a:	2201      	movs	r2, #1
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
 8001270:	0013      	movs	r3, r2
 8001272:	43da      	mvns	r2, r3
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	2201      	movs	r2, #1
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2203      	movs	r2, #3
 800129c:	4013      	ands	r3, r2
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d017      	beq.n	80012d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	43da      	mvns	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2203      	movs	r2, #3
 80012d8:	4013      	ands	r3, r2
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d123      	bne.n	8001326 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	08da      	lsrs	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3208      	adds	r2, #8
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	58d3      	ldr	r3, [r2, r3]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2207      	movs	r2, #7
 80012f0:	4013      	ands	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2107      	movs	r1, #7
 800130a:	400b      	ands	r3, r1
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	08da      	lsrs	r2, r3, #3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3208      	adds	r2, #8
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	6939      	ldr	r1, [r7, #16]
 8001324:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2203      	movs	r2, #3
 8001344:	401a      	ands	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	23c0      	movs	r3, #192	; 0xc0
 8001360:	029b      	lsls	r3, r3, #10
 8001362:	4013      	ands	r3, r2
 8001364:	d100      	bne.n	8001368 <HAL_GPIO_Init+0x174>
 8001366:	e0a0      	b.n	80014aa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001368:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <HAL_GPIO_Init+0x2d4>)
 800136a:	699a      	ldr	r2, [r3, #24]
 800136c:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <HAL_GPIO_Init+0x2d4>)
 800136e:	2101      	movs	r1, #1
 8001370:	430a      	orrs	r2, r1
 8001372:	619a      	str	r2, [r3, #24]
 8001374:	4b54      	ldr	r3, [pc, #336]	; (80014c8 <HAL_GPIO_Init+0x2d4>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	2201      	movs	r2, #1
 800137a:	4013      	ands	r3, r2
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001380:	4a52      	ldr	r2, [pc, #328]	; (80014cc <HAL_GPIO_Init+0x2d8>)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	589b      	ldr	r3, [r3, r2]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2203      	movs	r2, #3
 8001392:	4013      	ands	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	409a      	lsls	r2, r3
 800139a:	0013      	movs	r3, r2
 800139c:	43da      	mvns	r2, r3
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	2390      	movs	r3, #144	; 0x90
 80013a8:	05db      	lsls	r3, r3, #23
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x1ee>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a47      	ldr	r2, [pc, #284]	; (80014d0 <HAL_GPIO_Init+0x2dc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x1ea>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <HAL_GPIO_Init+0x2e0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x1e6>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a45      	ldr	r2, [pc, #276]	; (80014d8 <HAL_GPIO_Init+0x2e4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x1e2>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a44      	ldr	r2, [pc, #272]	; (80014dc <HAL_GPIO_Init+0x2e8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x1de>
 80013ce:	2304      	movs	r3, #4
 80013d0:	e008      	b.n	80013e4 <HAL_GPIO_Init+0x1f0>
 80013d2:	2305      	movs	r3, #5
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x1f0>
 80013d6:	2303      	movs	r3, #3
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_Init+0x1f0>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x1f0>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x1f0>
 80013e2:	2300      	movs	r3, #0
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	2103      	movs	r1, #3
 80013e8:	400a      	ands	r2, r1
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013f4:	4935      	ldr	r1, [pc, #212]	; (80014cc <HAL_GPIO_Init+0x2d8>)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001402:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <HAL_GPIO_Init+0x2ec>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43da      	mvns	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	2380      	movs	r3, #128	; 0x80
 8001418:	025b      	lsls	r3, r3, #9
 800141a:	4013      	ands	r3, r2
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_GPIO_Init+0x2ec>)
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <HAL_GPIO_Init+0x2ec>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	43da      	mvns	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	029b      	lsls	r3, r3, #10
 8001444:	4013      	ands	r3, r2
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_GPIO_Init+0x2ec>)
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_GPIO_Init+0x2ec>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43da      	mvns	r2, r3
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	035b      	lsls	r3, r3, #13
 800146e:	4013      	ands	r3, r2
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_GPIO_Init+0x2ec>)
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_GPIO_Init+0x2ec>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	43da      	mvns	r2, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	039b      	lsls	r3, r3, #14
 8001498:	4013      	ands	r3, r2
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_GPIO_Init+0x2ec>)
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	40da      	lsrs	r2, r3
 80014b8:	1e13      	subs	r3, r2, #0
 80014ba:	d000      	beq.n	80014be <HAL_GPIO_Init+0x2ca>
 80014bc:	e6a2      	b.n	8001204 <HAL_GPIO_Init+0x10>
  } 
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b006      	add	sp, #24
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010000 	.word	0x40010000
 80014d0:	48000400 	.word	0x48000400
 80014d4:	48000800 	.word	0x48000800
 80014d8:	48000c00 	.word	0x48000c00
 80014dc:	48001000 	.word	0x48001000
 80014e0:	40010400 	.word	0x40010400

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	0008      	movs	r0, r1
 80014ee:	0011      	movs	r1, r2
 80014f0:	1cbb      	adds	r3, r7, #2
 80014f2:	1c02      	adds	r2, r0, #0
 80014f4:	801a      	strh	r2, [r3, #0]
 80014f6:	1c7b      	adds	r3, r7, #1
 80014f8:	1c0a      	adds	r2, r1, #0
 80014fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014fc:	1c7b      	adds	r3, r7, #1
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d004      	beq.n	800150e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001504:	1cbb      	adds	r3, r7, #2
 8001506:	881a      	ldrh	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800150e:	1cbb      	adds	r3, r7, #2
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	f000 fb76 	bl	8001c20 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2201      	movs	r2, #1
 800153a:	4013      	ands	r3, r2
 800153c:	d100      	bne.n	8001540 <HAL_RCC_OscConfig+0x20>
 800153e:	e08e      	b.n	800165e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001540:	4bc5      	ldr	r3, [pc, #788]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	220c      	movs	r2, #12
 8001546:	4013      	ands	r3, r2
 8001548:	2b04      	cmp	r3, #4
 800154a:	d00e      	beq.n	800156a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800154c:	4bc2      	ldr	r3, [pc, #776]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	220c      	movs	r2, #12
 8001552:	4013      	ands	r3, r2
 8001554:	2b08      	cmp	r3, #8
 8001556:	d117      	bne.n	8001588 <HAL_RCC_OscConfig+0x68>
 8001558:	4bbf      	ldr	r3, [pc, #764]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	23c0      	movs	r3, #192	; 0xc0
 800155e:	025b      	lsls	r3, r3, #9
 8001560:	401a      	ands	r2, r3
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	025b      	lsls	r3, r3, #9
 8001566:	429a      	cmp	r2, r3
 8001568:	d10e      	bne.n	8001588 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156a:	4bbb      	ldr	r3, [pc, #748]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	029b      	lsls	r3, r3, #10
 8001572:	4013      	ands	r3, r2
 8001574:	d100      	bne.n	8001578 <HAL_RCC_OscConfig+0x58>
 8001576:	e071      	b.n	800165c <HAL_RCC_OscConfig+0x13c>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d000      	beq.n	8001582 <HAL_RCC_OscConfig+0x62>
 8001580:	e06c      	b.n	800165c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	f000 fb4c 	bl	8001c20 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x80>
 8001590:	4bb1      	ldr	r3, [pc, #708]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4bb0      	ldr	r3, [pc, #704]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	0249      	lsls	r1, r1, #9
 800159a:	430a      	orrs	r2, r1
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e02f      	b.n	8001600 <HAL_RCC_OscConfig+0xe0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10c      	bne.n	80015c2 <HAL_RCC_OscConfig+0xa2>
 80015a8:	4bab      	ldr	r3, [pc, #684]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4baa      	ldr	r3, [pc, #680]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80015ae:	49ab      	ldr	r1, [pc, #684]	; (800185c <HAL_RCC_OscConfig+0x33c>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	4ba8      	ldr	r3, [pc, #672]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4ba7      	ldr	r3, [pc, #668]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80015ba:	49a9      	ldr	r1, [pc, #676]	; (8001860 <HAL_RCC_OscConfig+0x340>)
 80015bc:	400a      	ands	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e01e      	b.n	8001600 <HAL_RCC_OscConfig+0xe0>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d10e      	bne.n	80015e8 <HAL_RCC_OscConfig+0xc8>
 80015ca:	4ba3      	ldr	r3, [pc, #652]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4ba2      	ldr	r3, [pc, #648]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	02c9      	lsls	r1, r1, #11
 80015d4:	430a      	orrs	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	4b9f      	ldr	r3, [pc, #636]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b9e      	ldr	r3, [pc, #632]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	0249      	lsls	r1, r1, #9
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0xe0>
 80015e8:	4b9b      	ldr	r3, [pc, #620]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b9a      	ldr	r3, [pc, #616]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80015ee:	499b      	ldr	r1, [pc, #620]	; (800185c <HAL_RCC_OscConfig+0x33c>)
 80015f0:	400a      	ands	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	4b98      	ldr	r3, [pc, #608]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b97      	ldr	r3, [pc, #604]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80015fa:	4999      	ldr	r1, [pc, #612]	; (8001860 <HAL_RCC_OscConfig+0x340>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d014      	beq.n	8001632 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fc6a 	bl	8000ee0 <HAL_GetTick>
 800160c:	0003      	movs	r3, r0
 800160e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001612:	f7ff fc65 	bl	8000ee0 <HAL_GetTick>
 8001616:	0002      	movs	r2, r0
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b64      	cmp	r3, #100	; 0x64
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e2fd      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001624:	4b8c      	ldr	r3, [pc, #560]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	029b      	lsls	r3, r3, #10
 800162c:	4013      	ands	r3, r2
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0xf2>
 8001630:	e015      	b.n	800165e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff fc55 	bl	8000ee0 <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fc50 	bl	8000ee0 <HAL_GetTick>
 8001640:	0002      	movs	r2, r0
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e2e8      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	4b82      	ldr	r3, [pc, #520]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	029b      	lsls	r3, r3, #10
 8001656:	4013      	ands	r3, r2
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x11c>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2202      	movs	r2, #2
 8001664:	4013      	ands	r3, r2
 8001666:	d100      	bne.n	800166a <HAL_RCC_OscConfig+0x14a>
 8001668:	e06c      	b.n	8001744 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800166a:	4b7b      	ldr	r3, [pc, #492]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	220c      	movs	r2, #12
 8001670:	4013      	ands	r3, r2
 8001672:	d00e      	beq.n	8001692 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001674:	4b78      	ldr	r3, [pc, #480]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	220c      	movs	r2, #12
 800167a:	4013      	ands	r3, r2
 800167c:	2b08      	cmp	r3, #8
 800167e:	d11f      	bne.n	80016c0 <HAL_RCC_OscConfig+0x1a0>
 8001680:	4b75      	ldr	r3, [pc, #468]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	23c0      	movs	r3, #192	; 0xc0
 8001686:	025b      	lsls	r3, r3, #9
 8001688:	401a      	ands	r2, r3
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	429a      	cmp	r2, r3
 8001690:	d116      	bne.n	80016c0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	4b71      	ldr	r3, [pc, #452]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2202      	movs	r2, #2
 8001698:	4013      	ands	r3, r2
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x188>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e2bb      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b6b      	ldr	r3, [pc, #428]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	22f8      	movs	r2, #248	; 0xf8
 80016ae:	4393      	bics	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	00da      	lsls	r2, r3, #3
 80016b8:	4b67      	ldr	r3, [pc, #412]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80016ba:	430a      	orrs	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	e041      	b.n	8001744 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d024      	beq.n	8001712 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c8:	4b63      	ldr	r3, [pc, #396]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b62      	ldr	r3, [pc, #392]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fc04 	bl	8000ee0 <HAL_GetTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fbff 	bl	8000ee0 <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e297      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	4b59      	ldr	r3, [pc, #356]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2202      	movs	r2, #2
 80016f6:	4013      	ands	r3, r2
 80016f8:	d0f1      	beq.n	80016de <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4b57      	ldr	r3, [pc, #348]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	22f8      	movs	r2, #248	; 0xf8
 8001700:	4393      	bics	r3, r2
 8001702:	0019      	movs	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	00da      	lsls	r2, r3, #3
 800170a:	4b53      	ldr	r3, [pc, #332]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e018      	b.n	8001744 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001712:	4b51      	ldr	r3, [pc, #324]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b50      	ldr	r3, [pc, #320]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001718:	2101      	movs	r1, #1
 800171a:	438a      	bics	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fbdf 	bl	8000ee0 <HAL_GetTick>
 8001722:	0003      	movs	r3, r0
 8001724:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff fbda 	bl	8000ee0 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e272      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	4b47      	ldr	r3, [pc, #284]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2202      	movs	r2, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d1f1      	bne.n	8001728 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2208      	movs	r2, #8
 800174a:	4013      	ands	r3, r2
 800174c:	d036      	beq.n	80017bc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d019      	beq.n	800178a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001756:	4b40      	ldr	r3, [pc, #256]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800175c:	2101      	movs	r1, #1
 800175e:	430a      	orrs	r2, r1
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff fbbd 	bl	8000ee0 <HAL_GetTick>
 8001766:	0003      	movs	r3, r0
 8001768:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176c:	f7ff fbb8 	bl	8000ee0 <HAL_GetTick>
 8001770:	0002      	movs	r2, r0
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e250      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	2202      	movs	r2, #2
 8001784:	4013      	ands	r3, r2
 8001786:	d0f1      	beq.n	800176c <HAL_RCC_OscConfig+0x24c>
 8001788:	e018      	b.n	80017bc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178a:	4b33      	ldr	r3, [pc, #204]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800178c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800178e:	4b32      	ldr	r3, [pc, #200]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001790:	2101      	movs	r1, #1
 8001792:	438a      	bics	r2, r1
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fba3 	bl	8000ee0 <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fb9e 	bl	8000ee0 <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e236      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	2202      	movs	r2, #2
 80017b8:	4013      	ands	r3, r2
 80017ba:	d1f1      	bne.n	80017a0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2204      	movs	r2, #4
 80017c2:	4013      	ands	r3, r2
 80017c4:	d100      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2a8>
 80017c6:	e0b5      	b.n	8001934 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c8:	201f      	movs	r0, #31
 80017ca:	183b      	adds	r3, r7, r0
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	055b      	lsls	r3, r3, #21
 80017d8:	4013      	ands	r3, r2
 80017da:	d110      	bne.n	80017fe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80017de:	69da      	ldr	r2, [r3, #28]
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80017e2:	2180      	movs	r1, #128	; 0x80
 80017e4:	0549      	lsls	r1, r1, #21
 80017e6:	430a      	orrs	r2, r1
 80017e8:	61da      	str	r2, [r3, #28]
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	055b      	lsls	r3, r3, #21
 80017f2:	4013      	ands	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017f8:	183b      	adds	r3, r7, r0
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_RCC_OscConfig+0x344>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4013      	ands	r3, r2
 8001808:	d11a      	bne.n	8001840 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_RCC_OscConfig+0x344>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_RCC_OscConfig+0x344>)
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	0049      	lsls	r1, r1, #1
 8001814:	430a      	orrs	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001818:	f7ff fb62 	bl	8000ee0 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001822:	f7ff fb5d 	bl	8000ee0 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b64      	cmp	r3, #100	; 0x64
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e1f5      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCC_OscConfig+0x344>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4013      	ands	r3, r2
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d10f      	bne.n	8001868 <HAL_RCC_OscConfig+0x348>
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	4b02      	ldr	r3, [pc, #8]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800184e:	2101      	movs	r1, #1
 8001850:	430a      	orrs	r2, r1
 8001852:	621a      	str	r2, [r3, #32]
 8001854:	e036      	b.n	80018c4 <HAL_RCC_OscConfig+0x3a4>
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	40021000 	.word	0x40021000
 800185c:	fffeffff 	.word	0xfffeffff
 8001860:	fffbffff 	.word	0xfffbffff
 8001864:	40007000 	.word	0x40007000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10c      	bne.n	800188a <HAL_RCC_OscConfig+0x36a>
 8001870:	4bca      	ldr	r3, [pc, #808]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001872:	6a1a      	ldr	r2, [r3, #32]
 8001874:	4bc9      	ldr	r3, [pc, #804]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001876:	2101      	movs	r1, #1
 8001878:	438a      	bics	r2, r1
 800187a:	621a      	str	r2, [r3, #32]
 800187c:	4bc7      	ldr	r3, [pc, #796]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 800187e:	6a1a      	ldr	r2, [r3, #32]
 8001880:	4bc6      	ldr	r3, [pc, #792]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001882:	2104      	movs	r1, #4
 8001884:	438a      	bics	r2, r1
 8001886:	621a      	str	r2, [r3, #32]
 8001888:	e01c      	b.n	80018c4 <HAL_RCC_OscConfig+0x3a4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b05      	cmp	r3, #5
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x38c>
 8001892:	4bc2      	ldr	r3, [pc, #776]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001894:	6a1a      	ldr	r2, [r3, #32]
 8001896:	4bc1      	ldr	r3, [pc, #772]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001898:	2104      	movs	r1, #4
 800189a:	430a      	orrs	r2, r1
 800189c:	621a      	str	r2, [r3, #32]
 800189e:	4bbf      	ldr	r3, [pc, #764]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80018a0:	6a1a      	ldr	r2, [r3, #32]
 80018a2:	4bbe      	ldr	r3, [pc, #760]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80018a4:	2101      	movs	r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	621a      	str	r2, [r3, #32]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0x3a4>
 80018ac:	4bbb      	ldr	r3, [pc, #748]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80018ae:	6a1a      	ldr	r2, [r3, #32]
 80018b0:	4bba      	ldr	r3, [pc, #744]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80018b2:	2101      	movs	r1, #1
 80018b4:	438a      	bics	r2, r1
 80018b6:	621a      	str	r2, [r3, #32]
 80018b8:	4bb8      	ldr	r3, [pc, #736]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	4bb7      	ldr	r3, [pc, #732]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80018be:	2104      	movs	r1, #4
 80018c0:	438a      	bics	r2, r1
 80018c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d014      	beq.n	80018f6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018cc:	f7ff fb08 	bl	8000ee0 <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	e009      	b.n	80018ea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7ff fb03 	bl	8000ee0 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	4aaf      	ldr	r2, [pc, #700]	; (8001ba0 <HAL_RCC_OscConfig+0x680>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e19a      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ea:	4bac      	ldr	r3, [pc, #688]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	2202      	movs	r2, #2
 80018f0:	4013      	ands	r3, r2
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x3b6>
 80018f4:	e013      	b.n	800191e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff faf3 	bl	8000ee0 <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fe:	e009      	b.n	8001914 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff faee 	bl	8000ee0 <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	4aa5      	ldr	r2, [pc, #660]	; (8001ba0 <HAL_RCC_OscConfig+0x680>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e185      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	4ba1      	ldr	r3, [pc, #644]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	2202      	movs	r2, #2
 800191a:	4013      	ands	r3, r2
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800191e:	231f      	movs	r3, #31
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001928:	4b9c      	ldr	r3, [pc, #624]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 800192a:	69da      	ldr	r2, [r3, #28]
 800192c:	4b9b      	ldr	r3, [pc, #620]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 800192e:	499d      	ldr	r1, [pc, #628]	; (8001ba4 <HAL_RCC_OscConfig+0x684>)
 8001930:	400a      	ands	r2, r1
 8001932:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2210      	movs	r2, #16
 800193a:	4013      	ands	r3, r2
 800193c:	d063      	beq.n	8001a06 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d12a      	bne.n	800199c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001946:	4b95      	ldr	r3, [pc, #596]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800194a:	4b94      	ldr	r3, [pc, #592]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 800194c:	2104      	movs	r1, #4
 800194e:	430a      	orrs	r2, r1
 8001950:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001952:	4b92      	ldr	r3, [pc, #584]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001956:	4b91      	ldr	r3, [pc, #580]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001958:	2101      	movs	r1, #1
 800195a:	430a      	orrs	r2, r1
 800195c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff fabf 	bl	8000ee0 <HAL_GetTick>
 8001962:	0003      	movs	r3, r0
 8001964:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001968:	f7ff faba 	bl	8000ee0 <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e152      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800197a:	4b88      	ldr	r3, [pc, #544]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 800197c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197e:	2202      	movs	r2, #2
 8001980:	4013      	ands	r3, r2
 8001982:	d0f1      	beq.n	8001968 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001984:	4b85      	ldr	r3, [pc, #532]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001988:	22f8      	movs	r2, #248	; 0xf8
 800198a:	4393      	bics	r3, r2
 800198c:	0019      	movs	r1, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	00da      	lsls	r2, r3, #3
 8001994:	4b81      	ldr	r3, [pc, #516]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001996:	430a      	orrs	r2, r1
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
 800199a:	e034      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	3305      	adds	r3, #5
 80019a2:	d111      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019a4:	4b7d      	ldr	r3, [pc, #500]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80019a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a8:	4b7c      	ldr	r3, [pc, #496]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80019aa:	2104      	movs	r1, #4
 80019ac:	438a      	bics	r2, r1
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019b0:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80019b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b4:	22f8      	movs	r2, #248	; 0xf8
 80019b6:	4393      	bics	r3, r2
 80019b8:	0019      	movs	r1, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	00da      	lsls	r2, r3, #3
 80019c0:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	635a      	str	r2, [r3, #52]	; 0x34
 80019c6:	e01e      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019c8:	4b74      	ldr	r3, [pc, #464]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80019ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019cc:	4b73      	ldr	r3, [pc, #460]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80019ce:	2104      	movs	r1, #4
 80019d0:	430a      	orrs	r2, r1
 80019d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019d4:	4b71      	ldr	r3, [pc, #452]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80019d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d8:	4b70      	ldr	r3, [pc, #448]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80019da:	2101      	movs	r1, #1
 80019dc:	438a      	bics	r2, r1
 80019de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e0:	f7ff fa7e 	bl	8000ee0 <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019ea:	f7ff fa79 	bl	8000ee0 <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e111      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019fc:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 80019fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a00:	2202      	movs	r2, #2
 8001a02:	4013      	ands	r3, r2
 8001a04:	d1f1      	bne.n	80019ea <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d05c      	beq.n	8001aca <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a10:	4b62      	ldr	r3, [pc, #392]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	220c      	movs	r2, #12
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	d00e      	beq.n	8001a3a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a1c:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	220c      	movs	r2, #12
 8001a22:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d114      	bne.n	8001a52 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a28:	4b5c      	ldr	r3, [pc, #368]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	23c0      	movs	r3, #192	; 0xc0
 8001a2e:	025b      	lsls	r3, r3, #9
 8001a30:	401a      	ands	r2, r3
 8001a32:	23c0      	movs	r3, #192	; 0xc0
 8001a34:	025b      	lsls	r3, r3, #9
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d10b      	bne.n	8001a52 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a3a:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	025b      	lsls	r3, r3, #9
 8001a42:	4013      	ands	r3, r2
 8001a44:	d040      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x5a8>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d03c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0e6      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01b      	beq.n	8001a92 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a5a:	4b50      	ldr	r3, [pc, #320]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5e:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	0249      	lsls	r1, r1, #9
 8001a64:	430a      	orrs	r2, r1
 8001a66:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fa3a 	bl	8000ee0 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a72:	f7ff fa35 	bl	8000ee0 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0cd      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a84:	4b45      	ldr	r3, [pc, #276]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	025b      	lsls	r3, r3, #9
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x552>
 8001a90:	e01b      	b.n	8001aca <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a92:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a96:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001a98:	4943      	ldr	r1, [pc, #268]	; (8001ba8 <HAL_RCC_OscConfig+0x688>)
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fa1f 	bl	8000ee0 <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa8:	f7ff fa1a 	bl	8000ee0 <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e0b2      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	025b      	lsls	r3, r3, #9
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x588>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ac8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d100      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x5b4>
 8001ad2:	e0a4      	b.n	8001c1e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad4:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	220c      	movs	r2, #12
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d100      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x5c2>
 8001ae0:	e078      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d14c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001af0:	492e      	ldr	r1, [pc, #184]	; (8001bac <HAL_RCC_OscConfig+0x68c>)
 8001af2:	400a      	ands	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff f9f3 	bl	8000ee0 <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f9ee 	bl	8000ee0 <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e086      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	049b      	lsls	r3, r3, #18
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	220f      	movs	r2, #15
 8001b24:	4393      	bics	r3, r2
 8001b26:	0019      	movs	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a1e      	ldr	r2, [pc, #120]	; (8001bb0 <HAL_RCC_OscConfig+0x690>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	431a      	orrs	r2, r3
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001b52:	2180      	movs	r1, #128	; 0x80
 8001b54:	0449      	lsls	r1, r1, #17
 8001b56:	430a      	orrs	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff f9c1 	bl	8000ee0 <HAL_GetTick>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff f9bc 	bl	8000ee0 <HAL_GetTick>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e054      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	049b      	lsls	r3, r3, #18
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x644>
 8001b82:	e04c      	b.n	8001c1e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <HAL_RCC_OscConfig+0x67c>)
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <HAL_RCC_OscConfig+0x68c>)
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff f9a6 	bl	8000ee0 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b98:	e015      	b.n	8001bc6 <HAL_RCC_OscConfig+0x6a6>
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	00001388 	.word	0x00001388
 8001ba4:	efffffff 	.word	0xefffffff
 8001ba8:	fffeffff 	.word	0xfffeffff
 8001bac:	feffffff 	.word	0xfeffffff
 8001bb0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff f994 	bl	8000ee0 <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e02c      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_RCC_OscConfig+0x708>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	049b      	lsls	r3, r3, #18
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x694>
 8001bd2:	e024      	b.n	8001c1e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e01f      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_RCC_OscConfig+0x708>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_RCC_OscConfig+0x708>)
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	23c0      	movs	r3, #192	; 0xc0
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d10e      	bne.n	8001c1a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	220f      	movs	r2, #15
 8001c00:	401a      	ands	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	23f0      	movs	r3, #240	; 0xf0
 8001c0e:	039b      	lsls	r3, r3, #14
 8001c10:	401a      	ands	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b008      	add	sp, #32
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0bf      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_RCC_ClockConfig+0x19c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d911      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <HAL_RCC_ClockConfig+0x19c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2201      	movs	r2, #1
 8001c54:	4393      	bics	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <HAL_RCC_ClockConfig+0x19c>)
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_RCC_ClockConfig+0x19c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2201      	movs	r2, #1
 8001c66:	4013      	ands	r3, r2
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0a6      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2202      	movs	r2, #2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d015      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2204      	movs	r2, #4
 8001c82:	4013      	ands	r3, r2
 8001c84:	d006      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c86:	4b51      	ldr	r3, [pc, #324]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001c8c:	21e0      	movs	r1, #224	; 0xe0
 8001c8e:	00c9      	lsls	r1, r1, #3
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c94:	4b4d      	ldr	r3, [pc, #308]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	22f0      	movs	r2, #240	; 0xf0
 8001c9a:	4393      	bics	r3, r2
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	4b4a      	ldr	r3, [pc, #296]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d04c      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	029b      	lsls	r3, r3, #10
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d120      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e07a      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	049b      	lsls	r3, r3, #18
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d114      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06e      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d107      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cea:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d108      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e062      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfa:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	4013      	ands	r3, r2
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e05b      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d08:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	4393      	bics	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d1c:	f7ff f8e0 	bl	8000ee0 <HAL_GetTick>
 8001d20:	0003      	movs	r3, r0
 8001d22:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d24:	e009      	b.n	8001d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d26:	f7ff f8db 	bl	8000ee0 <HAL_GetTick>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	4a27      	ldr	r2, [pc, #156]	; (8001dd0 <HAL_RCC_ClockConfig+0x1a4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e042      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	220c      	movs	r2, #12
 8001d40:	401a      	ands	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d1ec      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_RCC_ClockConfig+0x19c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2201      	movs	r2, #1
 8001d52:	4013      	ands	r3, r2
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d211      	bcs.n	8001d7e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_ClockConfig+0x19c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4393      	bics	r3, r2
 8001d62:	0019      	movs	r1, r3
 8001d64:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_RCC_ClockConfig+0x19c>)
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_RCC_ClockConfig+0x19c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e020      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2204      	movs	r2, #4
 8001d84:	4013      	ands	r3, r2
 8001d86:	d009      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <HAL_RCC_ClockConfig+0x1a8>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d9c:	f000 f820 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001da0:	0001      	movs	r1, r0
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1a0>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	220f      	movs	r2, #15
 8001daa:	4013      	ands	r3, r2
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ac>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	000a      	movs	r2, r1
 8001db2:	40da      	lsrs	r2, r3
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1b0>)
 8001db6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7ff f84b 	bl	8000e54 <HAL_InitTick>
  
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b004      	add	sp, #16
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	00001388 	.word	0x00001388
 8001dd4:	fffff8ff 	.word	0xfffff8ff
 8001dd8:	08004338 	.word	0x08004338
 8001ddc:	20000000 	.word	0x20000000

08001de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b08f      	sub	sp, #60	; 0x3c
 8001de4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001de6:	2314      	movs	r3, #20
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	4a38      	ldr	r2, [pc, #224]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xec>)
 8001dec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dee:	c313      	stmia	r3!, {r0, r1, r4}
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	4a36      	ldr	r2, [pc, #216]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001df8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dfa:	c313      	stmia	r3!, {r0, r1, r4}
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e04:	2300      	movs	r3, #0
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e08:	2300      	movs	r3, #0
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e14:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	220c      	movs	r2, #12
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b0c      	cmp	r3, #12
 8001e22:	d047      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xd4>
 8001e24:	d849      	bhi.n	8001eba <HAL_RCC_GetSysClockFreq+0xda>
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d002      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x50>
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d003      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0x56>
 8001e2e:	e044      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e30:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e34:	e044      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	0c9b      	lsrs	r3, r3, #18
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2214      	movs	r2, #20
 8001e40:	18ba      	adds	r2, r7, r2
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e46:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	1d3a      	adds	r2, r7, #4
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e56:	23c0      	movs	r3, #192	; 0xc0
 8001e58:	025b      	lsls	r3, r3, #9
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	025b      	lsls	r3, r3, #9
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d109      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e66:	481c      	ldr	r0, [pc, #112]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e68:	f7fe f958 	bl	800011c <__udivsi3>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	001a      	movs	r2, r3
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	4353      	muls	r3, r2
 8001e74:	637b      	str	r3, [r7, #52]	; 0x34
 8001e76:	e01a      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e7a:	23c0      	movs	r3, #192	; 0xc0
 8001e7c:	025b      	lsls	r3, r3, #9
 8001e7e:	401a      	ands	r2, r3
 8001e80:	23c0      	movs	r3, #192	; 0xc0
 8001e82:	025b      	lsls	r3, r3, #9
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d109      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e8a:	4814      	ldr	r0, [pc, #80]	; (8001edc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e8c:	f7fe f946 	bl	800011c <__udivsi3>
 8001e90:	0003      	movs	r3, r0
 8001e92:	001a      	movs	r2, r3
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	4353      	muls	r3, r2
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e9e:	480e      	ldr	r0, [pc, #56]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ea0:	f7fe f93c 	bl	800011c <__udivsi3>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	001a      	movs	r2, r3
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	4353      	muls	r3, r2
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eb2:	e005      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eb8:	e002      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ebc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ebe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b00f      	add	sp, #60	; 0x3c
 8001ec8:	bd90      	pop	{r4, r7, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	08004318 	.word	0x08004318
 8001ed0:	08004328 	.word	0x08004328
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	007a1200 	.word	0x007a1200
 8001edc:	02dc6c00 	.word	0x02dc6c00

08001ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ef8:	f7ff fff2 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001efc:	0001      	movs	r1, r0
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	2207      	movs	r2, #7
 8001f06:	4013      	ands	r3, r2
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f0a:	5cd3      	ldrb	r3, [r2, r3]
 8001f0c:	40d9      	lsrs	r1, r3
 8001f0e:	000b      	movs	r3, r1
}    
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08004348 	.word	0x08004348

08001f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	025b      	lsls	r3, r3, #9
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d100      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001f3c:	e08e      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2017      	movs	r0, #23
 8001f40:	183b      	adds	r3, r7, r0
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b6e      	ldr	r3, [pc, #440]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	055b      	lsls	r3, r3, #21
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d110      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b6b      	ldr	r3, [pc, #428]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	0549      	lsls	r1, r1, #21
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	61da      	str	r2, [r3, #28]
 8001f60:	4b67      	ldr	r3, [pc, #412]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	055b      	lsls	r3, r3, #21
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6e:	183b      	adds	r3, r7, r0
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	4b63      	ldr	r3, [pc, #396]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d11a      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f80:	4b60      	ldr	r3, [pc, #384]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	0049      	lsls	r1, r1, #1
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8e:	f7fe ffa7 	bl	8000ee0 <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f96:	e008      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f98:	f7fe ffa2 	bl	8000ee0 <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0a6      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b56      	ldr	r3, [pc, #344]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fb6:	4b52      	ldr	r3, [pc, #328]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fb8:	6a1a      	ldr	r2, [r3, #32]
 8001fba:	23c0      	movs	r3, #192	; 0xc0
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d034      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	23c0      	movs	r3, #192	; 0xc0
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d02c      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fd8:	4b49      	ldr	r3, [pc, #292]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a4a      	ldr	r2, [pc, #296]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	4b46      	ldr	r3, [pc, #280]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fe8:	2180      	movs	r1, #128	; 0x80
 8001fea:	0249      	lsls	r1, r1, #9
 8001fec:	430a      	orrs	r2, r1
 8001fee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff0:	4b43      	ldr	r3, [pc, #268]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ff2:	6a1a      	ldr	r2, [r3, #32]
 8001ff4:	4b42      	ldr	r3, [pc, #264]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ff6:	4945      	ldr	r1, [pc, #276]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ffc:	4b40      	ldr	r3, [pc, #256]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe ff69 	bl	8000ee0 <HAL_GetTick>
 800200e:	0003      	movs	r3, r0
 8002010:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002012:	e009      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002014:	f7fe ff64 	bl	8000ee0 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	4a3c      	ldr	r2, [pc, #240]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e067      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	4b35      	ldr	r3, [pc, #212]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	2202      	movs	r2, #2
 800202e:	4013      	ands	r3, r2
 8002030:	d0f0      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002032:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a34      	ldr	r2, [pc, #208]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002042:	430a      	orrs	r2, r1
 8002044:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002046:	2317      	movs	r3, #23
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002052:	69da      	ldr	r2, [r3, #28]
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002056:	492f      	ldr	r1, [pc, #188]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002058:	400a      	ands	r2, r1
 800205a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	d009      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	2203      	movs	r2, #3
 800206c:	4393      	bics	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002076:	430a      	orrs	r2, r1
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2202      	movs	r2, #2
 8002080:	4013      	ands	r3, r2
 8002082:	d009      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002084:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	4a23      	ldr	r2, [pc, #140]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800208a:	4013      	ands	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002094:	430a      	orrs	r2, r1
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2220      	movs	r2, #32
 800209e:	4013      	ands	r3, r2
 80020a0:	d009      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020a2:	4b17      	ldr	r3, [pc, #92]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	2210      	movs	r2, #16
 80020a8:	4393      	bics	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	029b      	lsls	r3, r3, #10
 80020be:	4013      	ands	r3, r2
 80020c0:	d009      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	4393      	bics	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699a      	ldr	r2, [r3, #24]
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4013      	ands	r3, r2
 80020e0:	d009      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	2240      	movs	r2, #64	; 0x40
 80020e8:	4393      	bics	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020f2:	430a      	orrs	r2, r1
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b006      	add	sp, #24
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
 8002108:	fffffcff 	.word	0xfffffcff
 800210c:	fffeffff 	.word	0xfffeffff
 8002110:	00001388 	.word	0x00001388
 8002114:	efffffff 	.word	0xefffffff
 8002118:	fffcffff 	.word	0xfffcffff

0800211c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0a8      	b.n	8002280 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	2382      	movs	r3, #130	; 0x82
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	429a      	cmp	r2, r3
 8002140:	d009      	beq.n	8002156 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	61da      	str	r2, [r3, #28]
 8002148:	e005      	b.n	8002156 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	225d      	movs	r2, #93	; 0x5d
 8002160:	5c9b      	ldrb	r3, [r3, r2]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	225c      	movs	r2, #92	; 0x5c
 800216c:	2100      	movs	r1, #0
 800216e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	0018      	movs	r0, r3
 8002174:	f7fe fa2e 	bl	80005d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	225d      	movs	r2, #93	; 0x5d
 800217c:	2102      	movs	r1, #2
 800217e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2140      	movs	r1, #64	; 0x40
 800218c:	438a      	bics	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	23e0      	movs	r3, #224	; 0xe0
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	429a      	cmp	r2, r3
 800219a:	d902      	bls.n	80021a2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e002      	b.n	80021a8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	015b      	lsls	r3, r3, #5
 80021a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	23f0      	movs	r3, #240	; 0xf0
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d008      	beq.n	80021c6 <HAL_SPI_Init+0xaa>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	23e0      	movs	r3, #224	; 0xe0
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	429a      	cmp	r2, r3
 80021be:	d002      	beq.n	80021c6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	2382      	movs	r3, #130	; 0x82
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	401a      	ands	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6899      	ldr	r1, [r3, #8]
 80021d4:	2384      	movs	r3, #132	; 0x84
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	400b      	ands	r3, r1
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2102      	movs	r1, #2
 80021e2:	400b      	ands	r3, r1
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2101      	movs	r1, #1
 80021ec:	400b      	ands	r3, r1
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6999      	ldr	r1, [r3, #24]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	400b      	ands	r3, r1
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	2138      	movs	r1, #56	; 0x38
 8002202:	400b      	ands	r3, r1
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	400b      	ands	r3, r1
 800220e:	431a      	orrs	r2, r3
 8002210:	0011      	movs	r1, r2
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	401a      	ands	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	0c1b      	lsrs	r3, r3, #16
 800222a:	2204      	movs	r2, #4
 800222c:	401a      	ands	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	2110      	movs	r1, #16
 8002234:	400b      	ands	r3, r1
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	2108      	movs	r1, #8
 800223e:	400b      	ands	r3, r1
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68d9      	ldr	r1, [r3, #12]
 8002246:	23f0      	movs	r3, #240	; 0xf0
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	400b      	ands	r3, r1
 800224c:	431a      	orrs	r2, r3
 800224e:	0011      	movs	r1, r2
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	015b      	lsls	r3, r3, #5
 8002256:	401a      	ands	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	69da      	ldr	r2, [r3, #28]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4907      	ldr	r1, [pc, #28]	; (8002288 <HAL_SPI_Init+0x16c>)
 800226c:	400a      	ands	r2, r1
 800226e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	225d      	movs	r2, #93	; 0x5d
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b004      	add	sp, #16
 8002286:	bd80      	pop	{r7, pc}
 8002288:	fffff7ff 	.word	0xfffff7ff

0800228c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e042      	b.n	8002324 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	223d      	movs	r2, #61	; 0x3d
 80022a2:	5c9b      	ldrb	r3, [r3, r2]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	223c      	movs	r2, #60	; 0x3c
 80022ae:	2100      	movs	r1, #0
 80022b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7fe fb19 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	223d      	movs	r2, #61	; 0x3d
 80022be:	2102      	movs	r1, #2
 80022c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3304      	adds	r3, #4
 80022ca:	0019      	movs	r1, r3
 80022cc:	0010      	movs	r0, r2
 80022ce:	f000 f923 	bl	8002518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2246      	movs	r2, #70	; 0x46
 80022d6:	2101      	movs	r1, #1
 80022d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	223e      	movs	r2, #62	; 0x3e
 80022de:	2101      	movs	r1, #1
 80022e0:	5499      	strb	r1, [r3, r2]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	223f      	movs	r2, #63	; 0x3f
 80022e6:	2101      	movs	r1, #1
 80022e8:	5499      	strb	r1, [r3, r2]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2240      	movs	r2, #64	; 0x40
 80022ee:	2101      	movs	r1, #1
 80022f0:	5499      	strb	r1, [r3, r2]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2241      	movs	r2, #65	; 0x41
 80022f6:	2101      	movs	r1, #1
 80022f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2242      	movs	r2, #66	; 0x42
 80022fe:	2101      	movs	r1, #1
 8002300:	5499      	strb	r1, [r3, r2]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2243      	movs	r2, #67	; 0x43
 8002306:	2101      	movs	r1, #1
 8002308:	5499      	strb	r1, [r3, r2]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2244      	movs	r2, #68	; 0x44
 800230e:	2101      	movs	r1, #1
 8002310:	5499      	strb	r1, [r3, r2]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2245      	movs	r2, #69	; 0x45
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	223d      	movs	r2, #61	; 0x3d
 800231e:	2101      	movs	r1, #1
 8002320:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e042      	b.n	80023c4 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	223d      	movs	r2, #61	; 0x3d
 8002342:	5c9b      	ldrb	r3, [r3, r2]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	223c      	movs	r2, #60	; 0x3c
 800234e:	2100      	movs	r1, #0
 8002350:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	0018      	movs	r0, r3
 8002356:	f000 f839 	bl	80023cc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	223d      	movs	r2, #61	; 0x3d
 800235e:	2102      	movs	r1, #2
 8002360:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	0019      	movs	r1, r3
 800236c:	0010      	movs	r0, r2
 800236e:	f000 f8d3 	bl	8002518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2246      	movs	r2, #70	; 0x46
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	223e      	movs	r2, #62	; 0x3e
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	223f      	movs	r2, #63	; 0x3f
 8002386:	2101      	movs	r1, #1
 8002388:	5499      	strb	r1, [r3, r2]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2240      	movs	r2, #64	; 0x40
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2241      	movs	r2, #65	; 0x41
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2242      	movs	r2, #66	; 0x42
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2243      	movs	r2, #67	; 0x43
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2244      	movs	r2, #68	; 0x44
 80023ae:	2101      	movs	r1, #1
 80023b0:	5499      	strb	r1, [r3, r2]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2245      	movs	r2, #69	; 0x45
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	223d      	movs	r2, #61	; 0x3d
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	2317      	movs	r3, #23
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	223c      	movs	r2, #60	; 0x3c
 80023f4:	5c9b      	ldrb	r3, [r3, r2]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_TIM_OC_ConfigChannel+0x22>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e042      	b.n	8002484 <HAL_TIM_OC_ConfigChannel+0xa8>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	223c      	movs	r2, #60	; 0x3c
 8002402:	2101      	movs	r1, #1
 8002404:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d027      	beq.n	800245c <HAL_TIM_OC_ConfigChannel+0x80>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d82c      	bhi.n	800246c <HAL_TIM_OC_ConfigChannel+0x90>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d019      	beq.n	800244c <HAL_TIM_OC_ConfigChannel+0x70>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b08      	cmp	r3, #8
 800241c:	d826      	bhi.n	800246c <HAL_TIM_OC_ConfigChannel+0x90>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_TIM_OC_ConfigChannel+0x50>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b04      	cmp	r3, #4
 8002428:	d008      	beq.n	800243c <HAL_TIM_OC_ConfigChannel+0x60>
 800242a:	e01f      	b.n	800246c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	0011      	movs	r1, r2
 8002434:	0018      	movs	r0, r3
 8002436:	f000 f8ef 	bl	8002618 <TIM_OC1_SetConfig>
      break;
 800243a:	e01c      	b.n	8002476 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	0011      	movs	r1, r2
 8002444:	0018      	movs	r0, r3
 8002446:	f000 f96f 	bl	8002728 <TIM_OC2_SetConfig>
      break;
 800244a:	e014      	b.n	8002476 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	0011      	movs	r1, r2
 8002454:	0018      	movs	r0, r3
 8002456:	f000 f9eb 	bl	8002830 <TIM_OC3_SetConfig>
      break;
 800245a:	e00c      	b.n	8002476 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	0011      	movs	r1, r2
 8002464:	0018      	movs	r0, r3
 8002466:	f000 fa69 	bl	800293c <TIM_OC4_SetConfig>
      break;
 800246a:	e004      	b.n	8002476 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 800246c:	2317      	movs	r3, #23
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
      break;
 8002474:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	223c      	movs	r2, #60	; 0x3c
 800247a:	2100      	movs	r1, #0
 800247c:	5499      	strb	r1, [r3, r2]

  return status;
 800247e:	2317      	movs	r3, #23
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	781b      	ldrb	r3, [r3, #0]
}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b006      	add	sp, #24
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	223c      	movs	r2, #60	; 0x3c
 800249a:	5c9b      	ldrb	r3, [r3, r2]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e032      	b.n	800250a <HAL_TIM_SlaveConfigSynchro+0x7e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	223c      	movs	r2, #60	; 0x3c
 80024a8:	2101      	movs	r1, #1
 80024aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	223d      	movs	r2, #61	; 0x3d
 80024b0:	2102      	movs	r1, #2
 80024b2:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0011      	movs	r1, r2
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 faa8 	bl	8002a10 <TIM_SlaveTimer_SetConfig>
 80024c0:	1e03      	subs	r3, r0, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	223d      	movs	r2, #61	; 0x3d
 80024c8:	2101      	movs	r1, #1
 80024ca:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	223c      	movs	r2, #60	; 0x3c
 80024d0:	2100      	movs	r1, #0
 80024d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e018      	b.n	800250a <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2140      	movs	r1, #64	; 0x40
 80024e4:	438a      	bics	r2, r1
 80024e6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4908      	ldr	r1, [pc, #32]	; (8002514 <HAL_TIM_SlaveConfigSynchro+0x88>)
 80024f4:	400a      	ands	r2, r1
 80024f6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	223d      	movs	r2, #61	; 0x3d
 80024fc:	2101      	movs	r1, #1
 80024fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	223c      	movs	r2, #60	; 0x3c
 8002504:	2100      	movs	r1, #0
 8002506:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b002      	add	sp, #8
 8002510:	bd80      	pop	{r7, pc}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	ffffbfff 	.word	0xffffbfff

08002518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a34      	ldr	r2, [pc, #208]	; (80025fc <TIM_Base_SetConfig+0xe4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d008      	beq.n	8002542 <TIM_Base_SetConfig+0x2a>
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	05db      	lsls	r3, r3, #23
 8002536:	429a      	cmp	r2, r3
 8002538:	d003      	beq.n	8002542 <TIM_Base_SetConfig+0x2a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a30      	ldr	r2, [pc, #192]	; (8002600 <TIM_Base_SetConfig+0xe8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d108      	bne.n	8002554 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2270      	movs	r2, #112	; 0x70
 8002546:	4393      	bics	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a29      	ldr	r2, [pc, #164]	; (80025fc <TIM_Base_SetConfig+0xe4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d018      	beq.n	800258e <TIM_Base_SetConfig+0x76>
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	05db      	lsls	r3, r3, #23
 8002562:	429a      	cmp	r2, r3
 8002564:	d013      	beq.n	800258e <TIM_Base_SetConfig+0x76>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a25      	ldr	r2, [pc, #148]	; (8002600 <TIM_Base_SetConfig+0xe8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00f      	beq.n	800258e <TIM_Base_SetConfig+0x76>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a24      	ldr	r2, [pc, #144]	; (8002604 <TIM_Base_SetConfig+0xec>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00b      	beq.n	800258e <TIM_Base_SetConfig+0x76>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a23      	ldr	r2, [pc, #140]	; (8002608 <TIM_Base_SetConfig+0xf0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <TIM_Base_SetConfig+0x76>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a22      	ldr	r2, [pc, #136]	; (800260c <TIM_Base_SetConfig+0xf4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d003      	beq.n	800258e <TIM_Base_SetConfig+0x76>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a21      	ldr	r2, [pc, #132]	; (8002610 <TIM_Base_SetConfig+0xf8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d108      	bne.n	80025a0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4a20      	ldr	r2, [pc, #128]	; (8002614 <TIM_Base_SetConfig+0xfc>)
 8002592:	4013      	ands	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2280      	movs	r2, #128	; 0x80
 80025a4:	4393      	bics	r3, r2
 80025a6:	001a      	movs	r2, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <TIM_Base_SetConfig+0xe4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00b      	beq.n	80025e6 <TIM_Base_SetConfig+0xce>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <TIM_Base_SetConfig+0xf0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d007      	beq.n	80025e6 <TIM_Base_SetConfig+0xce>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a0c      	ldr	r2, [pc, #48]	; (800260c <TIM_Base_SetConfig+0xf4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d003      	beq.n	80025e6 <TIM_Base_SetConfig+0xce>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <TIM_Base_SetConfig+0xf8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d103      	bne.n	80025ee <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	615a      	str	r2, [r3, #20]
}
 80025f4:	46c0      	nop			; (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b004      	add	sp, #16
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40000400 	.word	0x40000400
 8002604:	40002000 	.word	0x40002000
 8002608:	40014000 	.word	0x40014000
 800260c:	40014400 	.word	0x40014400
 8002610:	40014800 	.word	0x40014800
 8002614:	fffffcff 	.word	0xfffffcff

08002618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	2201      	movs	r2, #1
 8002628:	4393      	bics	r3, r2
 800262a:	001a      	movs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2270      	movs	r2, #112	; 0x70
 8002646:	4393      	bics	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2203      	movs	r2, #3
 800264e:	4393      	bics	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2202      	movs	r2, #2
 8002660:	4393      	bics	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	4313      	orrs	r3, r2
 800266c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a27      	ldr	r2, [pc, #156]	; (8002710 <TIM_OC1_SetConfig+0xf8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00b      	beq.n	800268e <TIM_OC1_SetConfig+0x76>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a26      	ldr	r2, [pc, #152]	; (8002714 <TIM_OC1_SetConfig+0xfc>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d007      	beq.n	800268e <TIM_OC1_SetConfig+0x76>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a25      	ldr	r2, [pc, #148]	; (8002718 <TIM_OC1_SetConfig+0x100>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d003      	beq.n	800268e <TIM_OC1_SetConfig+0x76>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a24      	ldr	r2, [pc, #144]	; (800271c <TIM_OC1_SetConfig+0x104>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10c      	bne.n	80026a8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2208      	movs	r2, #8
 8002692:	4393      	bics	r3, r2
 8002694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2204      	movs	r2, #4
 80026a4:	4393      	bics	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a19      	ldr	r2, [pc, #100]	; (8002710 <TIM_OC1_SetConfig+0xf8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00b      	beq.n	80026c8 <TIM_OC1_SetConfig+0xb0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a18      	ldr	r2, [pc, #96]	; (8002714 <TIM_OC1_SetConfig+0xfc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <TIM_OC1_SetConfig+0xb0>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <TIM_OC1_SetConfig+0x100>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <TIM_OC1_SetConfig+0xb0>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a16      	ldr	r2, [pc, #88]	; (800271c <TIM_OC1_SetConfig+0x104>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d111      	bne.n	80026ec <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4a15      	ldr	r2, [pc, #84]	; (8002720 <TIM_OC1_SetConfig+0x108>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4a14      	ldr	r2, [pc, #80]	; (8002724 <TIM_OC1_SetConfig+0x10c>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	621a      	str	r2, [r3, #32]
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b006      	add	sp, #24
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40014000 	.word	0x40014000
 8002718:	40014400 	.word	0x40014400
 800271c:	40014800 	.word	0x40014800
 8002720:	fffffeff 	.word	0xfffffeff
 8002724:	fffffdff 	.word	0xfffffdff

08002728 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	2210      	movs	r2, #16
 8002738:	4393      	bics	r3, r2
 800273a:	001a      	movs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a2e      	ldr	r2, [pc, #184]	; (8002810 <TIM_OC2_SetConfig+0xe8>)
 8002756:	4013      	ands	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4a2d      	ldr	r2, [pc, #180]	; (8002814 <TIM_OC2_SetConfig+0xec>)
 800275e:	4013      	ands	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2220      	movs	r2, #32
 8002772:	4393      	bics	r3, r2
 8002774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a24      	ldr	r2, [pc, #144]	; (8002818 <TIM_OC2_SetConfig+0xf0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10d      	bne.n	80027a6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	4393      	bics	r3, r2
 8002790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2240      	movs	r2, #64	; 0x40
 80027a2:	4393      	bics	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1b      	ldr	r2, [pc, #108]	; (8002818 <TIM_OC2_SetConfig+0xf0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00b      	beq.n	80027c6 <TIM_OC2_SetConfig+0x9e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a1a      	ldr	r2, [pc, #104]	; (800281c <TIM_OC2_SetConfig+0xf4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d007      	beq.n	80027c6 <TIM_OC2_SetConfig+0x9e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a19      	ldr	r2, [pc, #100]	; (8002820 <TIM_OC2_SetConfig+0xf8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d003      	beq.n	80027c6 <TIM_OC2_SetConfig+0x9e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a18      	ldr	r2, [pc, #96]	; (8002824 <TIM_OC2_SetConfig+0xfc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d113      	bne.n	80027ee <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4a17      	ldr	r2, [pc, #92]	; (8002828 <TIM_OC2_SetConfig+0x100>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4a16      	ldr	r2, [pc, #88]	; (800282c <TIM_OC2_SetConfig+0x104>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	621a      	str	r2, [r3, #32]
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b006      	add	sp, #24
 800280e:	bd80      	pop	{r7, pc}
 8002810:	ffff8fff 	.word	0xffff8fff
 8002814:	fffffcff 	.word	0xfffffcff
 8002818:	40012c00 	.word	0x40012c00
 800281c:	40014000 	.word	0x40014000
 8002820:	40014400 	.word	0x40014400
 8002824:	40014800 	.word	0x40014800
 8002828:	fffffbff 	.word	0xfffffbff
 800282c:	fffff7ff 	.word	0xfffff7ff

08002830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4a35      	ldr	r2, [pc, #212]	; (8002914 <TIM_OC3_SetConfig+0xe4>)
 8002840:	401a      	ands	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2270      	movs	r2, #112	; 0x70
 800285c:	4393      	bics	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2203      	movs	r2, #3
 8002864:	4393      	bics	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	4a28      	ldr	r2, [pc, #160]	; (8002918 <TIM_OC3_SetConfig+0xe8>)
 8002876:	4013      	ands	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a24      	ldr	r2, [pc, #144]	; (800291c <TIM_OC3_SetConfig+0xec>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10d      	bne.n	80028aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	4a23      	ldr	r2, [pc, #140]	; (8002920 <TIM_OC3_SetConfig+0xf0>)
 8002892:	4013      	ands	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <TIM_OC3_SetConfig+0xf4>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <TIM_OC3_SetConfig+0xec>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00b      	beq.n	80028ca <TIM_OC3_SetConfig+0x9a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <TIM_OC3_SetConfig+0xf8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <TIM_OC3_SetConfig+0x9a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1b      	ldr	r2, [pc, #108]	; (800292c <TIM_OC3_SetConfig+0xfc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d003      	beq.n	80028ca <TIM_OC3_SetConfig+0x9a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <TIM_OC3_SetConfig+0x100>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d113      	bne.n	80028f2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4a19      	ldr	r2, [pc, #100]	; (8002934 <TIM_OC3_SetConfig+0x104>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4a18      	ldr	r2, [pc, #96]	; (8002938 <TIM_OC3_SetConfig+0x108>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	621a      	str	r2, [r3, #32]
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b006      	add	sp, #24
 8002912:	bd80      	pop	{r7, pc}
 8002914:	fffffeff 	.word	0xfffffeff
 8002918:	fffffdff 	.word	0xfffffdff
 800291c:	40012c00 	.word	0x40012c00
 8002920:	fffff7ff 	.word	0xfffff7ff
 8002924:	fffffbff 	.word	0xfffffbff
 8002928:	40014000 	.word	0x40014000
 800292c:	40014400 	.word	0x40014400
 8002930:	40014800 	.word	0x40014800
 8002934:	ffffefff 	.word	0xffffefff
 8002938:	ffffdfff 	.word	0xffffdfff

0800293c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4a28      	ldr	r2, [pc, #160]	; (80029ec <TIM_OC4_SetConfig+0xb0>)
 800294c:	401a      	ands	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <TIM_OC4_SetConfig+0xb4>)
 8002968:	4013      	ands	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <TIM_OC4_SetConfig+0xb8>)
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <TIM_OC4_SetConfig+0xbc>)
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	031b      	lsls	r3, r3, #12
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a19      	ldr	r2, [pc, #100]	; (80029fc <TIM_OC4_SetConfig+0xc0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00b      	beq.n	80029b4 <TIM_OC4_SetConfig+0x78>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <TIM_OC4_SetConfig+0xc4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <TIM_OC4_SetConfig+0x78>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <TIM_OC4_SetConfig+0xc8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <TIM_OC4_SetConfig+0x78>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a16      	ldr	r2, [pc, #88]	; (8002a08 <TIM_OC4_SetConfig+0xcc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d109      	bne.n	80029c8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <TIM_OC4_SetConfig+0xd0>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	621a      	str	r2, [r3, #32]
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b006      	add	sp, #24
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	ffffefff 	.word	0xffffefff
 80029f0:	ffff8fff 	.word	0xffff8fff
 80029f4:	fffffcff 	.word	0xfffffcff
 80029f8:	ffffdfff 	.word	0xffffdfff
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40014000 	.word	0x40014000
 8002a04:	40014400 	.word	0x40014400
 8002a08:	40014800 	.word	0x40014800
 8002a0c:	ffffbfff 	.word	0xffffbfff

08002a10 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2317      	movs	r3, #23
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2270      	movs	r2, #112	; 0x70
 8002a2e:	4393      	bics	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2207      	movs	r2, #7
 8002a40:	4393      	bics	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b70      	cmp	r3, #112	; 0x70
 8002a5c:	d015      	beq.n	8002a8a <TIM_SlaveTimer_SetConfig+0x7a>
 8002a5e:	d900      	bls.n	8002a62 <TIM_SlaveTimer_SetConfig+0x52>
 8002a60:	e05b      	b.n	8002b1a <TIM_SlaveTimer_SetConfig+0x10a>
 8002a62:	2b60      	cmp	r3, #96	; 0x60
 8002a64:	d04f      	beq.n	8002b06 <TIM_SlaveTimer_SetConfig+0xf6>
 8002a66:	d858      	bhi.n	8002b1a <TIM_SlaveTimer_SetConfig+0x10a>
 8002a68:	2b50      	cmp	r3, #80	; 0x50
 8002a6a:	d042      	beq.n	8002af2 <TIM_SlaveTimer_SetConfig+0xe2>
 8002a6c:	d855      	bhi.n	8002b1a <TIM_SlaveTimer_SetConfig+0x10a>
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d016      	beq.n	8002aa0 <TIM_SlaveTimer_SetConfig+0x90>
 8002a72:	d852      	bhi.n	8002b1a <TIM_SlaveTimer_SetConfig+0x10a>
 8002a74:	2b30      	cmp	r3, #48	; 0x30
 8002a76:	d055      	beq.n	8002b24 <TIM_SlaveTimer_SetConfig+0x114>
 8002a78:	d84f      	bhi.n	8002b1a <TIM_SlaveTimer_SetConfig+0x10a>
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d052      	beq.n	8002b24 <TIM_SlaveTimer_SetConfig+0x114>
 8002a7e:	d84c      	bhi.n	8002b1a <TIM_SlaveTimer_SetConfig+0x10a>
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d04f      	beq.n	8002b24 <TIM_SlaveTimer_SetConfig+0x114>
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d04d      	beq.n	8002b24 <TIM_SlaveTimer_SetConfig+0x114>
 8002a88:	e047      	b.n	8002b1a <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68d9      	ldr	r1, [r3, #12]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f000 f8ab 	bl	8002bf4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002a9e:	e042      	b.n	8002b26 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	d101      	bne.n	8002aac <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e03f      	b.n	8002b2c <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a1a      	ldr	r2, [r3, #32]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	438a      	bics	r2, r1
 8002ac2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	22f0      	movs	r2, #240	; 0xf0
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	621a      	str	r2, [r3, #32]
      break;
 8002af0:	e019      	b.n	8002b26 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6899      	ldr	r1, [r3, #8]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	001a      	movs	r2, r3
 8002b00:	f000 f818 	bl	8002b34 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002b04:	e00f      	b.n	8002b26 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6899      	ldr	r1, [r3, #8]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	001a      	movs	r2, r3
 8002b14:	f000 f83c 	bl	8002b90 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002b18:	e005      	b.n	8002b26 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002b1a:	2317      	movs	r3, #23
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
      break;
 8002b22:	e000      	b.n	8002b26 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8002b24:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8002b26:	2317      	movs	r3, #23
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	781b      	ldrb	r3, [r3, #0]
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b006      	add	sp, #24
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	001a      	movs	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	22f0      	movs	r2, #240	; 0xf0
 8002b5e:	4393      	bics	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	220a      	movs	r2, #10
 8002b70:	4393      	bics	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	621a      	str	r2, [r3, #32]
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b006      	add	sp, #24
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	4393      	bics	r3, r2
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	; (8002bf0 <TIM_TI2_ConfigInputStage+0x60>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	031b      	lsls	r3, r3, #12
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	22a0      	movs	r2, #160	; 0xa0
 8002bcc:	4393      	bics	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	621a      	str	r2, [r3, #32]
}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b006      	add	sp, #24
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	ffff0fff 	.word	0xffff0fff

08002bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	4a09      	ldr	r2, [pc, #36]	; (8002c30 <TIM_ETR_SetConfig+0x3c>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	021a      	lsls	r2, r3, #8
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	609a      	str	r2, [r3, #8]
}
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b006      	add	sp, #24
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	ffff00ff 	.word	0xffff00ff

08002c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	223c      	movs	r2, #60	; 0x3c
 8002c42:	5c9b      	ldrb	r3, [r3, r2]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e047      	b.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	223c      	movs	r2, #60	; 0x3c
 8002c50:	2101      	movs	r1, #1
 8002c52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	223d      	movs	r2, #61	; 0x3d
 8002c58:	2102      	movs	r1, #2
 8002c5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2270      	movs	r2, #112	; 0x70
 8002c70:	4393      	bics	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00f      	beq.n	8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	05db      	lsls	r3, r3, #23
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d009      	beq.n	8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a11      	ldr	r2, [pc, #68]	; (8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d004      	beq.n	8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a10      	ldr	r2, [pc, #64]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d10c      	bne.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	4393      	bics	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	223d      	movs	r2, #61	; 0x3d
 8002cce:	2101      	movs	r1, #1
 8002cd0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	223c      	movs	r2, #60	; 0x3c
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	0018      	movs	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b004      	add	sp, #16
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40012c00 	.word	0x40012c00
 8002ce8:	40000400 	.word	0x40000400
 8002cec:	40014000 	.word	0x40014000

08002cf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	223c      	movs	r2, #60	; 0x3c
 8002d02:	5c9b      	ldrb	r3, [r3, r2]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e03e      	b.n	8002d8a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	223c      	movs	r2, #60	; 0x3c
 8002d10:	2101      	movs	r1, #1
 8002d12:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	22ff      	movs	r2, #255	; 0xff
 8002d18:	4393      	bics	r3, r2
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a1b      	ldr	r2, [pc, #108]	; (8002d94 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002d28:	401a      	ands	r2, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002d36:	401a      	ands	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002d44:	401a      	ands	r2, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4a13      	ldr	r2, [pc, #76]	; (8002da0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002d52:	401a      	ands	r2, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002d60:	401a      	ands	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a0e      	ldr	r2, [pc, #56]	; (8002da8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002d6e:	401a      	ands	r2, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	223c      	movs	r2, #60	; 0x3c
 8002d84:	2100      	movs	r1, #0
 8002d86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b004      	add	sp, #16
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	fffffcff 	.word	0xfffffcff
 8002d98:	fffffbff 	.word	0xfffffbff
 8002d9c:	fffff7ff 	.word	0xfffff7ff
 8002da0:	ffffefff 	.word	0xffffefff
 8002da4:	ffffdfff 	.word	0xffffdfff
 8002da8:	ffffbfff 	.word	0xffffbfff

08002dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e044      	b.n	8002e48 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d107      	bne.n	8002dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2274      	movs	r2, #116	; 0x74
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7fd feab 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2224      	movs	r2, #36	; 0x24
 8002dda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2101      	movs	r1, #1
 8002de8:	438a      	bics	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 fc36 	bl	8003660 <UART_SetConfig>
 8002df4:	0003      	movs	r3, r0
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e024      	b.n	8002e48 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 fdb1 	bl	8003970 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	490d      	ldr	r1, [pc, #52]	; (8002e50 <HAL_UART_Init+0xa4>)
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	212a      	movs	r1, #42	; 0x2a
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2101      	movs	r1, #1
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	0018      	movs	r0, r3
 8002e42:	f000 fe49 	bl	8003ad8 <UART_CheckIdleState>
 8002e46:	0003      	movs	r3, r0
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	ffffb7ff 	.word	0xffffb7ff

08002e54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	1dbb      	adds	r3, r7, #6
 8002e62:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d000      	beq.n	8002e6e <HAL_UART_Transmit+0x1a>
 8002e6c:	e096      	b.n	8002f9c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_UART_Transmit+0x28>
 8002e74:	1dbb      	adds	r3, r7, #6
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e08e      	b.n	8002f9e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	015b      	lsls	r3, r3, #5
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d109      	bne.n	8002ea0 <HAL_UART_Transmit+0x4c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2201      	movs	r2, #1
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d001      	beq.n	8002ea0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e07e      	b.n	8002f9e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2274      	movs	r2, #116	; 0x74
 8002ea4:	5c9b      	ldrb	r3, [r3, r2]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Transmit+0x5a>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e077      	b.n	8002f9e <HAL_UART_Transmit+0x14a>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2274      	movs	r2, #116	; 0x74
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2280      	movs	r2, #128	; 0x80
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2221      	movs	r2, #33	; 0x21
 8002ec2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ec4:	f7fe f80c 	bl	8000ee0 <HAL_GetTick>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1dba      	adds	r2, r7, #6
 8002ed0:	2150      	movs	r1, #80	; 0x50
 8002ed2:	8812      	ldrh	r2, [r2, #0]
 8002ed4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1dba      	adds	r2, r7, #6
 8002eda:	2152      	movs	r1, #82	; 0x52
 8002edc:	8812      	ldrh	r2, [r2, #0]
 8002ede:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	015b      	lsls	r3, r3, #5
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d108      	bne.n	8002efe <HAL_UART_Transmit+0xaa>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d104      	bne.n	8002efe <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	e003      	b.n	8002f06 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2274      	movs	r2, #116	; 0x74
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002f0e:	e02d      	b.n	8002f6c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	0013      	movs	r3, r2
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2180      	movs	r1, #128	; 0x80
 8002f1e:	f000 fe23 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 8002f22:	1e03      	subs	r3, r0, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e039      	b.n	8002f9e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	881a      	ldrh	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	05d2      	lsls	r2, r2, #23
 8002f3a:	0dd2      	lsrs	r2, r2, #23
 8002f3c:	b292      	uxth	r2, r2
 8002f3e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	3302      	adds	r3, #2
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	e008      	b.n	8002f5a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	b292      	uxth	r2, r2
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	3301      	adds	r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2252      	movs	r2, #82	; 0x52
 8002f5e:	5a9b      	ldrh	r3, [r3, r2]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b299      	uxth	r1, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2252      	movs	r2, #82	; 0x52
 8002f6a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2252      	movs	r2, #82	; 0x52
 8002f70:	5a9b      	ldrh	r3, [r3, r2]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1cb      	bne.n	8002f10 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	0013      	movs	r3, r2
 8002f82:	2200      	movs	r2, #0
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	f000 fdef 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 8002f8a:	1e03      	subs	r3, r0, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e005      	b.n	8002f9e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e000      	b.n	8002f9e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b008      	add	sp, #32
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b088      	sub	sp, #32
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	1dbb      	adds	r3, r7, #6
 8002fb2:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d150      	bne.n	800305e <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_UART_Receive_IT+0x24>
 8002fc2:	1dbb      	adds	r3, r7, #6
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e048      	b.n	8003060 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	015b      	lsls	r3, r3, #5
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d109      	bne.n	8002fee <HAL_UART_Receive_IT+0x48>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d001      	beq.n	8002fee <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e038      	b.n	8003060 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2274      	movs	r2, #116	; 0x74
 8002ff2:	5c9b      	ldrb	r3, [r3, r2]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_UART_Receive_IT+0x56>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e031      	b.n	8003060 <HAL_UART_Receive_IT+0xba>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2274      	movs	r2, #116	; 0x74
 8003000:	2101      	movs	r1, #1
 8003002:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	4013      	ands	r3, r2
 8003016:	d019      	beq.n	800304c <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003018:	f3ef 8310 	mrs	r3, PRIMASK
 800301c:	613b      	str	r3, [r7, #16]
  return(result);
 800301e:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	2301      	movs	r3, #1
 8003024:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f383 8810 	msr	PRIMASK, r3
}
 800302c:	46c0      	nop			; (mov r8, r8)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2180      	movs	r1, #128	; 0x80
 800303a:	04c9      	lsls	r1, r1, #19
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f383 8810 	msr	PRIMASK, r3
}
 800304a:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800304c:	1dbb      	adds	r3, r7, #6
 800304e:	881a      	ldrh	r2, [r3, #0]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	0018      	movs	r0, r3
 8003056:	f000 fe4b 	bl	8003cf0 <UART_Start_Receive_IT>
 800305a:	0003      	movs	r3, r0
 800305c:	e000      	b.n	8003060 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800305e:	2302      	movs	r3, #2
  }
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b008      	add	sp, #32
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b0ab      	sub	sp, #172	; 0xac
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	22a4      	movs	r2, #164	; 0xa4
 8003078:	18b9      	adds	r1, r7, r2
 800307a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	20a0      	movs	r0, #160	; 0xa0
 8003084:	1839      	adds	r1, r7, r0
 8003086:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	219c      	movs	r1, #156	; 0x9c
 8003090:	1879      	adds	r1, r7, r1
 8003092:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003094:	0011      	movs	r1, r2
 8003096:	18bb      	adds	r3, r7, r2
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a99      	ldr	r2, [pc, #612]	; (8003300 <HAL_UART_IRQHandler+0x298>)
 800309c:	4013      	ands	r3, r2
 800309e:	2298      	movs	r2, #152	; 0x98
 80030a0:	18bc      	adds	r4, r7, r2
 80030a2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80030a4:	18bb      	adds	r3, r7, r2
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d114      	bne.n	80030d6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030ac:	187b      	adds	r3, r7, r1
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2220      	movs	r2, #32
 80030b2:	4013      	ands	r3, r2
 80030b4:	d00f      	beq.n	80030d6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030b6:	183b      	adds	r3, r7, r0
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2220      	movs	r2, #32
 80030bc:	4013      	ands	r3, r2
 80030be:	d00a      	beq.n	80030d6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d100      	bne.n	80030ca <HAL_UART_IRQHandler+0x62>
 80030c8:	e296      	b.n	80035f8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	0010      	movs	r0, r2
 80030d2:	4798      	blx	r3
      }
      return;
 80030d4:	e290      	b.n	80035f8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030d6:	2398      	movs	r3, #152	; 0x98
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d100      	bne.n	80030e2 <HAL_UART_IRQHandler+0x7a>
 80030e0:	e114      	b.n	800330c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030e2:	239c      	movs	r3, #156	; 0x9c
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2201      	movs	r2, #1
 80030ea:	4013      	ands	r3, r2
 80030ec:	d106      	bne.n	80030fc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030ee:	23a0      	movs	r3, #160	; 0xa0
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a83      	ldr	r2, [pc, #524]	; (8003304 <HAL_UART_IRQHandler+0x29c>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	d100      	bne.n	80030fc <HAL_UART_IRQHandler+0x94>
 80030fa:	e107      	b.n	800330c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030fc:	23a4      	movs	r3, #164	; 0xa4
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2201      	movs	r2, #1
 8003104:	4013      	ands	r3, r2
 8003106:	d012      	beq.n	800312e <HAL_UART_IRQHandler+0xc6>
 8003108:	23a0      	movs	r3, #160	; 0xa0
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4013      	ands	r3, r2
 8003114:	d00b      	beq.n	800312e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2201      	movs	r2, #1
 800311c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	589b      	ldr	r3, [r3, r2]
 8003124:	2201      	movs	r2, #1
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800312e:	23a4      	movs	r3, #164	; 0xa4
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2202      	movs	r2, #2
 8003136:	4013      	ands	r3, r2
 8003138:	d011      	beq.n	800315e <HAL_UART_IRQHandler+0xf6>
 800313a:	239c      	movs	r3, #156	; 0x9c
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2201      	movs	r2, #1
 8003142:	4013      	ands	r3, r2
 8003144:	d00b      	beq.n	800315e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2202      	movs	r2, #2
 800314c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2280      	movs	r2, #128	; 0x80
 8003152:	589b      	ldr	r3, [r3, r2]
 8003154:	2204      	movs	r2, #4
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800315e:	23a4      	movs	r3, #164	; 0xa4
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2204      	movs	r2, #4
 8003166:	4013      	ands	r3, r2
 8003168:	d011      	beq.n	800318e <HAL_UART_IRQHandler+0x126>
 800316a:	239c      	movs	r3, #156	; 0x9c
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2201      	movs	r2, #1
 8003172:	4013      	ands	r3, r2
 8003174:	d00b      	beq.n	800318e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2204      	movs	r2, #4
 800317c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2280      	movs	r2, #128	; 0x80
 8003182:	589b      	ldr	r3, [r3, r2]
 8003184:	2202      	movs	r2, #2
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2180      	movs	r1, #128	; 0x80
 800318c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800318e:	23a4      	movs	r3, #164	; 0xa4
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2208      	movs	r2, #8
 8003196:	4013      	ands	r3, r2
 8003198:	d017      	beq.n	80031ca <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800319a:	23a0      	movs	r3, #160	; 0xa0
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2220      	movs	r2, #32
 80031a2:	4013      	ands	r3, r2
 80031a4:	d105      	bne.n	80031b2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031a6:	239c      	movs	r3, #156	; 0x9c
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2201      	movs	r2, #1
 80031ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031b0:	d00b      	beq.n	80031ca <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2208      	movs	r2, #8
 80031b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2280      	movs	r2, #128	; 0x80
 80031be:	589b      	ldr	r3, [r3, r2]
 80031c0:	2208      	movs	r2, #8
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031ca:	23a4      	movs	r3, #164	; 0xa4
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	4013      	ands	r3, r2
 80031d6:	d013      	beq.n	8003200 <HAL_UART_IRQHandler+0x198>
 80031d8:	23a0      	movs	r3, #160	; 0xa0
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	04db      	lsls	r3, r3, #19
 80031e2:	4013      	ands	r3, r2
 80031e4:	d00c      	beq.n	8003200 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	589b      	ldr	r3, [r3, r2]
 80031f6:	2220      	movs	r2, #32
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2180      	movs	r1, #128	; 0x80
 80031fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	589b      	ldr	r3, [r3, r2]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d100      	bne.n	800320c <HAL_UART_IRQHandler+0x1a4>
 800320a:	e1f7      	b.n	80035fc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800320c:	23a4      	movs	r3, #164	; 0xa4
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2220      	movs	r2, #32
 8003214:	4013      	ands	r3, r2
 8003216:	d00e      	beq.n	8003236 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003218:	23a0      	movs	r3, #160	; 0xa0
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2220      	movs	r2, #32
 8003220:	4013      	ands	r3, r2
 8003222:	d008      	beq.n	8003236 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	0010      	movs	r0, r2
 8003234:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	589b      	ldr	r3, [r3, r2]
 800323c:	2194      	movs	r1, #148	; 0x94
 800323e:	187a      	adds	r2, r7, r1
 8003240:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2240      	movs	r2, #64	; 0x40
 800324a:	4013      	ands	r3, r2
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d004      	beq.n	800325a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003250:	187b      	adds	r3, r7, r1
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2228      	movs	r2, #40	; 0x28
 8003256:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003258:	d047      	beq.n	80032ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0018      	movs	r0, r3
 800325e:	f000 fdf7 	bl	8003e50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2240      	movs	r2, #64	; 0x40
 800326a:	4013      	ands	r3, r2
 800326c:	2b40      	cmp	r3, #64	; 0x40
 800326e:	d137      	bne.n	80032e0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003270:	f3ef 8310 	mrs	r3, PRIMASK
 8003274:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003278:	2090      	movs	r0, #144	; 0x90
 800327a:	183a      	adds	r2, r7, r0
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	2301      	movs	r3, #1
 8003280:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003284:	f383 8810 	msr	PRIMASK, r3
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2140      	movs	r1, #64	; 0x40
 8003296:	438a      	bics	r2, r1
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	183b      	adds	r3, r7, r0
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032a2:	f383 8810 	msr	PRIMASK, r3
}
 80032a6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d012      	beq.n	80032d6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	4a14      	ldr	r2, [pc, #80]	; (8003308 <HAL_UART_IRQHandler+0x2a0>)
 80032b6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fd ff53 	bl	8001168 <HAL_DMA_Abort_IT>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d01a      	beq.n	80032fc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	0018      	movs	r0, r3
 80032d2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d4:	e012      	b.n	80032fc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 f9ad 	bl	8003638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032de:	e00d      	b.n	80032fc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 f9a8 	bl	8003638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	e008      	b.n	80032fc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	0018      	movs	r0, r3
 80032ee:	f000 f9a3 	bl	8003638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	2100      	movs	r1, #0
 80032f8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80032fa:	e17f      	b.n	80035fc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	46c0      	nop			; (mov r8, r8)
    return;
 80032fe:	e17d      	b.n	80035fc <HAL_UART_IRQHandler+0x594>
 8003300:	0000080f 	.word	0x0000080f
 8003304:	04000120 	.word	0x04000120
 8003308:	08003f15 	.word	0x08003f15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003310:	2b01      	cmp	r3, #1
 8003312:	d000      	beq.n	8003316 <HAL_UART_IRQHandler+0x2ae>
 8003314:	e131      	b.n	800357a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003316:	23a4      	movs	r3, #164	; 0xa4
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2210      	movs	r2, #16
 800331e:	4013      	ands	r3, r2
 8003320:	d100      	bne.n	8003324 <HAL_UART_IRQHandler+0x2bc>
 8003322:	e12a      	b.n	800357a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003324:	23a0      	movs	r3, #160	; 0xa0
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2210      	movs	r2, #16
 800332c:	4013      	ands	r3, r2
 800332e:	d100      	bne.n	8003332 <HAL_UART_IRQHandler+0x2ca>
 8003330:	e123      	b.n	800357a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2210      	movs	r2, #16
 8003338:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2240      	movs	r2, #64	; 0x40
 8003342:	4013      	ands	r3, r2
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d000      	beq.n	800334a <HAL_UART_IRQHandler+0x2e2>
 8003348:	e09b      	b.n	8003482 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	217e      	movs	r1, #126	; 0x7e
 8003354:	187b      	adds	r3, r7, r1
 8003356:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003358:	187b      	adds	r3, r7, r1
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d100      	bne.n	8003362 <HAL_UART_IRQHandler+0x2fa>
 8003360:	e14e      	b.n	8003600 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2258      	movs	r2, #88	; 0x58
 8003366:	5a9b      	ldrh	r3, [r3, r2]
 8003368:	187a      	adds	r2, r7, r1
 800336a:	8812      	ldrh	r2, [r2, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d300      	bcc.n	8003372 <HAL_UART_IRQHandler+0x30a>
 8003370:	e146      	b.n	8003600 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	187a      	adds	r2, r7, r1
 8003376:	215a      	movs	r1, #90	; 0x5a
 8003378:	8812      	ldrh	r2, [r2, #0]
 800337a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b20      	cmp	r3, #32
 8003384:	d06e      	beq.n	8003464 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003386:	f3ef 8310 	mrs	r3, PRIMASK
 800338a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800338e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003390:	2301      	movs	r3, #1
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003396:	f383 8810 	msr	PRIMASK, r3
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	499a      	ldr	r1, [pc, #616]	; (8003610 <HAL_UART_IRQHandler+0x5a8>)
 80033a8:	400a      	ands	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b2:	f383 8810 	msr	PRIMASK, r3
}
 80033b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b8:	f3ef 8310 	mrs	r3, PRIMASK
 80033bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80033be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c0:	677b      	str	r3, [r7, #116]	; 0x74
 80033c2:	2301      	movs	r3, #1
 80033c4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c8:	f383 8810 	msr	PRIMASK, r3
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2101      	movs	r1, #1
 80033da:	438a      	bics	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e4:	f383 8810 	msr	PRIMASK, r3
}
 80033e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ea:	f3ef 8310 	mrs	r3, PRIMASK
 80033ee:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80033f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f2:	673b      	str	r3, [r7, #112]	; 0x70
 80033f4:	2301      	movs	r3, #1
 80033f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fa:	f383 8810 	msr	PRIMASK, r3
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2140      	movs	r1, #64	; 0x40
 800340c:	438a      	bics	r2, r1
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003412:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003416:	f383 8810 	msr	PRIMASK, r3
}
 800341a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003428:	f3ef 8310 	mrs	r3, PRIMASK
 800342c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800342e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003430:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003432:	2301      	movs	r3, #1
 8003434:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003438:	f383 8810 	msr	PRIMASK, r3
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2110      	movs	r1, #16
 800344a:	438a      	bics	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003450:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003454:	f383 8810 	msr	PRIMASK, r3
}
 8003458:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	0018      	movs	r0, r3
 8003460:	f7fd fe4a 	bl	80010f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2258      	movs	r2, #88	; 0x58
 8003468:	5a9a      	ldrh	r2, [r3, r2]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	215a      	movs	r1, #90	; 0x5a
 800346e:	5a5b      	ldrh	r3, [r3, r1]
 8003470:	b29b      	uxth	r3, r3
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	b29a      	uxth	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0011      	movs	r1, r2
 800347a:	0018      	movs	r0, r3
 800347c:	f000 f8e4 	bl	8003648 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003480:	e0be      	b.n	8003600 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2258      	movs	r2, #88	; 0x58
 8003486:	5a99      	ldrh	r1, [r3, r2]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	225a      	movs	r2, #90	; 0x5a
 800348c:	5a9b      	ldrh	r3, [r3, r2]
 800348e:	b29a      	uxth	r2, r3
 8003490:	208e      	movs	r0, #142	; 0x8e
 8003492:	183b      	adds	r3, r7, r0
 8003494:	1a8a      	subs	r2, r1, r2
 8003496:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	225a      	movs	r2, #90	; 0x5a
 800349c:	5a9b      	ldrh	r3, [r3, r2]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d100      	bne.n	80034a6 <HAL_UART_IRQHandler+0x43e>
 80034a4:	e0ae      	b.n	8003604 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80034a6:	183b      	adds	r3, r7, r0
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d100      	bne.n	80034b0 <HAL_UART_IRQHandler+0x448>
 80034ae:	e0a9      	b.n	8003604 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b0:	f3ef 8310 	mrs	r3, PRIMASK
 80034b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80034b6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b8:	2488      	movs	r4, #136	; 0x88
 80034ba:	193a      	adds	r2, r7, r4
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	2301      	movs	r3, #1
 80034c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f383 8810 	msr	PRIMASK, r3
}
 80034c8:	46c0      	nop			; (mov r8, r8)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	494f      	ldr	r1, [pc, #316]	; (8003614 <HAL_UART_IRQHandler+0x5ac>)
 80034d6:	400a      	ands	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	193b      	adds	r3, r7, r4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f383 8810 	msr	PRIMASK, r3
}
 80034e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e8:	f3ef 8310 	mrs	r3, PRIMASK
 80034ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80034ee:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f0:	2484      	movs	r4, #132	; 0x84
 80034f2:	193a      	adds	r2, r7, r4
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	2301      	movs	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f383 8810 	msr	PRIMASK, r3
}
 8003500:	46c0      	nop			; (mov r8, r8)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2101      	movs	r1, #1
 800350e:	438a      	bics	r2, r1
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	193b      	adds	r3, r7, r4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003532:	f3ef 8310 	mrs	r3, PRIMASK
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353a:	2480      	movs	r4, #128	; 0x80
 800353c:	193a      	adds	r2, r7, r4
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	2301      	movs	r3, #1
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	f383 8810 	msr	PRIMASK, r3
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2110      	movs	r1, #16
 8003558:	438a      	bics	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	193b      	adds	r3, r7, r4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	f383 8810 	msr	PRIMASK, r3
}
 8003568:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800356a:	183b      	adds	r3, r7, r0
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	0011      	movs	r1, r2
 8003572:	0018      	movs	r0, r3
 8003574:	f000 f868 	bl	8003648 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003578:	e044      	b.n	8003604 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800357a:	23a4      	movs	r3, #164	; 0xa4
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	035b      	lsls	r3, r3, #13
 8003584:	4013      	ands	r3, r2
 8003586:	d010      	beq.n	80035aa <HAL_UART_IRQHandler+0x542>
 8003588:	239c      	movs	r3, #156	; 0x9c
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	03db      	lsls	r3, r3, #15
 8003592:	4013      	ands	r3, r2
 8003594:	d009      	beq.n	80035aa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	0352      	lsls	r2, r2, #13
 800359e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	0018      	movs	r0, r3
 80035a4:	f000 fe60 	bl	8004268 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035a8:	e02f      	b.n	800360a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035aa:	23a4      	movs	r3, #164	; 0xa4
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2280      	movs	r2, #128	; 0x80
 80035b2:	4013      	ands	r3, r2
 80035b4:	d00f      	beq.n	80035d6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035b6:	23a0      	movs	r3, #160	; 0xa0
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	4013      	ands	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01e      	beq.n	8003608 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	0010      	movs	r0, r2
 80035d2:	4798      	blx	r3
    }
    return;
 80035d4:	e018      	b.n	8003608 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035d6:	23a4      	movs	r3, #164	; 0xa4
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2240      	movs	r2, #64	; 0x40
 80035de:	4013      	ands	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_UART_IRQHandler+0x5a2>
 80035e2:	23a0      	movs	r3, #160	; 0xa0
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2240      	movs	r2, #64	; 0x40
 80035ea:	4013      	ands	r3, r2
 80035ec:	d00d      	beq.n	800360a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 fca6 	bl	8003f42 <UART_EndTransmit_IT>
    return;
 80035f6:	e008      	b.n	800360a <HAL_UART_IRQHandler+0x5a2>
      return;
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	e006      	b.n	800360a <HAL_UART_IRQHandler+0x5a2>
    return;
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	e004      	b.n	800360a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	e002      	b.n	800360a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	e000      	b.n	800360a <HAL_UART_IRQHandler+0x5a2>
    return;
 8003608:	46c0      	nop			; (mov r8, r8)
  }

}
 800360a:	46bd      	mov	sp, r7
 800360c:	b02b      	add	sp, #172	; 0xac
 800360e:	bd90      	pop	{r4, r7, pc}
 8003610:	fffffeff 	.word	0xfffffeff
 8003614:	fffffedf 	.word	0xfffffedf

08003618 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b002      	add	sp, #8
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003640:	46c0      	nop			; (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b002      	add	sp, #8
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	000a      	movs	r2, r1
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b002      	add	sp, #8
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003668:	231e      	movs	r3, #30
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4aaf      	ldr	r2, [pc, #700]	; (800394c <UART_SetConfig+0x2ec>)
 8003690:	4013      	ands	r3, r2
 8003692:	0019      	movs	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	430a      	orrs	r2, r1
 800369c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4aaa      	ldr	r2, [pc, #680]	; (8003950 <UART_SetConfig+0x2f0>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	0019      	movs	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	4aa1      	ldr	r2, [pc, #644]	; (8003954 <UART_SetConfig+0x2f4>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	430a      	orrs	r2, r1
 80036da:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a9d      	ldr	r2, [pc, #628]	; (8003958 <UART_SetConfig+0x2f8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d127      	bne.n	8003736 <UART_SetConfig+0xd6>
 80036e6:	4b9d      	ldr	r3, [pc, #628]	; (800395c <UART_SetConfig+0x2fc>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	2203      	movs	r2, #3
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d00d      	beq.n	800370e <UART_SetConfig+0xae>
 80036f2:	d81b      	bhi.n	800372c <UART_SetConfig+0xcc>
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d014      	beq.n	8003722 <UART_SetConfig+0xc2>
 80036f8:	d818      	bhi.n	800372c <UART_SetConfig+0xcc>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <UART_SetConfig+0xa4>
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d00a      	beq.n	8003718 <UART_SetConfig+0xb8>
 8003702:	e013      	b.n	800372c <UART_SetConfig+0xcc>
 8003704:	231f      	movs	r3, #31
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e065      	b.n	80037da <UART_SetConfig+0x17a>
 800370e:	231f      	movs	r3, #31
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	2202      	movs	r2, #2
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e060      	b.n	80037da <UART_SetConfig+0x17a>
 8003718:	231f      	movs	r3, #31
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2204      	movs	r2, #4
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e05b      	b.n	80037da <UART_SetConfig+0x17a>
 8003722:	231f      	movs	r3, #31
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2208      	movs	r2, #8
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e056      	b.n	80037da <UART_SetConfig+0x17a>
 800372c:	231f      	movs	r3, #31
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	2210      	movs	r2, #16
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e051      	b.n	80037da <UART_SetConfig+0x17a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a89      	ldr	r2, [pc, #548]	; (8003960 <UART_SetConfig+0x300>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d134      	bne.n	80037aa <UART_SetConfig+0x14a>
 8003740:	4b86      	ldr	r3, [pc, #536]	; (800395c <UART_SetConfig+0x2fc>)
 8003742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003744:	23c0      	movs	r3, #192	; 0xc0
 8003746:	029b      	lsls	r3, r3, #10
 8003748:	4013      	ands	r3, r2
 800374a:	22c0      	movs	r2, #192	; 0xc0
 800374c:	0292      	lsls	r2, r2, #10
 800374e:	4293      	cmp	r3, r2
 8003750:	d017      	beq.n	8003782 <UART_SetConfig+0x122>
 8003752:	22c0      	movs	r2, #192	; 0xc0
 8003754:	0292      	lsls	r2, r2, #10
 8003756:	4293      	cmp	r3, r2
 8003758:	d822      	bhi.n	80037a0 <UART_SetConfig+0x140>
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	0292      	lsls	r2, r2, #10
 800375e:	4293      	cmp	r3, r2
 8003760:	d019      	beq.n	8003796 <UART_SetConfig+0x136>
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	0292      	lsls	r2, r2, #10
 8003766:	4293      	cmp	r3, r2
 8003768:	d81a      	bhi.n	80037a0 <UART_SetConfig+0x140>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <UART_SetConfig+0x118>
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	0252      	lsls	r2, r2, #9
 8003772:	4293      	cmp	r3, r2
 8003774:	d00a      	beq.n	800378c <UART_SetConfig+0x12c>
 8003776:	e013      	b.n	80037a0 <UART_SetConfig+0x140>
 8003778:	231f      	movs	r3, #31
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	e02b      	b.n	80037da <UART_SetConfig+0x17a>
 8003782:	231f      	movs	r3, #31
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	2202      	movs	r2, #2
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	e026      	b.n	80037da <UART_SetConfig+0x17a>
 800378c:	231f      	movs	r3, #31
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	2204      	movs	r2, #4
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	e021      	b.n	80037da <UART_SetConfig+0x17a>
 8003796:	231f      	movs	r3, #31
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	2208      	movs	r2, #8
 800379c:	701a      	strb	r2, [r3, #0]
 800379e:	e01c      	b.n	80037da <UART_SetConfig+0x17a>
 80037a0:	231f      	movs	r3, #31
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	2210      	movs	r2, #16
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	e017      	b.n	80037da <UART_SetConfig+0x17a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6d      	ldr	r2, [pc, #436]	; (8003964 <UART_SetConfig+0x304>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d104      	bne.n	80037be <UART_SetConfig+0x15e>
 80037b4:	231f      	movs	r3, #31
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
 80037bc:	e00d      	b.n	80037da <UART_SetConfig+0x17a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a69      	ldr	r2, [pc, #420]	; (8003968 <UART_SetConfig+0x308>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d104      	bne.n	80037d2 <UART_SetConfig+0x172>
 80037c8:	231f      	movs	r3, #31
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e003      	b.n	80037da <UART_SetConfig+0x17a>
 80037d2:	231f      	movs	r3, #31
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	2210      	movs	r2, #16
 80037d8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d15d      	bne.n	80038a2 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80037e6:	231f      	movs	r3, #31
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d015      	beq.n	800381c <UART_SetConfig+0x1bc>
 80037f0:	dc18      	bgt.n	8003824 <UART_SetConfig+0x1c4>
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d00d      	beq.n	8003812 <UART_SetConfig+0x1b2>
 80037f6:	dc15      	bgt.n	8003824 <UART_SetConfig+0x1c4>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <UART_SetConfig+0x1a2>
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d005      	beq.n	800380c <UART_SetConfig+0x1ac>
 8003800:	e010      	b.n	8003824 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003802:	f7fe fb77 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8003806:	0003      	movs	r3, r0
 8003808:	61bb      	str	r3, [r7, #24]
        break;
 800380a:	e012      	b.n	8003832 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800380c:	4b57      	ldr	r3, [pc, #348]	; (800396c <UART_SetConfig+0x30c>)
 800380e:	61bb      	str	r3, [r7, #24]
        break;
 8003810:	e00f      	b.n	8003832 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003812:	f7fe fae5 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8003816:	0003      	movs	r3, r0
 8003818:	61bb      	str	r3, [r7, #24]
        break;
 800381a:	e00a      	b.n	8003832 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	61bb      	str	r3, [r7, #24]
        break;
 8003822:	e006      	b.n	8003832 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003828:	231e      	movs	r3, #30
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
        break;
 8003830:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d100      	bne.n	800383a <UART_SetConfig+0x1da>
 8003838:	e07b      	b.n	8003932 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	005a      	lsls	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	085b      	lsrs	r3, r3, #1
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	0019      	movs	r1, r3
 800384c:	0010      	movs	r0, r2
 800384e:	f7fc fc65 	bl	800011c <__udivsi3>
 8003852:	0003      	movs	r3, r0
 8003854:	b29b      	uxth	r3, r3
 8003856:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b0f      	cmp	r3, #15
 800385c:	d91c      	bls.n	8003898 <UART_SetConfig+0x238>
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	2380      	movs	r3, #128	; 0x80
 8003862:	025b      	lsls	r3, r3, #9
 8003864:	429a      	cmp	r2, r3
 8003866:	d217      	bcs.n	8003898 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	b29a      	uxth	r2, r3
 800386c:	200e      	movs	r0, #14
 800386e:	183b      	adds	r3, r7, r0
 8003870:	210f      	movs	r1, #15
 8003872:	438a      	bics	r2, r1
 8003874:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	b29b      	uxth	r3, r3
 800387c:	2207      	movs	r2, #7
 800387e:	4013      	ands	r3, r2
 8003880:	b299      	uxth	r1, r3
 8003882:	183b      	adds	r3, r7, r0
 8003884:	183a      	adds	r2, r7, r0
 8003886:	8812      	ldrh	r2, [r2, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	183a      	adds	r2, r7, r0
 8003892:	8812      	ldrh	r2, [r2, #0]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	e04c      	b.n	8003932 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003898:	231e      	movs	r3, #30
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e047      	b.n	8003932 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038a2:	231f      	movs	r3, #31
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d015      	beq.n	80038d8 <UART_SetConfig+0x278>
 80038ac:	dc18      	bgt.n	80038e0 <UART_SetConfig+0x280>
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d00d      	beq.n	80038ce <UART_SetConfig+0x26e>
 80038b2:	dc15      	bgt.n	80038e0 <UART_SetConfig+0x280>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <UART_SetConfig+0x25e>
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d005      	beq.n	80038c8 <UART_SetConfig+0x268>
 80038bc:	e010      	b.n	80038e0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038be:	f7fe fb19 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 80038c2:	0003      	movs	r3, r0
 80038c4:	61bb      	str	r3, [r7, #24]
        break;
 80038c6:	e012      	b.n	80038ee <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c8:	4b28      	ldr	r3, [pc, #160]	; (800396c <UART_SetConfig+0x30c>)
 80038ca:	61bb      	str	r3, [r7, #24]
        break;
 80038cc:	e00f      	b.n	80038ee <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ce:	f7fe fa87 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 80038d2:	0003      	movs	r3, r0
 80038d4:	61bb      	str	r3, [r7, #24]
        break;
 80038d6:	e00a      	b.n	80038ee <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	61bb      	str	r3, [r7, #24]
        break;
 80038de:	e006      	b.n	80038ee <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038e4:	231e      	movs	r3, #30
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
        break;
 80038ec:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01e      	beq.n	8003932 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	085a      	lsrs	r2, r3, #1
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	18d2      	adds	r2, r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	0019      	movs	r1, r3
 8003904:	0010      	movs	r0, r2
 8003906:	f7fc fc09 	bl	800011c <__udivsi3>
 800390a:	0003      	movs	r3, r0
 800390c:	b29b      	uxth	r3, r3
 800390e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b0f      	cmp	r3, #15
 8003914:	d909      	bls.n	800392a <UART_SetConfig+0x2ca>
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	025b      	lsls	r3, r3, #9
 800391c:	429a      	cmp	r2, r3
 800391e:	d204      	bcs.n	800392a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	60da      	str	r2, [r3, #12]
 8003928:	e003      	b.n	8003932 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800392a:	231e      	movs	r3, #30
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800393e:	231e      	movs	r3, #30
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	781b      	ldrb	r3, [r3, #0]
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b008      	add	sp, #32
 800394a:	bd80      	pop	{r7, pc}
 800394c:	efff69f3 	.word	0xefff69f3
 8003950:	ffffcfff 	.word	0xffffcfff
 8003954:	fffff4ff 	.word	0xfffff4ff
 8003958:	40013800 	.word	0x40013800
 800395c:	40021000 	.word	0x40021000
 8003960:	40004400 	.word	0x40004400
 8003964:	40004800 	.word	0x40004800
 8003968:	40004c00 	.word	0x40004c00
 800396c:	007a1200 	.word	0x007a1200

08003970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	2201      	movs	r2, #1
 800397e:	4013      	ands	r3, r2
 8003980:	d00b      	beq.n	800399a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a4a      	ldr	r2, [pc, #296]	; (8003ab4 <UART_AdvFeatureConfig+0x144>)
 800398a:	4013      	ands	r3, r2
 800398c:	0019      	movs	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	2202      	movs	r2, #2
 80039a0:	4013      	ands	r3, r2
 80039a2:	d00b      	beq.n	80039bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4a43      	ldr	r2, [pc, #268]	; (8003ab8 <UART_AdvFeatureConfig+0x148>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	0019      	movs	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	2204      	movs	r2, #4
 80039c2:	4013      	ands	r3, r2
 80039c4:	d00b      	beq.n	80039de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4a3b      	ldr	r2, [pc, #236]	; (8003abc <UART_AdvFeatureConfig+0x14c>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	0019      	movs	r1, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	2208      	movs	r2, #8
 80039e4:	4013      	ands	r3, r2
 80039e6:	d00b      	beq.n	8003a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4a34      	ldr	r2, [pc, #208]	; (8003ac0 <UART_AdvFeatureConfig+0x150>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	0019      	movs	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	2210      	movs	r2, #16
 8003a06:	4013      	ands	r3, r2
 8003a08:	d00b      	beq.n	8003a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a2c      	ldr	r2, [pc, #176]	; (8003ac4 <UART_AdvFeatureConfig+0x154>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	0019      	movs	r1, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	2220      	movs	r2, #32
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d00b      	beq.n	8003a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <UART_AdvFeatureConfig+0x158>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	0019      	movs	r1, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	2240      	movs	r2, #64	; 0x40
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d01d      	beq.n	8003a8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <UART_AdvFeatureConfig+0x15c>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	0019      	movs	r1, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	035b      	lsls	r3, r3, #13
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d10b      	bne.n	8003a8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a15      	ldr	r2, [pc, #84]	; (8003ad0 <UART_AdvFeatureConfig+0x160>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	2280      	movs	r2, #128	; 0x80
 8003a90:	4013      	ands	r3, r2
 8003a92:	d00b      	beq.n	8003aac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4a0e      	ldr	r2, [pc, #56]	; (8003ad4 <UART_AdvFeatureConfig+0x164>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  }
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b002      	add	sp, #8
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	fffdffff 	.word	0xfffdffff
 8003ab8:	fffeffff 	.word	0xfffeffff
 8003abc:	fffbffff 	.word	0xfffbffff
 8003ac0:	ffff7fff 	.word	0xffff7fff
 8003ac4:	ffffefff 	.word	0xffffefff
 8003ac8:	ffffdfff 	.word	0xffffdfff
 8003acc:	ffefffff 	.word	0xffefffff
 8003ad0:	ff9fffff 	.word	0xff9fffff
 8003ad4:	fff7ffff 	.word	0xfff7ffff

08003ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2280      	movs	r2, #128	; 0x80
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ae8:	f7fd f9fa 	bl	8000ee0 <HAL_GetTick>
 8003aec:	0003      	movs	r3, r0
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2208      	movs	r2, #8
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d10c      	bne.n	8003b18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	0391      	lsls	r1, r2, #14
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <UART_CheckIdleState+0x8c>)
 8003b08:	9200      	str	r2, [sp, #0]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f000 f82c 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 8003b10:	1e03      	subs	r3, r0, #0
 8003b12:	d001      	beq.n	8003b18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e021      	b.n	8003b5c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d10c      	bne.n	8003b40 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	03d1      	lsls	r1, r2, #15
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <UART_CheckIdleState+0x8c>)
 8003b30:	9200      	str	r2, [sp, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f000 f818 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 8003b38:	1e03      	subs	r3, r0, #0
 8003b3a:	d001      	beq.n	8003b40 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e00d      	b.n	8003b5c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2274      	movs	r2, #116	; 0x74
 8003b56:	2100      	movs	r1, #0
 8003b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b004      	add	sp, #16
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	01ffffff 	.word	0x01ffffff

08003b68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b094      	sub	sp, #80	; 0x50
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	1dfb      	adds	r3, r7, #7
 8003b76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b78:	e0a3      	b.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	d100      	bne.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b80:	e09f      	b.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b82:	f7fd f9ad 	bl	8000ee0 <HAL_GetTick>
 8003b86:	0002      	movs	r2, r0
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d302      	bcc.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d13d      	bne.n	8003c14 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b98:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	f383 8810 	msr	PRIMASK, r3
}
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	494c      	ldr	r1, [pc, #304]	; (8003cec <UART_WaitOnFlagUntilTimeout+0x184>)
 8003bba:	400a      	ands	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	f383 8810 	msr	PRIMASK, r3
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bca:	f3ef 8310 	mrs	r3, PRIMASK
 8003bce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	f383 8810 	msr	PRIMASK, r3
}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2101      	movs	r1, #1
 8003bec:	438a      	bics	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf6:	f383 8810 	msr	PRIMASK, r3
}
 8003bfa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2274      	movs	r2, #116	; 0x74
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e067      	b.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d050      	beq.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	2380      	movs	r3, #128	; 0x80
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d146      	bne.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	0112      	lsls	r2, r2, #4
 8003c3c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c42:	613b      	str	r3, [r7, #16]
  return(result);
 8003c44:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c48:	2301      	movs	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4923      	ldr	r1, [pc, #140]	; (8003cec <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c60:	400a      	ands	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c70:	f3ef 8310 	mrs	r3, PRIMASK
 8003c74:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c76:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	438a      	bics	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ca0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2280      	movs	r2, #128	; 0x80
 8003cb2:	2120      	movs	r1, #32
 8003cb4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2274      	movs	r2, #116	; 0x74
 8003cba:	2100      	movs	r1, #0
 8003cbc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e010      	b.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	425a      	negs	r2, r3
 8003cd2:	4153      	adcs	r3, r2
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	001a      	movs	r2, r3
 8003cd8:	1dfb      	adds	r3, r7, #7
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d100      	bne.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003ce0:	e74b      	b.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b014      	add	sp, #80	; 0x50
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	fffffe5f 	.word	0xfffffe5f

08003cf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08c      	sub	sp, #48	; 0x30
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	1dbb      	adds	r3, r7, #6
 8003cfc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1dba      	adds	r2, r7, #6
 8003d08:	2158      	movs	r1, #88	; 0x58
 8003d0a:	8812      	ldrh	r2, [r2, #0]
 8003d0c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1dba      	adds	r2, r7, #6
 8003d12:	215a      	movs	r1, #90	; 0x5a
 8003d14:	8812      	ldrh	r2, [r2, #0]
 8003d16:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	015b      	lsls	r3, r3, #5
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d10d      	bne.n	8003d46 <UART_Start_Receive_IT+0x56>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d104      	bne.n	8003d3c <UART_Start_Receive_IT+0x4c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	225c      	movs	r2, #92	; 0x5c
 8003d36:	4943      	ldr	r1, [pc, #268]	; (8003e44 <UART_Start_Receive_IT+0x154>)
 8003d38:	5299      	strh	r1, [r3, r2]
 8003d3a:	e02e      	b.n	8003d9a <UART_Start_Receive_IT+0xaa>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	225c      	movs	r2, #92	; 0x5c
 8003d40:	21ff      	movs	r1, #255	; 0xff
 8003d42:	5299      	strh	r1, [r3, r2]
 8003d44:	e029      	b.n	8003d9a <UART_Start_Receive_IT+0xaa>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10d      	bne.n	8003d6a <UART_Start_Receive_IT+0x7a>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <UART_Start_Receive_IT+0x70>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	225c      	movs	r2, #92	; 0x5c
 8003d5a:	21ff      	movs	r1, #255	; 0xff
 8003d5c:	5299      	strh	r1, [r3, r2]
 8003d5e:	e01c      	b.n	8003d9a <UART_Start_Receive_IT+0xaa>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	225c      	movs	r2, #92	; 0x5c
 8003d64:	217f      	movs	r1, #127	; 0x7f
 8003d66:	5299      	strh	r1, [r3, r2]
 8003d68:	e017      	b.n	8003d9a <UART_Start_Receive_IT+0xaa>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	055b      	lsls	r3, r3, #21
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d10d      	bne.n	8003d92 <UART_Start_Receive_IT+0xa2>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d104      	bne.n	8003d88 <UART_Start_Receive_IT+0x98>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	225c      	movs	r2, #92	; 0x5c
 8003d82:	217f      	movs	r1, #127	; 0x7f
 8003d84:	5299      	strh	r1, [r3, r2]
 8003d86:	e008      	b.n	8003d9a <UART_Start_Receive_IT+0xaa>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	225c      	movs	r2, #92	; 0x5c
 8003d8c:	213f      	movs	r1, #63	; 0x3f
 8003d8e:	5299      	strh	r1, [r3, r2]
 8003d90:	e003      	b.n	8003d9a <UART_Start_Receive_IT+0xaa>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	225c      	movs	r2, #92	; 0x5c
 8003d96:	2100      	movs	r1, #0
 8003d98:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2280      	movs	r2, #128	; 0x80
 8003d9e:	2100      	movs	r1, #0
 8003da0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2222      	movs	r2, #34	; 0x22
 8003da6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dac:	61fb      	str	r3, [r7, #28]
  return(result);
 8003dae:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db2:	2301      	movs	r3, #1
 8003db4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	f383 8810 	msr	PRIMASK, r3
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2101      	movs	r1, #1
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	f383 8810 	msr	PRIMASK, r3
}
 8003dd8:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	015b      	lsls	r3, r3, #5
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d107      	bne.n	8003df6 <UART_Start_Receive_IT+0x106>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d103      	bne.n	8003df6 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <UART_Start_Receive_IT+0x158>)
 8003df2:	665a      	str	r2, [r3, #100]	; 0x64
 8003df4:	e002      	b.n	8003dfc <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <UART_Start_Receive_IT+0x15c>)
 8003dfa:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2274      	movs	r2, #116	; 0x74
 8003e00:	2100      	movs	r1, #0
 8003e02:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e04:	f3ef 8310 	mrs	r3, PRIMASK
 8003e08:	613b      	str	r3, [r7, #16]
  return(result);
 8003e0a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0e:	2301      	movs	r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f383 8810 	msr	PRIMASK, r3
}
 8003e18:	46c0      	nop			; (mov r8, r8)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2190      	movs	r1, #144	; 0x90
 8003e26:	0049      	lsls	r1, r1, #1
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f383 8810 	msr	PRIMASK, r3
}
 8003e36:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b00c      	add	sp, #48	; 0x30
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	000001ff 	.word	0x000001ff
 8003e48:	08004101 	.word	0x08004101
 8003e4c:	08003f99 	.word	0x08003f99

08003e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08e      	sub	sp, #56	; 0x38
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e58:	f3ef 8310 	mrs	r3, PRIMASK
 8003e5c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
 8003e62:	2301      	movs	r3, #1
 8003e64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f383 8810 	msr	PRIMASK, r3
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4925      	ldr	r1, [pc, #148]	; (8003f10 <UART_EndRxTransfer+0xc0>)
 8003e7a:	400a      	ands	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f383 8810 	msr	PRIMASK, r3
}
 8003e88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8e:	623b      	str	r3, [r7, #32]
  return(result);
 8003e90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	633b      	str	r3, [r7, #48]	; 0x30
 8003e94:	2301      	movs	r3, #1
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	f383 8810 	msr	PRIMASK, r3
}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2101      	movs	r1, #1
 8003eac:	438a      	bics	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	f383 8810 	msr	PRIMASK, r3
}
 8003eba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d118      	bne.n	8003ef6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ece:	2301      	movs	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f383 8810 	msr	PRIMASK, r3
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2110      	movs	r1, #16
 8003ee6:	438a      	bics	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f383 8810 	msr	PRIMASK, r3
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b00e      	add	sp, #56	; 0x38
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	fffffedf 	.word	0xfffffedf

08003f14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	225a      	movs	r2, #90	; 0x5a
 8003f26:	2100      	movs	r1, #0
 8003f28:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2252      	movs	r2, #82	; 0x52
 8003f2e:	2100      	movs	r1, #0
 8003f30:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff fb7f 	bl	8003638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b004      	add	sp, #16
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b086      	sub	sp, #24
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f50:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	2301      	movs	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f383 8810 	msr	PRIMASK, r3
}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2140      	movs	r1, #64	; 0x40
 8003f6c:	438a      	bics	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f383 8810 	msr	PRIMASK, r3
}
 8003f7a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7ff fb44 	bl	8003618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b006      	add	sp, #24
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b090      	sub	sp, #64	; 0x40
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003fa0:	203e      	movs	r0, #62	; 0x3e
 8003fa2:	183b      	adds	r3, r7, r0
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	215c      	movs	r1, #92	; 0x5c
 8003fa8:	5a52      	ldrh	r2, [r2, r1]
 8003faa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb0:	2b22      	cmp	r3, #34	; 0x22
 8003fb2:	d000      	beq.n	8003fb6 <UART_RxISR_8BIT+0x1e>
 8003fb4:	e095      	b.n	80040e2 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	213c      	movs	r1, #60	; 0x3c
 8003fbc:	187b      	adds	r3, r7, r1
 8003fbe:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003fc0:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fc2:	187b      	adds	r3, r7, r1
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	183b      	adds	r3, r7, r0
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b2d9      	uxtb	r1, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	225a      	movs	r2, #90	; 0x5a
 8003fe6:	5a9b      	ldrh	r3, [r3, r2]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b299      	uxth	r1, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	225a      	movs	r2, #90	; 0x5a
 8003ff2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	225a      	movs	r2, #90	; 0x5a
 8003ff8:	5a9b      	ldrh	r3, [r3, r2]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d178      	bne.n	80040f2 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004000:	f3ef 8310 	mrs	r3, PRIMASK
 8004004:	61bb      	str	r3, [r7, #24]
  return(result);
 8004006:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004008:	63bb      	str	r3, [r7, #56]	; 0x38
 800400a:	2301      	movs	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f383 8810 	msr	PRIMASK, r3
}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4936      	ldr	r1, [pc, #216]	; (80040fc <UART_RxISR_8BIT+0x164>)
 8004022:	400a      	ands	r2, r1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f383 8810 	msr	PRIMASK, r3
}
 8004030:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004032:	f3ef 8310 	mrs	r3, PRIMASK
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
 800403c:	2301      	movs	r3, #1
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	f383 8810 	msr	PRIMASK, r3
}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2101      	movs	r1, #1
 8004054:	438a      	bics	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	f383 8810 	msr	PRIMASK, r3
}
 8004062:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004074:	2b01      	cmp	r3, #1
 8004076:	d12f      	bne.n	80040d8 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407e:	f3ef 8310 	mrs	r3, PRIMASK
 8004082:	60fb      	str	r3, [r7, #12]
  return(result);
 8004084:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
 8004088:	2301      	movs	r3, #1
 800408a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f383 8810 	msr	PRIMASK, r3
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2110      	movs	r1, #16
 80040a0:	438a      	bics	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f383 8810 	msr	PRIMASK, r3
}
 80040ae:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	2210      	movs	r2, #16
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d103      	bne.n	80040c6 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2210      	movs	r2, #16
 80040c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2258      	movs	r2, #88	; 0x58
 80040ca:	5a9a      	ldrh	r2, [r3, r2]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	0011      	movs	r1, r2
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7ff fab9 	bl	8003648 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040d6:	e00c      	b.n	80040f2 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	0018      	movs	r0, r3
 80040dc:	f7ff faa4 	bl	8003628 <HAL_UART_RxCpltCallback>
}
 80040e0:	e007      	b.n	80040f2 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699a      	ldr	r2, [r3, #24]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2108      	movs	r1, #8
 80040ee:	430a      	orrs	r2, r1
 80040f0:	619a      	str	r2, [r3, #24]
}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b010      	add	sp, #64	; 0x40
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	fffffedf 	.word	0xfffffedf

08004100 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b090      	sub	sp, #64	; 0x40
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004108:	203e      	movs	r0, #62	; 0x3e
 800410a:	183b      	adds	r3, r7, r0
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	215c      	movs	r1, #92	; 0x5c
 8004110:	5a52      	ldrh	r2, [r2, r1]
 8004112:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004118:	2b22      	cmp	r3, #34	; 0x22
 800411a:	d000      	beq.n	800411e <UART_RxISR_16BIT+0x1e>
 800411c:	e095      	b.n	800424a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	213c      	movs	r1, #60	; 0x3c
 8004124:	187b      	adds	r3, r7, r1
 8004126:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004128:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004130:	187b      	adds	r3, r7, r1
 8004132:	183a      	adds	r2, r7, r0
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	8812      	ldrh	r2, [r2, #0]
 8004138:	4013      	ands	r3, r2
 800413a:	b29a      	uxth	r2, r3
 800413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	1c9a      	adds	r2, r3, #2
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	225a      	movs	r2, #90	; 0x5a
 800414e:	5a9b      	ldrh	r3, [r3, r2]
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b299      	uxth	r1, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	225a      	movs	r2, #90	; 0x5a
 800415a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	225a      	movs	r2, #90	; 0x5a
 8004160:	5a9b      	ldrh	r3, [r3, r2]
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d178      	bne.n	800425a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004168:	f3ef 8310 	mrs	r3, PRIMASK
 800416c:	617b      	str	r3, [r7, #20]
  return(result);
 800416e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
 8004172:	2301      	movs	r3, #1
 8004174:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	f383 8810 	msr	PRIMASK, r3
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4936      	ldr	r1, [pc, #216]	; (8004264 <UART_RxISR_16BIT+0x164>)
 800418a:	400a      	ands	r2, r1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800419a:	f3ef 8310 	mrs	r3, PRIMASK
 800419e:	623b      	str	r3, [r7, #32]
  return(result);
 80041a0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	633b      	str	r3, [r7, #48]	; 0x30
 80041a4:	2301      	movs	r3, #1
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	f383 8810 	msr	PRIMASK, r3
}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2101      	movs	r1, #1
 80041bc:	438a      	bics	r2, r1
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	f383 8810 	msr	PRIMASK, r3
}
 80041ca:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d12f      	bne.n	8004240 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80041ec:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f0:	2301      	movs	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f383 8810 	msr	PRIMASK, r3
}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2110      	movs	r1, #16
 8004208:	438a      	bics	r2, r1
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f383 8810 	msr	PRIMASK, r3
}
 8004216:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	2210      	movs	r2, #16
 8004220:	4013      	ands	r3, r2
 8004222:	2b10      	cmp	r3, #16
 8004224:	d103      	bne.n	800422e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2210      	movs	r2, #16
 800422c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2258      	movs	r2, #88	; 0x58
 8004232:	5a9a      	ldrh	r2, [r3, r2]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	0011      	movs	r1, r2
 8004238:	0018      	movs	r0, r3
 800423a:	f7ff fa05 	bl	8003648 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800423e:	e00c      	b.n	800425a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	0018      	movs	r0, r3
 8004244:	f7ff f9f0 	bl	8003628 <HAL_UART_RxCpltCallback>
}
 8004248:	e007      	b.n	800425a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2108      	movs	r1, #8
 8004256:	430a      	orrs	r2, r1
 8004258:	619a      	str	r2, [r3, #24]
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b010      	add	sp, #64	; 0x40
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	fffffedf 	.word	0xfffffedf

08004268 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b002      	add	sp, #8
 8004276:	bd80      	pop	{r7, pc}

08004278 <__libc_init_array>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	2600      	movs	r6, #0
 800427c:	4d0c      	ldr	r5, [pc, #48]	; (80042b0 <__libc_init_array+0x38>)
 800427e:	4c0d      	ldr	r4, [pc, #52]	; (80042b4 <__libc_init_array+0x3c>)
 8004280:	1b64      	subs	r4, r4, r5
 8004282:	10a4      	asrs	r4, r4, #2
 8004284:	42a6      	cmp	r6, r4
 8004286:	d109      	bne.n	800429c <__libc_init_array+0x24>
 8004288:	2600      	movs	r6, #0
 800428a:	f000 f829 	bl	80042e0 <_init>
 800428e:	4d0a      	ldr	r5, [pc, #40]	; (80042b8 <__libc_init_array+0x40>)
 8004290:	4c0a      	ldr	r4, [pc, #40]	; (80042bc <__libc_init_array+0x44>)
 8004292:	1b64      	subs	r4, r4, r5
 8004294:	10a4      	asrs	r4, r4, #2
 8004296:	42a6      	cmp	r6, r4
 8004298:	d105      	bne.n	80042a6 <__libc_init_array+0x2e>
 800429a:	bd70      	pop	{r4, r5, r6, pc}
 800429c:	00b3      	lsls	r3, r6, #2
 800429e:	58eb      	ldr	r3, [r5, r3]
 80042a0:	4798      	blx	r3
 80042a2:	3601      	adds	r6, #1
 80042a4:	e7ee      	b.n	8004284 <__libc_init_array+0xc>
 80042a6:	00b3      	lsls	r3, r6, #2
 80042a8:	58eb      	ldr	r3, [r5, r3]
 80042aa:	4798      	blx	r3
 80042ac:	3601      	adds	r6, #1
 80042ae:	e7f2      	b.n	8004296 <__libc_init_array+0x1e>
 80042b0:	08004350 	.word	0x08004350
 80042b4:	08004350 	.word	0x08004350
 80042b8:	08004350 	.word	0x08004350
 80042bc:	08004354 	.word	0x08004354

080042c0 <memset>:
 80042c0:	0003      	movs	r3, r0
 80042c2:	1882      	adds	r2, r0, r2
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d100      	bne.n	80042ca <memset+0xa>
 80042c8:	4770      	bx	lr
 80042ca:	7019      	strb	r1, [r3, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	e7f9      	b.n	80042c4 <memset+0x4>

080042d0 <strcpy>:
 80042d0:	0003      	movs	r3, r0
 80042d2:	780a      	ldrb	r2, [r1, #0]
 80042d4:	3101      	adds	r1, #1
 80042d6:	701a      	strb	r2, [r3, #0]
 80042d8:	3301      	adds	r3, #1
 80042da:	2a00      	cmp	r2, #0
 80042dc:	d1f9      	bne.n	80042d2 <strcpy+0x2>
 80042de:	4770      	bx	lr

080042e0 <_init>:
 80042e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e6:	bc08      	pop	{r3}
 80042e8:	469e      	mov	lr, r3
 80042ea:	4770      	bx	lr

080042ec <_fini>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr
