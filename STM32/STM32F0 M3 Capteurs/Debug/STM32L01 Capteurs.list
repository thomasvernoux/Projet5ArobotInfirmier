
STM32L01 Capteurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b80  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001c40  08001c40  00011c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c5c  08001c5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001c5c  08001c5c  00011c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c64  08001c64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c64  08001c64  00011c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c68  08001c68  00011c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08001c78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08001c78  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004864  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001145  00000000  00000000  00024898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  000259e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000410  00000000  00000000  00025e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f6f5  00000000  00000000  00026298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005bab  00000000  00000000  0003598d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005eadd  00000000  00000000  0003b538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009a015  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f84  00000000  00000000  0009a068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001c28 	.word	0x08001c28

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001c28 	.word	0x08001c28

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 f9b6 	bl	8000810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f806 	bl	80004b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f8e8 	bl	800067c <MX_GPIO_Init>
  MX_ADC_Init();
 80004ac:	f000 f856 	bl	800055c <MX_ADC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <main+0x14>
	...

080004b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b093      	sub	sp, #76	; 0x4c
 80004b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ba:	2414      	movs	r4, #20
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	0018      	movs	r0, r3
 80004c0:	2334      	movs	r3, #52	; 0x34
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f001 fba7 	bl	8001c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ca:	003b      	movs	r3, r7
 80004cc:	0018      	movs	r0, r3
 80004ce:	2314      	movs	r3, #20
 80004d0:	001a      	movs	r2, r3
 80004d2:	2100      	movs	r1, #0
 80004d4:	f001 fba0 	bl	8001c18 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d8:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <SystemClock_Config+0xa0>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a1e      	ldr	r2, [pc, #120]	; (8000558 <SystemClock_Config+0xa4>)
 80004de:	401a      	ands	r2, r3
 80004e0:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <SystemClock_Config+0xa0>)
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	0109      	lsls	r1, r1, #4
 80004e6:	430a      	orrs	r2, r1
 80004e8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004ea:	0021      	movs	r1, r4
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2210      	movs	r2, #16
 80004f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2201      	movs	r2, #1
 80004f6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	22a0      	movs	r2, #160	; 0xa0
 8000502:	0212      	lsls	r2, r2, #8
 8000504:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	187b      	adds	r3, r7, r1
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fdf4 	bl	80010fc <HAL_RCC_OscConfig>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000518:	f000 f8c6 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051c:	003b      	movs	r3, r7
 800051e:	220f      	movs	r2, #15
 8000520:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000522:	003b      	movs	r3, r7
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	003b      	movs	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052e:	003b      	movs	r3, r7
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000534:	003b      	movs	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800053a:	003b      	movs	r3, r7
 800053c:	2100      	movs	r1, #0
 800053e:	0018      	movs	r0, r3
 8000540:	f001 f958 	bl	80017f4 <HAL_RCC_ClockConfig>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000548:	f000 f8ae 	bl	80006a8 <Error_Handler>
  }
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b013      	add	sp, #76	; 0x4c
 8000552:	bd90      	pop	{r4, r7, pc}
 8000554:	40007000 	.word	0x40007000
 8000558:	ffffe7ff 	.word	0xffffe7ff

0800055c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000562:	003b      	movs	r3, r7
 8000564:	0018      	movs	r0, r3
 8000566:	2308      	movs	r3, #8
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f001 fb54 	bl	8001c18 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000570:	4b3d      	ldr	r3, [pc, #244]	; (8000668 <MX_ADC_Init+0x10c>)
 8000572:	4a3e      	ldr	r2, [pc, #248]	; (800066c <MX_ADC_Init+0x110>)
 8000574:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000576:	4b3c      	ldr	r3, [pc, #240]	; (8000668 <MX_ADC_Init+0x10c>)
 8000578:	2200      	movs	r2, #0
 800057a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800057c:	4b3a      	ldr	r3, [pc, #232]	; (8000668 <MX_ADC_Init+0x10c>)
 800057e:	22c0      	movs	r2, #192	; 0xc0
 8000580:	0612      	lsls	r2, r2, #24
 8000582:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000584:	4b38      	ldr	r3, [pc, #224]	; (8000668 <MX_ADC_Init+0x10c>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800058a:	4b37      	ldr	r3, [pc, #220]	; (8000668 <MX_ADC_Init+0x10c>)
 800058c:	2200      	movs	r2, #0
 800058e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000590:	4b35      	ldr	r3, [pc, #212]	; (8000668 <MX_ADC_Init+0x10c>)
 8000592:	2201      	movs	r2, #1
 8000594:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000596:	4b34      	ldr	r3, [pc, #208]	; (8000668 <MX_ADC_Init+0x10c>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800059c:	4b32      	ldr	r3, [pc, #200]	; (8000668 <MX_ADC_Init+0x10c>)
 800059e:	2220      	movs	r2, #32
 80005a0:	2100      	movs	r1, #0
 80005a2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005a4:	4b30      	ldr	r3, [pc, #192]	; (8000668 <MX_ADC_Init+0x10c>)
 80005a6:	2221      	movs	r2, #33	; 0x21
 80005a8:	2100      	movs	r1, #0
 80005aa:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ac:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <MX_ADC_Init+0x10c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <MX_ADC_Init+0x10c>)
 80005b4:	22c2      	movs	r2, #194	; 0xc2
 80005b6:	32ff      	adds	r2, #255	; 0xff
 80005b8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <MX_ADC_Init+0x10c>)
 80005bc:	222c      	movs	r2, #44	; 0x2c
 80005be:	2100      	movs	r1, #0
 80005c0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c2:	4b29      	ldr	r3, [pc, #164]	; (8000668 <MX_ADC_Init+0x10c>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_ADC_Init+0x10c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <MX_ADC_Init+0x10c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <MX_ADC_Init+0x10c>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80005da:	4b23      	ldr	r3, [pc, #140]	; (8000668 <MX_ADC_Init+0x10c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_ADC_Init+0x10c>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 f984 	bl	80008f0 <HAL_ADC_Init>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80005ec:	f000 f85c 	bl	80006a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005f0:	003b      	movs	r3, r7
 80005f2:	2201      	movs	r2, #1
 80005f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80005f6:	003b      	movs	r3, r7
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	0152      	lsls	r2, r2, #5
 80005fc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005fe:	003a      	movs	r2, r7
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_ADC_Init+0x10c>)
 8000602:	0011      	movs	r1, r2
 8000604:	0018      	movs	r0, r3
 8000606:	f000 fae7 	bl	8000bd8 <HAL_ADC_ConfigChannel>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800060e:	f000 f84b 	bl	80006a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000612:	003b      	movs	r3, r7
 8000614:	4a16      	ldr	r2, [pc, #88]	; (8000670 <MX_ADC_Init+0x114>)
 8000616:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000618:	003a      	movs	r2, r7
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_ADC_Init+0x10c>)
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fada 	bl	8000bd8 <HAL_ADC_ConfigChannel>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000628:	f000 f83e 	bl	80006a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800062c:	003b      	movs	r3, r7
 800062e:	4a11      	ldr	r2, [pc, #68]	; (8000674 <MX_ADC_Init+0x118>)
 8000630:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000632:	003a      	movs	r2, r7
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_ADC_Init+0x10c>)
 8000636:	0011      	movs	r1, r2
 8000638:	0018      	movs	r0, r3
 800063a:	f000 facd 	bl	8000bd8 <HAL_ADC_ConfigChannel>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000642:	f000 f831 	bl	80006a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000646:	003b      	movs	r3, r7
 8000648:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <MX_ADC_Init+0x11c>)
 800064a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800064c:	003a      	movs	r2, r7
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_ADC_Init+0x10c>)
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fac0 	bl	8000bd8 <HAL_ADC_ConfigChannel>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 800065c:	f000 f824 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000028 	.word	0x20000028
 800066c:	40012400 	.word	0x40012400
 8000670:	04000002 	.word	0x04000002
 8000674:	08000004 	.word	0x08000004
 8000678:	0c000008 	.word	0x0c000008

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_GPIO_Init+0x28>)
 8000684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_GPIO_Init+0x28>)
 8000688:	2101      	movs	r1, #1
 800068a:	430a      	orrs	r2, r1
 800068c:	62da      	str	r2, [r3, #44]	; 0x2c
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <MX_GPIO_Init+0x28>)
 8000690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000692:	2201      	movs	r2, #1
 8000694:	4013      	ands	r3, r2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40021000 	.word	0x40021000

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <HAL_MspInit+0x24>)
 80006ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_MspInit+0x24>)
 80006be:	2101      	movs	r1, #1
 80006c0:	430a      	orrs	r2, r1
 80006c2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <HAL_MspInit+0x24>)
 80006c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <HAL_MspInit+0x24>)
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	0549      	lsls	r1, r1, #21
 80006ce:	430a      	orrs	r2, r1
 80006d0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	240c      	movs	r4, #12
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	0018      	movs	r0, r3
 80006ea:	2314      	movs	r3, #20
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f001 fa92 	bl	8001c18 <memset>
  if(hadc->Instance==ADC1)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <HAL_ADC_MspInit+0x70>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d122      	bne.n	8000744 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <HAL_ADC_MspInit+0x74>)
 8000700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <HAL_ADC_MspInit+0x74>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	0089      	lsls	r1, r1, #2
 8000708:	430a      	orrs	r2, r1
 800070a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <HAL_ADC_MspInit+0x74>)
 800070e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_ADC_MspInit+0x74>)
 8000712:	2101      	movs	r1, #1
 8000714:	430a      	orrs	r2, r1
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_ADC_MspInit+0x74>)
 800071a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071c:	2201      	movs	r2, #1
 800071e:	4013      	ands	r3, r2
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	220f      	movs	r2, #15
 8000728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2203      	movs	r2, #3
 800072e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	193a      	adds	r2, r7, r4
 8000738:	23a0      	movs	r3, #160	; 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fb66 	bl	8000e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b009      	add	sp, #36	; 0x24
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	40012400 	.word	0x40012400
 8000750:	40021000 	.word	0x40021000

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 f89e 	bl	80008b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800078c:	4813      	ldr	r0, [pc, #76]	; (80007dc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800078e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000790:	4813      	ldr	r0, [pc, #76]	; (80007e0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000792:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000794:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <LoopForever+0xa>)
    CMP R1, R2
 8000798:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800079a:	d105      	bne.n	80007a8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800079c:	4812      	ldr	r0, [pc, #72]	; (80007e8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800079e:	4913      	ldr	r1, [pc, #76]	; (80007ec <LoopForever+0x12>)
    STR R1, [R0]
 80007a0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80007a2:	4813      	ldr	r0, [pc, #76]	; (80007f0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80007a4:	4913      	ldr	r1, [pc, #76]	; (80007f4 <LoopForever+0x1a>)
    STR R1, [R0]
 80007a6:	6001      	str	r1, [r0, #0]

080007a8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <LoopForever+0x1e>)
  ldr r1, =_edata
 80007aa:	4914      	ldr	r1, [pc, #80]	; (80007fc <LoopForever+0x22>)
  ldr r2, =_sidata
 80007ac:	4a14      	ldr	r2, [pc, #80]	; (8000800 <LoopForever+0x26>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a11      	ldr	r2, [pc, #68]	; (8000804 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80007c0:	4c11      	ldr	r4, [pc, #68]	; (8000808 <LoopForever+0x2e>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007ce:	f7ff ffd8 	bl	8000782 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d2:	f001 f9fd 	bl	8001bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007d6:	f7ff fe61 	bl	800049c <main>

080007da <LoopForever>:

LoopForever:
    b LoopForever
 80007da:	e7fe      	b.n	80007da <LoopForever>
   ldr   r0, =_estack
 80007dc:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80007e0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80007e4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80007e8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80007ec:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80007f0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80007f4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000800:	08001c6c 	.word	0x08001c6c
  ldr r2, =_sbss
 8000804:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000808:	20000088 	.word	0x20000088

0800080c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC1_IRQHandler>
	...

08000810 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_Init+0x3c>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_Init+0x3c>)
 8000822:	2140      	movs	r1, #64	; 0x40
 8000824:	430a      	orrs	r2, r1
 8000826:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000828:	2003      	movs	r0, #3
 800082a:	f000 f811 	bl	8000850 <HAL_InitTick>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d003      	beq.n	800083a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e001      	b.n	800083e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800083a:	f7ff ff3b 	bl	80006b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
}
 8000842:	0018      	movs	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	40022000 	.word	0x40022000

08000850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <HAL_InitTick+0x5c>)
 800085a:	681c      	ldr	r4, [r3, #0]
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_InitTick+0x60>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	0019      	movs	r1, r3
 8000862:	23fa      	movs	r3, #250	; 0xfa
 8000864:	0098      	lsls	r0, r3, #2
 8000866:	f7ff fc4f 	bl	8000108 <__udivsi3>
 800086a:	0003      	movs	r3, r0
 800086c:	0019      	movs	r1, r3
 800086e:	0020      	movs	r0, r4
 8000870:	f7ff fc4a 	bl	8000108 <__udivsi3>
 8000874:	0003      	movs	r3, r0
 8000876:	0018      	movs	r0, r3
 8000878:	f000 fabd 	bl	8000df6 <HAL_SYSTICK_Config>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	e00f      	b.n	80008a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b03      	cmp	r3, #3
 8000888:	d80b      	bhi.n	80008a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	2301      	movs	r3, #1
 800088e:	425b      	negs	r3, r3
 8000890:	2200      	movs	r2, #0
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fa9a 	bl	8000dcc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_InitTick+0x64>)
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800089e:	2300      	movs	r3, #0
 80008a0:	e000      	b.n	80008a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	0018      	movs	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b003      	add	sp, #12
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000004 	.word	0x20000004

080008b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_IncTick+0x1c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	001a      	movs	r2, r3
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_IncTick+0x20>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	18d2      	adds	r2, r2, r3
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <HAL_IncTick+0x20>)
 80008ca:	601a      	str	r2, [r3, #0]
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000084 	.word	0x20000084

080008dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <HAL_GetTick+0x10>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	20000084 	.word	0x20000084

080008f0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d101      	bne.n	8000902 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e159      	b.n	8000bb6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10a      	bne.n	8000920 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2250      	movs	r2, #80	; 0x50
 8000914:	2100      	movs	r1, #0
 8000916:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	0018      	movs	r0, r3
 800091c:	f7ff fede 	bl	80006dc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000924:	2210      	movs	r2, #16
 8000926:	4013      	ands	r3, r2
 8000928:	2b10      	cmp	r3, #16
 800092a:	d005      	beq.n	8000938 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	2204      	movs	r2, #4
 8000934:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000936:	d00b      	beq.n	8000950 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800093c:	2210      	movs	r2, #16
 800093e:	431a      	orrs	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2250      	movs	r2, #80	; 0x50
 8000948:	2100      	movs	r1, #0
 800094a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e132      	b.n	8000bb6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000954:	4a9a      	ldr	r2, [pc, #616]	; (8000bc0 <HAL_ADC_Init+0x2d0>)
 8000956:	4013      	ands	r3, r2
 8000958:	2202      	movs	r2, #2
 800095a:	431a      	orrs	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	2203      	movs	r2, #3
 8000968:	4013      	ands	r3, r2
 800096a:	2b01      	cmp	r3, #1
 800096c:	d108      	bne.n	8000980 <HAL_ADC_Init+0x90>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2201      	movs	r2, #1
 8000976:	4013      	ands	r3, r2
 8000978:	2b01      	cmp	r3, #1
 800097a:	d101      	bne.n	8000980 <HAL_ADC_Init+0x90>
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <HAL_ADC_Init+0x92>
 8000980:	2300      	movs	r3, #0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d149      	bne.n	8000a1a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685a      	ldr	r2, [r3, #4]
 800098a:	23c0      	movs	r3, #192	; 0xc0
 800098c:	061b      	lsls	r3, r3, #24
 800098e:	429a      	cmp	r2, r3
 8000990:	d00b      	beq.n	80009aa <HAL_ADC_Init+0xba>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685a      	ldr	r2, [r3, #4]
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	429a      	cmp	r2, r3
 800099c:	d005      	beq.n	80009aa <HAL_ADC_Init+0xba>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	061b      	lsls	r3, r3, #24
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d111      	bne.n	80009ce <HAL_ADC_Init+0xde>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	691a      	ldr	r2, [r3, #16]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	0092      	lsls	r2, r2, #2
 80009b6:	0892      	lsrs	r2, r2, #2
 80009b8:	611a      	str	r2, [r3, #16]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6919      	ldr	r1, [r3, #16]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	430a      	orrs	r2, r1
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	e014      	b.n	80009f8 <HAL_ADC_Init+0x108>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	691a      	ldr	r2, [r3, #16]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	0092      	lsls	r2, r2, #2
 80009da:	0892      	lsrs	r2, r2, #2
 80009dc:	611a      	str	r2, [r3, #16]
 80009de:	4b79      	ldr	r3, [pc, #484]	; (8000bc4 <HAL_ADC_Init+0x2d4>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b78      	ldr	r3, [pc, #480]	; (8000bc4 <HAL_ADC_Init+0x2d4>)
 80009e4:	4978      	ldr	r1, [pc, #480]	; (8000bc8 <HAL_ADC_Init+0x2d8>)
 80009e6:	400a      	ands	r2, r1
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	4b76      	ldr	r3, [pc, #472]	; (8000bc4 <HAL_ADC_Init+0x2d4>)
 80009ec:	6819      	ldr	r1, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	4b74      	ldr	r3, [pc, #464]	; (8000bc4 <HAL_ADC_Init+0x2d4>)
 80009f4:	430a      	orrs	r2, r1
 80009f6:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	68da      	ldr	r2, [r3, #12]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2118      	movs	r1, #24
 8000a04:	438a      	bics	r2, r1
 8000a06:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68d9      	ldr	r1, [r3, #12]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	430a      	orrs	r2, r1
 8000a18:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000a1a:	4b6a      	ldr	r3, [pc, #424]	; (8000bc4 <HAL_ADC_Init+0x2d4>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4b69      	ldr	r3, [pc, #420]	; (8000bc4 <HAL_ADC_Init+0x2d4>)
 8000a20:	496a      	ldr	r1, [pc, #424]	; (8000bcc <HAL_ADC_Init+0x2dc>)
 8000a22:	400a      	ands	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000a26:	4b67      	ldr	r3, [pc, #412]	; (8000bc4 <HAL_ADC_Init+0x2d4>)
 8000a28:	6819      	ldr	r1, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2e:	065a      	lsls	r2, r3, #25
 8000a30:	4b64      	ldr	r3, [pc, #400]	; (8000bc4 <HAL_ADC_Init+0x2d4>)
 8000a32:	430a      	orrs	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	055b      	lsls	r3, r3, #21
 8000a40:	4013      	ands	r3, r2
 8000a42:	d108      	bne.n	8000a56 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2180      	movs	r1, #128	; 0x80
 8000a50:	0549      	lsls	r1, r1, #21
 8000a52:	430a      	orrs	r2, r1
 8000a54:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	495b      	ldr	r1, [pc, #364]	; (8000bd0 <HAL_ADC_Init+0x2e0>)
 8000a62:	400a      	ands	r2, r1
 8000a64:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	68d9      	ldr	r1, [r3, #12]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	691b      	ldr	r3, [r3, #16]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d101      	bne.n	8000a7c <HAL_ADC_Init+0x18c>
 8000a78:	2304      	movs	r3, #4
 8000a7a:	e000      	b.n	8000a7e <HAL_ADC_Init+0x18e>
 8000a7c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000a7e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2020      	movs	r0, #32
 8000a84:	5c1b      	ldrb	r3, [r3, r0]
 8000a86:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000a88:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	202c      	movs	r0, #44	; 0x2c
 8000a8e:	5c1b      	ldrb	r3, [r3, r0]
 8000a90:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a92:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000a98:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000aa0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000aa8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ab6:	23c2      	movs	r3, #194	; 0xc2
 8000ab8:	33ff      	adds	r3, #255	; 0xff
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d00b      	beq.n	8000ad6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68d9      	ldr	r1, [r3, #12]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000acc:	431a      	orrs	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2221      	movs	r2, #33	; 0x21
 8000ada:	5c9b      	ldrb	r3, [r3, r2]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d11a      	bne.n	8000b16 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	5c9b      	ldrb	r3, [r3, r2]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d109      	bne.n	8000afe <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	0249      	lsls	r1, r1, #9
 8000af8:	430a      	orrs	r2, r1
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	e00b      	b.n	8000b16 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b02:	2220      	movs	r2, #32
 8000b04:	431a      	orrs	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	2201      	movs	r2, #1
 8000b10:	431a      	orrs	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d11f      	bne.n	8000b5e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	691a      	ldr	r2, [r3, #16]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	492a      	ldr	r1, [pc, #168]	; (8000bd4 <HAL_ADC_Init+0x2e4>)
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	6919      	ldr	r1, [r3, #16]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000b3c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000b42:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	691a      	ldr	r2, [r3, #16]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2101      	movs	r1, #1
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	e00e      	b.n	8000b7c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	2201      	movs	r2, #1
 8000b66:	4013      	ands	r3, r2
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d107      	bne.n	8000b7c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	691a      	ldr	r2, [r3, #16]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2101      	movs	r1, #1
 8000b78:	438a      	bics	r2, r1
 8000b7a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	695a      	ldr	r2, [r3, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2107      	movs	r1, #7
 8000b88:	438a      	bics	r2, r1
 8000b8a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	6959      	ldr	r1, [r3, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ba8:	2203      	movs	r2, #3
 8000baa:	4393      	bics	r3, r2
 8000bac:	2201      	movs	r2, #1
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	fffffefd 	.word	0xfffffefd
 8000bc4:	40012708 	.word	0x40012708
 8000bc8:	ffc3ffff 	.word	0xffc3ffff
 8000bcc:	fdffffff 	.word	0xfdffffff
 8000bd0:	fffe0219 	.word	0xfffe0219
 8000bd4:	fffffc03 	.word	0xfffffc03

08000bd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2250      	movs	r2, #80	; 0x50
 8000be6:	5c9b      	ldrb	r3, [r3, r2]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d101      	bne.n	8000bf0 <HAL_ADC_ConfigChannel+0x18>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e050      	b.n	8000c92 <HAL_ADC_ConfigChannel+0xba>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2250      	movs	r2, #80	; 0x50
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	2204      	movs	r2, #4
 8000c00:	4013      	ands	r3, r2
 8000c02:	d00b      	beq.n	8000c1c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c08:	2220      	movs	r2, #32
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2250      	movs	r2, #80	; 0x50
 8000c14:	2100      	movs	r1, #0
 8000c16:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e03a      	b.n	8000c92 <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	4a1e      	ldr	r2, [pc, #120]	; (8000c9c <HAL_ADC_ConfigChannel+0xc4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d018      	beq.n	8000c58 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	035b      	lsls	r3, r3, #13
 8000c32:	0b5a      	lsrs	r2, r3, #13
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	029b      	lsls	r3, r3, #10
 8000c44:	4013      	ands	r3, r2
 8000c46:	d01f      	beq.n	8000c88 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_ADC_ConfigChannel+0xc8>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_ADC_ConfigChannel+0xc8>)
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	03c9      	lsls	r1, r1, #15
 8000c52:	430a      	orrs	r2, r1
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e017      	b.n	8000c88 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	035b      	lsls	r3, r3, #13
 8000c64:	0b5b      	lsrs	r3, r3, #13
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	400a      	ands	r2, r1
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	029b      	lsls	r3, r3, #10
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d005      	beq.n	8000c88 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_ADC_ConfigChannel+0xc8>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <HAL_ADC_ConfigChannel+0xc8>)
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <HAL_ADC_ConfigChannel+0xcc>)
 8000c84:	400a      	ands	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2250      	movs	r2, #80	; 0x50
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	0018      	movs	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	00001001 	.word	0x00001001
 8000ca0:	40012708 	.word	0x40012708
 8000ca4:	ffbfffff 	.word	0xffbfffff

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	0002      	movs	r2, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b7f      	cmp	r3, #127	; 0x7f
 8000cbc:	d828      	bhi.n	8000d10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cbe:	4a2f      	ldr	r2, [pc, #188]	; (8000d7c <__NVIC_SetPriority+0xd4>)
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	33c0      	adds	r3, #192	; 0xc0
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	589b      	ldr	r3, [r3, r2]
 8000cce:	1dfa      	adds	r2, r7, #7
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	00d2      	lsls	r2, r2, #3
 8000cda:	21ff      	movs	r1, #255	; 0xff
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	000a      	movs	r2, r1
 8000ce0:	43d2      	mvns	r2, r2
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	22ff      	movs	r2, #255	; 0xff
 8000cec:	401a      	ands	r2, r3
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	4003      	ands	r3, r0
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cfc:	481f      	ldr	r0, [pc, #124]	; (8000d7c <__NVIC_SetPriority+0xd4>)
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	430a      	orrs	r2, r1
 8000d08:	33c0      	adds	r3, #192	; 0xc0
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d0e:	e031      	b.n	8000d74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <__NVIC_SetPriority+0xd8>)
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	0019      	movs	r1, r3
 8000d18:	230f      	movs	r3, #15
 8000d1a:	400b      	ands	r3, r1
 8000d1c:	3b08      	subs	r3, #8
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	3306      	adds	r3, #6
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	3304      	adds	r3, #4
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	1dfa      	adds	r2, r7, #7
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	0011      	movs	r1, r2
 8000d30:	2203      	movs	r2, #3
 8000d32:	400a      	ands	r2, r1
 8000d34:	00d2      	lsls	r2, r2, #3
 8000d36:	21ff      	movs	r1, #255	; 0xff
 8000d38:	4091      	lsls	r1, r2
 8000d3a:	000a      	movs	r2, r1
 8000d3c:	43d2      	mvns	r2, r2
 8000d3e:	401a      	ands	r2, r3
 8000d40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	019b      	lsls	r3, r3, #6
 8000d46:	22ff      	movs	r2, #255	; 0xff
 8000d48:	401a      	ands	r2, r3
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	2303      	movs	r3, #3
 8000d52:	4003      	ands	r3, r0
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <__NVIC_SetPriority+0xd8>)
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	001c      	movs	r4, r3
 8000d60:	230f      	movs	r3, #15
 8000d62:	4023      	ands	r3, r4
 8000d64:	3b08      	subs	r3, #8
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	3306      	adds	r3, #6
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	18c3      	adds	r3, r0, r3
 8000d70:	3304      	adds	r3, #4
 8000d72:	601a      	str	r2, [r3, #0]
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b003      	add	sp, #12
 8000d7a:	bd90      	pop	{r4, r7, pc}
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	1e5a      	subs	r2, r3, #1
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	045b      	lsls	r3, r3, #17
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d301      	bcc.n	8000d9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e010      	b.n	8000dbe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <SysTick_Config+0x44>)
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	3a01      	subs	r2, #1
 8000da2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da4:	2301      	movs	r3, #1
 8000da6:	425b      	negs	r3, r3
 8000da8:	2103      	movs	r1, #3
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff ff7c 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x44>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x44>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	1c02      	adds	r2, r0, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	0011      	movs	r1, r2
 8000de8:	0018      	movs	r0, r3
 8000dea:	f7ff ff5d 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b004      	add	sp, #16
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff ffbf 	bl	8000d84 <SysTick_Config>
 8000e06:	0003      	movs	r3, r0
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e26:	e14f      	b.n	80010c8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4091      	lsls	r1, r2
 8000e32:	000a      	movs	r2, r1
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d100      	bne.n	8000e40 <HAL_GPIO_Init+0x30>
 8000e3e:	e140      	b.n	80010c2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2203      	movs	r2, #3
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d005      	beq.n	8000e58 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	43da      	mvns	r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d017      	beq.n	8000ef6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2203      	movs	r2, #3
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d123      	bne.n	8000f4a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	2207      	movs	r2, #7
 8000f14:	4013      	ands	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2107      	movs	r1, #7
 8000f2e:	400b      	ands	r3, r1
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	409a      	lsls	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	6939      	ldr	r1, [r7, #16]
 8000f48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	401a      	ands	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	23c0      	movs	r3, #192	; 0xc0
 8000f84:	029b      	lsls	r3, r3, #10
 8000f86:	4013      	ands	r3, r2
 8000f88:	d100      	bne.n	8000f8c <HAL_GPIO_Init+0x17c>
 8000f8a:	e09a      	b.n	80010c2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	4b54      	ldr	r3, [pc, #336]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8000f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f90:	4b53      	ldr	r3, [pc, #332]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	430a      	orrs	r2, r1
 8000f96:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f98:	4a52      	ldr	r2, [pc, #328]	; (80010e4 <HAL_GPIO_Init+0x2d4>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	589b      	ldr	r3, [r3, r2]
 8000fa4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	4013      	ands	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	409a      	lsls	r2, r3
 8000fb2:	0013      	movs	r3, r2
 8000fb4:	43da      	mvns	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	23a0      	movs	r3, #160	; 0xa0
 8000fc0:	05db      	lsls	r3, r3, #23
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d019      	beq.n	8000ffa <HAL_GPIO_Init+0x1ea>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a47      	ldr	r2, [pc, #284]	; (80010e8 <HAL_GPIO_Init+0x2d8>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d013      	beq.n	8000ff6 <HAL_GPIO_Init+0x1e6>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a46      	ldr	r2, [pc, #280]	; (80010ec <HAL_GPIO_Init+0x2dc>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00d      	beq.n	8000ff2 <HAL_GPIO_Init+0x1e2>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a45      	ldr	r2, [pc, #276]	; (80010f0 <HAL_GPIO_Init+0x2e0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x1de>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a44      	ldr	r2, [pc, #272]	; (80010f4 <HAL_GPIO_Init+0x2e4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_GPIO_Init+0x1da>
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	e008      	b.n	8000ffc <HAL_GPIO_Init+0x1ec>
 8000fea:	2306      	movs	r3, #6
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x1ec>
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e004      	b.n	8000ffc <HAL_GPIO_Init+0x1ec>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e002      	b.n	8000ffc <HAL_GPIO_Init+0x1ec>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_Init+0x1ec>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	2103      	movs	r1, #3
 8001000:	400a      	ands	r2, r1
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	4093      	lsls	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800100c:	4935      	ldr	r1, [pc, #212]	; (80010e4 <HAL_GPIO_Init+0x2d4>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800101a:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <HAL_GPIO_Init+0x2e8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43da      	mvns	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	025b      	lsls	r3, r3, #9
 8001032:	4013      	ands	r3, r2
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <HAL_GPIO_Init+0x2e8>)
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001044:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <HAL_GPIO_Init+0x2e8>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43da      	mvns	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	029b      	lsls	r3, r3, #10
 800105c:	4013      	ands	r3, r2
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_GPIO_Init+0x2e8>)
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <HAL_GPIO_Init+0x2e8>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43da      	mvns	r2, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	035b      	lsls	r3, r3, #13
 8001086:	4013      	ands	r3, r2
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_GPIO_Init+0x2e8>)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_GPIO_Init+0x2e8>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43da      	mvns	r2, r3
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	039b      	lsls	r3, r3, #14
 80010b0:	4013      	ands	r3, r2
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_GPIO_Init+0x2e8>)
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	1e13      	subs	r3, r2, #0
 80010d2:	d000      	beq.n	80010d6 <HAL_GPIO_Init+0x2c6>
 80010d4:	e6a8      	b.n	8000e28 <HAL_GPIO_Init+0x18>
  }
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b006      	add	sp, #24
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	50000400 	.word	0x50000400
 80010ec:	50000800 	.word	0x50000800
 80010f0:	50000c00 	.word	0x50000c00
 80010f4:	50001c00 	.word	0x50001c00
 80010f8:	40010400 	.word	0x40010400

080010fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	f000 fb6c 	bl	80017e8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001110:	4bc8      	ldr	r3, [pc, #800]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	220c      	movs	r2, #12
 8001116:	4013      	ands	r3, r2
 8001118:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800111a:	4bc6      	ldr	r3, [pc, #792]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	025b      	lsls	r3, r3, #9
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2201      	movs	r2, #1
 800112c:	4013      	ands	r3, r2
 800112e:	d100      	bne.n	8001132 <HAL_RCC_OscConfig+0x36>
 8001130:	e07d      	b.n	800122e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	2b08      	cmp	r3, #8
 8001136:	d007      	beq.n	8001148 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	2b0c      	cmp	r3, #12
 800113c:	d112      	bne.n	8001164 <HAL_RCC_OscConfig+0x68>
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	025b      	lsls	r3, r3, #9
 8001144:	429a      	cmp	r2, r3
 8001146:	d10d      	bne.n	8001164 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	4bba      	ldr	r3, [pc, #744]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	029b      	lsls	r3, r3, #10
 8001150:	4013      	ands	r3, r2
 8001152:	d100      	bne.n	8001156 <HAL_RCC_OscConfig+0x5a>
 8001154:	e06a      	b.n	800122c <HAL_RCC_OscConfig+0x130>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d166      	bne.n	800122c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	f000 fb42 	bl	80017e8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	025b      	lsls	r3, r3, #9
 800116c:	429a      	cmp	r2, r3
 800116e:	d107      	bne.n	8001180 <HAL_RCC_OscConfig+0x84>
 8001170:	4bb0      	ldr	r3, [pc, #704]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4baf      	ldr	r3, [pc, #700]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	0249      	lsls	r1, r1, #9
 800117a:	430a      	orrs	r2, r1
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e027      	b.n	80011d0 <HAL_RCC_OscConfig+0xd4>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	23a0      	movs	r3, #160	; 0xa0
 8001186:	02db      	lsls	r3, r3, #11
 8001188:	429a      	cmp	r2, r3
 800118a:	d10e      	bne.n	80011aa <HAL_RCC_OscConfig+0xae>
 800118c:	4ba9      	ldr	r3, [pc, #676]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4ba8      	ldr	r3, [pc, #672]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	02c9      	lsls	r1, r1, #11
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	4ba6      	ldr	r3, [pc, #664]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4ba5      	ldr	r3, [pc, #660]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	0249      	lsls	r1, r1, #9
 80011a4:	430a      	orrs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e012      	b.n	80011d0 <HAL_RCC_OscConfig+0xd4>
 80011aa:	4ba2      	ldr	r3, [pc, #648]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4ba1      	ldr	r3, [pc, #644]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80011b0:	49a1      	ldr	r1, [pc, #644]	; (8001438 <HAL_RCC_OscConfig+0x33c>)
 80011b2:	400a      	ands	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	4b9f      	ldr	r3, [pc, #636]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	025b      	lsls	r3, r3, #9
 80011be:	4013      	ands	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4b9b      	ldr	r3, [pc, #620]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b9a      	ldr	r3, [pc, #616]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80011ca:	499c      	ldr	r1, [pc, #624]	; (800143c <HAL_RCC_OscConfig+0x340>)
 80011cc:	400a      	ands	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d014      	beq.n	8001202 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fb80 	bl	80008dc <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e2:	f7ff fb7b 	bl	80008dc <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b64      	cmp	r3, #100	; 0x64
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e2f9      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011f4:	4b8f      	ldr	r3, [pc, #572]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	029b      	lsls	r3, r3, #10
 80011fc:	4013      	ands	r3, r2
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0xe6>
 8001200:	e015      	b.n	800122e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001202:	f7ff fb6b 	bl	80008dc <HAL_GetTick>
 8001206:	0003      	movs	r3, r0
 8001208:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fb66 	bl	80008dc <HAL_GetTick>
 8001210:	0002      	movs	r2, r0
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e2e4      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800121e:	4b85      	ldr	r3, [pc, #532]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	029b      	lsls	r3, r3, #10
 8001226:	4013      	ands	r3, r2
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x110>
 800122a:	e000      	b.n	800122e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2202      	movs	r2, #2
 8001234:	4013      	ands	r3, r2
 8001236:	d100      	bne.n	800123a <HAL_RCC_OscConfig+0x13e>
 8001238:	e099      	b.n	800136e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	2220      	movs	r2, #32
 8001244:	4013      	ands	r3, r2
 8001246:	d009      	beq.n	800125c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001248:	4b7a      	ldr	r3, [pc, #488]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b79      	ldr	r3, [pc, #484]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 800124e:	2120      	movs	r1, #32
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	2220      	movs	r2, #32
 8001258:	4393      	bics	r3, r2
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b04      	cmp	r3, #4
 8001260:	d005      	beq.n	800126e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	2b0c      	cmp	r3, #12
 8001266:	d13e      	bne.n	80012e6 <HAL_RCC_OscConfig+0x1ea>
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d13b      	bne.n	80012e6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800126e:	4b71      	ldr	r3, [pc, #452]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2204      	movs	r2, #4
 8001274:	4013      	ands	r3, r2
 8001276:	d004      	beq.n	8001282 <HAL_RCC_OscConfig+0x186>
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e2b2      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001282:	4b6c      	ldr	r3, [pc, #432]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4a6e      	ldr	r2, [pc, #440]	; (8001440 <HAL_RCC_OscConfig+0x344>)
 8001288:	4013      	ands	r3, r2
 800128a:	0019      	movs	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	021a      	lsls	r2, r3, #8
 8001292:	4b68      	ldr	r3, [pc, #416]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001294:	430a      	orrs	r2, r1
 8001296:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001298:	4b66      	ldr	r3, [pc, #408]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2209      	movs	r2, #9
 800129e:	4393      	bics	r3, r2
 80012a0:	0019      	movs	r1, r3
 80012a2:	4b64      	ldr	r3, [pc, #400]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80012a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012aa:	f000 fbeb 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 80012ae:	0001      	movs	r1, r0
 80012b0:	4b60      	ldr	r3, [pc, #384]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	220f      	movs	r2, #15
 80012b8:	4013      	ands	r3, r2
 80012ba:	4a62      	ldr	r2, [pc, #392]	; (8001444 <HAL_RCC_OscConfig+0x348>)
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	000a      	movs	r2, r1
 80012c0:	40da      	lsrs	r2, r3
 80012c2:	4b61      	ldr	r3, [pc, #388]	; (8001448 <HAL_RCC_OscConfig+0x34c>)
 80012c4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80012c6:	4b61      	ldr	r3, [pc, #388]	; (800144c <HAL_RCC_OscConfig+0x350>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2513      	movs	r5, #19
 80012cc:	197c      	adds	r4, r7, r5
 80012ce:	0018      	movs	r0, r3
 80012d0:	f7ff fabe 	bl	8000850 <HAL_InitTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80012d8:	197b      	adds	r3, r7, r5
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d046      	beq.n	800136e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80012e0:	197b      	adds	r3, r7, r5
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	e280      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d027      	beq.n	800133c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012ec:	4b51      	ldr	r3, [pc, #324]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2209      	movs	r2, #9
 80012f2:	4393      	bics	r3, r2
 80012f4:	0019      	movs	r1, r3
 80012f6:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80012f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff faed 	bl	80008dc <HAL_GetTick>
 8001302:	0003      	movs	r3, r0
 8001304:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff fae8 	bl	80008dc <HAL_GetTick>
 800130c:	0002      	movs	r2, r0
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e266      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800131a:	4b46      	ldr	r3, [pc, #280]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2204      	movs	r2, #4
 8001320:	4013      	ands	r3, r2
 8001322:	d0f1      	beq.n	8001308 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b43      	ldr	r3, [pc, #268]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	4a45      	ldr	r2, [pc, #276]	; (8001440 <HAL_RCC_OscConfig+0x344>)
 800132a:	4013      	ands	r3, r2
 800132c:	0019      	movs	r1, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	021a      	lsls	r2, r3, #8
 8001334:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001336:	430a      	orrs	r2, r1
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	e018      	b.n	800136e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133c:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b3c      	ldr	r3, [pc, #240]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001342:	2101      	movs	r1, #1
 8001344:	438a      	bics	r2, r1
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fac8 	bl	80008dc <HAL_GetTick>
 800134c:	0003      	movs	r3, r0
 800134e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fac3 	bl	80008dc <HAL_GetTick>
 8001356:	0002      	movs	r2, r0
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e241      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001364:	4b33      	ldr	r3, [pc, #204]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2204      	movs	r2, #4
 800136a:	4013      	ands	r3, r2
 800136c:	d1f1      	bne.n	8001352 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2210      	movs	r2, #16
 8001374:	4013      	ands	r3, r2
 8001376:	d100      	bne.n	800137a <HAL_RCC_OscConfig+0x27e>
 8001378:	e0a1      	b.n	80014be <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d140      	bne.n	8001402 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001380:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d005      	beq.n	8001398 <HAL_RCC_OscConfig+0x29c>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e227      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001398:	4b26      	ldr	r3, [pc, #152]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <HAL_RCC_OscConfig+0x354>)
 800139e:	4013      	ands	r3, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1a      	ldr	r2, [r3, #32]
 80013a6:	4b23      	ldr	r3, [pc, #140]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80013a8:	430a      	orrs	r2, r1
 80013aa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	0a19      	lsrs	r1, r3, #8
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	061a      	lsls	r2, r3, #24
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80013bc:	430a      	orrs	r2, r1
 80013be:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	0b5b      	lsrs	r3, r3, #13
 80013c6:	3301      	adds	r3, #1
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	0212      	lsls	r2, r2, #8
 80013cc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	210f      	movs	r1, #15
 80013d6:	400b      	ands	r3, r1
 80013d8:	491a      	ldr	r1, [pc, #104]	; (8001444 <HAL_RCC_OscConfig+0x348>)
 80013da:	5ccb      	ldrb	r3, [r1, r3]
 80013dc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <HAL_RCC_OscConfig+0x34c>)
 80013e0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <HAL_RCC_OscConfig+0x350>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2513      	movs	r5, #19
 80013e8:	197c      	adds	r4, r7, r5
 80013ea:	0018      	movs	r0, r3
 80013ec:	f7ff fa30 	bl	8000850 <HAL_InitTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80013f4:	197b      	adds	r3, r7, r5
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d060      	beq.n	80014be <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80013fc:	197b      	adds	r3, r7, r5
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	e1f2      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d03f      	beq.n	800148a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	0049      	lsls	r1, r1, #1
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fa60 	bl	80008dc <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001420:	e018      	b.n	8001454 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001422:	f7ff fa5b 	bl	80008dc <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d911      	bls.n	8001454 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1d9      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
 8001434:	40021000 	.word	0x40021000
 8001438:	fffeffff 	.word	0xfffeffff
 800143c:	fffbffff 	.word	0xfffbffff
 8001440:	ffffe0ff 	.word	0xffffe0ff
 8001444:	08001c40 	.word	0x08001c40
 8001448:	20000000 	.word	0x20000000
 800144c:	20000004 	.word	0x20000004
 8001450:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001454:	4bc9      	ldr	r3, [pc, #804]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4013      	ands	r3, r2
 800145e:	d0e0      	beq.n	8001422 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001460:	4bc6      	ldr	r3, [pc, #792]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4ac6      	ldr	r2, [pc, #792]	; (8001780 <HAL_RCC_OscConfig+0x684>)
 8001466:	4013      	ands	r3, r2
 8001468:	0019      	movs	r1, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1a      	ldr	r2, [r3, #32]
 800146e:	4bc3      	ldr	r3, [pc, #780]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001470:	430a      	orrs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001474:	4bc1      	ldr	r3, [pc, #772]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	0a19      	lsrs	r1, r3, #8
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	061a      	lsls	r2, r3, #24
 8001482:	4bbe      	ldr	r3, [pc, #760]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001484:	430a      	orrs	r2, r1
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	e019      	b.n	80014be <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800148a:	4bbc      	ldr	r3, [pc, #752]	; (800177c <HAL_RCC_OscConfig+0x680>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4bbb      	ldr	r3, [pc, #748]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001490:	49bc      	ldr	r1, [pc, #752]	; (8001784 <HAL_RCC_OscConfig+0x688>)
 8001492:	400a      	ands	r2, r1
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fa21 	bl	80008dc <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a0:	f7ff fa1c 	bl	80008dc <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e19a      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014b2:	4bb2      	ldr	r3, [pc, #712]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4013      	ands	r3, r2
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2208      	movs	r2, #8
 80014c4:	4013      	ands	r3, r2
 80014c6:	d036      	beq.n	8001536 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d019      	beq.n	8001504 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d0:	4baa      	ldr	r3, [pc, #680]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80014d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014d4:	4ba9      	ldr	r3, [pc, #676]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	430a      	orrs	r2, r1
 80014da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014dc:	f7ff f9fe 	bl	80008dc <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff f9f9 	bl	80008dc <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e177      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014f8:	4ba0      	ldr	r3, [pc, #640]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80014fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014fc:	2202      	movs	r2, #2
 80014fe:	4013      	ands	r3, r2
 8001500:	d0f1      	beq.n	80014e6 <HAL_RCC_OscConfig+0x3ea>
 8001502:	e018      	b.n	8001536 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001504:	4b9d      	ldr	r3, [pc, #628]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001508:	4b9c      	ldr	r3, [pc, #624]	; (800177c <HAL_RCC_OscConfig+0x680>)
 800150a:	2101      	movs	r1, #1
 800150c:	438a      	bics	r2, r1
 800150e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff f9e4 	bl	80008dc <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151a:	f7ff f9df 	bl	80008dc <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e15d      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800152c:	4b93      	ldr	r3, [pc, #588]	; (800177c <HAL_RCC_OscConfig+0x680>)
 800152e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001530:	2202      	movs	r2, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d1f1      	bne.n	800151a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2204      	movs	r2, #4
 800153c:	4013      	ands	r3, r2
 800153e:	d100      	bne.n	8001542 <HAL_RCC_OscConfig+0x446>
 8001540:	e0ae      	b.n	80016a0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001542:	2023      	movs	r0, #35	; 0x23
 8001544:	183b      	adds	r3, r7, r0
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154a:	4b8c      	ldr	r3, [pc, #560]	; (800177c <HAL_RCC_OscConfig+0x680>)
 800154c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	055b      	lsls	r3, r3, #21
 8001552:	4013      	ands	r3, r2
 8001554:	d109      	bne.n	800156a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b89      	ldr	r3, [pc, #548]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800155a:	4b88      	ldr	r3, [pc, #544]	; (800177c <HAL_RCC_OscConfig+0x680>)
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	0549      	lsls	r1, r1, #21
 8001560:	430a      	orrs	r2, r1
 8001562:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001564:	183b      	adds	r3, r7, r0
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b87      	ldr	r3, [pc, #540]	; (8001788 <HAL_RCC_OscConfig+0x68c>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4013      	ands	r3, r2
 8001574:	d11a      	bne.n	80015ac <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001576:	4b84      	ldr	r3, [pc, #528]	; (8001788 <HAL_RCC_OscConfig+0x68c>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b83      	ldr	r3, [pc, #524]	; (8001788 <HAL_RCC_OscConfig+0x68c>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0049      	lsls	r1, r1, #1
 8001580:	430a      	orrs	r2, r1
 8001582:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001584:	f7ff f9aa 	bl	80008dc <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7ff f9a5 	bl	80008dc <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b64      	cmp	r3, #100	; 0x64
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e123      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	4b79      	ldr	r3, [pc, #484]	; (8001788 <HAL_RCC_OscConfig+0x68c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4013      	ands	r3, r2
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d107      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4cc>
 80015b8:	4b70      	ldr	r3, [pc, #448]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80015ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015bc:	4b6f      	ldr	r3, [pc, #444]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80015be:	2180      	movs	r1, #128	; 0x80
 80015c0:	0049      	lsls	r1, r1, #1
 80015c2:	430a      	orrs	r2, r1
 80015c4:	651a      	str	r2, [r3, #80]	; 0x50
 80015c6:	e031      	b.n	800162c <HAL_RCC_OscConfig+0x530>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10c      	bne.n	80015ea <HAL_RCC_OscConfig+0x4ee>
 80015d0:	4b6a      	ldr	r3, [pc, #424]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80015d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015d4:	4b69      	ldr	r3, [pc, #420]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80015d6:	496b      	ldr	r1, [pc, #428]	; (8001784 <HAL_RCC_OscConfig+0x688>)
 80015d8:	400a      	ands	r2, r1
 80015da:	651a      	str	r2, [r3, #80]	; 0x50
 80015dc:	4b67      	ldr	r3, [pc, #412]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80015de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e0:	4b66      	ldr	r3, [pc, #408]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80015e2:	496a      	ldr	r1, [pc, #424]	; (800178c <HAL_RCC_OscConfig+0x690>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	651a      	str	r2, [r3, #80]	; 0x50
 80015e8:	e020      	b.n	800162c <HAL_RCC_OscConfig+0x530>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	23a0      	movs	r3, #160	; 0xa0
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d10e      	bne.n	8001614 <HAL_RCC_OscConfig+0x518>
 80015f6:	4b61      	ldr	r3, [pc, #388]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80015f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015fa:	4b60      	ldr	r3, [pc, #384]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	00c9      	lsls	r1, r1, #3
 8001600:	430a      	orrs	r2, r1
 8001602:	651a      	str	r2, [r3, #80]	; 0x50
 8001604:	4b5d      	ldr	r3, [pc, #372]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001608:	4b5c      	ldr	r3, [pc, #368]	; (800177c <HAL_RCC_OscConfig+0x680>)
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	0049      	lsls	r1, r1, #1
 800160e:	430a      	orrs	r2, r1
 8001610:	651a      	str	r2, [r3, #80]	; 0x50
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0x530>
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001616:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001618:	4b58      	ldr	r3, [pc, #352]	; (800177c <HAL_RCC_OscConfig+0x680>)
 800161a:	495a      	ldr	r1, [pc, #360]	; (8001784 <HAL_RCC_OscConfig+0x688>)
 800161c:	400a      	ands	r2, r1
 800161e:	651a      	str	r2, [r3, #80]	; 0x50
 8001620:	4b56      	ldr	r3, [pc, #344]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001624:	4b55      	ldr	r3, [pc, #340]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001626:	4959      	ldr	r1, [pc, #356]	; (800178c <HAL_RCC_OscConfig+0x690>)
 8001628:	400a      	ands	r2, r1
 800162a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d015      	beq.n	8001660 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001634:	f7ff f952 	bl	80008dc <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800163c:	e009      	b.n	8001652 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800163e:	f7ff f94d 	bl	80008dc <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	4a51      	ldr	r2, [pc, #324]	; (8001790 <HAL_RCC_OscConfig+0x694>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e0ca      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001652:	4b4a      	ldr	r3, [pc, #296]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4013      	ands	r3, r2
 800165c:	d0ef      	beq.n	800163e <HAL_RCC_OscConfig+0x542>
 800165e:	e014      	b.n	800168a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff f93c 	bl	80008dc <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001668:	e009      	b.n	800167e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff f937 	bl	80008dc <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	4a46      	ldr	r2, [pc, #280]	; (8001790 <HAL_RCC_OscConfig+0x694>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e0b4      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4013      	ands	r3, r2
 8001688:	d1ef      	bne.n	800166a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800168a:	2323      	movs	r3, #35	; 0x23
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001694:	4b39      	ldr	r3, [pc, #228]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001698:	4b38      	ldr	r3, [pc, #224]	; (800177c <HAL_RCC_OscConfig+0x680>)
 800169a:	493e      	ldr	r1, [pc, #248]	; (8001794 <HAL_RCC_OscConfig+0x698>)
 800169c:	400a      	ands	r2, r1
 800169e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d100      	bne.n	80016aa <HAL_RCC_OscConfig+0x5ae>
 80016a8:	e09d      	b.n	80017e6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	d100      	bne.n	80016b2 <HAL_RCC_OscConfig+0x5b6>
 80016b0:	e076      	b.n	80017a0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d145      	bne.n	8001746 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b2f      	ldr	r3, [pc, #188]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80016c0:	4935      	ldr	r1, [pc, #212]	; (8001798 <HAL_RCC_OscConfig+0x69c>)
 80016c2:	400a      	ands	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff f909 	bl	80008dc <HAL_GetTick>
 80016ca:	0003      	movs	r3, r0
 80016cc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff f904 	bl	80008dc <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e082      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	049b      	lsls	r3, r3, #18
 80016ea:	4013      	ands	r3, r2
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <HAL_RCC_OscConfig+0x680>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	4a2a      	ldr	r2, [pc, #168]	; (800179c <HAL_RCC_OscConfig+0x6a0>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	0019      	movs	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	431a      	orrs	r2, r3
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_RCC_OscConfig+0x680>)
 800170a:	430a      	orrs	r2, r1
 800170c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	0449      	lsls	r1, r1, #17
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff f8de 	bl	80008dc <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001726:	f7ff f8d9 	bl	80008dc <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e057      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_RCC_OscConfig+0x680>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	049b      	lsls	r3, r3, #18
 8001740:	4013      	ands	r3, r2
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x62a>
 8001744:	e04f      	b.n	80017e6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_RCC_OscConfig+0x680>)
 800174c:	4912      	ldr	r1, [pc, #72]	; (8001798 <HAL_RCC_OscConfig+0x69c>)
 800174e:	400a      	ands	r2, r1
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff f8c3 	bl	80008dc <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f8be 	bl	80008dc <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e03c      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800176e:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_RCC_OscConfig+0x680>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	049b      	lsls	r3, r3, #18
 8001776:	4013      	ands	r3, r2
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x660>
 800177a:	e034      	b.n	80017e6 <HAL_RCC_OscConfig+0x6ea>
 800177c:	40021000 	.word	0x40021000
 8001780:	ffff1fff 	.word	0xffff1fff
 8001784:	fffffeff 	.word	0xfffffeff
 8001788:	40007000 	.word	0x40007000
 800178c:	fffffbff 	.word	0xfffffbff
 8001790:	00001388 	.word	0x00001388
 8001794:	efffffff 	.word	0xefffffff
 8001798:	feffffff 	.word	0xfeffffff
 800179c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e01d      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_RCC_OscConfig+0x6f4>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	401a      	ands	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	429a      	cmp	r2, r3
 80017c0:	d10f      	bne.n	80017e2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	23f0      	movs	r3, #240	; 0xf0
 80017c6:	039b      	lsls	r3, r3, #14
 80017c8:	401a      	ands	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	23c0      	movs	r3, #192	; 0xc0
 80017d6:	041b      	lsls	r3, r3, #16
 80017d8:	401a      	ands	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d001      	beq.n	80017e6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b00a      	add	sp, #40	; 0x28
 80017ee:	bdb0      	pop	{r4, r5, r7, pc}
 80017f0:	40021000 	.word	0x40021000

080017f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e128      	b.n	8001a5a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001808:	4b96      	ldr	r3, [pc, #600]	; (8001a64 <HAL_RCC_ClockConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2201      	movs	r2, #1
 800180e:	4013      	ands	r3, r2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d91e      	bls.n	8001854 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b93      	ldr	r3, [pc, #588]	; (8001a64 <HAL_RCC_ClockConfig+0x270>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2201      	movs	r2, #1
 800181c:	4393      	bics	r3, r2
 800181e:	0019      	movs	r1, r3
 8001820:	4b90      	ldr	r3, [pc, #576]	; (8001a64 <HAL_RCC_ClockConfig+0x270>)
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001828:	f7ff f858 	bl	80008dc <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001830:	e009      	b.n	8001846 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001832:	f7ff f853 	bl	80008dc <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	4a8a      	ldr	r2, [pc, #552]	; (8001a68 <HAL_RCC_ClockConfig+0x274>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e109      	b.n	8001a5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b87      	ldr	r3, [pc, #540]	; (8001a64 <HAL_RCC_ClockConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2201      	movs	r2, #1
 800184c:	4013      	ands	r3, r2
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d1ee      	bne.n	8001832 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2202      	movs	r2, #2
 800185a:	4013      	ands	r3, r2
 800185c:	d009      	beq.n	8001872 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800185e:	4b83      	ldr	r3, [pc, #524]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	22f0      	movs	r2, #240	; 0xf0
 8001864:	4393      	bics	r3, r2
 8001866:	0019      	movs	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	4b7f      	ldr	r3, [pc, #508]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 800186e:	430a      	orrs	r2, r1
 8001870:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2201      	movs	r2, #1
 8001878:	4013      	ands	r3, r2
 800187a:	d100      	bne.n	800187e <HAL_RCC_ClockConfig+0x8a>
 800187c:	e089      	b.n	8001992 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001886:	4b79      	ldr	r3, [pc, #484]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	029b      	lsls	r3, r3, #10
 800188e:	4013      	ands	r3, r2
 8001890:	d120      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0e1      	b.n	8001a5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800189e:	4b73      	ldr	r3, [pc, #460]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	049b      	lsls	r3, r3, #18
 80018a6:	4013      	ands	r3, r2
 80018a8:	d114      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0d5      	b.n	8001a5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d106      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018b6:	4b6d      	ldr	r3, [pc, #436]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2204      	movs	r2, #4
 80018bc:	4013      	ands	r3, r2
 80018be:	d109      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0ca      	b.n	8001a5a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018c4:	4b69      	ldr	r3, [pc, #420]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4013      	ands	r3, r2
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0c2      	b.n	8001a5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d4:	4b65      	ldr	r3, [pc, #404]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2203      	movs	r2, #3
 80018da:	4393      	bics	r3, r2
 80018dc:	0019      	movs	r1, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4b62      	ldr	r3, [pc, #392]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 80018e4:	430a      	orrs	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e8:	f7fe fff8 	bl	80008dc <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d111      	bne.n	800191c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f8:	e009      	b.n	800190e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fa:	f7fe ffef 	bl	80008dc <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_RCC_ClockConfig+0x274>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e0a5      	b.n	8001a5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800190e:	4b57      	ldr	r3, [pc, #348]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	220c      	movs	r2, #12
 8001914:	4013      	ands	r3, r2
 8001916:	2b08      	cmp	r3, #8
 8001918:	d1ef      	bne.n	80018fa <HAL_RCC_ClockConfig+0x106>
 800191a:	e03a      	b.n	8001992 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d111      	bne.n	8001948 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001924:	e009      	b.n	800193a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001926:	f7fe ffd9 	bl	80008dc <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_RCC_ClockConfig+0x274>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e08f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800193a:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	220c      	movs	r2, #12
 8001940:	4013      	ands	r3, r2
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d1ef      	bne.n	8001926 <HAL_RCC_ClockConfig+0x132>
 8001946:	e024      	b.n	8001992 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d11b      	bne.n	8001988 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001950:	e009      	b.n	8001966 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001952:	f7fe ffc3 	bl	80008dc <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	4a42      	ldr	r2, [pc, #264]	; (8001a68 <HAL_RCC_ClockConfig+0x274>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e079      	b.n	8001a5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001966:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	220c      	movs	r2, #12
 800196c:	4013      	ands	r3, r2
 800196e:	2b04      	cmp	r3, #4
 8001970:	d1ef      	bne.n	8001952 <HAL_RCC_ClockConfig+0x15e>
 8001972:	e00e      	b.n	8001992 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7fe ffb2 	bl	80008dc <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	4a3a      	ldr	r2, [pc, #232]	; (8001a68 <HAL_RCC_ClockConfig+0x274>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e068      	b.n	8001a5a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	220c      	movs	r2, #12
 800198e:	4013      	ands	r3, r2
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <HAL_RCC_ClockConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2201      	movs	r2, #1
 8001998:	4013      	ands	r3, r2
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d21e      	bcs.n	80019de <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a0:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_RCC_ClockConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4393      	bics	r3, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_RCC_ClockConfig+0x270>)
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019b2:	f7fe ff93 	bl	80008dc <HAL_GetTick>
 80019b6:	0003      	movs	r3, r0
 80019b8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	e009      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7fe ff8e 	bl	80008dc <HAL_GetTick>
 80019c0:	0002      	movs	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <HAL_RCC_ClockConfig+0x274>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e044      	b.n	8001a5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_RCC_ClockConfig+0x270>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2201      	movs	r2, #1
 80019d6:	4013      	ands	r3, r2
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d1ee      	bne.n	80019bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2204      	movs	r2, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d009      	beq.n	80019fc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4a20      	ldr	r2, [pc, #128]	; (8001a70 <HAL_RCC_ClockConfig+0x27c>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 80019f8:	430a      	orrs	r2, r1
 80019fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2208      	movs	r2, #8
 8001a02:	4013      	ands	r3, r2
 8001a04:	d00a      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	4a1a      	ldr	r2, [pc, #104]	; (8001a74 <HAL_RCC_ClockConfig+0x280>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	00da      	lsls	r2, r3, #3
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a1c:	f000 f832 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 8001a20:	0001      	movs	r1, r0
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_RCC_ClockConfig+0x278>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	220f      	movs	r2, #15
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <HAL_RCC_ClockConfig+0x284>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	000a      	movs	r2, r1
 8001a32:	40da      	lsrs	r2, r3
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_RCC_ClockConfig+0x288>)
 8001a36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_RCC_ClockConfig+0x28c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	250b      	movs	r5, #11
 8001a3e:	197c      	adds	r4, r7, r5
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7fe ff05 	bl	8000850 <HAL_InitTick>
 8001a46:	0003      	movs	r3, r0
 8001a48:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a4a:	197b      	adds	r3, r7, r5
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a52:	197b      	adds	r3, r7, r5
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b004      	add	sp, #16
 8001a60:	bdb0      	pop	{r4, r5, r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	40022000 	.word	0x40022000
 8001a68:	00001388 	.word	0x00001388
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	fffff8ff 	.word	0xfffff8ff
 8001a74:	ffffc7ff 	.word	0xffffc7ff
 8001a78:	08001c40 	.word	0x08001c40
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000004 	.word	0x20000004

08001a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b08e      	sub	sp, #56	; 0x38
 8001a88:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a8a:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x138>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a92:	230c      	movs	r3, #12
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d014      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x40>
 8001a9a:	d900      	bls.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1a>
 8001a9c:	e07b      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x112>
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d002      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x24>
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d00b      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0x3a>
 8001aa6:	e076      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001aa8:	4b44      	ldr	r3, [pc, #272]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x138>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2210      	movs	r2, #16
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ab2:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ab6:	e07c      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001ab8:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001abc:	e079      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001abe:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ac2:	e076      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac6:	0c9a      	lsrs	r2, r3, #18
 8001ac8:	230f      	movs	r3, #15
 8001aca:	401a      	ands	r2, r3
 8001acc:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x148>)
 8001ace:	5c9b      	ldrb	r3, [r3, r2]
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	0d9a      	lsrs	r2, r3, #22
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	4013      	ands	r3, r2
 8001ada:	3301      	adds	r3, #1
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x138>)
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	025b      	lsls	r3, r3, #9
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d01a      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	4a35      	ldr	r2, [pc, #212]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001af4:	2300      	movs	r3, #0
 8001af6:	69b8      	ldr	r0, [r7, #24]
 8001af8:	69f9      	ldr	r1, [r7, #28]
 8001afa:	f7fe fbb1 	bl	8000260 <__aeabi_lmul>
 8001afe:	0002      	movs	r2, r0
 8001b00:	000b      	movs	r3, r1
 8001b02:	0010      	movs	r0, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f7fe fb85 	bl	8000220 <__aeabi_uldivmod>
 8001b16:	0002      	movs	r2, r0
 8001b18:	000b      	movs	r3, r1
 8001b1a:	0013      	movs	r3, r2
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b1e:	e037      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b20:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x138>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2210      	movs	r2, #16
 8001b26:	4013      	ands	r3, r2
 8001b28:	d01a      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b34:	2300      	movs	r3, #0
 8001b36:	68b8      	ldr	r0, [r7, #8]
 8001b38:	68f9      	ldr	r1, [r7, #12]
 8001b3a:	f7fe fb91 	bl	8000260 <__aeabi_lmul>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	000b      	movs	r3, r1
 8001b42:	0010      	movs	r0, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f7fe fb65 	bl	8000220 <__aeabi_uldivmod>
 8001b56:	0002      	movs	r2, r0
 8001b58:	000b      	movs	r3, r1
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5e:	e017      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b62:	0018      	movs	r0, r3
 8001b64:	2300      	movs	r3, #0
 8001b66:	0019      	movs	r1, r3
 8001b68:	4a16      	ldr	r2, [pc, #88]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f7fe fb78 	bl	8000260 <__aeabi_lmul>
 8001b70:	0002      	movs	r2, r0
 8001b72:	000b      	movs	r3, r1
 8001b74:	0010      	movs	r0, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	001c      	movs	r4, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	001d      	movs	r5, r3
 8001b80:	0022      	movs	r2, r4
 8001b82:	002b      	movs	r3, r5
 8001b84:	f7fe fb4c 	bl	8000220 <__aeabi_uldivmod>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	000b      	movs	r3, r1
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b94:	e00d      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x138>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	0b5b      	lsrs	r3, r3, #13
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	0212      	lsls	r2, r2, #8
 8001baa:	409a      	lsls	r2, r3
 8001bac:	0013      	movs	r3, r2
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bb0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b00e      	add	sp, #56	; 0x38
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	003d0900 	.word	0x003d0900
 8001bc4:	00f42400 	.word	0x00f42400
 8001bc8:	007a1200 	.word	0x007a1200
 8001bcc:	08001c50 	.word	0x08001c50

08001bd0 <__libc_init_array>:
 8001bd0:	b570      	push	{r4, r5, r6, lr}
 8001bd2:	2600      	movs	r6, #0
 8001bd4:	4d0c      	ldr	r5, [pc, #48]	; (8001c08 <__libc_init_array+0x38>)
 8001bd6:	4c0d      	ldr	r4, [pc, #52]	; (8001c0c <__libc_init_array+0x3c>)
 8001bd8:	1b64      	subs	r4, r4, r5
 8001bda:	10a4      	asrs	r4, r4, #2
 8001bdc:	42a6      	cmp	r6, r4
 8001bde:	d109      	bne.n	8001bf4 <__libc_init_array+0x24>
 8001be0:	2600      	movs	r6, #0
 8001be2:	f000 f821 	bl	8001c28 <_init>
 8001be6:	4d0a      	ldr	r5, [pc, #40]	; (8001c10 <__libc_init_array+0x40>)
 8001be8:	4c0a      	ldr	r4, [pc, #40]	; (8001c14 <__libc_init_array+0x44>)
 8001bea:	1b64      	subs	r4, r4, r5
 8001bec:	10a4      	asrs	r4, r4, #2
 8001bee:	42a6      	cmp	r6, r4
 8001bf0:	d105      	bne.n	8001bfe <__libc_init_array+0x2e>
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}
 8001bf4:	00b3      	lsls	r3, r6, #2
 8001bf6:	58eb      	ldr	r3, [r5, r3]
 8001bf8:	4798      	blx	r3
 8001bfa:	3601      	adds	r6, #1
 8001bfc:	e7ee      	b.n	8001bdc <__libc_init_array+0xc>
 8001bfe:	00b3      	lsls	r3, r6, #2
 8001c00:	58eb      	ldr	r3, [r5, r3]
 8001c02:	4798      	blx	r3
 8001c04:	3601      	adds	r6, #1
 8001c06:	e7f2      	b.n	8001bee <__libc_init_array+0x1e>
 8001c08:	08001c64 	.word	0x08001c64
 8001c0c:	08001c64 	.word	0x08001c64
 8001c10:	08001c64 	.word	0x08001c64
 8001c14:	08001c68 	.word	0x08001c68

08001c18 <memset>:
 8001c18:	0003      	movs	r3, r0
 8001c1a:	1882      	adds	r2, r0, r2
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d100      	bne.n	8001c22 <memset+0xa>
 8001c20:	4770      	bx	lr
 8001c22:	7019      	strb	r1, [r3, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	e7f9      	b.n	8001c1c <memset+0x4>

08001c28 <_init>:
 8001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c2e:	bc08      	pop	{r3}
 8001c30:	469e      	mov	lr, r3
 8001c32:	4770      	bx	lr

08001c34 <_fini>:
 8001c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c3a:	bc08      	pop	{r3}
 8001c3c:	469e      	mov	lr, r3
 8001c3e:	4770      	bx	lr
