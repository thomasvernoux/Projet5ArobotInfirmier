
Projet_Robot_Infirmier_F072RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f1c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800401c  0800401c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800401c  0800401c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800401c  0800401c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08004030  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004030  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff0c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f3  00000000  00000000  0002ff40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00032338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00033018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1fe  00000000  00000000  00033c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109b1  00000000  00000000  0004ddfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097fb2  00000000  00000000  0005e7af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6761  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d24  00000000  00000000  000f67b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003fc4 	.word	0x08003fc4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003fc4 	.word	0x08003fc4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB1   ------> S_TIM14_CH1
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	; 0x2c
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2414      	movs	r4, #20
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f003 febf 	bl	8003fb4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b4a      	ldr	r3, [pc, #296]	; (8000360 <MX_GPIO_Init+0x140>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b49      	ldr	r3, [pc, #292]	; (8000360 <MX_GPIO_Init+0x140>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0309      	lsls	r1, r1, #12
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b46      	ldr	r3, [pc, #280]	; (8000360 <MX_GPIO_Init+0x140>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	031b      	lsls	r3, r3, #12
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000252:	4b43      	ldr	r3, [pc, #268]	; (8000360 <MX_GPIO_Init+0x140>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b42      	ldr	r3, [pc, #264]	; (8000360 <MX_GPIO_Init+0x140>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	03c9      	lsls	r1, r1, #15
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b3f      	ldr	r3, [pc, #252]	; (8000360 <MX_GPIO_Init+0x140>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	03db      	lsls	r3, r3, #15
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b3c      	ldr	r3, [pc, #240]	; (8000360 <MX_GPIO_Init+0x140>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b3b      	ldr	r3, [pc, #236]	; (8000360 <MX_GPIO_Init+0x140>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	0289      	lsls	r1, r1, #10
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b38      	ldr	r3, [pc, #224]	; (8000360 <MX_GPIO_Init+0x140>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028a:	4b35      	ldr	r3, [pc, #212]	; (8000360 <MX_GPIO_Init+0x140>)
 800028c:	695a      	ldr	r2, [r3, #20]
 800028e:	4b34      	ldr	r3, [pc, #208]	; (8000360 <MX_GPIO_Init+0x140>)
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	02c9      	lsls	r1, r1, #11
 8000294:	430a      	orrs	r2, r1
 8000296:	615a      	str	r2, [r3, #20]
 8000298:	4b31      	ldr	r3, [pc, #196]	; (8000360 <MX_GPIO_Init+0x140>)
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	02db      	lsls	r3, r3, #11
 80002a0:	4013      	ands	r3, r2
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002a6:	2390      	movs	r3, #144	; 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2200      	movs	r2, #0
 80002ac:	2120      	movs	r1, #32
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 feea 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWM_moteur_GPIO_Port, PWM_moteur_Pin, GPIO_PIN_RESET);
 80002b4:	4b2b      	ldr	r3, [pc, #172]	; (8000364 <MX_GPIO_Init+0x144>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	2110      	movs	r1, #16
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fee4 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	0192      	lsls	r2, r2, #6
 80002c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	2284      	movs	r2, #132	; 0x84
 80002cc:	0392      	lsls	r2, r2, #14
 80002ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	4a22      	ldr	r2, [pc, #136]	; (8000364 <MX_GPIO_Init+0x144>)
 80002da:	0019      	movs	r1, r3
 80002dc:	0010      	movs	r0, r2
 80002de:	f000 fd5b 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2220      	movs	r2, #32
 80002e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2201      	movs	r2, #1
 80002ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002fa:	193a      	adds	r2, r7, r4
 80002fc:	2390      	movs	r3, #144	; 0x90
 80002fe:	05db      	lsls	r3, r3, #23
 8000300:	0011      	movs	r1, r2
 8000302:	0018      	movs	r0, r3
 8000304:	f000 fd48 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_moteur_Pin;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2210      	movs	r2, #16
 800030c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030e:	193b      	adds	r3, r7, r4
 8000310:	2201      	movs	r2, #1
 8000312:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PWM_moteur_GPIO_Port, &GPIO_InitStruct);
 8000320:	193b      	adds	r3, r7, r4
 8000322:	4a10      	ldr	r2, [pc, #64]	; (8000364 <MX_GPIO_Init+0x144>)
 8000324:	0019      	movs	r1, r3
 8000326:	0010      	movs	r0, r2
 8000328:	f000 fd36 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800032c:	0021      	movs	r1, r4
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2202      	movs	r2, #2
 8000332:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2202      	movs	r2, #2
 8000338:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034c:	187b      	adds	r3, r7, r1
 800034e:	4a06      	ldr	r2, [pc, #24]	; (8000368 <MX_GPIO_Init+0x148>)
 8000350:	0019      	movs	r1, r3
 8000352:	0010      	movs	r0, r2
 8000354:	f000 fd20 	bl	8000d98 <HAL_GPIO_Init>

}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b00b      	add	sp, #44	; 0x2c
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	40021000 	.word	0x40021000
 8000364:	48000800 	.word	0x48000800
 8000368:	48000400 	.word	0x48000400

0800036c <tests_lidar>:
#include "main.h"
#include "tim.h"



void tests_lidar(){
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0

	int a = 3;
 8000372:	2303      	movs	r3, #3
 8000374:	607b      	str	r3, [r7, #4]
	TIM1->CCR1 = 40000;
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <tests_lidar+0x28>)
 8000378:	4a07      	ldr	r2, [pc, #28]	; (8000398 <tests_lidar+0x2c>)
 800037a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <tests_lidar+0x30>)
 800037e:	2100      	movs	r1, #0
 8000380:	0018      	movs	r0, r3
 8000382:	f001 fd45 	bl	8001e10 <HAL_TIM_PWM_Start>



	reset_lidar();
 8000386:	f000 f80b 	bl	80003a0 <reset_lidar>





	return;
 800038a:	46c0      	nop			; (mov r8, r8)
}
 800038c:	46bd      	mov	sp, r7
 800038e:	b002      	add	sp, #8
 8000390:	bd80      	pop	{r7, pc}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	40012c00 	.word	0x40012c00
 8000398:	00009c40 	.word	0x00009c40
 800039c:	20000040 	.word	0x20000040

080003a0 <reset_lidar>:

void mouvement_moteur(int vitesse){

}

void reset_lidar(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
	char Data = "A540";
 80003a6:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <reset_lidar+0x24>)
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Data, sizeof(Data), 100);
 80003ac:	1dfb      	adds	r3, r7, #7
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	0019      	movs	r1, r3
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <reset_lidar+0x28>)
 80003b4:	2364      	movs	r3, #100	; 0x64
 80003b6:	2201      	movs	r2, #1
 80003b8:	f002 fbc6 	bl	8002b48 <HAL_UART_Transmit>
}
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	b002      	add	sp, #8
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	08003fdc 	.word	0x08003fdc
 80003c8:	2000010c 	.word	0x2000010c

080003cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d0:	f000 fb22 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d4:	f000 f820 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d8:	f7ff ff22 	bl	8000220 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003dc:	f000 f9fa 	bl	80007d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80003e0:	f000 fa28 	bl	8000834 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80003e4:	f000 f8e0 	bl	80005a8 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 80003e8:	4907      	ldr	r1, [pc, #28]	; (8000408 <main+0x3c>)
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <main+0x40>)
 80003ec:	220a      	movs	r2, #10
 80003ee:	0018      	movs	r0, r3
 80003f0:	f002 fc53 	bl	8002c9a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, sizeof(UART2_rxBuffer));
 80003f4:	4906      	ldr	r1, [pc, #24]	; (8000410 <main+0x44>)
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <main+0x48>)
 80003f8:	220a      	movs	r2, #10
 80003fa:	0018      	movs	r0, r3
 80003fc:	f002 fc4d 	bl	8002c9a <HAL_UART_Receive_IT>

  tests_lidar();
 8000400:	f7ff ffb4 	bl	800036c <tests_lidar>



  while (1)
 8000404:	e7fe      	b.n	8000404 <main+0x38>
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	20000034 	.word	0x20000034
 800040c:	20000088 	.word	0x20000088
 8000410:	20000028 	.word	0x20000028
 8000414:	2000010c 	.word	0x2000010c

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b099      	sub	sp, #100	; 0x64
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	242c      	movs	r4, #44	; 0x2c
 8000420:	193b      	adds	r3, r7, r4
 8000422:	0018      	movs	r0, r3
 8000424:	2334      	movs	r3, #52	; 0x34
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f003 fdc3 	bl	8003fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042e:	231c      	movs	r3, #28
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	0018      	movs	r0, r3
 8000434:	2310      	movs	r3, #16
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f003 fdbb 	bl	8003fb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043e:	003b      	movs	r3, r7
 8000440:	0018      	movs	r0, r3
 8000442:	231c      	movs	r3, #28
 8000444:	001a      	movs	r2, r3
 8000446:	2100      	movs	r1, #0
 8000448:	f003 fdb4 	bl	8003fb4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044c:	0021      	movs	r1, r4
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2202      	movs	r2, #2
 8000452:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2201      	movs	r2, #1
 8000458:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2210      	movs	r2, #16
 800045e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2202      	movs	r2, #2
 8000464:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2280      	movs	r2, #128	; 0x80
 800046a:	0212      	lsls	r2, r2, #8
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	22a0      	movs	r2, #160	; 0xa0
 8000472:	0392      	lsls	r2, r2, #14
 8000474:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2201      	movs	r2, #1
 800047a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047c:	187b      	adds	r3, r7, r1
 800047e:	0018      	movs	r0, r3
 8000480:	f000 fe20 	bl	80010c4 <HAL_RCC_OscConfig>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000488:	f000 f82b 	bl	80004e2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	211c      	movs	r1, #28
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2207      	movs	r2, #7
 8000492:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2202      	movs	r2, #2
 8000498:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2101      	movs	r1, #1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 f990 	bl	80017d0 <HAL_RCC_ClockConfig>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80004b4:	f000 f815 	bl	80004e2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80004b8:	003b      	movs	r3, r7
 80004ba:	2203      	movs	r2, #3
 80004bc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004be:	003b      	movs	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004c4:	003b      	movs	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ca:	003b      	movs	r3, r7
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 faf9 	bl	8001ac4 <HAL_RCCEx_PeriphCLKConfig>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80004d6:	f000 f804 	bl	80004e2 <Error_Handler>
  }
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b019      	add	sp, #100	; 0x64
 80004e0:	bd90      	pop	{r4, r7, pc}

080004e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e6:	b672      	cpsid	i
}
 80004e8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ea:	e7fe      	b.n	80004ea <Error_Handler+0x8>

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <HAL_MspInit+0x44>)
 80004f4:	699a      	ldr	r2, [r3, #24]
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <HAL_MspInit+0x44>)
 80004f8:	2101      	movs	r1, #1
 80004fa:	430a      	orrs	r2, r1
 80004fc:	619a      	str	r2, [r3, #24]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <HAL_MspInit+0x44>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	2201      	movs	r2, #1
 8000504:	4013      	ands	r3, r2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <HAL_MspInit+0x44>)
 800050c:	69da      	ldr	r2, [r3, #28]
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_MspInit+0x44>)
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	0549      	lsls	r1, r1, #21
 8000514:	430a      	orrs	r2, r1
 8000516:	61da      	str	r2, [r3, #28]
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_MspInit+0x44>)
 800051a:	69da      	ldr	r2, [r3, #28]
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	055b      	lsls	r3, r3, #21
 8000520:	4013      	ands	r3, r2
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	40021000 	.word	0x40021000

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <NMI_Handler+0x4>

0800053a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <HardFault_Handler+0x4>

08000540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000558:	f000 faa6 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  int a = 3;
 800056a:	2303      	movs	r3, #3
 800056c:	607b      	str	r3, [r7, #4]




  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <USART1_IRQHandler+0x1c>)
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fbf3 	bl	8002d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b002      	add	sp, #8
 800057c:	bd80      	pop	{r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	20000088 	.word	0x20000088

08000584 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <USART2_IRQHandler+0x14>)
 800058a:	0018      	movs	r0, r3
 800058c:	f002 fbe6 	bl	8002d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	2000010c 	.word	0x2000010c

0800059c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b096      	sub	sp, #88	; 0x58
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ae:	2348      	movs	r3, #72	; 0x48
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	0018      	movs	r0, r3
 80005b4:	2310      	movs	r3, #16
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f003 fcfb 	bl	8003fb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005be:	2340      	movs	r3, #64	; 0x40
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	0018      	movs	r0, r3
 80005c4:	2308      	movs	r3, #8
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f003 fcf3 	bl	8003fb4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ce:	2324      	movs	r3, #36	; 0x24
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	0018      	movs	r0, r3
 80005d4:	231c      	movs	r3, #28
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f003 fceb 	bl	8003fb4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2320      	movs	r3, #32
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f003 fce4 	bl	8003fb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005ec:	4b46      	ldr	r3, [pc, #280]	; (8000708 <MX_TIM1_Init+0x160>)
 80005ee:	4a47      	ldr	r2, [pc, #284]	; (800070c <MX_TIM1_Init+0x164>)
 80005f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005f2:	4b45      	ldr	r3, [pc, #276]	; (8000708 <MX_TIM1_Init+0x160>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f8:	4b43      	ldr	r3, [pc, #268]	; (8000708 <MX_TIM1_Init+0x160>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005fe:	4b42      	ldr	r3, [pc, #264]	; (8000708 <MX_TIM1_Init+0x160>)
 8000600:	4a43      	ldr	r2, [pc, #268]	; (8000710 <MX_TIM1_Init+0x168>)
 8000602:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000604:	4b40      	ldr	r3, [pc, #256]	; (8000708 <MX_TIM1_Init+0x160>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800060a:	4b3f      	ldr	r3, [pc, #252]	; (8000708 <MX_TIM1_Init+0x160>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000610:	4b3d      	ldr	r3, [pc, #244]	; (8000708 <MX_TIM1_Init+0x160>)
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000616:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <MX_TIM1_Init+0x160>)
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fb51 	bl	8001cc0 <HAL_TIM_Base_Init>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000622:	f7ff ff5e 	bl	80004e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000626:	2148      	movs	r1, #72	; 0x48
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	0152      	lsls	r2, r2, #5
 800062e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000630:	187a      	adds	r2, r7, r1
 8000632:	4b35      	ldr	r3, [pc, #212]	; (8000708 <MX_TIM1_Init+0x160>)
 8000634:	0011      	movs	r1, r2
 8000636:	0018      	movs	r0, r3
 8000638:	f001 fd68 	bl	800210c <HAL_TIM_ConfigClockSource>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000640:	f7ff ff4f 	bl	80004e2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <MX_TIM1_Init+0x160>)
 8000646:	0018      	movs	r0, r3
 8000648:	f001 fb8a 	bl	8001d60 <HAL_TIM_PWM_Init>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000650:	f7ff ff47 	bl	80004e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000654:	2140      	movs	r1, #64	; 0x40
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000662:	187a      	adds	r2, r7, r1
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <MX_TIM1_Init+0x160>)
 8000666:	0011      	movs	r1, r2
 8000668:	0018      	movs	r0, r3
 800066a:	f002 f95d 	bl	8002928 <HAL_TIMEx_MasterConfigSynchronization>
 800066e:	1e03      	subs	r3, r0, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000672:	f7ff ff36 	bl	80004e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000676:	2124      	movs	r1, #36	; 0x24
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2260      	movs	r2, #96	; 0x60
 800067c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 100;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2264      	movs	r2, #100	; 0x64
 8000682:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a2:	1879      	adds	r1, r7, r1
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_TIM1_Init+0x160>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 fc69 	bl	8001f80 <HAL_TIM_PWM_ConfigChannel>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80006b2:	f7ff ff16 	bl	80004e2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	0192      	lsls	r2, r2, #6
 80006da:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006e2:	1d3a      	adds	r2, r7, #4
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_TIM1_Init+0x160>)
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f002 f97b 	bl	80029e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80006f2:	f7ff fef6 	bl	80004e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <MX_TIM1_Init+0x160>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 f82b 	bl	8000754 <HAL_TIM_MspPostInit>

}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b016      	add	sp, #88	; 0x58
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	20000040 	.word	0x20000040
 800070c:	40012c00 	.word	0x40012c00
 8000710:	0000ffff 	.word	0x0000ffff

08000714 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <HAL_TIM_Base_MspInit+0x38>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d10d      	bne.n	8000742 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_TIM_Base_MspInit+0x3c>)
 8000728:	699a      	ldr	r2, [r3, #24]
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_TIM_Base_MspInit+0x3c>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	0109      	lsls	r1, r1, #4
 8000730:	430a      	orrs	r2, r1
 8000732:	619a      	str	r2, [r3, #24]
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_TIM_Base_MspInit+0x3c>)
 8000736:	699a      	ldr	r2, [r3, #24]
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	011b      	lsls	r3, r3, #4
 800073c:	4013      	ands	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b004      	add	sp, #16
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40012c00 	.word	0x40012c00
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	240c      	movs	r4, #12
 800075e:	193b      	adds	r3, r7, r4
 8000760:	0018      	movs	r0, r3
 8000762:	2314      	movs	r3, #20
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f003 fc24 	bl	8003fb4 <memset>
  if(timHandle->Instance==TIM1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a16      	ldr	r2, [pc, #88]	; (80007cc <HAL_TIM_MspPostInit+0x78>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d125      	bne.n	80007c2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <HAL_TIM_MspPostInit+0x7c>)
 8000778:	695a      	ldr	r2, [r3, #20]
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_TIM_MspPostInit+0x7c>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0289      	lsls	r1, r1, #10
 8000780:	430a      	orrs	r2, r1
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_TIM_MspPostInit+0x7c>)
 8000786:	695a      	ldr	r2, [r3, #20]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	029b      	lsls	r3, r3, #10
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	0052      	lsls	r2, r2, #1
 8000798:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	0021      	movs	r1, r4
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2202      	movs	r2, #2
 80007a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2202      	movs	r2, #2
 80007b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	187a      	adds	r2, r7, r1
 80007b6:	2390      	movs	r3, #144	; 0x90
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 faeb 	bl	8000d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b009      	add	sp, #36	; 0x24
 80007c8:	bd90      	pop	{r4, r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40012c00 	.word	0x40012c00
 80007d0:	40021000 	.word	0x40021000

080007d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_USART1_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007e0:	22e1      	movs	r2, #225	; 0xe1
 80007e2:	0252      	lsls	r2, r2, #9
 80007e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000818:	0018      	movs	r0, r3
 800081a:	f002 f941 	bl	8002aa0 <HAL_UART_Init>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000822:	f7ff fe5e 	bl	80004e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000088 	.word	0x20000088
 8000830:	40013800 	.word	0x40013800

08000834 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART2_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_USART2_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000840:	22e1      	movs	r2, #225	; 0xe1
 8000842:	0252      	lsls	r2, r2, #9
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART2_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000878:	0018      	movs	r0, r3
 800087a:	f002 f911 	bl	8002aa0 <HAL_UART_Init>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f7ff fe2e 	bl	80004e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000010c 	.word	0x2000010c
 8000890:	40004400 	.word	0x40004400

08000894 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b08d      	sub	sp, #52	; 0x34
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	241c      	movs	r4, #28
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	0018      	movs	r0, r3
 80008a2:	2314      	movs	r3, #20
 80008a4:	001a      	movs	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f003 fb84 	bl	8003fb4 <memset>
  if(uartHandle->Instance==USART1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a41      	ldr	r2, [pc, #260]	; (80009b8 <HAL_UART_MspInit+0x124>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d13c      	bne.n	8000930 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b6:	4b41      	ldr	r3, [pc, #260]	; (80009bc <HAL_UART_MspInit+0x128>)
 80008b8:	699a      	ldr	r2, [r3, #24]
 80008ba:	4b40      	ldr	r3, [pc, #256]	; (80009bc <HAL_UART_MspInit+0x128>)
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	01c9      	lsls	r1, r1, #7
 80008c0:	430a      	orrs	r2, r1
 80008c2:	619a      	str	r2, [r3, #24]
 80008c4:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <HAL_UART_MspInit+0x128>)
 80008c6:	699a      	ldr	r2, [r3, #24]
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	01db      	lsls	r3, r3, #7
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b3a      	ldr	r3, [pc, #232]	; (80009bc <HAL_UART_MspInit+0x128>)
 80008d4:	695a      	ldr	r2, [r3, #20]
 80008d6:	4b39      	ldr	r3, [pc, #228]	; (80009bc <HAL_UART_MspInit+0x128>)
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	0289      	lsls	r1, r1, #10
 80008dc:	430a      	orrs	r2, r1
 80008de:	615a      	str	r2, [r3, #20]
 80008e0:	4b36      	ldr	r3, [pc, #216]	; (80009bc <HAL_UART_MspInit+0x128>)
 80008e2:	695a      	ldr	r2, [r3, #20]
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	029b      	lsls	r3, r3, #10
 80008e8:	4013      	ands	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	22c0      	movs	r2, #192	; 0xc0
 80008f2:	00d2      	lsls	r2, r2, #3
 80008f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	0021      	movs	r1, r4
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2202      	movs	r2, #2
 80008fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2203      	movs	r2, #3
 8000908:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2201      	movs	r2, #1
 800090e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	187a      	adds	r2, r7, r1
 8000912:	2390      	movs	r3, #144	; 0x90
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 fa3d 	bl	8000d98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	201b      	movs	r0, #27
 8000924:	f000 f988 	bl	8000c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000928:	201b      	movs	r0, #27
 800092a:	f000 f99a 	bl	8000c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800092e:	e03f      	b.n	80009b0 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <HAL_UART_MspInit+0x12c>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d13a      	bne.n	80009b0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <HAL_UART_MspInit+0x128>)
 800093c:	69da      	ldr	r2, [r3, #28]
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <HAL_UART_MspInit+0x128>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	0289      	lsls	r1, r1, #10
 8000944:	430a      	orrs	r2, r1
 8000946:	61da      	str	r2, [r3, #28]
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_UART_MspInit+0x128>)
 800094a:	69da      	ldr	r2, [r3, #28]
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	029b      	lsls	r3, r3, #10
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_UART_MspInit+0x128>)
 8000958:	695a      	ldr	r2, [r3, #20]
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_UART_MspInit+0x128>)
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0289      	lsls	r1, r1, #10
 8000960:	430a      	orrs	r2, r1
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_UART_MspInit+0x128>)
 8000966:	695a      	ldr	r2, [r3, #20]
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	029b      	lsls	r3, r3, #10
 800096c:	4013      	ands	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000972:	211c      	movs	r1, #28
 8000974:	187b      	adds	r3, r7, r1
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2202      	movs	r2, #2
 800097e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2201      	movs	r2, #1
 8000990:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	187a      	adds	r2, r7, r1
 8000994:	2390      	movs	r3, #144	; 0x90
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	0011      	movs	r1, r2
 800099a:	0018      	movs	r0, r3
 800099c:	f000 f9fc 	bl	8000d98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	201c      	movs	r0, #28
 80009a6:	f000 f947 	bl	8000c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009aa:	201c      	movs	r0, #28
 80009ac:	f000 f959 	bl	8000c62 <HAL_NVIC_EnableIRQ>
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b00d      	add	sp, #52	; 0x34
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	40013800 	.word	0x40013800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40004400 	.word	0x40004400

080009c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ca:	490e      	ldr	r1, [pc, #56]	; (8000a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <LoopForever+0xe>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e0:	4c0b      	ldr	r4, [pc, #44]	; (8000a10 <LoopForever+0x16>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009ee:	f7ff fdd5 	bl	800059c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009f2:	f003 fabb 	bl	8003f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f6:	f7ff fce9 	bl	80003cc <main>

080009fa <LoopForever>:

LoopForever:
    b LoopForever
 80009fa:	e7fe      	b.n	80009fa <LoopForever>
  ldr   r0, =_estack
 80009fc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a08:	08004024 	.word	0x08004024
  ldr r2, =_sbss
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a10:	20000194 	.word	0x20000194

08000a14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_COMP_IRQHandler>
	...

08000a18 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <HAL_Init+0x24>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_Init+0x24>)
 8000a22:	2110      	movs	r1, #16
 8000a24:	430a      	orrs	r2, r1
 8000a26:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f809 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2e:	f7ff fd5d 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	40022000 	.word	0x40022000

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_InitTick+0x5c>)
 8000a4a:	681c      	ldr	r4, [r3, #0]
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_InitTick+0x60>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	0019      	movs	r1, r3
 8000a52:	23fa      	movs	r3, #250	; 0xfa
 8000a54:	0098      	lsls	r0, r3, #2
 8000a56:	f7ff fb57 	bl	8000108 <__udivsi3>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	0020      	movs	r0, r4
 8000a60:	f7ff fb52 	bl	8000108 <__udivsi3>
 8000a64:	0003      	movs	r3, r0
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 f90b 	bl	8000c82 <HAL_SYSTICK_Config>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e00f      	b.n	8000a94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d80b      	bhi.n	8000a92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	425b      	negs	r3, r3
 8000a80:	2200      	movs	r2, #0
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 f8d8 	bl	8000c38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_InitTick+0x64>)
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b003      	add	sp, #12
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x1c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x20>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	18d2      	adds	r2, r2, r3
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aba:	601a      	str	r2, [r3, #0]
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000190 	.word	0x20000190

08000acc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <HAL_GetTick+0x10>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	20000190 	.word	0x20000190

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b7f      	cmp	r3, #127	; 0x7f
 8000af2:	d809      	bhi.n	8000b08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	001a      	movs	r2, r3
 8000afa:	231f      	movs	r3, #31
 8000afc:	401a      	ands	r2, r3
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_EnableIRQ+0x30>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	4091      	lsls	r1, r2
 8000b04:	000a      	movs	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]
  }
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b7f      	cmp	r3, #127	; 0x7f
 8000b28:	d828      	bhi.n	8000b7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2a:	4a2f      	ldr	r2, [pc, #188]	; (8000be8 <__NVIC_SetPriority+0xd4>)
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	089b      	lsrs	r3, r3, #2
 8000b34:	33c0      	adds	r3, #192	; 0xc0
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	589b      	ldr	r3, [r3, r2]
 8000b3a:	1dfa      	adds	r2, r7, #7
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	0011      	movs	r1, r2
 8000b40:	2203      	movs	r2, #3
 8000b42:	400a      	ands	r2, r1
 8000b44:	00d2      	lsls	r2, r2, #3
 8000b46:	21ff      	movs	r1, #255	; 0xff
 8000b48:	4091      	lsls	r1, r2
 8000b4a:	000a      	movs	r2, r1
 8000b4c:	43d2      	mvns	r2, r2
 8000b4e:	401a      	ands	r2, r3
 8000b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	019b      	lsls	r3, r3, #6
 8000b56:	22ff      	movs	r2, #255	; 0xff
 8000b58:	401a      	ands	r2, r3
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	2303      	movs	r3, #3
 8000b62:	4003      	ands	r3, r0
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b68:	481f      	ldr	r0, [pc, #124]	; (8000be8 <__NVIC_SetPriority+0xd4>)
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	430a      	orrs	r2, r1
 8000b74:	33c0      	adds	r3, #192	; 0xc0
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b7a:	e031      	b.n	8000be0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <__NVIC_SetPriority+0xd8>)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0019      	movs	r1, r3
 8000b84:	230f      	movs	r3, #15
 8000b86:	400b      	ands	r3, r1
 8000b88:	3b08      	subs	r3, #8
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	3306      	adds	r3, #6
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	18d3      	adds	r3, r2, r3
 8000b92:	3304      	adds	r3, #4
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	1dfa      	adds	r2, r7, #7
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	400a      	ands	r2, r1
 8000ba0:	00d2      	lsls	r2, r2, #3
 8000ba2:	21ff      	movs	r1, #255	; 0xff
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	000a      	movs	r2, r1
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	401a      	ands	r2, r3
 8000bac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	019b      	lsls	r3, r3, #6
 8000bb2:	22ff      	movs	r2, #255	; 0xff
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <__NVIC_SetPriority+0xd8>)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	001c      	movs	r4, r3
 8000bcc:	230f      	movs	r3, #15
 8000bce:	4023      	ands	r3, r4
 8000bd0:	3b08      	subs	r3, #8
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	3306      	adds	r3, #6
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	18c3      	adds	r3, r0, r3
 8000bdc:	3304      	adds	r3, #4
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b003      	add	sp, #12
 8000be6:	bd90      	pop	{r4, r7, pc}
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	1e5a      	subs	r2, r3, #1
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	045b      	lsls	r3, r3, #17
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d301      	bcc.n	8000c08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c04:	2301      	movs	r3, #1
 8000c06:	e010      	b.n	8000c2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <SysTick_Config+0x44>)
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	3a01      	subs	r2, #1
 8000c0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c10:	2301      	movs	r3, #1
 8000c12:	425b      	negs	r3, r3
 8000c14:	2103      	movs	r1, #3
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff ff7c 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x44>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x44>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b002      	add	sp, #8
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	210f      	movs	r1, #15
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	1c02      	adds	r2, r0, #0
 8000c48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	0011      	movs	r1, r2
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff ff5d 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	0002      	movs	r2, r0
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ff33 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff ffaf 	bl	8000bf0 <SysTick_Config>
 8000c92:	0003      	movs	r3, r0
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2221      	movs	r2, #33	; 0x21
 8000ca8:	5c9b      	ldrb	r3, [r3, r2]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d008      	beq.n	8000cc2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2220      	movs	r2, #32
 8000cba:	2100      	movs	r1, #0
 8000cbc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e020      	b.n	8000d04 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	210e      	movs	r1, #14
 8000cce:	438a      	bics	r2, r1
 8000cd0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	438a      	bics	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cea:	2101      	movs	r1, #1
 8000cec:	4091      	lsls	r1, r2
 8000cee:	000a      	movs	r2, r1
 8000cf0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2221      	movs	r2, #33	; 0x21
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2220      	movs	r2, #32
 8000cfe:	2100      	movs	r1, #0
 8000d00:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b002      	add	sp, #8
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d14:	210f      	movs	r1, #15
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2221      	movs	r2, #33	; 0x21
 8000d20:	5c9b      	ldrb	r3, [r3, r2]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d006      	beq.n	8000d36 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	e028      	b.n	8000d88 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	210e      	movs	r1, #14
 8000d42:	438a      	bics	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	438a      	bics	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5e:	2101      	movs	r1, #1
 8000d60:	4091      	lsls	r1, r2
 8000d62:	000a      	movs	r2, r1
 8000d64:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2221      	movs	r2, #33	; 0x21
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2220      	movs	r2, #32
 8000d72:	2100      	movs	r1, #0
 8000d74:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d004      	beq.n	8000d88 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	0010      	movs	r0, r2
 8000d86:	4798      	blx	r3
    } 
  }
  return status;
 8000d88:	230f      	movs	r3, #15
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	781b      	ldrb	r3, [r3, #0]
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b004      	add	sp, #16
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da6:	e155      	b.n	8001054 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4091      	lsls	r1, r2
 8000db2:	000a      	movs	r2, r1
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d100      	bne.n	8000dc0 <HAL_GPIO_Init+0x28>
 8000dbe:	e146      	b.n	800104e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d005      	beq.n	8000dd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d130      	bne.n	8000e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	409a      	lsls	r2, r3
 8000de6:	0013      	movs	r3, r2
 8000de8:	43da      	mvns	r2, r3
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	409a      	lsls	r2, r3
 8000dfa:	0013      	movs	r3, r2
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0e:	2201      	movs	r2, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	43da      	mvns	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	2201      	movs	r2, #1
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2203      	movs	r2, #3
 8000e40:	4013      	ands	r3, r2
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d017      	beq.n	8000e76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d123      	bne.n	8000eca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	08da      	lsrs	r2, r3, #3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	58d3      	ldr	r3, [r2, r3]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	2207      	movs	r2, #7
 8000e94:	4013      	ands	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	691a      	ldr	r2, [r3, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2107      	movs	r1, #7
 8000eae:	400b      	ands	r3, r1
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	6939      	ldr	r1, [r7, #16]
 8000ec8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	43da      	mvns	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	401a      	ands	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	23c0      	movs	r3, #192	; 0xc0
 8000f04:	029b      	lsls	r3, r3, #10
 8000f06:	4013      	ands	r3, r2
 8000f08:	d100      	bne.n	8000f0c <HAL_GPIO_Init+0x174>
 8000f0a:	e0a0      	b.n	800104e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0c:	4b57      	ldr	r3, [pc, #348]	; (800106c <HAL_GPIO_Init+0x2d4>)
 8000f0e:	699a      	ldr	r2, [r3, #24]
 8000f10:	4b56      	ldr	r3, [pc, #344]	; (800106c <HAL_GPIO_Init+0x2d4>)
 8000f12:	2101      	movs	r1, #1
 8000f14:	430a      	orrs	r2, r1
 8000f16:	619a      	str	r2, [r3, #24]
 8000f18:	4b54      	ldr	r3, [pc, #336]	; (800106c <HAL_GPIO_Init+0x2d4>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4013      	ands	r3, r2
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f24:	4a52      	ldr	r2, [pc, #328]	; (8001070 <HAL_GPIO_Init+0x2d8>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	589b      	ldr	r3, [r3, r2]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2203      	movs	r2, #3
 8000f36:	4013      	ands	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	43da      	mvns	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	2390      	movs	r3, #144	; 0x90
 8000f4c:	05db      	lsls	r3, r3, #23
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0x1ee>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a47      	ldr	r2, [pc, #284]	; (8001074 <HAL_GPIO_Init+0x2dc>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x1ea>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a46      	ldr	r2, [pc, #280]	; (8001078 <HAL_GPIO_Init+0x2e0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x1e6>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a45      	ldr	r2, [pc, #276]	; (800107c <HAL_GPIO_Init+0x2e4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x1e2>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a44      	ldr	r2, [pc, #272]	; (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x1de>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e008      	b.n	8000f88 <HAL_GPIO_Init+0x1f0>
 8000f76:	2305      	movs	r3, #5
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x1f0>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <HAL_GPIO_Init+0x1f0>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x1f0>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x1f0>
 8000f86:	2300      	movs	r3, #0
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	2103      	movs	r1, #3
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4093      	lsls	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f98:	4935      	ldr	r1, [pc, #212]	; (8001070 <HAL_GPIO_Init+0x2d8>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa6:	4b37      	ldr	r3, [pc, #220]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	025b      	lsls	r3, r3, #9
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fca:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43da      	mvns	r2, r3
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	029b      	lsls	r3, r3, #10
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	035b      	lsls	r3, r3, #13
 8001012:	4013      	ands	r3, r2
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43da      	mvns	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	039b      	lsls	r3, r3, #14
 800103c:	4013      	ands	r3, r2
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	40da      	lsrs	r2, r3
 800105c:	1e13      	subs	r3, r2, #0
 800105e:	d000      	beq.n	8001062 <HAL_GPIO_Init+0x2ca>
 8001060:	e6a2      	b.n	8000da8 <HAL_GPIO_Init+0x10>
  } 
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b006      	add	sp, #24
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000
 8001074:	48000400 	.word	0x48000400
 8001078:	48000800 	.word	0x48000800
 800107c:	48000c00 	.word	0x48000c00
 8001080:	48001000 	.word	0x48001000
 8001084:	40010400 	.word	0x40010400

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	0008      	movs	r0, r1
 8001092:	0011      	movs	r1, r2
 8001094:	1cbb      	adds	r3, r7, #2
 8001096:	1c02      	adds	r2, r0, #0
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	1c7b      	adds	r3, r7, #1
 800109c:	1c0a      	adds	r2, r1, #0
 800109e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a0:	1c7b      	adds	r3, r7, #1
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a8:	1cbb      	adds	r3, r7, #2
 80010aa:	881a      	ldrh	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b0:	e003      	b.n	80010ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b2:	1cbb      	adds	r3, r7, #2
 80010b4:	881a      	ldrh	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d102      	bne.n	80010d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f000 fb76 	bl	80017c4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2201      	movs	r2, #1
 80010de:	4013      	ands	r3, r2
 80010e0:	d100      	bne.n	80010e4 <HAL_RCC_OscConfig+0x20>
 80010e2:	e08e      	b.n	8001202 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010e4:	4bc5      	ldr	r3, [pc, #788]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	220c      	movs	r2, #12
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d00e      	beq.n	800110e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010f0:	4bc2      	ldr	r3, [pc, #776]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	220c      	movs	r2, #12
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d117      	bne.n	800112c <HAL_RCC_OscConfig+0x68>
 80010fc:	4bbf      	ldr	r3, [pc, #764]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	23c0      	movs	r3, #192	; 0xc0
 8001102:	025b      	lsls	r3, r3, #9
 8001104:	401a      	ands	r2, r3
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	025b      	lsls	r3, r3, #9
 800110a:	429a      	cmp	r2, r3
 800110c:	d10e      	bne.n	800112c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110e:	4bbb      	ldr	r3, [pc, #748]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	029b      	lsls	r3, r3, #10
 8001116:	4013      	ands	r3, r2
 8001118:	d100      	bne.n	800111c <HAL_RCC_OscConfig+0x58>
 800111a:	e071      	b.n	8001200 <HAL_RCC_OscConfig+0x13c>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d000      	beq.n	8001126 <HAL_RCC_OscConfig+0x62>
 8001124:	e06c      	b.n	8001200 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	f000 fb4c 	bl	80017c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d107      	bne.n	8001144 <HAL_RCC_OscConfig+0x80>
 8001134:	4bb1      	ldr	r3, [pc, #708]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4bb0      	ldr	r3, [pc, #704]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	0249      	lsls	r1, r1, #9
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e02f      	b.n	80011a4 <HAL_RCC_OscConfig+0xe0>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10c      	bne.n	8001166 <HAL_RCC_OscConfig+0xa2>
 800114c:	4bab      	ldr	r3, [pc, #684]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4baa      	ldr	r3, [pc, #680]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001152:	49ab      	ldr	r1, [pc, #684]	; (8001400 <HAL_RCC_OscConfig+0x33c>)
 8001154:	400a      	ands	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	4ba8      	ldr	r3, [pc, #672]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4ba7      	ldr	r3, [pc, #668]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 800115e:	49a9      	ldr	r1, [pc, #676]	; (8001404 <HAL_RCC_OscConfig+0x340>)
 8001160:	400a      	ands	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e01e      	b.n	80011a4 <HAL_RCC_OscConfig+0xe0>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b05      	cmp	r3, #5
 800116c:	d10e      	bne.n	800118c <HAL_RCC_OscConfig+0xc8>
 800116e:	4ba3      	ldr	r3, [pc, #652]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4ba2      	ldr	r3, [pc, #648]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	02c9      	lsls	r1, r1, #11
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	4b9f      	ldr	r3, [pc, #636]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b9e      	ldr	r3, [pc, #632]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	0249      	lsls	r1, r1, #9
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0xe0>
 800118c:	4b9b      	ldr	r3, [pc, #620]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b9a      	ldr	r3, [pc, #616]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001192:	499b      	ldr	r1, [pc, #620]	; (8001400 <HAL_RCC_OscConfig+0x33c>)
 8001194:	400a      	ands	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	4b98      	ldr	r3, [pc, #608]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b97      	ldr	r3, [pc, #604]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 800119e:	4999      	ldr	r1, [pc, #612]	; (8001404 <HAL_RCC_OscConfig+0x340>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d014      	beq.n	80011d6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fc8e 	bl	8000acc <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b6:	f7ff fc89 	bl	8000acc <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b64      	cmp	r3, #100	; 0x64
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e2fd      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c8:	4b8c      	ldr	r3, [pc, #560]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	029b      	lsls	r3, r3, #10
 80011d0:	4013      	ands	r3, r2
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0xf2>
 80011d4:	e015      	b.n	8001202 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fc79 	bl	8000acc <HAL_GetTick>
 80011da:	0003      	movs	r3, r0
 80011dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fc74 	bl	8000acc <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e2e8      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f2:	4b82      	ldr	r3, [pc, #520]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	029b      	lsls	r3, r3, #10
 80011fa:	4013      	ands	r3, r2
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x11c>
 80011fe:	e000      	b.n	8001202 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2202      	movs	r2, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d100      	bne.n	800120e <HAL_RCC_OscConfig+0x14a>
 800120c:	e06c      	b.n	80012e8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800120e:	4b7b      	ldr	r3, [pc, #492]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	220c      	movs	r2, #12
 8001214:	4013      	ands	r3, r2
 8001216:	d00e      	beq.n	8001236 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001218:	4b78      	ldr	r3, [pc, #480]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	220c      	movs	r2, #12
 800121e:	4013      	ands	r3, r2
 8001220:	2b08      	cmp	r3, #8
 8001222:	d11f      	bne.n	8001264 <HAL_RCC_OscConfig+0x1a0>
 8001224:	4b75      	ldr	r3, [pc, #468]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	23c0      	movs	r3, #192	; 0xc0
 800122a:	025b      	lsls	r3, r3, #9
 800122c:	401a      	ands	r2, r3
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	429a      	cmp	r2, r3
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b71      	ldr	r3, [pc, #452]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2202      	movs	r2, #2
 800123c:	4013      	ands	r3, r2
 800123e:	d005      	beq.n	800124c <HAL_RCC_OscConfig+0x188>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d001      	beq.n	800124c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e2bb      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	22f8      	movs	r2, #248	; 0xf8
 8001252:	4393      	bics	r3, r2
 8001254:	0019      	movs	r1, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	00da      	lsls	r2, r3, #3
 800125c:	4b67      	ldr	r3, [pc, #412]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e041      	b.n	80012e8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d024      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b63      	ldr	r3, [pc, #396]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b62      	ldr	r3, [pc, #392]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001272:	2101      	movs	r1, #1
 8001274:	430a      	orrs	r2, r1
 8001276:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fc28 	bl	8000acc <HAL_GetTick>
 800127c:	0003      	movs	r3, r0
 800127e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001282:	f7ff fc23 	bl	8000acc <HAL_GetTick>
 8001286:	0002      	movs	r2, r0
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e297      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001294:	4b59      	ldr	r3, [pc, #356]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2202      	movs	r2, #2
 800129a:	4013      	ands	r3, r2
 800129c:	d0f1      	beq.n	8001282 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b57      	ldr	r3, [pc, #348]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	22f8      	movs	r2, #248	; 0xf8
 80012a4:	4393      	bics	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	00da      	lsls	r2, r3, #3
 80012ae:	4b53      	ldr	r3, [pc, #332]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80012b0:	430a      	orrs	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e018      	b.n	80012e8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b6:	4b51      	ldr	r3, [pc, #324]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b50      	ldr	r3, [pc, #320]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80012bc:	2101      	movs	r1, #1
 80012be:	438a      	bics	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fc03 	bl	8000acc <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012cc:	f7ff fbfe 	bl	8000acc <HAL_GetTick>
 80012d0:	0002      	movs	r2, r0
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e272      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	4b47      	ldr	r3, [pc, #284]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2202      	movs	r2, #2
 80012e4:	4013      	ands	r3, r2
 80012e6:	d1f1      	bne.n	80012cc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2208      	movs	r2, #8
 80012ee:	4013      	ands	r3, r2
 80012f0:	d036      	beq.n	8001360 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d019      	beq.n	800132e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fa:	4b40      	ldr	r3, [pc, #256]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80012fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012fe:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001300:	2101      	movs	r1, #1
 8001302:	430a      	orrs	r2, r1
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fbe1 	bl	8000acc <HAL_GetTick>
 800130a:	0003      	movs	r3, r0
 800130c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001310:	f7ff fbdc 	bl	8000acc <HAL_GetTick>
 8001314:	0002      	movs	r2, r0
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e250      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	2202      	movs	r2, #2
 8001328:	4013      	ands	r3, r2
 800132a:	d0f1      	beq.n	8001310 <HAL_RCC_OscConfig+0x24c>
 800132c:	e018      	b.n	8001360 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132e:	4b33      	ldr	r3, [pc, #204]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001332:	4b32      	ldr	r3, [pc, #200]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001334:	2101      	movs	r1, #1
 8001336:	438a      	bics	r2, r1
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133a:	f7ff fbc7 	bl	8000acc <HAL_GetTick>
 800133e:	0003      	movs	r3, r0
 8001340:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001344:	f7ff fbc2 	bl	8000acc <HAL_GetTick>
 8001348:	0002      	movs	r2, r0
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e236      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	2202      	movs	r2, #2
 800135c:	4013      	ands	r3, r2
 800135e:	d1f1      	bne.n	8001344 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2204      	movs	r2, #4
 8001366:	4013      	ands	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_RCC_OscConfig+0x2a8>
 800136a:	e0b5      	b.n	80014d8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136c:	201f      	movs	r0, #31
 800136e:	183b      	adds	r3, r7, r0
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001376:	69da      	ldr	r2, [r3, #28]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	055b      	lsls	r3, r3, #21
 800137c:	4013      	ands	r3, r2
 800137e:	d110      	bne.n	80013a2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001382:	69da      	ldr	r2, [r3, #28]
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	0549      	lsls	r1, r1, #21
 800138a:	430a      	orrs	r2, r1
 800138c:	61da      	str	r2, [r3, #28]
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 8001390:	69da      	ldr	r2, [r3, #28]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	055b      	lsls	r3, r3, #21
 8001396:	4013      	ands	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800139c:	183b      	adds	r3, r7, r0
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_RCC_OscConfig+0x344>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	d11a      	bne.n	80013e4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_RCC_OscConfig+0x344>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_RCC_OscConfig+0x344>)
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	0049      	lsls	r1, r1, #1
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013bc:	f7ff fb86 	bl	8000acc <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c6:	f7ff fb81 	bl	8000acc <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b64      	cmp	r3, #100	; 0x64
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e1f5      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_RCC_OscConfig+0x344>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4013      	ands	r3, r2
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d10f      	bne.n	800140c <HAL_RCC_OscConfig+0x348>
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80013ee:	6a1a      	ldr	r2, [r3, #32]
 80013f0:	4b02      	ldr	r3, [pc, #8]	; (80013fc <HAL_RCC_OscConfig+0x338>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	621a      	str	r2, [r3, #32]
 80013f8:	e036      	b.n	8001468 <HAL_RCC_OscConfig+0x3a4>
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	40021000 	.word	0x40021000
 8001400:	fffeffff 	.word	0xfffeffff
 8001404:	fffbffff 	.word	0xfffbffff
 8001408:	40007000 	.word	0x40007000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10c      	bne.n	800142e <HAL_RCC_OscConfig+0x36a>
 8001414:	4bca      	ldr	r3, [pc, #808]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	4bc9      	ldr	r3, [pc, #804]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800141a:	2101      	movs	r1, #1
 800141c:	438a      	bics	r2, r1
 800141e:	621a      	str	r2, [r3, #32]
 8001420:	4bc7      	ldr	r3, [pc, #796]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001422:	6a1a      	ldr	r2, [r3, #32]
 8001424:	4bc6      	ldr	r3, [pc, #792]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001426:	2104      	movs	r1, #4
 8001428:	438a      	bics	r2, r1
 800142a:	621a      	str	r2, [r3, #32]
 800142c:	e01c      	b.n	8001468 <HAL_RCC_OscConfig+0x3a4>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b05      	cmp	r3, #5
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x38c>
 8001436:	4bc2      	ldr	r3, [pc, #776]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001438:	6a1a      	ldr	r2, [r3, #32]
 800143a:	4bc1      	ldr	r3, [pc, #772]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800143c:	2104      	movs	r1, #4
 800143e:	430a      	orrs	r2, r1
 8001440:	621a      	str	r2, [r3, #32]
 8001442:	4bbf      	ldr	r3, [pc, #764]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	4bbe      	ldr	r3, [pc, #760]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001448:	2101      	movs	r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	621a      	str	r2, [r3, #32]
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0x3a4>
 8001450:	4bbb      	ldr	r3, [pc, #748]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	4bba      	ldr	r3, [pc, #744]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001456:	2101      	movs	r1, #1
 8001458:	438a      	bics	r2, r1
 800145a:	621a      	str	r2, [r3, #32]
 800145c:	4bb8      	ldr	r3, [pc, #736]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800145e:	6a1a      	ldr	r2, [r3, #32]
 8001460:	4bb7      	ldr	r3, [pc, #732]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001462:	2104      	movs	r1, #4
 8001464:	438a      	bics	r2, r1
 8001466:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d014      	beq.n	800149a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff fb2c 	bl	8000acc <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	e009      	b.n	800148e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fb27 	bl	8000acc <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	4aaf      	ldr	r2, [pc, #700]	; (8001744 <HAL_RCC_OscConfig+0x680>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e19a      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148e:	4bac      	ldr	r3, [pc, #688]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	2202      	movs	r2, #2
 8001494:	4013      	ands	r3, r2
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x3b6>
 8001498:	e013      	b.n	80014c2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fb17 	bl	8000acc <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a2:	e009      	b.n	80014b8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a4:	f7ff fb12 	bl	8000acc <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	4aa5      	ldr	r2, [pc, #660]	; (8001744 <HAL_RCC_OscConfig+0x680>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e185      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b8:	4ba1      	ldr	r3, [pc, #644]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	2202      	movs	r2, #2
 80014be:	4013      	ands	r3, r2
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014c2:	231f      	movs	r3, #31
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d105      	bne.n	80014d8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014cc:	4b9c      	ldr	r3, [pc, #624]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	4b9b      	ldr	r3, [pc, #620]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80014d2:	499d      	ldr	r1, [pc, #628]	; (8001748 <HAL_RCC_OscConfig+0x684>)
 80014d4:	400a      	ands	r2, r1
 80014d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2210      	movs	r2, #16
 80014de:	4013      	ands	r3, r2
 80014e0:	d063      	beq.n	80015aa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d12a      	bne.n	8001540 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ea:	4b95      	ldr	r3, [pc, #596]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80014ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ee:	4b94      	ldr	r3, [pc, #592]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80014f0:	2104      	movs	r1, #4
 80014f2:	430a      	orrs	r2, r1
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014f6:	4b92      	ldr	r3, [pc, #584]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80014f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fa:	4b91      	ldr	r3, [pc, #580]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80014fc:	2101      	movs	r1, #1
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fae3 	bl	8000acc <HAL_GetTick>
 8001506:	0003      	movs	r3, r0
 8001508:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800150c:	f7ff fade 	bl	8000acc <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e152      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800151e:	4b88      	ldr	r3, [pc, #544]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d0f1      	beq.n	800150c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001528:	4b85      	ldr	r3, [pc, #532]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800152a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152c:	22f8      	movs	r2, #248	; 0xf8
 800152e:	4393      	bics	r3, r2
 8001530:	0019      	movs	r1, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	00da      	lsls	r2, r3, #3
 8001538:	4b81      	ldr	r3, [pc, #516]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800153a:	430a      	orrs	r2, r1
 800153c:	635a      	str	r2, [r3, #52]	; 0x34
 800153e:	e034      	b.n	80015aa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	3305      	adds	r3, #5
 8001546:	d111      	bne.n	800156c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001548:	4b7d      	ldr	r3, [pc, #500]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800154a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154c:	4b7c      	ldr	r3, [pc, #496]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800154e:	2104      	movs	r1, #4
 8001550:	438a      	bics	r2, r1
 8001552:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001554:	4b7a      	ldr	r3, [pc, #488]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001558:	22f8      	movs	r2, #248	; 0xf8
 800155a:	4393      	bics	r3, r2
 800155c:	0019      	movs	r1, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	00da      	lsls	r2, r3, #3
 8001564:	4b76      	ldr	r3, [pc, #472]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001566:	430a      	orrs	r2, r1
 8001568:	635a      	str	r2, [r3, #52]	; 0x34
 800156a:	e01e      	b.n	80015aa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800156c:	4b74      	ldr	r3, [pc, #464]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800156e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001570:	4b73      	ldr	r3, [pc, #460]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001572:	2104      	movs	r1, #4
 8001574:	430a      	orrs	r2, r1
 8001576:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001578:	4b71      	ldr	r3, [pc, #452]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800157a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157c:	4b70      	ldr	r3, [pc, #448]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800157e:	2101      	movs	r1, #1
 8001580:	438a      	bics	r2, r1
 8001582:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7ff faa2 	bl	8000acc <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800158e:	f7ff fa9d 	bl	8000acc <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e111      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015a0:	4b67      	ldr	r3, [pc, #412]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80015a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a4:	2202      	movs	r2, #2
 80015a6:	4013      	ands	r3, r2
 80015a8:	d1f1      	bne.n	800158e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2220      	movs	r2, #32
 80015b0:	4013      	ands	r3, r2
 80015b2:	d05c      	beq.n	800166e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80015b4:	4b62      	ldr	r3, [pc, #392]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	220c      	movs	r2, #12
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d00e      	beq.n	80015de <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80015c0:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	220c      	movs	r2, #12
 80015c6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d114      	bne.n	80015f6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80015cc:	4b5c      	ldr	r3, [pc, #368]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	23c0      	movs	r3, #192	; 0xc0
 80015d2:	025b      	lsls	r3, r3, #9
 80015d4:	401a      	ands	r2, r3
 80015d6:	23c0      	movs	r3, #192	; 0xc0
 80015d8:	025b      	lsls	r3, r3, #9
 80015da:	429a      	cmp	r2, r3
 80015dc:	d10b      	bne.n	80015f6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015de:	4b58      	ldr	r3, [pc, #352]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80015e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	025b      	lsls	r3, r3, #9
 80015e6:	4013      	ands	r3, r2
 80015e8:	d040      	beq.n	800166c <HAL_RCC_OscConfig+0x5a8>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d03c      	beq.n	800166c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0e6      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01b      	beq.n	8001636 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015fe:	4b50      	ldr	r3, [pc, #320]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001602:	4b4f      	ldr	r3, [pc, #316]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	0249      	lsls	r1, r1, #9
 8001608:	430a      	orrs	r2, r1
 800160a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fa5e 	bl	8000acc <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001616:	f7ff fa59 	bl	8000acc <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e0cd      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001628:	4b45      	ldr	r3, [pc, #276]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800162a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	4013      	ands	r3, r2
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x552>
 8001634:	e01b      	b.n	800166e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001636:	4b42      	ldr	r3, [pc, #264]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163a:	4b41      	ldr	r3, [pc, #260]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800163c:	4943      	ldr	r1, [pc, #268]	; (800174c <HAL_RCC_OscConfig+0x688>)
 800163e:	400a      	ands	r2, r1
 8001640:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fa43 	bl	8000acc <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800164c:	f7ff fa3e 	bl	8000acc <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0b2      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800165e:	4b38      	ldr	r3, [pc, #224]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	025b      	lsls	r3, r3, #9
 8001666:	4013      	ands	r3, r2
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x588>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800166c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	2b00      	cmp	r3, #0
 8001674:	d100      	bne.n	8001678 <HAL_RCC_OscConfig+0x5b4>
 8001676:	e0a4      	b.n	80017c2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	220c      	movs	r2, #12
 800167e:	4013      	ands	r3, r2
 8001680:	2b08      	cmp	r3, #8
 8001682:	d100      	bne.n	8001686 <HAL_RCC_OscConfig+0x5c2>
 8001684:	e078      	b.n	8001778 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	2b02      	cmp	r3, #2
 800168c:	d14c      	bne.n	8001728 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168e:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 8001694:	492e      	ldr	r1, [pc, #184]	; (8001750 <HAL_RCC_OscConfig+0x68c>)
 8001696:	400a      	ands	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff fa17 	bl	8000acc <HAL_GetTick>
 800169e:	0003      	movs	r3, r0
 80016a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff fa12 	bl	8000acc <HAL_GetTick>
 80016a8:	0002      	movs	r2, r0
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e086      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	049b      	lsls	r3, r3, #18
 80016be:	4013      	ands	r3, r2
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	220f      	movs	r2, #15
 80016c8:	4393      	bics	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80016d2:	430a      	orrs	r2, r1
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4a1e      	ldr	r2, [pc, #120]	; (8001754 <HAL_RCC_OscConfig+0x690>)
 80016dc:	4013      	ands	r3, r2
 80016de:	0019      	movs	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	431a      	orrs	r2, r3
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80016ec:	430a      	orrs	r2, r1
 80016ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	0449      	lsls	r1, r1, #17
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff f9e5 	bl	8000acc <HAL_GetTick>
 8001702:	0003      	movs	r3, r0
 8001704:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff f9e0 	bl	8000acc <HAL_GetTick>
 800170c:	0002      	movs	r2, r0
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e054      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	049b      	lsls	r3, r3, #18
 8001722:	4013      	ands	r3, r2
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x644>
 8001726:	e04c      	b.n	80017c2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <HAL_RCC_OscConfig+0x67c>)
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <HAL_RCC_OscConfig+0x68c>)
 8001730:	400a      	ands	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff f9ca 	bl	8000acc <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173c:	e015      	b.n	800176a <HAL_RCC_OscConfig+0x6a6>
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	40021000 	.word	0x40021000
 8001744:	00001388 	.word	0x00001388
 8001748:	efffffff 	.word	0xefffffff
 800174c:	fffeffff 	.word	0xfffeffff
 8001750:	feffffff 	.word	0xfeffffff
 8001754:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff f9b8 	bl	8000acc <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e02c      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_RCC_OscConfig+0x708>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	049b      	lsls	r3, r3, #18
 8001772:	4013      	ands	r3, r2
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x694>
 8001776:	e024      	b.n	80017c2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e01f      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_RCC_OscConfig+0x708>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_RCC_OscConfig+0x708>)
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	23c0      	movs	r3, #192	; 0xc0
 8001794:	025b      	lsls	r3, r3, #9
 8001796:	401a      	ands	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	429a      	cmp	r2, r3
 800179e:	d10e      	bne.n	80017be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	220f      	movs	r2, #15
 80017a4:	401a      	ands	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d107      	bne.n	80017be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	23f0      	movs	r3, #240	; 0xf0
 80017b2:	039b      	lsls	r3, r3, #14
 80017b4:	401a      	ands	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b008      	add	sp, #32
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0bf      	b.n	8001964 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e4:	4b61      	ldr	r3, [pc, #388]	; (800196c <HAL_RCC_ClockConfig+0x19c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4013      	ands	r3, r2
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d911      	bls.n	8001816 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b5e      	ldr	r3, [pc, #376]	; (800196c <HAL_RCC_ClockConfig+0x19c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2201      	movs	r2, #1
 80017f8:	4393      	bics	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	4b5b      	ldr	r3, [pc, #364]	; (800196c <HAL_RCC_ClockConfig+0x19c>)
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001804:	4b59      	ldr	r3, [pc, #356]	; (800196c <HAL_RCC_ClockConfig+0x19c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2201      	movs	r2, #1
 800180a:	4013      	ands	r3, r2
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0a6      	b.n	8001964 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d015      	beq.n	800184c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2204      	movs	r2, #4
 8001826:	4013      	ands	r3, r2
 8001828:	d006      	beq.n	8001838 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800182a:	4b51      	ldr	r3, [pc, #324]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 8001830:	21e0      	movs	r1, #224	; 0xe0
 8001832:	00c9      	lsls	r1, r1, #3
 8001834:	430a      	orrs	r2, r1
 8001836:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001838:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	22f0      	movs	r2, #240	; 0xf0
 800183e:	4393      	bics	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 8001848:	430a      	orrs	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2201      	movs	r2, #1
 8001852:	4013      	ands	r3, r2
 8001854:	d04c      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b44      	ldr	r3, [pc, #272]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	029b      	lsls	r3, r3, #10
 8001866:	4013      	ands	r3, r2
 8001868:	d120      	bne.n	80018ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e07a      	b.n	8001964 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	049b      	lsls	r3, r3, #18
 800187e:	4013      	ands	r3, r2
 8001880:	d114      	bne.n	80018ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e06e      	b.n	8001964 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800188e:	4b38      	ldr	r3, [pc, #224]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 8001890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	025b      	lsls	r3, r3, #9
 8001896:	4013      	ands	r3, r2
 8001898:	d108      	bne.n	80018ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e062      	b.n	8001964 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189e:	4b34      	ldr	r3, [pc, #208]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2202      	movs	r2, #2
 80018a4:	4013      	ands	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e05b      	b.n	8001964 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2203      	movs	r2, #3
 80018b2:	4393      	bics	r3, r2
 80018b4:	0019      	movs	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c0:	f7ff f904 	bl	8000acc <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c8:	e009      	b.n	80018de <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ca:	f7ff f8ff 	bl	8000acc <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	4a27      	ldr	r2, [pc, #156]	; (8001974 <HAL_RCC_ClockConfig+0x1a4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e042      	b.n	8001964 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	220c      	movs	r2, #12
 80018e4:	401a      	ands	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d1ec      	bne.n	80018ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_RCC_ClockConfig+0x19c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4013      	ands	r3, r2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d211      	bcs.n	8001922 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_RCC_ClockConfig+0x19c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2201      	movs	r2, #1
 8001904:	4393      	bics	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_RCC_ClockConfig+0x19c>)
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_RCC_ClockConfig+0x19c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	4013      	ands	r3, r2
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d001      	beq.n	8001922 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e020      	b.n	8001964 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2204      	movs	r2, #4
 8001928:	4013      	ands	r3, r2
 800192a:	d009      	beq.n	8001940 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a11      	ldr	r2, [pc, #68]	; (8001978 <HAL_RCC_ClockConfig+0x1a8>)
 8001932:	4013      	ands	r3, r2
 8001934:	0019      	movs	r1, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 800193c:	430a      	orrs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001940:	f000 f820 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001944:	0001      	movs	r1, r0
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_ClockConfig+0x1a0>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	220f      	movs	r2, #15
 800194e:	4013      	ands	r3, r2
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x1ac>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	000a      	movs	r2, r1
 8001956:	40da      	lsrs	r2, r3
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1b0>)
 800195a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff f86f 	bl	8000a40 <HAL_InitTick>
  
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	b004      	add	sp, #16
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40022000 	.word	0x40022000
 8001970:	40021000 	.word	0x40021000
 8001974:	00001388 	.word	0x00001388
 8001978:	fffff8ff 	.word	0xfffff8ff
 800197c:	08004004 	.word	0x08004004
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b08f      	sub	sp, #60	; 0x3c
 8001988:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800198a:	2314      	movs	r3, #20
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xec>)
 8001990:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001992:	c313      	stmia	r3!, {r0, r1, r4}
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4a36      	ldr	r2, [pc, #216]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xf0>)
 800199c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800199e:	c313      	stmia	r3!, {r0, r1, r4}
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80019b8:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xf4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	220c      	movs	r2, #12
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d047      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0xd4>
 80019c8:	d849      	bhi.n	8001a5e <HAL_RCC_GetSysClockFreq+0xda>
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d002      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x50>
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d003      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x56>
 80019d2:	e044      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d4:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019d8:	e044      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019dc:	0c9b      	lsrs	r3, r3, #18
 80019de:	220f      	movs	r2, #15
 80019e0:	4013      	ands	r3, r2
 80019e2:	2214      	movs	r2, #20
 80019e4:	18ba      	adds	r2, r7, r2
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xf4>)
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	220f      	movs	r2, #15
 80019f0:	4013      	ands	r3, r2
 80019f2:	1d3a      	adds	r2, r7, #4
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fa:	23c0      	movs	r3, #192	; 0xc0
 80019fc:	025b      	lsls	r3, r3, #9
 80019fe:	401a      	ands	r2, r3
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	025b      	lsls	r3, r3, #9
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d109      	bne.n	8001a1c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a0a:	481c      	ldr	r0, [pc, #112]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a0c:	f7fe fb7c 	bl	8000108 <__udivsi3>
 8001a10:	0003      	movs	r3, r0
 8001a12:	001a      	movs	r2, r3
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	4353      	muls	r3, r2
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
 8001a1a:	e01a      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a1e:	23c0      	movs	r3, #192	; 0xc0
 8001a20:	025b      	lsls	r3, r3, #9
 8001a22:	401a      	ands	r2, r3
 8001a24:	23c0      	movs	r3, #192	; 0xc0
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d109      	bne.n	8001a40 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a2e:	4814      	ldr	r0, [pc, #80]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a30:	f7fe fb6a 	bl	8000108 <__udivsi3>
 8001a34:	0003      	movs	r3, r0
 8001a36:	001a      	movs	r2, r3
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	4353      	muls	r3, r2
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a42:	480e      	ldr	r0, [pc, #56]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a44:	f7fe fb60 	bl	8000108 <__udivsi3>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	4353      	muls	r3, r2
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a56:	e005      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a5c:	e002      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a62:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b00f      	add	sp, #60	; 0x3c
 8001a6c:	bd90      	pop	{r4, r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	08003fe4 	.word	0x08003fe4
 8001a74:	08003ff4 	.word	0x08003ff4
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	007a1200 	.word	0x007a1200
 8001a80:	02dc6c00 	.word	0x02dc6c00

08001a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a88:	4b02      	ldr	r3, [pc, #8]	; (8001a94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	20000000 	.word	0x20000000

08001a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a9c:	f7ff fff2 	bl	8001a84 <HAL_RCC_GetHCLKFreq>
 8001aa0:	0001      	movs	r1, r0
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	0a1b      	lsrs	r3, r3, #8
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	4013      	ands	r3, r2
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	40d9      	lsrs	r1, r3
 8001ab2:	000b      	movs	r3, r1
}    
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	08004014 	.word	0x08004014

08001ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	025b      	lsls	r3, r3, #9
 8001adc:	4013      	ands	r3, r2
 8001ade:	d100      	bne.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ae0:	e08e      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ae2:	2017      	movs	r0, #23
 8001ae4:	183b      	adds	r3, r7, r0
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aea:	4b6e      	ldr	r3, [pc, #440]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	055b      	lsls	r3, r3, #21
 8001af2:	4013      	ands	r3, r2
 8001af4:	d110      	bne.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b6b      	ldr	r3, [pc, #428]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af8:	69da      	ldr	r2, [r3, #28]
 8001afa:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	0549      	lsls	r1, r1, #21
 8001b00:	430a      	orrs	r2, r1
 8001b02:	61da      	str	r2, [r3, #28]
 8001b04:	4b67      	ldr	r3, [pc, #412]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b06:	69da      	ldr	r2, [r3, #28]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	055b      	lsls	r3, r3, #21
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b12:	183b      	adds	r3, r7, r0
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	d11a      	bne.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b24:	4b60      	ldr	r3, [pc, #384]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b5f      	ldr	r3, [pc, #380]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b2a:	2180      	movs	r1, #128	; 0x80
 8001b2c:	0049      	lsls	r1, r1, #1
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7fe ffcb 	bl	8000acc <HAL_GetTick>
 8001b36:	0003      	movs	r3, r0
 8001b38:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3a:	e008      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3c:	f7fe ffc6 	bl	8000acc <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e0a6      	b.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b56      	ldr	r3, [pc, #344]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b5a:	4b52      	ldr	r3, [pc, #328]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b5c:	6a1a      	ldr	r2, [r3, #32]
 8001b5e:	23c0      	movs	r3, #192	; 0xc0
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4013      	ands	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d034      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	23c0      	movs	r3, #192	; 0xc0
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d02c      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b7c:	4b49      	ldr	r3, [pc, #292]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a4a      	ldr	r2, [pc, #296]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b88:	6a1a      	ldr	r2, [r3, #32]
 8001b8a:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	0249      	lsls	r1, r1, #9
 8001b90:	430a      	orrs	r2, r1
 8001b92:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b94:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b96:	6a1a      	ldr	r2, [r3, #32]
 8001b98:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b9a:	4945      	ldr	r1, [pc, #276]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ba0:	4b40      	ldr	r3, [pc, #256]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4013      	ands	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bae:	f7fe ff8d 	bl	8000acc <HAL_GetTick>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb6:	e009      	b.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f7fe ff88 	bl	8000acc <HAL_GetTick>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	4a3c      	ldr	r2, [pc, #240]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e067      	b.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bcc:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bd6:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a34      	ldr	r2, [pc, #208]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001be6:	430a      	orrs	r2, r1
 8001be8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bea:	2317      	movs	r3, #23
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bf6:	69da      	ldr	r2, [r3, #28]
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bfa:	492f      	ldr	r1, [pc, #188]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	d009      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c0a:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	2203      	movs	r2, #3
 8001c10:	4393      	bics	r3, r2
 8001c12:	0019      	movs	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d009      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2220      	movs	r2, #32
 8001c42:	4013      	ands	r3, r2
 8001c44:	d009      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c46:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	4393      	bics	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	4013      	ands	r3, r2
 8001c64:	d009      	beq.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c66:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	4393      	bics	r3, r2
 8001c6e:	0019      	movs	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c76:	430a      	orrs	r2, r1
 8001c78:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4013      	ands	r3, r2
 8001c84:	d009      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	2240      	movs	r2, #64	; 0x40
 8001c8c:	4393      	bics	r3, r2
 8001c8e:	0019      	movs	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c96:	430a      	orrs	r2, r1
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b006      	add	sp, #24
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	fffffcff 	.word	0xfffffcff
 8001cb0:	fffeffff 	.word	0xfffeffff
 8001cb4:	00001388 	.word	0x00001388
 8001cb8:	efffffff 	.word	0xefffffff
 8001cbc:	fffcffff 	.word	0xfffcffff

08001cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e042      	b.n	8001d58 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	223d      	movs	r2, #61	; 0x3d
 8001cd6:	5c9b      	ldrb	r3, [r3, r2]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d107      	bne.n	8001cee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	223c      	movs	r2, #60	; 0x3c
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7fe fd13 	bl	8000714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	223d      	movs	r2, #61	; 0x3d
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	0019      	movs	r1, r3
 8001d00:	0010      	movs	r0, r2
 8001d02:	f000 fad7 	bl	80022b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2246      	movs	r2, #70	; 0x46
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	223e      	movs	r2, #62	; 0x3e
 8001d12:	2101      	movs	r1, #1
 8001d14:	5499      	strb	r1, [r3, r2]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	223f      	movs	r2, #63	; 0x3f
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	5499      	strb	r1, [r3, r2]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2240      	movs	r2, #64	; 0x40
 8001d22:	2101      	movs	r1, #1
 8001d24:	5499      	strb	r1, [r3, r2]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2241      	movs	r2, #65	; 0x41
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2242      	movs	r2, #66	; 0x42
 8001d32:	2101      	movs	r1, #1
 8001d34:	5499      	strb	r1, [r3, r2]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2243      	movs	r2, #67	; 0x43
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	5499      	strb	r1, [r3, r2]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2244      	movs	r2, #68	; 0x44
 8001d42:	2101      	movs	r1, #1
 8001d44:	5499      	strb	r1, [r3, r2]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2245      	movs	r2, #69	; 0x45
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	223d      	movs	r2, #61	; 0x3d
 8001d52:	2101      	movs	r1, #1
 8001d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e042      	b.n	8001df8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	223d      	movs	r2, #61	; 0x3d
 8001d76:	5c9b      	ldrb	r3, [r3, r2]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d107      	bne.n	8001d8e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	223c      	movs	r2, #60	; 0x3c
 8001d82:	2100      	movs	r1, #0
 8001d84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 f839 	bl	8001e00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	223d      	movs	r2, #61	; 0x3d
 8001d92:	2102      	movs	r1, #2
 8001d94:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	0019      	movs	r1, r3
 8001da0:	0010      	movs	r0, r2
 8001da2:	f000 fa87 	bl	80022b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2246      	movs	r2, #70	; 0x46
 8001daa:	2101      	movs	r1, #1
 8001dac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	223e      	movs	r2, #62	; 0x3e
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	223f      	movs	r2, #63	; 0x3f
 8001dba:	2101      	movs	r1, #1
 8001dbc:	5499      	strb	r1, [r3, r2]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2240      	movs	r2, #64	; 0x40
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	5499      	strb	r1, [r3, r2]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2241      	movs	r2, #65	; 0x41
 8001dca:	2101      	movs	r1, #1
 8001dcc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2242      	movs	r2, #66	; 0x42
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	5499      	strb	r1, [r3, r2]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2243      	movs	r2, #67	; 0x43
 8001dda:	2101      	movs	r1, #1
 8001ddc:	5499      	strb	r1, [r3, r2]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2244      	movs	r2, #68	; 0x44
 8001de2:	2101      	movs	r1, #1
 8001de4:	5499      	strb	r1, [r3, r2]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2245      	movs	r2, #69	; 0x45
 8001dea:	2101      	movs	r1, #1
 8001dec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	223d      	movs	r2, #61	; 0x3d
 8001df2:	2101      	movs	r1, #1
 8001df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d108      	bne.n	8001e32 <HAL_TIM_PWM_Start+0x22>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	223e      	movs	r2, #62	; 0x3e
 8001e24:	5c9b      	ldrb	r3, [r3, r2]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	1e5a      	subs	r2, r3, #1
 8001e2c:	4193      	sbcs	r3, r2
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	e01f      	b.n	8001e72 <HAL_TIM_PWM_Start+0x62>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d108      	bne.n	8001e4a <HAL_TIM_PWM_Start+0x3a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	223f      	movs	r2, #63	; 0x3f
 8001e3c:	5c9b      	ldrb	r3, [r3, r2]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	1e5a      	subs	r2, r3, #1
 8001e44:	4193      	sbcs	r3, r2
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	e013      	b.n	8001e72 <HAL_TIM_PWM_Start+0x62>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d108      	bne.n	8001e62 <HAL_TIM_PWM_Start+0x52>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	5c9b      	ldrb	r3, [r3, r2]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	1e5a      	subs	r2, r3, #1
 8001e5c:	4193      	sbcs	r3, r2
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	e007      	b.n	8001e72 <HAL_TIM_PWM_Start+0x62>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2241      	movs	r2, #65	; 0x41
 8001e66:	5c9b      	ldrb	r3, [r3, r2]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	1e5a      	subs	r2, r3, #1
 8001e6e:	4193      	sbcs	r3, r2
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e074      	b.n	8001f64 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d104      	bne.n	8001e8a <HAL_TIM_PWM_Start+0x7a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	223e      	movs	r2, #62	; 0x3e
 8001e84:	2102      	movs	r1, #2
 8001e86:	5499      	strb	r1, [r3, r2]
 8001e88:	e013      	b.n	8001eb2 <HAL_TIM_PWM_Start+0xa2>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d104      	bne.n	8001e9a <HAL_TIM_PWM_Start+0x8a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	223f      	movs	r2, #63	; 0x3f
 8001e94:	2102      	movs	r1, #2
 8001e96:	5499      	strb	r1, [r3, r2]
 8001e98:	e00b      	b.n	8001eb2 <HAL_TIM_PWM_Start+0xa2>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d104      	bne.n	8001eaa <HAL_TIM_PWM_Start+0x9a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2240      	movs	r2, #64	; 0x40
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	5499      	strb	r1, [r3, r2]
 8001ea8:	e003      	b.n	8001eb2 <HAL_TIM_PWM_Start+0xa2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2241      	movs	r2, #65	; 0x41
 8001eae:	2102      	movs	r1, #2
 8001eb0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6839      	ldr	r1, [r7, #0]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f000 fd10 	bl	80028e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a29      	ldr	r2, [pc, #164]	; (8001f6c <HAL_TIM_PWM_Start+0x15c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00e      	beq.n	8001ee8 <HAL_TIM_PWM_Start+0xd8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <HAL_TIM_PWM_Start+0x160>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_TIM_PWM_Start+0xd8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <HAL_TIM_PWM_Start+0x164>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <HAL_TIM_PWM_Start+0xd8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a25      	ldr	r2, [pc, #148]	; (8001f78 <HAL_TIM_PWM_Start+0x168>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d101      	bne.n	8001eec <HAL_TIM_PWM_Start+0xdc>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_TIM_PWM_Start+0xde>
 8001eec:	2300      	movs	r3, #0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	0209      	lsls	r1, r1, #8
 8001f00:	430a      	orrs	r2, r1
 8001f02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a18      	ldr	r2, [pc, #96]	; (8001f6c <HAL_TIM_PWM_Start+0x15c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00f      	beq.n	8001f2e <HAL_TIM_PWM_Start+0x11e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	05db      	lsls	r3, r3, #23
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d009      	beq.n	8001f2e <HAL_TIM_PWM_Start+0x11e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_TIM_PWM_Start+0x16c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_TIM_PWM_Start+0x11e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <HAL_TIM_PWM_Start+0x160>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d111      	bne.n	8001f52 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2207      	movs	r2, #7
 8001f36:	4013      	ands	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b06      	cmp	r3, #6
 8001f3e:	d010      	beq.n	8001f62 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f50:	e007      	b.n	8001f62 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b004      	add	sp, #16
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40012c00 	.word	0x40012c00
 8001f70:	40014000 	.word	0x40014000
 8001f74:	40014400 	.word	0x40014400
 8001f78:	40014800 	.word	0x40014800
 8001f7c:	40000400 	.word	0x40000400

08001f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8c:	2317      	movs	r3, #23
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	223c      	movs	r2, #60	; 0x3c
 8001f98:	5c9b      	ldrb	r3, [r3, r2]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e0ad      	b.n	80020fe <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	223c      	movs	r2, #60	; 0x3c
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	d100      	bne.n	8001fb2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001fb0:	e076      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	d900      	bls.n	8001fba <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001fb8:	e095      	b.n	80020e6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d04e      	beq.n	800205e <HAL_TIM_PWM_ConfigChannel+0xde>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d900      	bls.n	8001fc8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001fc6:	e08e      	b.n	80020e6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d021      	beq.n	8002018 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001fd4:	e087      	b.n	80020e6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	0011      	movs	r1, r2
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 f9e8 	bl	80023b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2108      	movs	r1, #8
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2104      	movs	r1, #4
 8002000:	438a      	bics	r2, r1
 8002002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6999      	ldr	r1, [r3, #24]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	619a      	str	r2, [r3, #24]
      break;
 8002016:	e06b      	b.n	80020f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f000 fa4f 	bl	80024c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	0109      	lsls	r1, r1, #4
 8002034:	430a      	orrs	r2, r1
 8002036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4931      	ldr	r1, [pc, #196]	; (8002108 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002044:	400a      	ands	r2, r1
 8002046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6999      	ldr	r1, [r3, #24]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	021a      	lsls	r2, r3, #8
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	619a      	str	r2, [r3, #24]
      break;
 800205c:	e048      	b.n	80020f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	0011      	movs	r1, r2
 8002066:	0018      	movs	r0, r3
 8002068:	f000 fab0 	bl	80025cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2108      	movs	r1, #8
 8002078:	430a      	orrs	r2, r1
 800207a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2104      	movs	r1, #4
 8002088:	438a      	bics	r2, r1
 800208a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69d9      	ldr	r1, [r3, #28]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	61da      	str	r2, [r3, #28]
      break;
 800209e:	e027      	b.n	80020f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	0011      	movs	r1, r2
 80020a8:	0018      	movs	r0, r3
 80020aa:	f000 fb15 	bl	80026d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69da      	ldr	r2, [r3, #28]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	0109      	lsls	r1, r1, #4
 80020bc:	430a      	orrs	r2, r1
 80020be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	490f      	ldr	r1, [pc, #60]	; (8002108 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80020cc:	400a      	ands	r2, r1
 80020ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69d9      	ldr	r1, [r3, #28]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	021a      	lsls	r2, r3, #8
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	61da      	str	r2, [r3, #28]
      break;
 80020e4:	e004      	b.n	80020f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80020e6:	2317      	movs	r3, #23
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
      break;
 80020ee:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	223c      	movs	r2, #60	; 0x3c
 80020f4:	2100      	movs	r1, #0
 80020f6:	5499      	strb	r1, [r3, r2]

  return status;
 80020f8:	2317      	movs	r3, #23
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b006      	add	sp, #24
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	fffffbff 	.word	0xfffffbff

0800210c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002116:	230f      	movs	r3, #15
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	223c      	movs	r2, #60	; 0x3c
 8002122:	5c9b      	ldrb	r3, [r3, r2]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_TIM_ConfigClockSource+0x20>
 8002128:	2302      	movs	r3, #2
 800212a:	e0bc      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x19a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	223c      	movs	r2, #60	; 0x3c
 8002130:	2101      	movs	r1, #1
 8002132:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	223d      	movs	r2, #61	; 0x3d
 8002138:	2102      	movs	r1, #2
 800213a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2277      	movs	r2, #119	; 0x77
 8002148:	4393      	bics	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	0192      	lsls	r2, r2, #6
 8002164:	4293      	cmp	r3, r2
 8002166:	d040      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0xde>
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	0192      	lsls	r2, r2, #6
 800216c:	4293      	cmp	r3, r2
 800216e:	d900      	bls.n	8002172 <HAL_TIM_ConfigClockSource+0x66>
 8002170:	e088      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	0152      	lsls	r2, r2, #5
 8002176:	4293      	cmp	r3, r2
 8002178:	d100      	bne.n	800217c <HAL_TIM_ConfigClockSource+0x70>
 800217a:	e088      	b.n	800228e <HAL_TIM_ConfigClockSource+0x182>
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	0152      	lsls	r2, r2, #5
 8002180:	4293      	cmp	r3, r2
 8002182:	d900      	bls.n	8002186 <HAL_TIM_ConfigClockSource+0x7a>
 8002184:	e07e      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 8002186:	2b70      	cmp	r3, #112	; 0x70
 8002188:	d018      	beq.n	80021bc <HAL_TIM_ConfigClockSource+0xb0>
 800218a:	d900      	bls.n	800218e <HAL_TIM_ConfigClockSource+0x82>
 800218c:	e07a      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 800218e:	2b60      	cmp	r3, #96	; 0x60
 8002190:	d04f      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x126>
 8002192:	d900      	bls.n	8002196 <HAL_TIM_ConfigClockSource+0x8a>
 8002194:	e076      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 8002196:	2b50      	cmp	r3, #80	; 0x50
 8002198:	d03b      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0x106>
 800219a:	d900      	bls.n	800219e <HAL_TIM_ConfigClockSource+0x92>
 800219c:	e072      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d057      	beq.n	8002252 <HAL_TIM_ConfigClockSource+0x146>
 80021a2:	d900      	bls.n	80021a6 <HAL_TIM_ConfigClockSource+0x9a>
 80021a4:	e06e      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 80021a6:	2b30      	cmp	r3, #48	; 0x30
 80021a8:	d063      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x166>
 80021aa:	d86b      	bhi.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d060      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x166>
 80021b0:	d868      	bhi.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d05d      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x166>
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d05b      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x166>
 80021ba:	e063      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6899      	ldr	r1, [r3, #8]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f000 fb68 	bl	80028a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2277      	movs	r2, #119	; 0x77
 80021dc:	4313      	orrs	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	609a      	str	r2, [r3, #8]
      break;
 80021e8:	e052      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6899      	ldr	r1, [r3, #8]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f000 fb51 	bl	80028a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	01c9      	lsls	r1, r1, #7
 800220c:	430a      	orrs	r2, r1
 800220e:	609a      	str	r2, [r3, #8]
      break;
 8002210:	e03e      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6859      	ldr	r1, [r3, #4]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	001a      	movs	r2, r3
 8002220:	f000 fac4 	bl	80027ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2150      	movs	r1, #80	; 0x50
 800222a:	0018      	movs	r0, r3
 800222c:	f000 fb1e 	bl	800286c <TIM_ITRx_SetConfig>
      break;
 8002230:	e02e      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6859      	ldr	r1, [r3, #4]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	001a      	movs	r2, r3
 8002240:	f000 fae2 	bl	8002808 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2160      	movs	r1, #96	; 0x60
 800224a:	0018      	movs	r0, r3
 800224c:	f000 fb0e 	bl	800286c <TIM_ITRx_SetConfig>
      break;
 8002250:	e01e      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	001a      	movs	r2, r3
 8002260:	f000 faa4 	bl	80027ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2140      	movs	r1, #64	; 0x40
 800226a:	0018      	movs	r0, r3
 800226c:	f000 fafe 	bl	800286c <TIM_ITRx_SetConfig>
      break;
 8002270:	e00e      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0019      	movs	r1, r3
 800227c:	0010      	movs	r0, r2
 800227e:	f000 faf5 	bl	800286c <TIM_ITRx_SetConfig>
      break;
 8002282:	e005      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002284:	230f      	movs	r3, #15
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
      break;
 800228c:	e000      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800228e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	223d      	movs	r2, #61	; 0x3d
 8002294:	2101      	movs	r1, #1
 8002296:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	223c      	movs	r2, #60	; 0x3c
 800229c:	2100      	movs	r1, #0
 800229e:	5499      	strb	r1, [r3, r2]

  return status;
 80022a0:	230f      	movs	r3, #15
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	781b      	ldrb	r3, [r3, #0]
}
 80022a6:	0018      	movs	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b004      	add	sp, #16
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	ffff00ff 	.word	0xffff00ff

080022b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a34      	ldr	r2, [pc, #208]	; (8002398 <TIM_Base_SetConfig+0xe4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d008      	beq.n	80022de <TIM_Base_SetConfig+0x2a>
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	05db      	lsls	r3, r3, #23
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d003      	beq.n	80022de <TIM_Base_SetConfig+0x2a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a30      	ldr	r2, [pc, #192]	; (800239c <TIM_Base_SetConfig+0xe8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d108      	bne.n	80022f0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2270      	movs	r2, #112	; 0x70
 80022e2:	4393      	bics	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a29      	ldr	r2, [pc, #164]	; (8002398 <TIM_Base_SetConfig+0xe4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d018      	beq.n	800232a <TIM_Base_SetConfig+0x76>
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	05db      	lsls	r3, r3, #23
 80022fe:	429a      	cmp	r2, r3
 8002300:	d013      	beq.n	800232a <TIM_Base_SetConfig+0x76>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <TIM_Base_SetConfig+0xe8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00f      	beq.n	800232a <TIM_Base_SetConfig+0x76>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <TIM_Base_SetConfig+0xec>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00b      	beq.n	800232a <TIM_Base_SetConfig+0x76>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <TIM_Base_SetConfig+0xf0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <TIM_Base_SetConfig+0x76>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <TIM_Base_SetConfig+0xf4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d003      	beq.n	800232a <TIM_Base_SetConfig+0x76>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a21      	ldr	r2, [pc, #132]	; (80023ac <TIM_Base_SetConfig+0xf8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d108      	bne.n	800233c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a20      	ldr	r2, [pc, #128]	; (80023b0 <TIM_Base_SetConfig+0xfc>)
 800232e:	4013      	ands	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2280      	movs	r2, #128	; 0x80
 8002340:	4393      	bics	r3, r2
 8002342:	001a      	movs	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <TIM_Base_SetConfig+0xe4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00b      	beq.n	8002382 <TIM_Base_SetConfig+0xce>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <TIM_Base_SetConfig+0xf0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <TIM_Base_SetConfig+0xce>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <TIM_Base_SetConfig+0xf4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d003      	beq.n	8002382 <TIM_Base_SetConfig+0xce>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <TIM_Base_SetConfig+0xf8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d103      	bne.n	800238a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	615a      	str	r2, [r3, #20]
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b004      	add	sp, #16
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40012c00 	.word	0x40012c00
 800239c:	40000400 	.word	0x40000400
 80023a0:	40002000 	.word	0x40002000
 80023a4:	40014000 	.word	0x40014000
 80023a8:	40014400 	.word	0x40014400
 80023ac:	40014800 	.word	0x40014800
 80023b0:	fffffcff 	.word	0xfffffcff

080023b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	2201      	movs	r2, #1
 80023c4:	4393      	bics	r3, r2
 80023c6:	001a      	movs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2270      	movs	r2, #112	; 0x70
 80023e2:	4393      	bics	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2203      	movs	r2, #3
 80023ea:	4393      	bics	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2202      	movs	r2, #2
 80023fc:	4393      	bics	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a27      	ldr	r2, [pc, #156]	; (80024ac <TIM_OC1_SetConfig+0xf8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00b      	beq.n	800242a <TIM_OC1_SetConfig+0x76>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a26      	ldr	r2, [pc, #152]	; (80024b0 <TIM_OC1_SetConfig+0xfc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <TIM_OC1_SetConfig+0x76>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <TIM_OC1_SetConfig+0x100>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d003      	beq.n	800242a <TIM_OC1_SetConfig+0x76>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <TIM_OC1_SetConfig+0x104>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d10c      	bne.n	8002444 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2208      	movs	r2, #8
 800242e:	4393      	bics	r3, r2
 8002430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2204      	movs	r2, #4
 8002440:	4393      	bics	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a19      	ldr	r2, [pc, #100]	; (80024ac <TIM_OC1_SetConfig+0xf8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00b      	beq.n	8002464 <TIM_OC1_SetConfig+0xb0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <TIM_OC1_SetConfig+0xfc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d007      	beq.n	8002464 <TIM_OC1_SetConfig+0xb0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <TIM_OC1_SetConfig+0x100>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d003      	beq.n	8002464 <TIM_OC1_SetConfig+0xb0>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <TIM_OC1_SetConfig+0x104>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d111      	bne.n	8002488 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4a15      	ldr	r2, [pc, #84]	; (80024bc <TIM_OC1_SetConfig+0x108>)
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <TIM_OC1_SetConfig+0x10c>)
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	621a      	str	r2, [r3, #32]
}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b006      	add	sp, #24
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	40012c00 	.word	0x40012c00
 80024b0:	40014000 	.word	0x40014000
 80024b4:	40014400 	.word	0x40014400
 80024b8:	40014800 	.word	0x40014800
 80024bc:	fffffeff 	.word	0xfffffeff
 80024c0:	fffffdff 	.word	0xfffffdff

080024c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	2210      	movs	r2, #16
 80024d4:	4393      	bics	r3, r2
 80024d6:	001a      	movs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a2e      	ldr	r2, [pc, #184]	; (80025ac <TIM_OC2_SetConfig+0xe8>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a2d      	ldr	r2, [pc, #180]	; (80025b0 <TIM_OC2_SetConfig+0xec>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2220      	movs	r2, #32
 800250e:	4393      	bics	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <TIM_OC2_SetConfig+0xf0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d10d      	bne.n	8002542 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	4393      	bics	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2240      	movs	r2, #64	; 0x40
 800253e:	4393      	bics	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <TIM_OC2_SetConfig+0xf0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00b      	beq.n	8002562 <TIM_OC2_SetConfig+0x9e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <TIM_OC2_SetConfig+0xf4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <TIM_OC2_SetConfig+0x9e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <TIM_OC2_SetConfig+0xf8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <TIM_OC2_SetConfig+0x9e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <TIM_OC2_SetConfig+0xfc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d113      	bne.n	800258a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <TIM_OC2_SetConfig+0x100>)
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <TIM_OC2_SetConfig+0x104>)
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	621a      	str	r2, [r3, #32]
}
 80025a4:	46c0      	nop			; (mov r8, r8)
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b006      	add	sp, #24
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	ffff8fff 	.word	0xffff8fff
 80025b0:	fffffcff 	.word	0xfffffcff
 80025b4:	40012c00 	.word	0x40012c00
 80025b8:	40014000 	.word	0x40014000
 80025bc:	40014400 	.word	0x40014400
 80025c0:	40014800 	.word	0x40014800
 80025c4:	fffffbff 	.word	0xfffffbff
 80025c8:	fffff7ff 	.word	0xfffff7ff

080025cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a35      	ldr	r2, [pc, #212]	; (80026b0 <TIM_OC3_SetConfig+0xe4>)
 80025dc:	401a      	ands	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2270      	movs	r2, #112	; 0x70
 80025f8:	4393      	bics	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2203      	movs	r2, #3
 8002600:	4393      	bics	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	4a28      	ldr	r2, [pc, #160]	; (80026b4 <TIM_OC3_SetConfig+0xe8>)
 8002612:	4013      	ands	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <TIM_OC3_SetConfig+0xec>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10d      	bne.n	8002646 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	4a23      	ldr	r2, [pc, #140]	; (80026bc <TIM_OC3_SetConfig+0xf0>)
 800262e:	4013      	ands	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <TIM_OC3_SetConfig+0xf4>)
 8002642:	4013      	ands	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1b      	ldr	r2, [pc, #108]	; (80026b8 <TIM_OC3_SetConfig+0xec>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00b      	beq.n	8002666 <TIM_OC3_SetConfig+0x9a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <TIM_OC3_SetConfig+0xf8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d007      	beq.n	8002666 <TIM_OC3_SetConfig+0x9a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <TIM_OC3_SetConfig+0xfc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d003      	beq.n	8002666 <TIM_OC3_SetConfig+0x9a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <TIM_OC3_SetConfig+0x100>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d113      	bne.n	800268e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <TIM_OC3_SetConfig+0x104>)
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4a18      	ldr	r2, [pc, #96]	; (80026d4 <TIM_OC3_SetConfig+0x108>)
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	621a      	str	r2, [r3, #32]
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b006      	add	sp, #24
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	fffffeff 	.word	0xfffffeff
 80026b4:	fffffdff 	.word	0xfffffdff
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	fffff7ff 	.word	0xfffff7ff
 80026c0:	fffffbff 	.word	0xfffffbff
 80026c4:	40014000 	.word	0x40014000
 80026c8:	40014400 	.word	0x40014400
 80026cc:	40014800 	.word	0x40014800
 80026d0:	ffffefff 	.word	0xffffefff
 80026d4:	ffffdfff 	.word	0xffffdfff

080026d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a28      	ldr	r2, [pc, #160]	; (8002788 <TIM_OC4_SetConfig+0xb0>)
 80026e8:	401a      	ands	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <TIM_OC4_SetConfig+0xb4>)
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4a21      	ldr	r2, [pc, #132]	; (8002790 <TIM_OC4_SetConfig+0xb8>)
 800270c:	4013      	ands	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <TIM_OC4_SetConfig+0xbc>)
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	031b      	lsls	r3, r3, #12
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a19      	ldr	r2, [pc, #100]	; (8002798 <TIM_OC4_SetConfig+0xc0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d00b      	beq.n	8002750 <TIM_OC4_SetConfig+0x78>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a18      	ldr	r2, [pc, #96]	; (800279c <TIM_OC4_SetConfig+0xc4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d007      	beq.n	8002750 <TIM_OC4_SetConfig+0x78>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a17      	ldr	r2, [pc, #92]	; (80027a0 <TIM_OC4_SetConfig+0xc8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d003      	beq.n	8002750 <TIM_OC4_SetConfig+0x78>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a16      	ldr	r2, [pc, #88]	; (80027a4 <TIM_OC4_SetConfig+0xcc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d109      	bne.n	8002764 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <TIM_OC4_SetConfig+0xd0>)
 8002754:	4013      	ands	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	019b      	lsls	r3, r3, #6
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	621a      	str	r2, [r3, #32]
}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b006      	add	sp, #24
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	ffffefff 	.word	0xffffefff
 800278c:	ffff8fff 	.word	0xffff8fff
 8002790:	fffffcff 	.word	0xfffffcff
 8002794:	ffffdfff 	.word	0xffffdfff
 8002798:	40012c00 	.word	0x40012c00
 800279c:	40014000 	.word	0x40014000
 80027a0:	40014400 	.word	0x40014400
 80027a4:	40014800 	.word	0x40014800
 80027a8:	ffffbfff 	.word	0xffffbfff

080027ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4393      	bics	r3, r2
 80027c6:	001a      	movs	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	22f0      	movs	r2, #240	; 0xf0
 80027d6:	4393      	bics	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	220a      	movs	r2, #10
 80027e8:	4393      	bics	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	621a      	str	r2, [r3, #32]
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b006      	add	sp, #24
 8002806:	bd80      	pop	{r7, pc}

08002808 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	2210      	movs	r2, #16
 800281a:	4393      	bics	r3, r2
 800281c:	001a      	movs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <TIM_TI2_ConfigInputStage+0x60>)
 8002832:	4013      	ands	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	031b      	lsls	r3, r3, #12
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	22a0      	movs	r2, #160	; 0xa0
 8002844:	4393      	bics	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b006      	add	sp, #24
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	ffff0fff 	.word	0xffff0fff

0800286c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2270      	movs	r2, #112	; 0x70
 8002880:	4393      	bics	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	2207      	movs	r2, #7
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	609a      	str	r2, [r3, #8]
}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b004      	add	sp, #16
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	4a09      	ldr	r2, [pc, #36]	; (80028dc <TIM_ETR_SetConfig+0x3c>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	021a      	lsls	r2, r3, #8
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b006      	add	sp, #24
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	ffff00ff 	.word	0xffff00ff

080028e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	221f      	movs	r2, #31
 80028f0:	4013      	ands	r3, r2
 80028f2:	2201      	movs	r2, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	0013      	movs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	43d2      	mvns	r2, r2
 8002902:	401a      	ands	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a1a      	ldr	r2, [r3, #32]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	211f      	movs	r1, #31
 8002910:	400b      	ands	r3, r1
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4099      	lsls	r1, r3
 8002916:	000b      	movs	r3, r1
 8002918:	431a      	orrs	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	621a      	str	r2, [r3, #32]
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b006      	add	sp, #24
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	223c      	movs	r2, #60	; 0x3c
 8002936:	5c9b      	ldrb	r3, [r3, r2]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800293c:	2302      	movs	r3, #2
 800293e:	e047      	b.n	80029d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	223c      	movs	r2, #60	; 0x3c
 8002944:	2101      	movs	r1, #1
 8002946:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	223d      	movs	r2, #61	; 0x3d
 800294c:	2102      	movs	r1, #2
 800294e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2270      	movs	r2, #112	; 0x70
 8002964:	4393      	bics	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a16      	ldr	r2, [pc, #88]	; (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00f      	beq.n	80029a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	05db      	lsls	r3, r3, #23
 800298c:	429a      	cmp	r2, r3
 800298e:	d009      	beq.n	80029a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a11      	ldr	r2, [pc, #68]	; (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d10c      	bne.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2280      	movs	r2, #128	; 0x80
 80029a8:	4393      	bics	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	223d      	movs	r2, #61	; 0x3d
 80029c2:	2101      	movs	r1, #1
 80029c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	223c      	movs	r2, #60	; 0x3c
 80029ca:	2100      	movs	r1, #0
 80029cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b004      	add	sp, #16
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40000400 	.word	0x40000400
 80029e0:	40014000 	.word	0x40014000

080029e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	223c      	movs	r2, #60	; 0x3c
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e03e      	b.n	8002a7e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	223c      	movs	r2, #60	; 0x3c
 8002a04:	2101      	movs	r1, #1
 8002a06:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	22ff      	movs	r2, #255	; 0xff
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	001a      	movs	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002a38:	401a      	ands	r2, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002a46:	401a      	ands	r2, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002a54:	401a      	ands	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a0e      	ldr	r2, [pc, #56]	; (8002a9c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002a62:	401a      	ands	r2, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	223c      	movs	r2, #60	; 0x3c
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	0018      	movs	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b004      	add	sp, #16
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	fffffcff 	.word	0xfffffcff
 8002a8c:	fffffbff 	.word	0xfffffbff
 8002a90:	fffff7ff 	.word	0xfffff7ff
 8002a94:	ffffefff 	.word	0xffffefff
 8002a98:	ffffdfff 	.word	0xffffdfff
 8002a9c:	ffffbfff 	.word	0xffffbfff

08002aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e044      	b.n	8002b3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d107      	bne.n	8002aca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2274      	movs	r2, #116	; 0x74
 8002abe:	2100      	movs	r1, #0
 8002ac0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7fd fee5 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2224      	movs	r2, #36	; 0x24
 8002ace:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2101      	movs	r1, #1
 8002adc:	438a      	bics	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 fc36 	bl	8003354 <UART_SetConfig>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e024      	b.n	8002b3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f000 fdb1 	bl	8003664 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	490d      	ldr	r1, [pc, #52]	; (8002b44 <HAL_UART_Init+0xa4>)
 8002b0e:	400a      	ands	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	212a      	movs	r1, #42	; 0x2a
 8002b1e:	438a      	bics	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f000 fe49 	bl	80037cc <UART_CheckIdleState>
 8002b3a:	0003      	movs	r3, r0
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b002      	add	sp, #8
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	ffffb7ff 	.word	0xffffb7ff

08002b48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	1dbb      	adds	r3, r7, #6
 8002b56:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d000      	beq.n	8002b62 <HAL_UART_Transmit+0x1a>
 8002b60:	e096      	b.n	8002c90 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_UART_Transmit+0x28>
 8002b68:	1dbb      	adds	r3, r7, #6
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e08e      	b.n	8002c92 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	015b      	lsls	r3, r3, #5
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d109      	bne.n	8002b94 <HAL_UART_Transmit+0x4c>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e07e      	b.n	8002c92 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2274      	movs	r2, #116	; 0x74
 8002b98:	5c9b      	ldrb	r3, [r3, r2]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_UART_Transmit+0x5a>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e077      	b.n	8002c92 <HAL_UART_Transmit+0x14a>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2274      	movs	r2, #116	; 0x74
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2221      	movs	r2, #33	; 0x21
 8002bb6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bb8:	f7fd ff88 	bl	8000acc <HAL_GetTick>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1dba      	adds	r2, r7, #6
 8002bc4:	2150      	movs	r1, #80	; 0x50
 8002bc6:	8812      	ldrh	r2, [r2, #0]
 8002bc8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1dba      	adds	r2, r7, #6
 8002bce:	2152      	movs	r1, #82	; 0x52
 8002bd0:	8812      	ldrh	r2, [r2, #0]
 8002bd2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	015b      	lsls	r3, r3, #5
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d108      	bne.n	8002bf2 <HAL_UART_Transmit+0xaa>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	e003      	b.n	8002bfa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2274      	movs	r2, #116	; 0x74
 8002bfe:	2100      	movs	r1, #0
 8002c00:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002c02:	e02d      	b.n	8002c60 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	0013      	movs	r3, r2
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	f000 fe23 	bl	800385c <UART_WaitOnFlagUntilTimeout>
 8002c16:	1e03      	subs	r3, r0, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e039      	b.n	8002c92 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0dd2      	lsrs	r2, r2, #23
 8002c30:	b292      	uxth	r2, r2
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	3302      	adds	r3, #2
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	e008      	b.n	8002c4e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	781a      	ldrb	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	b292      	uxth	r2, r2
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2252      	movs	r2, #82	; 0x52
 8002c52:	5a9b      	ldrh	r3, [r3, r2]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b299      	uxth	r1, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2252      	movs	r2, #82	; 0x52
 8002c5e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2252      	movs	r2, #82	; 0x52
 8002c64:	5a9b      	ldrh	r3, [r3, r2]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1cb      	bne.n	8002c04 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	0013      	movs	r3, r2
 8002c76:	2200      	movs	r2, #0
 8002c78:	2140      	movs	r1, #64	; 0x40
 8002c7a:	f000 fdef 	bl	800385c <UART_WaitOnFlagUntilTimeout>
 8002c7e:	1e03      	subs	r3, r0, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e005      	b.n	8002c92 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e000      	b.n	8002c92 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
  }
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b008      	add	sp, #32
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b088      	sub	sp, #32
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	1dbb      	adds	r3, r7, #6
 8002ca6:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d150      	bne.n	8002d52 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_UART_Receive_IT+0x24>
 8002cb6:	1dbb      	adds	r3, r7, #6
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e048      	b.n	8002d54 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	015b      	lsls	r3, r3, #5
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d109      	bne.n	8002ce2 <HAL_UART_Receive_IT+0x48>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d105      	bne.n	8002ce2 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d001      	beq.n	8002ce2 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e038      	b.n	8002d54 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2274      	movs	r2, #116	; 0x74
 8002ce6:	5c9b      	ldrb	r3, [r3, r2]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Receive_IT+0x56>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e031      	b.n	8002d54 <HAL_UART_Receive_IT+0xba>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2274      	movs	r2, #116	; 0x74
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	041b      	lsls	r3, r3, #16
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d019      	beq.n	8002d40 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d10:	613b      	str	r3, [r7, #16]
  return(result);
 8002d12:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	2301      	movs	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	04c9      	lsls	r1, r1, #19
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	f383 8810 	msr	PRIMASK, r3
}
 8002d3e:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d40:	1dbb      	adds	r3, r7, #6
 8002d42:	881a      	ldrh	r2, [r3, #0]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 fe4b 	bl	80039e4 <UART_Start_Receive_IT>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	e000      	b.n	8002d54 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
  }
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b008      	add	sp, #32
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b0ab      	sub	sp, #172	; 0xac
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	22a4      	movs	r2, #164	; 0xa4
 8002d6c:	18b9      	adds	r1, r7, r2
 8002d6e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	20a0      	movs	r0, #160	; 0xa0
 8002d78:	1839      	adds	r1, r7, r0
 8002d7a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	219c      	movs	r1, #156	; 0x9c
 8002d84:	1879      	adds	r1, r7, r1
 8002d86:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d88:	0011      	movs	r1, r2
 8002d8a:	18bb      	adds	r3, r7, r2
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a99      	ldr	r2, [pc, #612]	; (8002ff4 <HAL_UART_IRQHandler+0x298>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	2298      	movs	r2, #152	; 0x98
 8002d94:	18bc      	adds	r4, r7, r2
 8002d96:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002d98:	18bb      	adds	r3, r7, r2
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d114      	bne.n	8002dca <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2220      	movs	r2, #32
 8002da6:	4013      	ands	r3, r2
 8002da8:	d00f      	beq.n	8002dca <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002daa:	183b      	adds	r3, r7, r0
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2220      	movs	r2, #32
 8002db0:	4013      	ands	r3, r2
 8002db2:	d00a      	beq.n	8002dca <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d100      	bne.n	8002dbe <HAL_UART_IRQHandler+0x62>
 8002dbc:	e296      	b.n	80032ec <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	0010      	movs	r0, r2
 8002dc6:	4798      	blx	r3
      }
      return;
 8002dc8:	e290      	b.n	80032ec <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002dca:	2398      	movs	r3, #152	; 0x98
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d100      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x7a>
 8002dd4:	e114      	b.n	8003000 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dd6:	239c      	movs	r3, #156	; 0x9c
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4013      	ands	r3, r2
 8002de0:	d106      	bne.n	8002df0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002de2:	23a0      	movs	r3, #160	; 0xa0
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a83      	ldr	r2, [pc, #524]	; (8002ff8 <HAL_UART_IRQHandler+0x29c>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	d100      	bne.n	8002df0 <HAL_UART_IRQHandler+0x94>
 8002dee:	e107      	b.n	8003000 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002df0:	23a4      	movs	r3, #164	; 0xa4
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2201      	movs	r2, #1
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d012      	beq.n	8002e22 <HAL_UART_IRQHandler+0xc6>
 8002dfc:	23a0      	movs	r3, #160	; 0xa0
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4013      	ands	r3, r2
 8002e08:	d00b      	beq.n	8002e22 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2280      	movs	r2, #128	; 0x80
 8002e16:	589b      	ldr	r3, [r3, r2]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e22:	23a4      	movs	r3, #164	; 0xa4
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d011      	beq.n	8002e52 <HAL_UART_IRQHandler+0xf6>
 8002e2e:	239c      	movs	r3, #156	; 0x9c
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2201      	movs	r2, #1
 8002e36:	4013      	ands	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	589b      	ldr	r3, [r3, r2]
 8002e48:	2204      	movs	r2, #4
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e52:	23a4      	movs	r3, #164	; 0xa4
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d011      	beq.n	8002e82 <HAL_UART_IRQHandler+0x126>
 8002e5e:	239c      	movs	r3, #156	; 0x9c
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	4013      	ands	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2204      	movs	r2, #4
 8002e70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2280      	movs	r2, #128	; 0x80
 8002e76:	589b      	ldr	r3, [r3, r2]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e82:	23a4      	movs	r3, #164	; 0xa4
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d017      	beq.n	8002ebe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e8e:	23a0      	movs	r3, #160	; 0xa0
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2220      	movs	r2, #32
 8002e96:	4013      	ands	r3, r2
 8002e98:	d105      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e9a:	239c      	movs	r3, #156	; 0x9c
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ea4:	d00b      	beq.n	8002ebe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2208      	movs	r2, #8
 8002eac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	589b      	ldr	r3, [r3, r2]
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ebe:	23a4      	movs	r3, #164	; 0xa4
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x198>
 8002ecc:	23a0      	movs	r3, #160	; 0xa0
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	04db      	lsls	r3, r3, #19
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	0112      	lsls	r2, r2, #4
 8002ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2280      	movs	r2, #128	; 0x80
 8002ee8:	589b      	ldr	r3, [r3, r2]
 8002eea:	2220      	movs	r2, #32
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2180      	movs	r1, #128	; 0x80
 8002ef2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2280      	movs	r2, #128	; 0x80
 8002ef8:	589b      	ldr	r3, [r3, r2]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d100      	bne.n	8002f00 <HAL_UART_IRQHandler+0x1a4>
 8002efe:	e1f7      	b.n	80032f0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f00:	23a4      	movs	r3, #164	; 0xa4
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2220      	movs	r2, #32
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d00e      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f0c:	23a0      	movs	r3, #160	; 0xa0
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2220      	movs	r2, #32
 8002f14:	4013      	ands	r3, r2
 8002f16:	d008      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	0010      	movs	r0, r2
 8002f28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	589b      	ldr	r3, [r3, r2]
 8002f30:	2194      	movs	r1, #148	; 0x94
 8002f32:	187a      	adds	r2, r7, r1
 8002f34:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2240      	movs	r2, #64	; 0x40
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b40      	cmp	r3, #64	; 0x40
 8002f42:	d004      	beq.n	8002f4e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f44:	187b      	adds	r3, r7, r1
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2228      	movs	r2, #40	; 0x28
 8002f4a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f4c:	d047      	beq.n	8002fde <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 fdf7 	bl	8003b44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2240      	movs	r2, #64	; 0x40
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d137      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f64:	f3ef 8310 	mrs	r3, PRIMASK
 8002f68:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f6c:	2090      	movs	r0, #144	; 0x90
 8002f6e:	183a      	adds	r2, r7, r0
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	2301      	movs	r3, #1
 8002f74:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f78:	f383 8810 	msr	PRIMASK, r3
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2140      	movs	r1, #64	; 0x40
 8002f8a:	438a      	bics	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	183b      	adds	r3, r7, r0
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f96:	f383 8810 	msr	PRIMASK, r3
}
 8002f9a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d012      	beq.n	8002fca <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <HAL_UART_IRQHandler+0x2a0>)
 8002faa:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7fd feab 	bl	8000d0c <HAL_DMA_Abort_IT>
 8002fb6:	1e03      	subs	r3, r0, #0
 8002fb8:	d01a      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc8:	e012      	b.n	8002ff0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 f9ad 	bl	800332c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd2:	e00d      	b.n	8002ff0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 f9a8 	bl	800332c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e008      	b.n	8002ff0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f000 f9a3 	bl	800332c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	2100      	movs	r1, #0
 8002fec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002fee:	e17f      	b.n	80032f0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	46c0      	nop			; (mov r8, r8)
    return;
 8002ff2:	e17d      	b.n	80032f0 <HAL_UART_IRQHandler+0x594>
 8002ff4:	0000080f 	.word	0x0000080f
 8002ff8:	04000120 	.word	0x04000120
 8002ffc:	08003c09 	.word	0x08003c09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003004:	2b01      	cmp	r3, #1
 8003006:	d000      	beq.n	800300a <HAL_UART_IRQHandler+0x2ae>
 8003008:	e131      	b.n	800326e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800300a:	23a4      	movs	r3, #164	; 0xa4
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2210      	movs	r2, #16
 8003012:	4013      	ands	r3, r2
 8003014:	d100      	bne.n	8003018 <HAL_UART_IRQHandler+0x2bc>
 8003016:	e12a      	b.n	800326e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003018:	23a0      	movs	r3, #160	; 0xa0
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2210      	movs	r2, #16
 8003020:	4013      	ands	r3, r2
 8003022:	d100      	bne.n	8003026 <HAL_UART_IRQHandler+0x2ca>
 8003024:	e123      	b.n	800326e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2210      	movs	r2, #16
 800302c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2240      	movs	r2, #64	; 0x40
 8003036:	4013      	ands	r3, r2
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d000      	beq.n	800303e <HAL_UART_IRQHandler+0x2e2>
 800303c:	e09b      	b.n	8003176 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	217e      	movs	r1, #126	; 0x7e
 8003048:	187b      	adds	r3, r7, r1
 800304a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800304c:	187b      	adds	r3, r7, r1
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d100      	bne.n	8003056 <HAL_UART_IRQHandler+0x2fa>
 8003054:	e14e      	b.n	80032f4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2258      	movs	r2, #88	; 0x58
 800305a:	5a9b      	ldrh	r3, [r3, r2]
 800305c:	187a      	adds	r2, r7, r1
 800305e:	8812      	ldrh	r2, [r2, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d300      	bcc.n	8003066 <HAL_UART_IRQHandler+0x30a>
 8003064:	e146      	b.n	80032f4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	187a      	adds	r2, r7, r1
 800306a:	215a      	movs	r1, #90	; 0x5a
 800306c:	8812      	ldrh	r2, [r2, #0]
 800306e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b20      	cmp	r3, #32
 8003078:	d06e      	beq.n	8003158 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800307a:	f3ef 8310 	mrs	r3, PRIMASK
 800307e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003082:	67bb      	str	r3, [r7, #120]	; 0x78
 8003084:	2301      	movs	r3, #1
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	f383 8810 	msr	PRIMASK, r3
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	499a      	ldr	r1, [pc, #616]	; (8003304 <HAL_UART_IRQHandler+0x5a8>)
 800309c:	400a      	ands	r2, r1
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a6:	f383 8810 	msr	PRIMASK, r3
}
 80030aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ac:	f3ef 8310 	mrs	r3, PRIMASK
 80030b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80030b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b4:	677b      	str	r3, [r7, #116]	; 0x74
 80030b6:	2301      	movs	r3, #1
 80030b8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030bc:	f383 8810 	msr	PRIMASK, r3
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2101      	movs	r1, #1
 80030ce:	438a      	bics	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d8:	f383 8810 	msr	PRIMASK, r3
}
 80030dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030de:	f3ef 8310 	mrs	r3, PRIMASK
 80030e2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80030e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e6:	673b      	str	r3, [r7, #112]	; 0x70
 80030e8:	2301      	movs	r3, #1
 80030ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ee:	f383 8810 	msr	PRIMASK, r3
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2140      	movs	r1, #64	; 0x40
 8003100:	438a      	bics	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003106:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310a:	f383 8810 	msr	PRIMASK, r3
}
 800310e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800311c:	f3ef 8310 	mrs	r3, PRIMASK
 8003120:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003122:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003124:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003126:	2301      	movs	r3, #1
 8003128:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800312c:	f383 8810 	msr	PRIMASK, r3
}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2110      	movs	r1, #16
 800313e:	438a      	bics	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003144:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003148:	f383 8810 	msr	PRIMASK, r3
}
 800314c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	0018      	movs	r0, r3
 8003154:	f7fd fda2 	bl	8000c9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2258      	movs	r2, #88	; 0x58
 800315c:	5a9a      	ldrh	r2, [r3, r2]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	215a      	movs	r1, #90	; 0x5a
 8003162:	5a5b      	ldrh	r3, [r3, r1]
 8003164:	b29b      	uxth	r3, r3
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	b29a      	uxth	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	0011      	movs	r1, r2
 800316e:	0018      	movs	r0, r3
 8003170:	f000 f8e4 	bl	800333c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003174:	e0be      	b.n	80032f4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2258      	movs	r2, #88	; 0x58
 800317a:	5a99      	ldrh	r1, [r3, r2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	225a      	movs	r2, #90	; 0x5a
 8003180:	5a9b      	ldrh	r3, [r3, r2]
 8003182:	b29a      	uxth	r2, r3
 8003184:	208e      	movs	r0, #142	; 0x8e
 8003186:	183b      	adds	r3, r7, r0
 8003188:	1a8a      	subs	r2, r1, r2
 800318a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	225a      	movs	r2, #90	; 0x5a
 8003190:	5a9b      	ldrh	r3, [r3, r2]
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d100      	bne.n	800319a <HAL_UART_IRQHandler+0x43e>
 8003198:	e0ae      	b.n	80032f8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800319a:	183b      	adds	r3, r7, r0
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d100      	bne.n	80031a4 <HAL_UART_IRQHandler+0x448>
 80031a2:	e0a9      	b.n	80032f8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031a4:	f3ef 8310 	mrs	r3, PRIMASK
 80031a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80031aa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ac:	2488      	movs	r4, #136	; 0x88
 80031ae:	193a      	adds	r2, r7, r4
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	2301      	movs	r3, #1
 80031b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f383 8810 	msr	PRIMASK, r3
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	494f      	ldr	r1, [pc, #316]	; (8003308 <HAL_UART_IRQHandler+0x5ac>)
 80031ca:	400a      	ands	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	193b      	adds	r3, r7, r4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f383 8810 	msr	PRIMASK, r3
}
 80031da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031dc:	f3ef 8310 	mrs	r3, PRIMASK
 80031e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80031e2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e4:	2484      	movs	r4, #132	; 0x84
 80031e6:	193a      	adds	r2, r7, r4
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	2301      	movs	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f383 8810 	msr	PRIMASK, r3
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2101      	movs	r1, #1
 8003202:	438a      	bics	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	193b      	adds	r3, r7, r4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	f383 8810 	msr	PRIMASK, r3
}
 8003212:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003226:	f3ef 8310 	mrs	r3, PRIMASK
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322e:	2480      	movs	r4, #128	; 0x80
 8003230:	193a      	adds	r2, r7, r4
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	2301      	movs	r3, #1
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	f383 8810 	msr	PRIMASK, r3
}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2110      	movs	r1, #16
 800324c:	438a      	bics	r2, r1
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	193b      	adds	r3, r7, r4
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	f383 8810 	msr	PRIMASK, r3
}
 800325c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800325e:	183b      	adds	r3, r7, r0
 8003260:	881a      	ldrh	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0011      	movs	r1, r2
 8003266:	0018      	movs	r0, r3
 8003268:	f000 f868 	bl	800333c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800326c:	e044      	b.n	80032f8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800326e:	23a4      	movs	r3, #164	; 0xa4
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	035b      	lsls	r3, r3, #13
 8003278:	4013      	ands	r3, r2
 800327a:	d010      	beq.n	800329e <HAL_UART_IRQHandler+0x542>
 800327c:	239c      	movs	r3, #156	; 0x9c
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	03db      	lsls	r3, r3, #15
 8003286:	4013      	ands	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2280      	movs	r2, #128	; 0x80
 8003290:	0352      	lsls	r2, r2, #13
 8003292:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	0018      	movs	r0, r3
 8003298:	f000 fe60 	bl	8003f5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800329c:	e02f      	b.n	80032fe <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800329e:	23a4      	movs	r3, #164	; 0xa4
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	4013      	ands	r3, r2
 80032a8:	d00f      	beq.n	80032ca <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032aa:	23a0      	movs	r3, #160	; 0xa0
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	4013      	ands	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01e      	beq.n	80032fc <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	0010      	movs	r0, r2
 80032c6:	4798      	blx	r3
    }
    return;
 80032c8:	e018      	b.n	80032fc <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032ca:	23a4      	movs	r3, #164	; 0xa4
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2240      	movs	r2, #64	; 0x40
 80032d2:	4013      	ands	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_UART_IRQHandler+0x5a2>
 80032d6:	23a0      	movs	r3, #160	; 0xa0
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2240      	movs	r2, #64	; 0x40
 80032de:	4013      	ands	r3, r2
 80032e0:	d00d      	beq.n	80032fe <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f000 fca6 	bl	8003c36 <UART_EndTransmit_IT>
    return;
 80032ea:	e008      	b.n	80032fe <HAL_UART_IRQHandler+0x5a2>
      return;
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	e006      	b.n	80032fe <HAL_UART_IRQHandler+0x5a2>
    return;
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	e004      	b.n	80032fe <HAL_UART_IRQHandler+0x5a2>
      return;
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	e002      	b.n	80032fe <HAL_UART_IRQHandler+0x5a2>
      return;
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	e000      	b.n	80032fe <HAL_UART_IRQHandler+0x5a2>
    return;
 80032fc:	46c0      	nop			; (mov r8, r8)
  }

}
 80032fe:	46bd      	mov	sp, r7
 8003300:	b02b      	add	sp, #172	; 0xac
 8003302:	bd90      	pop	{r4, r7, pc}
 8003304:	fffffeff 	.word	0xfffffeff
 8003308:	fffffedf 	.word	0xfffffedf

0800330c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b002      	add	sp, #8
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	000a      	movs	r2, r1
 8003346:	1cbb      	adds	r3, r7, #2
 8003348:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	46bd      	mov	sp, r7
 800334e:	b002      	add	sp, #8
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800335c:	231e      	movs	r3, #30
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4aaf      	ldr	r2, [pc, #700]	; (8003640 <UART_SetConfig+0x2ec>)
 8003384:	4013      	ands	r3, r2
 8003386:	0019      	movs	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	430a      	orrs	r2, r1
 8003390:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4aaa      	ldr	r2, [pc, #680]	; (8003644 <UART_SetConfig+0x2f0>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4aa1      	ldr	r2, [pc, #644]	; (8003648 <UART_SetConfig+0x2f4>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a9d      	ldr	r2, [pc, #628]	; (800364c <UART_SetConfig+0x2f8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d127      	bne.n	800342a <UART_SetConfig+0xd6>
 80033da:	4b9d      	ldr	r3, [pc, #628]	; (8003650 <UART_SetConfig+0x2fc>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	2203      	movs	r2, #3
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d00d      	beq.n	8003402 <UART_SetConfig+0xae>
 80033e6:	d81b      	bhi.n	8003420 <UART_SetConfig+0xcc>
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d014      	beq.n	8003416 <UART_SetConfig+0xc2>
 80033ec:	d818      	bhi.n	8003420 <UART_SetConfig+0xcc>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <UART_SetConfig+0xa4>
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d00a      	beq.n	800340c <UART_SetConfig+0xb8>
 80033f6:	e013      	b.n	8003420 <UART_SetConfig+0xcc>
 80033f8:	231f      	movs	r3, #31
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e065      	b.n	80034ce <UART_SetConfig+0x17a>
 8003402:	231f      	movs	r3, #31
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	2202      	movs	r2, #2
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	e060      	b.n	80034ce <UART_SetConfig+0x17a>
 800340c:	231f      	movs	r3, #31
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	2204      	movs	r2, #4
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e05b      	b.n	80034ce <UART_SetConfig+0x17a>
 8003416:	231f      	movs	r3, #31
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	2208      	movs	r2, #8
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e056      	b.n	80034ce <UART_SetConfig+0x17a>
 8003420:	231f      	movs	r3, #31
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	2210      	movs	r2, #16
 8003426:	701a      	strb	r2, [r3, #0]
 8003428:	e051      	b.n	80034ce <UART_SetConfig+0x17a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a89      	ldr	r2, [pc, #548]	; (8003654 <UART_SetConfig+0x300>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d134      	bne.n	800349e <UART_SetConfig+0x14a>
 8003434:	4b86      	ldr	r3, [pc, #536]	; (8003650 <UART_SetConfig+0x2fc>)
 8003436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003438:	23c0      	movs	r3, #192	; 0xc0
 800343a:	029b      	lsls	r3, r3, #10
 800343c:	4013      	ands	r3, r2
 800343e:	22c0      	movs	r2, #192	; 0xc0
 8003440:	0292      	lsls	r2, r2, #10
 8003442:	4293      	cmp	r3, r2
 8003444:	d017      	beq.n	8003476 <UART_SetConfig+0x122>
 8003446:	22c0      	movs	r2, #192	; 0xc0
 8003448:	0292      	lsls	r2, r2, #10
 800344a:	4293      	cmp	r3, r2
 800344c:	d822      	bhi.n	8003494 <UART_SetConfig+0x140>
 800344e:	2280      	movs	r2, #128	; 0x80
 8003450:	0292      	lsls	r2, r2, #10
 8003452:	4293      	cmp	r3, r2
 8003454:	d019      	beq.n	800348a <UART_SetConfig+0x136>
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	0292      	lsls	r2, r2, #10
 800345a:	4293      	cmp	r3, r2
 800345c:	d81a      	bhi.n	8003494 <UART_SetConfig+0x140>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <UART_SetConfig+0x118>
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	0252      	lsls	r2, r2, #9
 8003466:	4293      	cmp	r3, r2
 8003468:	d00a      	beq.n	8003480 <UART_SetConfig+0x12c>
 800346a:	e013      	b.n	8003494 <UART_SetConfig+0x140>
 800346c:	231f      	movs	r3, #31
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e02b      	b.n	80034ce <UART_SetConfig+0x17a>
 8003476:	231f      	movs	r3, #31
 8003478:	18fb      	adds	r3, r7, r3
 800347a:	2202      	movs	r2, #2
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e026      	b.n	80034ce <UART_SetConfig+0x17a>
 8003480:	231f      	movs	r3, #31
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	2204      	movs	r2, #4
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	e021      	b.n	80034ce <UART_SetConfig+0x17a>
 800348a:	231f      	movs	r3, #31
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2208      	movs	r2, #8
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e01c      	b.n	80034ce <UART_SetConfig+0x17a>
 8003494:	231f      	movs	r3, #31
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2210      	movs	r2, #16
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e017      	b.n	80034ce <UART_SetConfig+0x17a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a6d      	ldr	r2, [pc, #436]	; (8003658 <UART_SetConfig+0x304>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d104      	bne.n	80034b2 <UART_SetConfig+0x15e>
 80034a8:	231f      	movs	r3, #31
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	e00d      	b.n	80034ce <UART_SetConfig+0x17a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a69      	ldr	r2, [pc, #420]	; (800365c <UART_SetConfig+0x308>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d104      	bne.n	80034c6 <UART_SetConfig+0x172>
 80034bc:	231f      	movs	r3, #31
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e003      	b.n	80034ce <UART_SetConfig+0x17a>
 80034c6:	231f      	movs	r3, #31
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	2210      	movs	r2, #16
 80034cc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d15d      	bne.n	8003596 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80034da:	231f      	movs	r3, #31
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d015      	beq.n	8003510 <UART_SetConfig+0x1bc>
 80034e4:	dc18      	bgt.n	8003518 <UART_SetConfig+0x1c4>
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00d      	beq.n	8003506 <UART_SetConfig+0x1b2>
 80034ea:	dc15      	bgt.n	8003518 <UART_SetConfig+0x1c4>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <UART_SetConfig+0x1a2>
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d005      	beq.n	8003500 <UART_SetConfig+0x1ac>
 80034f4:	e010      	b.n	8003518 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f6:	f7fe facf 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 80034fa:	0003      	movs	r3, r0
 80034fc:	61bb      	str	r3, [r7, #24]
        break;
 80034fe:	e012      	b.n	8003526 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003500:	4b57      	ldr	r3, [pc, #348]	; (8003660 <UART_SetConfig+0x30c>)
 8003502:	61bb      	str	r3, [r7, #24]
        break;
 8003504:	e00f      	b.n	8003526 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003506:	f7fe fa3d 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 800350a:	0003      	movs	r3, r0
 800350c:	61bb      	str	r3, [r7, #24]
        break;
 800350e:	e00a      	b.n	8003526 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	61bb      	str	r3, [r7, #24]
        break;
 8003516:	e006      	b.n	8003526 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800351c:	231e      	movs	r3, #30
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
        break;
 8003524:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d100      	bne.n	800352e <UART_SetConfig+0x1da>
 800352c:	e07b      	b.n	8003626 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	005a      	lsls	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	18d2      	adds	r2, r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	0019      	movs	r1, r3
 8003540:	0010      	movs	r0, r2
 8003542:	f7fc fde1 	bl	8000108 <__udivsi3>
 8003546:	0003      	movs	r3, r0
 8003548:	b29b      	uxth	r3, r3
 800354a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b0f      	cmp	r3, #15
 8003550:	d91c      	bls.n	800358c <UART_SetConfig+0x238>
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	025b      	lsls	r3, r3, #9
 8003558:	429a      	cmp	r2, r3
 800355a:	d217      	bcs.n	800358c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	b29a      	uxth	r2, r3
 8003560:	200e      	movs	r0, #14
 8003562:	183b      	adds	r3, r7, r0
 8003564:	210f      	movs	r1, #15
 8003566:	438a      	bics	r2, r1
 8003568:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	b29b      	uxth	r3, r3
 8003570:	2207      	movs	r2, #7
 8003572:	4013      	ands	r3, r2
 8003574:	b299      	uxth	r1, r3
 8003576:	183b      	adds	r3, r7, r0
 8003578:	183a      	adds	r2, r7, r0
 800357a:	8812      	ldrh	r2, [r2, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	183a      	adds	r2, r7, r0
 8003586:	8812      	ldrh	r2, [r2, #0]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	e04c      	b.n	8003626 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800358c:	231e      	movs	r3, #30
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e047      	b.n	8003626 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003596:	231f      	movs	r3, #31
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d015      	beq.n	80035cc <UART_SetConfig+0x278>
 80035a0:	dc18      	bgt.n	80035d4 <UART_SetConfig+0x280>
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d00d      	beq.n	80035c2 <UART_SetConfig+0x26e>
 80035a6:	dc15      	bgt.n	80035d4 <UART_SetConfig+0x280>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <UART_SetConfig+0x25e>
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d005      	beq.n	80035bc <UART_SetConfig+0x268>
 80035b0:	e010      	b.n	80035d4 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b2:	f7fe fa71 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 80035b6:	0003      	movs	r3, r0
 80035b8:	61bb      	str	r3, [r7, #24]
        break;
 80035ba:	e012      	b.n	80035e2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035bc:	4b28      	ldr	r3, [pc, #160]	; (8003660 <UART_SetConfig+0x30c>)
 80035be:	61bb      	str	r3, [r7, #24]
        break;
 80035c0:	e00f      	b.n	80035e2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c2:	f7fe f9df 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 80035c6:	0003      	movs	r3, r0
 80035c8:	61bb      	str	r3, [r7, #24]
        break;
 80035ca:	e00a      	b.n	80035e2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	61bb      	str	r3, [r7, #24]
        break;
 80035d2:	e006      	b.n	80035e2 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035d8:	231e      	movs	r3, #30
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
        break;
 80035e0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01e      	beq.n	8003626 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	085a      	lsrs	r2, r3, #1
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	18d2      	adds	r2, r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	0019      	movs	r1, r3
 80035f8:	0010      	movs	r0, r2
 80035fa:	f7fc fd85 	bl	8000108 <__udivsi3>
 80035fe:	0003      	movs	r3, r0
 8003600:	b29b      	uxth	r3, r3
 8003602:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b0f      	cmp	r3, #15
 8003608:	d909      	bls.n	800361e <UART_SetConfig+0x2ca>
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	025b      	lsls	r3, r3, #9
 8003610:	429a      	cmp	r2, r3
 8003612:	d204      	bcs.n	800361e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	60da      	str	r2, [r3, #12]
 800361c:	e003      	b.n	8003626 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800361e:	231e      	movs	r3, #30
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003632:	231e      	movs	r3, #30
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	781b      	ldrb	r3, [r3, #0]
}
 8003638:	0018      	movs	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	b008      	add	sp, #32
 800363e:	bd80      	pop	{r7, pc}
 8003640:	efff69f3 	.word	0xefff69f3
 8003644:	ffffcfff 	.word	0xffffcfff
 8003648:	fffff4ff 	.word	0xfffff4ff
 800364c:	40013800 	.word	0x40013800
 8003650:	40021000 	.word	0x40021000
 8003654:	40004400 	.word	0x40004400
 8003658:	40004800 	.word	0x40004800
 800365c:	40004c00 	.word	0x40004c00
 8003660:	007a1200 	.word	0x007a1200

08003664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	2201      	movs	r2, #1
 8003672:	4013      	ands	r3, r2
 8003674:	d00b      	beq.n	800368e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a4a      	ldr	r2, [pc, #296]	; (80037a8 <UART_AdvFeatureConfig+0x144>)
 800367e:	4013      	ands	r3, r2
 8003680:	0019      	movs	r1, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2202      	movs	r2, #2
 8003694:	4013      	ands	r3, r2
 8003696:	d00b      	beq.n	80036b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4a43      	ldr	r2, [pc, #268]	; (80037ac <UART_AdvFeatureConfig+0x148>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	0019      	movs	r1, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	2204      	movs	r2, #4
 80036b6:	4013      	ands	r3, r2
 80036b8:	d00b      	beq.n	80036d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4a3b      	ldr	r2, [pc, #236]	; (80037b0 <UART_AdvFeatureConfig+0x14c>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	0019      	movs	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	2208      	movs	r2, #8
 80036d8:	4013      	ands	r3, r2
 80036da:	d00b      	beq.n	80036f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4a34      	ldr	r2, [pc, #208]	; (80037b4 <UART_AdvFeatureConfig+0x150>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	0019      	movs	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2210      	movs	r2, #16
 80036fa:	4013      	ands	r3, r2
 80036fc:	d00b      	beq.n	8003716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a2c      	ldr	r2, [pc, #176]	; (80037b8 <UART_AdvFeatureConfig+0x154>)
 8003706:	4013      	ands	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	2220      	movs	r2, #32
 800371c:	4013      	ands	r3, r2
 800371e:	d00b      	beq.n	8003738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	4a25      	ldr	r2, [pc, #148]	; (80037bc <UART_AdvFeatureConfig+0x158>)
 8003728:	4013      	ands	r3, r2
 800372a:	0019      	movs	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	2240      	movs	r2, #64	; 0x40
 800373e:	4013      	ands	r3, r2
 8003740:	d01d      	beq.n	800377e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <UART_AdvFeatureConfig+0x15c>)
 800374a:	4013      	ands	r3, r2
 800374c:	0019      	movs	r1, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	035b      	lsls	r3, r3, #13
 8003762:	429a      	cmp	r2, r3
 8003764:	d10b      	bne.n	800377e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <UART_AdvFeatureConfig+0x160>)
 800376e:	4013      	ands	r3, r2
 8003770:	0019      	movs	r1, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	4013      	ands	r3, r2
 8003786:	d00b      	beq.n	80037a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <UART_AdvFeatureConfig+0x164>)
 8003790:	4013      	ands	r3, r2
 8003792:	0019      	movs	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
  }
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b002      	add	sp, #8
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	fffdffff 	.word	0xfffdffff
 80037ac:	fffeffff 	.word	0xfffeffff
 80037b0:	fffbffff 	.word	0xfffbffff
 80037b4:	ffff7fff 	.word	0xffff7fff
 80037b8:	ffffefff 	.word	0xffffefff
 80037bc:	ffffdfff 	.word	0xffffdfff
 80037c0:	ffefffff 	.word	0xffefffff
 80037c4:	ff9fffff 	.word	0xff9fffff
 80037c8:	fff7ffff 	.word	0xfff7ffff

080037cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	2100      	movs	r1, #0
 80037da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037dc:	f7fd f976 	bl	8000acc <HAL_GetTick>
 80037e0:	0003      	movs	r3, r0
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2208      	movs	r2, #8
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d10c      	bne.n	800380c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2280      	movs	r2, #128	; 0x80
 80037f6:	0391      	lsls	r1, r2, #14
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4a17      	ldr	r2, [pc, #92]	; (8003858 <UART_CheckIdleState+0x8c>)
 80037fc:	9200      	str	r2, [sp, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	f000 f82c 	bl	800385c <UART_WaitOnFlagUntilTimeout>
 8003804:	1e03      	subs	r3, r0, #0
 8003806:	d001      	beq.n	800380c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e021      	b.n	8003850 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2204      	movs	r2, #4
 8003814:	4013      	ands	r3, r2
 8003816:	2b04      	cmp	r3, #4
 8003818:	d10c      	bne.n	8003834 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2280      	movs	r2, #128	; 0x80
 800381e:	03d1      	lsls	r1, r2, #15
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4a0d      	ldr	r2, [pc, #52]	; (8003858 <UART_CheckIdleState+0x8c>)
 8003824:	9200      	str	r2, [sp, #0]
 8003826:	2200      	movs	r2, #0
 8003828:	f000 f818 	bl	800385c <UART_WaitOnFlagUntilTimeout>
 800382c:	1e03      	subs	r3, r0, #0
 800382e:	d001      	beq.n	8003834 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e00d      	b.n	8003850 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2274      	movs	r2, #116	; 0x74
 800384a:	2100      	movs	r1, #0
 800384c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	b004      	add	sp, #16
 8003856:	bd80      	pop	{r7, pc}
 8003858:	01ffffff 	.word	0x01ffffff

0800385c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b094      	sub	sp, #80	; 0x50
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	1dfb      	adds	r3, r7, #7
 800386a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386c:	e0a3      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003870:	3301      	adds	r3, #1
 8003872:	d100      	bne.n	8003876 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003874:	e09f      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003876:	f7fd f929 	bl	8000acc <HAL_GetTick>
 800387a:	0002      	movs	r2, r0
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <UART_WaitOnFlagUntilTimeout+0x30>
 8003886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003888:	2b00      	cmp	r3, #0
 800388a:	d13d      	bne.n	8003908 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388c:	f3ef 8310 	mrs	r3, PRIMASK
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003894:	647b      	str	r3, [r7, #68]	; 0x44
 8003896:	2301      	movs	r3, #1
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	f383 8810 	msr	PRIMASK, r3
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	494c      	ldr	r1, [pc, #304]	; (80039e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80038ae:	400a      	ands	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038be:	f3ef 8310 	mrs	r3, PRIMASK
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c6:	643b      	str	r3, [r7, #64]	; 0x40
 80038c8:	2301      	movs	r3, #1
 80038ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	f383 8810 	msr	PRIMASK, r3
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2101      	movs	r1, #1
 80038e0:	438a      	bics	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2274      	movs	r2, #116	; 0x74
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e067      	b.n	80039d8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2204      	movs	r2, #4
 8003910:	4013      	ands	r3, r2
 8003912:	d050      	beq.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	401a      	ands	r2, r3
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	429a      	cmp	r2, r3
 8003926:	d146      	bne.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2280      	movs	r2, #128	; 0x80
 800392e:	0112      	lsls	r2, r2, #4
 8003930:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003932:	f3ef 8310 	mrs	r3, PRIMASK
 8003936:	613b      	str	r3, [r7, #16]
  return(result);
 8003938:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800393a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800393c:	2301      	movs	r3, #1
 800393e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f383 8810 	msr	PRIMASK, r3
}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4923      	ldr	r1, [pc, #140]	; (80039e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003954:	400a      	ands	r2, r1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f383 8810 	msr	PRIMASK, r3
}
 8003962:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003964:	f3ef 8310 	mrs	r3, PRIMASK
 8003968:	61fb      	str	r3, [r7, #28]
  return(result);
 800396a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396c:	64bb      	str	r3, [r7, #72]	; 0x48
 800396e:	2301      	movs	r3, #1
 8003970:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	f383 8810 	msr	PRIMASK, r3
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2101      	movs	r1, #1
 8003986:	438a      	bics	r2, r1
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	f383 8810 	msr	PRIMASK, r3
}
 8003994:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	2120      	movs	r1, #32
 80039a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2274      	movs	r2, #116	; 0x74
 80039ae:	2100      	movs	r1, #0
 80039b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e010      	b.n	80039d8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	4013      	ands	r3, r2
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	425a      	negs	r2, r3
 80039c6:	4153      	adcs	r3, r2
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	001a      	movs	r2, r3
 80039cc:	1dfb      	adds	r3, r7, #7
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d100      	bne.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80039d4:	e74b      	b.n	800386e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b014      	add	sp, #80	; 0x50
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	fffffe5f 	.word	0xfffffe5f

080039e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08c      	sub	sp, #48	; 0x30
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	1dbb      	adds	r3, r7, #6
 80039f0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1dba      	adds	r2, r7, #6
 80039fc:	2158      	movs	r1, #88	; 0x58
 80039fe:	8812      	ldrh	r2, [r2, #0]
 8003a00:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1dba      	adds	r2, r7, #6
 8003a06:	215a      	movs	r1, #90	; 0x5a
 8003a08:	8812      	ldrh	r2, [r2, #0]
 8003a0a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	015b      	lsls	r3, r3, #5
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d10d      	bne.n	8003a3a <UART_Start_Receive_IT+0x56>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d104      	bne.n	8003a30 <UART_Start_Receive_IT+0x4c>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	225c      	movs	r2, #92	; 0x5c
 8003a2a:	4943      	ldr	r1, [pc, #268]	; (8003b38 <UART_Start_Receive_IT+0x154>)
 8003a2c:	5299      	strh	r1, [r3, r2]
 8003a2e:	e02e      	b.n	8003a8e <UART_Start_Receive_IT+0xaa>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	225c      	movs	r2, #92	; 0x5c
 8003a34:	21ff      	movs	r1, #255	; 0xff
 8003a36:	5299      	strh	r1, [r3, r2]
 8003a38:	e029      	b.n	8003a8e <UART_Start_Receive_IT+0xaa>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10d      	bne.n	8003a5e <UART_Start_Receive_IT+0x7a>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <UART_Start_Receive_IT+0x70>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	225c      	movs	r2, #92	; 0x5c
 8003a4e:	21ff      	movs	r1, #255	; 0xff
 8003a50:	5299      	strh	r1, [r3, r2]
 8003a52:	e01c      	b.n	8003a8e <UART_Start_Receive_IT+0xaa>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	225c      	movs	r2, #92	; 0x5c
 8003a58:	217f      	movs	r1, #127	; 0x7f
 8003a5a:	5299      	strh	r1, [r3, r2]
 8003a5c:	e017      	b.n	8003a8e <UART_Start_Receive_IT+0xaa>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	055b      	lsls	r3, r3, #21
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10d      	bne.n	8003a86 <UART_Start_Receive_IT+0xa2>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d104      	bne.n	8003a7c <UART_Start_Receive_IT+0x98>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	225c      	movs	r2, #92	; 0x5c
 8003a76:	217f      	movs	r1, #127	; 0x7f
 8003a78:	5299      	strh	r1, [r3, r2]
 8003a7a:	e008      	b.n	8003a8e <UART_Start_Receive_IT+0xaa>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	225c      	movs	r2, #92	; 0x5c
 8003a80:	213f      	movs	r1, #63	; 0x3f
 8003a82:	5299      	strh	r1, [r3, r2]
 8003a84:	e003      	b.n	8003a8e <UART_Start_Receive_IT+0xaa>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	225c      	movs	r2, #92	; 0x5c
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2280      	movs	r2, #128	; 0x80
 8003a92:	2100      	movs	r1, #0
 8003a94:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2222      	movs	r2, #34	; 0x22
 8003a9a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003aa2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	f383 8810 	msr	PRIMASK, r3
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2101      	movs	r1, #1
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	f383 8810 	msr	PRIMASK, r3
}
 8003acc:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	015b      	lsls	r3, r3, #5
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d107      	bne.n	8003aea <UART_Start_Receive_IT+0x106>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a15      	ldr	r2, [pc, #84]	; (8003b3c <UART_Start_Receive_IT+0x158>)
 8003ae6:	665a      	str	r2, [r3, #100]	; 0x64
 8003ae8:	e002      	b.n	8003af0 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4a14      	ldr	r2, [pc, #80]	; (8003b40 <UART_Start_Receive_IT+0x15c>)
 8003aee:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2274      	movs	r2, #116	; 0x74
 8003af4:	2100      	movs	r1, #0
 8003af6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af8:	f3ef 8310 	mrs	r3, PRIMASK
 8003afc:	613b      	str	r3, [r7, #16]
  return(result);
 8003afe:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b02:	2301      	movs	r3, #1
 8003b04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f383 8810 	msr	PRIMASK, r3
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2190      	movs	r1, #144	; 0x90
 8003b1a:	0049      	lsls	r1, r1, #1
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f383 8810 	msr	PRIMASK, r3
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	0018      	movs	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b00c      	add	sp, #48	; 0x30
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	000001ff 	.word	0x000001ff
 8003b3c:	08003df5 	.word	0x08003df5
 8003b40:	08003c8d 	.word	0x08003c8d

08003b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08e      	sub	sp, #56	; 0x38
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b50:	617b      	str	r3, [r7, #20]
  return(result);
 8003b52:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
 8003b56:	2301      	movs	r3, #1
 8003b58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f383 8810 	msr	PRIMASK, r3
}
 8003b60:	46c0      	nop			; (mov r8, r8)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4925      	ldr	r1, [pc, #148]	; (8003c04 <UART_EndRxTransfer+0xc0>)
 8003b6e:	400a      	ands	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f383 8810 	msr	PRIMASK, r3
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b82:	623b      	str	r3, [r7, #32]
  return(result);
 8003b84:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
 8003b88:	2301      	movs	r3, #1
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	f383 8810 	msr	PRIMASK, r3
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	438a      	bics	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	f383 8810 	msr	PRIMASK, r3
}
 8003bae:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d118      	bne.n	8003bea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f383 8810 	msr	PRIMASK, r3
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2110      	movs	r1, #16
 8003bda:	438a      	bics	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f383 8810 	msr	PRIMASK, r3
}
 8003be8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b00e      	add	sp, #56	; 0x38
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	fffffedf 	.word	0xfffffedf

08003c08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	225a      	movs	r2, #90	; 0x5a
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2252      	movs	r2, #82	; 0x52
 8003c22:	2100      	movs	r1, #0
 8003c24:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7ff fb7f 	bl	800332c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b004      	add	sp, #16
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c42:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c44:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	2301      	movs	r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2140      	movs	r1, #64	; 0x40
 8003c60:	438a      	bics	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f7ff fb44 	bl	800330c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b006      	add	sp, #24
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b090      	sub	sp, #64	; 0x40
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c94:	203e      	movs	r0, #62	; 0x3e
 8003c96:	183b      	adds	r3, r7, r0
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	215c      	movs	r1, #92	; 0x5c
 8003c9c:	5a52      	ldrh	r2, [r2, r1]
 8003c9e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca4:	2b22      	cmp	r3, #34	; 0x22
 8003ca6:	d000      	beq.n	8003caa <UART_RxISR_8BIT+0x1e>
 8003ca8:	e095      	b.n	8003dd6 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	213c      	movs	r1, #60	; 0x3c
 8003cb0:	187b      	adds	r3, r7, r1
 8003cb2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003cb4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cb6:	187b      	adds	r3, r7, r1
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	183b      	adds	r3, r7, r0
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b2d9      	uxtb	r1, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc6:	400a      	ands	r2, r1
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	225a      	movs	r2, #90	; 0x5a
 8003cda:	5a9b      	ldrh	r3, [r3, r2]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b299      	uxth	r1, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	225a      	movs	r2, #90	; 0x5a
 8003ce6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	225a      	movs	r2, #90	; 0x5a
 8003cec:	5a9b      	ldrh	r3, [r3, r2]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d178      	bne.n	8003de6 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf8:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cfa:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cfe:	2301      	movs	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f383 8810 	msr	PRIMASK, r3
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4936      	ldr	r1, [pc, #216]	; (8003df0 <UART_RxISR_8BIT+0x164>)
 8003d16:	400a      	ands	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	f383 8810 	msr	PRIMASK, r3
}
 8003d24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d26:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d30:	2301      	movs	r3, #1
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	f383 8810 	msr	PRIMASK, r3
}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2101      	movs	r1, #1
 8003d48:	438a      	bics	r2, r1
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	f383 8810 	msr	PRIMASK, r3
}
 8003d56:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d12f      	bne.n	8003dcc <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d72:	f3ef 8310 	mrs	r3, PRIMASK
 8003d76:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d78:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f383 8810 	msr	PRIMASK, r3
}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2110      	movs	r1, #16
 8003d94:	438a      	bics	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f383 8810 	msr	PRIMASK, r3
}
 8003da2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	2210      	movs	r2, #16
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b10      	cmp	r3, #16
 8003db0:	d103      	bne.n	8003dba <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2210      	movs	r2, #16
 8003db8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2258      	movs	r2, #88	; 0x58
 8003dbe:	5a9a      	ldrh	r2, [r3, r2]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff fab9 	bl	800333c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dca:	e00c      	b.n	8003de6 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f7ff faa4 	bl	800331c <HAL_UART_RxCpltCallback>
}
 8003dd4:	e007      	b.n	8003de6 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2108      	movs	r1, #8
 8003de2:	430a      	orrs	r2, r1
 8003de4:	619a      	str	r2, [r3, #24]
}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b010      	add	sp, #64	; 0x40
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	fffffedf 	.word	0xfffffedf

08003df4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b090      	sub	sp, #64	; 0x40
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003dfc:	203e      	movs	r0, #62	; 0x3e
 8003dfe:	183b      	adds	r3, r7, r0
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	215c      	movs	r1, #92	; 0x5c
 8003e04:	5a52      	ldrh	r2, [r2, r1]
 8003e06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e0c:	2b22      	cmp	r3, #34	; 0x22
 8003e0e:	d000      	beq.n	8003e12 <UART_RxISR_16BIT+0x1e>
 8003e10:	e095      	b.n	8003f3e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	213c      	movs	r1, #60	; 0x3c
 8003e18:	187b      	adds	r3, r7, r1
 8003e1a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003e1c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	183a      	adds	r2, r7, r0
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	8812      	ldrh	r2, [r2, #0]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	1c9a      	adds	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	225a      	movs	r2, #90	; 0x5a
 8003e42:	5a9b      	ldrh	r3, [r3, r2]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b299      	uxth	r1, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	225a      	movs	r2, #90	; 0x5a
 8003e4e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	225a      	movs	r2, #90	; 0x5a
 8003e54:	5a9b      	ldrh	r3, [r3, r2]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d178      	bne.n	8003f4e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e60:	617b      	str	r3, [r7, #20]
  return(result);
 8003e62:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
 8003e66:	2301      	movs	r3, #1
 8003e68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f383 8810 	msr	PRIMASK, r3
}
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4936      	ldr	r1, [pc, #216]	; (8003f58 <UART_RxISR_16BIT+0x164>)
 8003e7e:	400a      	ands	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f383 8810 	msr	PRIMASK, r3
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e92:	623b      	str	r3, [r7, #32]
  return(result);
 8003e94:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e96:	633b      	str	r3, [r7, #48]	; 0x30
 8003e98:	2301      	movs	r3, #1
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2101      	movs	r1, #1
 8003eb0:	438a      	bics	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	f383 8810 	msr	PRIMASK, r3
}
 8003ebe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d12f      	bne.n	8003f34 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eda:	f3ef 8310 	mrs	r3, PRIMASK
 8003ede:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ee0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f383 8810 	msr	PRIMASK, r3
}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2110      	movs	r1, #16
 8003efc:	438a      	bics	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f383 8810 	msr	PRIMASK, r3
}
 8003f0a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	2210      	movs	r2, #16
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d103      	bne.n	8003f22 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2210      	movs	r2, #16
 8003f20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2258      	movs	r2, #88	; 0x58
 8003f26:	5a9a      	ldrh	r2, [r3, r2]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7ff fa05 	bl	800333c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f32:	e00c      	b.n	8003f4e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	0018      	movs	r0, r3
 8003f38:	f7ff f9f0 	bl	800331c <HAL_UART_RxCpltCallback>
}
 8003f3c:	e007      	b.n	8003f4e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699a      	ldr	r2, [r3, #24]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2108      	movs	r1, #8
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	619a      	str	r2, [r3, #24]
}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b010      	add	sp, #64	; 0x40
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	fffffedf 	.word	0xfffffedf

08003f5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f64:	46c0      	nop			; (mov r8, r8)
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b002      	add	sp, #8
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <__libc_init_array>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	2600      	movs	r6, #0
 8003f70:	4d0c      	ldr	r5, [pc, #48]	; (8003fa4 <__libc_init_array+0x38>)
 8003f72:	4c0d      	ldr	r4, [pc, #52]	; (8003fa8 <__libc_init_array+0x3c>)
 8003f74:	1b64      	subs	r4, r4, r5
 8003f76:	10a4      	asrs	r4, r4, #2
 8003f78:	42a6      	cmp	r6, r4
 8003f7a:	d109      	bne.n	8003f90 <__libc_init_array+0x24>
 8003f7c:	2600      	movs	r6, #0
 8003f7e:	f000 f821 	bl	8003fc4 <_init>
 8003f82:	4d0a      	ldr	r5, [pc, #40]	; (8003fac <__libc_init_array+0x40>)
 8003f84:	4c0a      	ldr	r4, [pc, #40]	; (8003fb0 <__libc_init_array+0x44>)
 8003f86:	1b64      	subs	r4, r4, r5
 8003f88:	10a4      	asrs	r4, r4, #2
 8003f8a:	42a6      	cmp	r6, r4
 8003f8c:	d105      	bne.n	8003f9a <__libc_init_array+0x2e>
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	00b3      	lsls	r3, r6, #2
 8003f92:	58eb      	ldr	r3, [r5, r3]
 8003f94:	4798      	blx	r3
 8003f96:	3601      	adds	r6, #1
 8003f98:	e7ee      	b.n	8003f78 <__libc_init_array+0xc>
 8003f9a:	00b3      	lsls	r3, r6, #2
 8003f9c:	58eb      	ldr	r3, [r5, r3]
 8003f9e:	4798      	blx	r3
 8003fa0:	3601      	adds	r6, #1
 8003fa2:	e7f2      	b.n	8003f8a <__libc_init_array+0x1e>
 8003fa4:	0800401c 	.word	0x0800401c
 8003fa8:	0800401c 	.word	0x0800401c
 8003fac:	0800401c 	.word	0x0800401c
 8003fb0:	08004020 	.word	0x08004020

08003fb4 <memset>:
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	1882      	adds	r2, r0, r2
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d100      	bne.n	8003fbe <memset+0xa>
 8003fbc:	4770      	bx	lr
 8003fbe:	7019      	strb	r1, [r3, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	e7f9      	b.n	8003fb8 <memset+0x4>

08003fc4 <_init>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr

08003fd0 <_fini>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd6:	bc08      	pop	{r3}
 8003fd8:	469e      	mov	lr, r3
 8003fda:	4770      	bx	lr
