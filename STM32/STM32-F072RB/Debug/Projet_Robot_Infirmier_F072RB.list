
Projet_Robot_Infirmier_F072RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f9c  08002f9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f9c  08002f9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f9c  08002f9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08002fb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002fb0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a46c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b58  00000000  00000000  0002a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0002bff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002c738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001906d  00000000  00000000  0002cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a869  00000000  00000000  00045e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb3b  00000000  00000000  00050696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e01d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c8  00000000  00000000  000e0224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f44 	.word	0x08002f44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002f44 	.word	0x08002f44

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	240c      	movs	r4, #12
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f002 fe7f 	bl	8002f34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b2d      	ldr	r3, [pc, #180]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b2c      	ldr	r3, [pc, #176]	; (80002ec <MX_GPIO_Init+0xcc>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0309      	lsls	r1, r1, #12
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b29      	ldr	r3, [pc, #164]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	031b      	lsls	r3, r3, #12
 800024c:	4013      	ands	r3, r2
 800024e:	60bb      	str	r3, [r7, #8]
 8000250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000252:	4b26      	ldr	r3, [pc, #152]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b25      	ldr	r3, [pc, #148]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	03c9      	lsls	r1, r1, #15
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b22      	ldr	r3, [pc, #136]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	03db      	lsls	r3, r3, #15
 8000268:	4013      	ands	r3, r2
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b1f      	ldr	r3, [pc, #124]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <MX_GPIO_Init+0xcc>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	0289      	lsls	r1, r1, #10
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <MX_GPIO_Init+0xcc>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4013      	ands	r3, r2
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800028a:	2390      	movs	r3, #144	; 0x90
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	2200      	movs	r2, #0
 8000290:	2120      	movs	r1, #32
 8000292:	0018      	movs	r0, r3
 8000294:	f000 fda8 	bl	8000de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000298:	193b      	adds	r3, r7, r4
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	0192      	lsls	r2, r2, #6
 800029e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	2284      	movs	r2, #132	; 0x84
 80002a4:	0392      	lsls	r2, r2, #14
 80002a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ae:	193b      	adds	r3, r7, r4
 80002b0:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <MX_GPIO_Init+0xd0>)
 80002b2:	0019      	movs	r1, r3
 80002b4:	0010      	movs	r0, r2
 80002b6:	f000 fc1f 	bl	8000af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002ba:	0021      	movs	r1, r4
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2220      	movs	r2, #32
 80002c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2201      	movs	r2, #1
 80002c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002d4:	187a      	adds	r2, r7, r1
 80002d6:	2390      	movs	r3, #144	; 0x90
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fc0b 	bl	8000af8 <HAL_GPIO_Init>

}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b009      	add	sp, #36	; 0x24
 80002e8:	bd90      	pop	{r4, r7, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	40021000 	.word	0x40021000
 80002f0:	48000800 	.word	0x48000800

080002f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fa:	f000 fa19 	bl	8000730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fe:	f000 f82d 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000302:	f7ff ff8d 	bl	8000220 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000306:	f000 f8f1 	bl	80004ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800030a:	f000 f91f 	bl	800054c <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */



  char UART1_rxBuffer [12];
  HAL_UART_Receive_IT (&huart1, UART1_rxBuffer, 12);
 800030e:	230c      	movs	r3, #12
 8000310:	18f9      	adds	r1, r7, r3
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <main+0x60>)
 8000314:	220c      	movs	r2, #12
 8000316:	0018      	movs	r0, r3
 8000318:	f001 fc7f 	bl	8001c1a <HAL_UART_Receive_IT>


  while (1)
  {

	  char Data[] = "coucou";
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <main+0x64>)
 8000320:	6811      	ldr	r1, [r2, #0]
 8000322:	6019      	str	r1, [r3, #0]
 8000324:	8891      	ldrh	r1, [r2, #4]
 8000326:	8099      	strh	r1, [r3, #4]
 8000328:	7992      	ldrb	r2, [r2, #6]
 800032a:	719a      	strb	r2, [r3, #6]


	  HAL_UART_Transmit(&huart1, Data, sizeof(Data), 100);
 800032c:	1d39      	adds	r1, r7, #4
 800032e:	4809      	ldr	r0, [pc, #36]	; (8000354 <main+0x60>)
 8000330:	2364      	movs	r3, #100	; 0x64
 8000332:	2207      	movs	r2, #7
 8000334:	f001 fbc8 	bl	8001ac8 <HAL_UART_Transmit>



	  HAL_UART_Transmit(&huart1, UART1_rxBuffer, 12, 100);
 8000338:	230c      	movs	r3, #12
 800033a:	18f9      	adds	r1, r7, r3
 800033c:	4805      	ldr	r0, [pc, #20]	; (8000354 <main+0x60>)
 800033e:	2364      	movs	r3, #100	; 0x64
 8000340:	220c      	movs	r2, #12
 8000342:	f001 fbc1 	bl	8001ac8 <HAL_UART_Transmit>


	  HAL_Delay(1000);
 8000346:	23fa      	movs	r3, #250	; 0xfa
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	0018      	movs	r0, r3
 800034c:	f000 fa54 	bl	80007f8 <HAL_Delay>
  {
 8000350:	e7e4      	b.n	800031c <main+0x28>
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	20000028 	.word	0x20000028
 8000358:	08002f5c 	.word	0x08002f5c

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b099      	sub	sp, #100	; 0x64
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	242c      	movs	r4, #44	; 0x2c
 8000364:	193b      	adds	r3, r7, r4
 8000366:	0018      	movs	r0, r3
 8000368:	2334      	movs	r3, #52	; 0x34
 800036a:	001a      	movs	r2, r3
 800036c:	2100      	movs	r1, #0
 800036e:	f002 fde1 	bl	8002f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000372:	231c      	movs	r3, #28
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	0018      	movs	r0, r3
 8000378:	2310      	movs	r3, #16
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f002 fdd9 	bl	8002f34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000382:	003b      	movs	r3, r7
 8000384:	0018      	movs	r0, r3
 8000386:	231c      	movs	r3, #28
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f002 fdd2 	bl	8002f34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000390:	0021      	movs	r1, r4
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2202      	movs	r2, #2
 8000396:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2201      	movs	r2, #1
 800039c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2210      	movs	r2, #16
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2202      	movs	r2, #2
 80003a8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	0212      	lsls	r2, r2, #8
 80003b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	22a0      	movs	r2, #160	; 0xa0
 80003b6:	0392      	lsls	r2, r2, #14
 80003b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2201      	movs	r2, #1
 80003be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 fd2e 	bl	8000e24 <HAL_RCC_OscConfig>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003cc:	f000 f82b 	bl	8000426 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	211c      	movs	r1, #28
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2207      	movs	r2, #7
 80003d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2202      	movs	r2, #2
 80003dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2101      	movs	r1, #1
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 f89e 	bl	8001530 <HAL_RCC_ClockConfig>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80003f8:	f000 f815 	bl	8000426 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80003fc:	003b      	movs	r3, r7
 80003fe:	2203      	movs	r2, #3
 8000400:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000402:	003b      	movs	r3, r7
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000408:	003b      	movs	r3, r7
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040e:	003b      	movs	r3, r7
 8000410:	0018      	movs	r0, r3
 8000412:	f001 fa07 	bl	8001824 <HAL_RCCEx_PeriphCLKConfig>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800041a:	f000 f804 	bl	8000426 <Error_Handler>
  }
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b019      	add	sp, #100	; 0x64
 8000424:	bd90      	pop	{r4, r7, pc}

08000426 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042a:	b672      	cpsid	i
}
 800042c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042e:	e7fe      	b.n	800042e <Error_Handler+0x8>

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x44>)
 8000438:	699a      	ldr	r2, [r3, #24]
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <HAL_MspInit+0x44>)
 800043c:	2101      	movs	r1, #1
 800043e:	430a      	orrs	r2, r1
 8000440:	619a      	str	r2, [r3, #24]
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x44>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	2201      	movs	r2, #1
 8000448:	4013      	ands	r3, r2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <HAL_MspInit+0x44>)
 8000450:	69da      	ldr	r2, [r3, #28]
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <HAL_MspInit+0x44>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0549      	lsls	r1, r1, #21
 8000458:	430a      	orrs	r2, r1
 800045a:	61da      	str	r2, [r3, #28]
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <HAL_MspInit+0x44>)
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	055b      	lsls	r3, r3, #21
 8000464:	4013      	ands	r3, r2
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40021000 	.word	0x40021000

08000478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800047c:	e7fe      	b.n	800047c <NMI_Handler+0x4>

0800047e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <HardFault_Handler+0x4>

08000484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049c:	f000 f990 	bl	80007c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  int a = 3;
 80004ae:	2303      	movs	r3, #3
 80004b0:	607b      	str	r3, [r7, #4]


  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004b2:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <USART1_IRQHandler+0x1c>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fc11 	bl	8001cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	20000028 	.word	0x20000028

080004c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004cc:	4b03      	ldr	r3, [pc, #12]	; (80004dc <USART2_IRQHandler+0x14>)
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fc04 	bl	8001cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	200000ac 	.word	0x200000ac

080004e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <MX_USART1_UART_Init+0x58>)
 80004f2:	4a15      	ldr	r2, [pc, #84]	; (8000548 <MX_USART1_UART_Init+0x5c>)
 80004f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004f6:	4b13      	ldr	r3, [pc, #76]	; (8000544 <MX_USART1_UART_Init+0x58>)
 80004f8:	22e1      	movs	r2, #225	; 0xe1
 80004fa:	0252      	lsls	r2, r2, #9
 80004fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <MX_USART1_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_USART1_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <MX_USART1_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <MX_USART1_UART_Init+0x58>)
 8000512:	220c      	movs	r2, #12
 8000514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <MX_USART1_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <MX_USART1_UART_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <MX_USART1_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <MX_USART1_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <MX_USART1_UART_Init+0x58>)
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fa75 	bl	8001a20 <HAL_UART_Init>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800053a:	f7ff ff74 	bl	8000426 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000028 	.word	0x20000028
 8000548:	40013800 	.word	0x40013800

0800054c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000552:	4a15      	ldr	r2, [pc, #84]	; (80005a8 <MX_USART2_UART_Init+0x5c>)
 8000554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000558:	2296      	movs	r2, #150	; 0x96
 800055a:	0212      	lsls	r2, r2, #8
 800055c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000572:	220c      	movs	r2, #12
 8000574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000584:	2200      	movs	r2, #0
 8000586:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 800058a:	2200      	movs	r2, #0
 800058c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000590:	0018      	movs	r0, r3
 8000592:	f001 fa45 	bl	8001a20 <HAL_UART_Init>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800059a:	f7ff ff44 	bl	8000426 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000ac 	.word	0x200000ac
 80005a8:	40004400 	.word	0x40004400

080005ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b08d      	sub	sp, #52	; 0x34
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	241c      	movs	r4, #28
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	0018      	movs	r0, r3
 80005ba:	2314      	movs	r3, #20
 80005bc:	001a      	movs	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	f002 fcb8 	bl	8002f34 <memset>
  if(uartHandle->Instance==USART1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a41      	ldr	r2, [pc, #260]	; (80006d0 <HAL_UART_MspInit+0x124>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d13c      	bne.n	8000648 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005ce:	4b41      	ldr	r3, [pc, #260]	; (80006d4 <HAL_UART_MspInit+0x128>)
 80005d0:	699a      	ldr	r2, [r3, #24]
 80005d2:	4b40      	ldr	r3, [pc, #256]	; (80006d4 <HAL_UART_MspInit+0x128>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	01c9      	lsls	r1, r1, #7
 80005d8:	430a      	orrs	r2, r1
 80005da:	619a      	str	r2, [r3, #24]
 80005dc:	4b3d      	ldr	r3, [pc, #244]	; (80006d4 <HAL_UART_MspInit+0x128>)
 80005de:	699a      	ldr	r2, [r3, #24]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	01db      	lsls	r3, r3, #7
 80005e4:	4013      	ands	r3, r2
 80005e6:	61bb      	str	r3, [r7, #24]
 80005e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b3a      	ldr	r3, [pc, #232]	; (80006d4 <HAL_UART_MspInit+0x128>)
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <HAL_UART_MspInit+0x128>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0289      	lsls	r1, r1, #10
 80005f4:	430a      	orrs	r2, r1
 80005f6:	615a      	str	r2, [r3, #20]
 80005f8:	4b36      	ldr	r3, [pc, #216]	; (80006d4 <HAL_UART_MspInit+0x128>)
 80005fa:	695a      	ldr	r2, [r3, #20]
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	029b      	lsls	r3, r3, #10
 8000600:	4013      	ands	r3, r2
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	22c0      	movs	r2, #192	; 0xc0
 800060a:	00d2      	lsls	r2, r2, #3
 800060c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	0021      	movs	r1, r4
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2202      	movs	r2, #2
 8000614:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2203      	movs	r2, #3
 8000620:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2201      	movs	r2, #1
 8000626:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	187a      	adds	r2, r7, r1
 800062a:	2390      	movs	r3, #144	; 0x90
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fa61 	bl	8000af8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	201b      	movs	r0, #27
 800063c:	f000 f9ac 	bl	8000998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000640:	201b      	movs	r0, #27
 8000642:	f000 f9be 	bl	80009c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000646:	e03f      	b.n	80006c8 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <HAL_UART_MspInit+0x12c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d13a      	bne.n	80006c8 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <HAL_UART_MspInit+0x128>)
 8000654:	69da      	ldr	r2, [r3, #28]
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <HAL_UART_MspInit+0x128>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	0289      	lsls	r1, r1, #10
 800065c:	430a      	orrs	r2, r1
 800065e:	61da      	str	r2, [r3, #28]
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_UART_MspInit+0x128>)
 8000662:	69da      	ldr	r2, [r3, #28]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	029b      	lsls	r3, r3, #10
 8000668:	4013      	ands	r3, r2
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <HAL_UART_MspInit+0x128>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <HAL_UART_MspInit+0x128>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	0289      	lsls	r1, r1, #10
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_UART_MspInit+0x128>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	029b      	lsls	r3, r3, #10
 8000684:	4013      	ands	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800068a:	211c      	movs	r1, #28
 800068c:	187b      	adds	r3, r7, r1
 800068e:	220c      	movs	r2, #12
 8000690:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2202      	movs	r2, #2
 8000696:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2201      	movs	r2, #1
 80006a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	187a      	adds	r2, r7, r1
 80006ac:	2390      	movs	r3, #144	; 0x90
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fa20 	bl	8000af8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	201c      	movs	r0, #28
 80006be:	f000 f96b 	bl	8000998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006c2:	201c      	movs	r0, #28
 80006c4:	f000 f97d 	bl	80009c2 <HAL_NVIC_EnableIRQ>
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b00d      	add	sp, #52	; 0x34
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	40013800 	.word	0x40013800
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40004400 	.word	0x40004400

080006dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e2:	490e      	ldr	r1, [pc, #56]	; (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e4:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f8:	4c0b      	ldr	r4, [pc, #44]	; (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000706:	f7ff feeb 	bl	80004e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800070a:	f002 fbef 	bl	8002eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070e:	f7ff fdf1 	bl	80002f4 <main>

08000712 <LoopForever>:

LoopForever:
    b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   r0, =_estack
 8000714:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000720:	08002fa4 	.word	0x08002fa4
  ldr r2, =_sbss
 8000724:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000728:	20000134 	.word	0x20000134

0800072c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_COMP_IRQHandler>
	...

08000730 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <HAL_Init+0x24>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_Init+0x24>)
 800073a:	2110      	movs	r1, #16
 800073c:	430a      	orrs	r2, r1
 800073e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000740:	2000      	movs	r0, #0
 8000742:	f000 f809 	bl	8000758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000746:	f7ff fe73 	bl	8000430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800074a:	2300      	movs	r3, #0
}
 800074c:	0018      	movs	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	40022000 	.word	0x40022000

08000758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <HAL_InitTick+0x5c>)
 8000762:	681c      	ldr	r4, [r3, #0]
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_InitTick+0x60>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	0019      	movs	r1, r3
 800076a:	23fa      	movs	r3, #250	; 0xfa
 800076c:	0098      	lsls	r0, r3, #2
 800076e:	f7ff fccb 	bl	8000108 <__udivsi3>
 8000772:	0003      	movs	r3, r0
 8000774:	0019      	movs	r1, r3
 8000776:	0020      	movs	r0, r4
 8000778:	f7ff fcc6 	bl	8000108 <__udivsi3>
 800077c:	0003      	movs	r3, r0
 800077e:	0018      	movs	r0, r3
 8000780:	f000 f92f 	bl	80009e2 <HAL_SYSTICK_Config>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000788:	2301      	movs	r3, #1
 800078a:	e00f      	b.n	80007ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b03      	cmp	r3, #3
 8000790:	d80b      	bhi.n	80007aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	2301      	movs	r3, #1
 8000796:	425b      	negs	r3, r3
 8000798:	2200      	movs	r2, #0
 800079a:	0018      	movs	r0, r3
 800079c:	f000 f8fc 	bl	8000998 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_InitTick+0x64>)
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007a6:	2300      	movs	r3, #0
 80007a8:	e000      	b.n	80007ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b003      	add	sp, #12
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	20000000 	.word	0x20000000
 80007b8:	20000008 	.word	0x20000008
 80007bc:	20000004 	.word	0x20000004

080007c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <HAL_IncTick+0x1c>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	001a      	movs	r2, r3
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_IncTick+0x20>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	18d2      	adds	r2, r2, r3
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <HAL_IncTick+0x20>)
 80007d2:	601a      	str	r2, [r3, #0]
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	20000008 	.word	0x20000008
 80007e0:	20000130 	.word	0x20000130

080007e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  return uwTick;
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <HAL_GetTick+0x10>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	20000130 	.word	0x20000130

080007f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000800:	f7ff fff0 	bl	80007e4 <HAL_GetTick>
 8000804:	0003      	movs	r3, r0
 8000806:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	d005      	beq.n	800081e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_Delay+0x44>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	001a      	movs	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	189b      	adds	r3, r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	f7ff ffe0 	bl	80007e4 <HAL_GetTick>
 8000824:	0002      	movs	r2, r0
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	429a      	cmp	r2, r3
 800082e:	d8f7      	bhi.n	8000820 <HAL_Delay+0x28>
  {
  }
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b004      	add	sp, #16
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	20000008 	.word	0x20000008

08000840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	0002      	movs	r2, r0
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b7f      	cmp	r3, #127	; 0x7f
 8000852:	d809      	bhi.n	8000868 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	001a      	movs	r2, r3
 800085a:	231f      	movs	r3, #31
 800085c:	401a      	ands	r2, r3
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_EnableIRQ+0x30>)
 8000860:	2101      	movs	r1, #1
 8000862:	4091      	lsls	r1, r2
 8000864:	000a      	movs	r2, r1
 8000866:	601a      	str	r2, [r3, #0]
  }
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}
 8000870:	e000e100 	.word	0xe000e100

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	0002      	movs	r2, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b7f      	cmp	r3, #127	; 0x7f
 8000888:	d828      	bhi.n	80008dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088a:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <__NVIC_SetPriority+0xd4>)
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b25b      	sxtb	r3, r3
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	33c0      	adds	r3, #192	; 0xc0
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	589b      	ldr	r3, [r3, r2]
 800089a:	1dfa      	adds	r2, r7, #7
 800089c:	7812      	ldrb	r2, [r2, #0]
 800089e:	0011      	movs	r1, r2
 80008a0:	2203      	movs	r2, #3
 80008a2:	400a      	ands	r2, r1
 80008a4:	00d2      	lsls	r2, r2, #3
 80008a6:	21ff      	movs	r1, #255	; 0xff
 80008a8:	4091      	lsls	r1, r2
 80008aa:	000a      	movs	r2, r1
 80008ac:	43d2      	mvns	r2, r2
 80008ae:	401a      	ands	r2, r3
 80008b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	019b      	lsls	r3, r3, #6
 80008b6:	22ff      	movs	r2, #255	; 0xff
 80008b8:	401a      	ands	r2, r3
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	0018      	movs	r0, r3
 80008c0:	2303      	movs	r3, #3
 80008c2:	4003      	ands	r3, r0
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c8:	481f      	ldr	r0, [pc, #124]	; (8000948 <__NVIC_SetPriority+0xd4>)
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	089b      	lsrs	r3, r3, #2
 80008d2:	430a      	orrs	r2, r1
 80008d4:	33c0      	adds	r3, #192	; 0xc0
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008da:	e031      	b.n	8000940 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <__NVIC_SetPriority+0xd8>)
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	0019      	movs	r1, r3
 80008e4:	230f      	movs	r3, #15
 80008e6:	400b      	ands	r3, r1
 80008e8:	3b08      	subs	r3, #8
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	3306      	adds	r3, #6
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	18d3      	adds	r3, r2, r3
 80008f2:	3304      	adds	r3, #4
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	1dfa      	adds	r2, r7, #7
 80008f8:	7812      	ldrb	r2, [r2, #0]
 80008fa:	0011      	movs	r1, r2
 80008fc:	2203      	movs	r2, #3
 80008fe:	400a      	ands	r2, r1
 8000900:	00d2      	lsls	r2, r2, #3
 8000902:	21ff      	movs	r1, #255	; 0xff
 8000904:	4091      	lsls	r1, r2
 8000906:	000a      	movs	r2, r1
 8000908:	43d2      	mvns	r2, r2
 800090a:	401a      	ands	r2, r3
 800090c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	019b      	lsls	r3, r3, #6
 8000912:	22ff      	movs	r2, #255	; 0xff
 8000914:	401a      	ands	r2, r3
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	0018      	movs	r0, r3
 800091c:	2303      	movs	r3, #3
 800091e:	4003      	ands	r3, r0
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <__NVIC_SetPriority+0xd8>)
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	001c      	movs	r4, r3
 800092c:	230f      	movs	r3, #15
 800092e:	4023      	ands	r3, r4
 8000930:	3b08      	subs	r3, #8
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	430a      	orrs	r2, r1
 8000936:	3306      	adds	r3, #6
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	18c3      	adds	r3, r0, r3
 800093c:	3304      	adds	r3, #4
 800093e:	601a      	str	r2, [r3, #0]
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b003      	add	sp, #12
 8000946:	bd90      	pop	{r4, r7, pc}
 8000948:	e000e100 	.word	0xe000e100
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	045b      	lsls	r3, r3, #17
 8000960:	429a      	cmp	r2, r3
 8000962:	d301      	bcc.n	8000968 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000964:	2301      	movs	r3, #1
 8000966:	e010      	b.n	800098a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <SysTick_Config+0x44>)
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	3a01      	subs	r2, #1
 800096e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000970:	2301      	movs	r3, #1
 8000972:	425b      	negs	r3, r3
 8000974:	2103      	movs	r1, #3
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff ff7c 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SysTick_Config+0x44>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SysTick_Config+0x44>)
 8000984:	2207      	movs	r2, #7
 8000986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000988:	2300      	movs	r3, #0
}
 800098a:	0018      	movs	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	210f      	movs	r1, #15
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	1c02      	adds	r2, r0, #0
 80009a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	0011      	movs	r1, r2
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff ff5d 	bl	8000874 <__NVIC_SetPriority>
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b004      	add	sp, #16
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	0002      	movs	r2, r0
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b25b      	sxtb	r3, r3
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff ff33 	bl	8000840 <__NVIC_EnableIRQ>
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff ffaf 	bl	8000950 <SysTick_Config>
 80009f2:	0003      	movs	r3, r0
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2221      	movs	r2, #33	; 0x21
 8000a08:	5c9b      	ldrb	r3, [r3, r2]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d008      	beq.n	8000a22 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2204      	movs	r2, #4
 8000a14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2220      	movs	r2, #32
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e020      	b.n	8000a64 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	210e      	movs	r1, #14
 8000a2e:	438a      	bics	r2, r1
 8000a30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	438a      	bics	r2, r1
 8000a40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4091      	lsls	r1, r2
 8000a4e:	000a      	movs	r2, r1
 8000a50:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2221      	movs	r2, #33	; 0x21
 8000a56:	2101      	movs	r1, #1
 8000a58:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	2100      	movs	r1, #0
 8000a60:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a74:	210f      	movs	r1, #15
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2221      	movs	r2, #33	; 0x21
 8000a80:	5c9b      	ldrb	r3, [r3, r2]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d006      	beq.n	8000a96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	e028      	b.n	8000ae8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	210e      	movs	r1, #14
 8000aa2:	438a      	bics	r2, r1
 8000aa4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	438a      	bics	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	000a      	movs	r2, r1
 8000ac4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2221      	movs	r2, #33	; 0x21
 8000aca:	2101      	movs	r1, #1
 8000acc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2220      	movs	r2, #32
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d004      	beq.n	8000ae8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	0010      	movs	r0, r2
 8000ae6:	4798      	blx	r3
    } 
  }
  return status;
 8000ae8:	230f      	movs	r3, #15
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	781b      	ldrb	r3, [r3, #0]
}
 8000aee:	0018      	movs	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b004      	add	sp, #16
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b06:	e155      	b.n	8000db4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	4091      	lsls	r1, r2
 8000b12:	000a      	movs	r2, r1
 8000b14:	4013      	ands	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d100      	bne.n	8000b20 <HAL_GPIO_Init+0x28>
 8000b1e:	e146      	b.n	8000dae <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2203      	movs	r2, #3
 8000b26:	4013      	ands	r3, r2
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d005      	beq.n	8000b38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2203      	movs	r2, #3
 8000b32:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d130      	bne.n	8000b9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	2203      	movs	r2, #3
 8000b44:	409a      	lsls	r2, r3
 8000b46:	0013      	movs	r3, r2
 8000b48:	43da      	mvns	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68da      	ldr	r2, [r3, #12]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	0013      	movs	r3, r2
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b6e:	2201      	movs	r2, #1
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	43da      	mvns	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	091b      	lsrs	r3, r3, #4
 8000b84:	2201      	movs	r2, #1
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d017      	beq.n	8000bd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	0013      	movs	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2203      	movs	r2, #3
 8000bdc:	4013      	ands	r3, r2
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d123      	bne.n	8000c2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	08da      	lsrs	r2, r3, #3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3208      	adds	r2, #8
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	58d3      	ldr	r3, [r2, r3]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	2207      	movs	r2, #7
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	220f      	movs	r2, #15
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	691a      	ldr	r2, [r3, #16]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	2107      	movs	r1, #7
 8000c0e:	400b      	ands	r3, r1
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	08da      	lsrs	r2, r3, #3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3208      	adds	r2, #8
 8000c24:	0092      	lsls	r2, r2, #2
 8000c26:	6939      	ldr	r1, [r7, #16]
 8000c28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2203      	movs	r2, #3
 8000c48:	401a      	ands	r2, r3
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	23c0      	movs	r3, #192	; 0xc0
 8000c64:	029b      	lsls	r3, r3, #10
 8000c66:	4013      	ands	r3, r2
 8000c68:	d100      	bne.n	8000c6c <HAL_GPIO_Init+0x174>
 8000c6a:	e0a0      	b.n	8000dae <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6c:	4b57      	ldr	r3, [pc, #348]	; (8000dcc <HAL_GPIO_Init+0x2d4>)
 8000c6e:	699a      	ldr	r2, [r3, #24]
 8000c70:	4b56      	ldr	r3, [pc, #344]	; (8000dcc <HAL_GPIO_Init+0x2d4>)
 8000c72:	2101      	movs	r1, #1
 8000c74:	430a      	orrs	r2, r1
 8000c76:	619a      	str	r2, [r3, #24]
 8000c78:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <HAL_GPIO_Init+0x2d4>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4013      	ands	r3, r2
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c84:	4a52      	ldr	r2, [pc, #328]	; (8000dd0 <HAL_GPIO_Init+0x2d8>)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	089b      	lsrs	r3, r3, #2
 8000c8a:	3302      	adds	r3, #2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	589b      	ldr	r3, [r3, r2]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2203      	movs	r2, #3
 8000c96:	4013      	ands	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	409a      	lsls	r2, r3
 8000c9e:	0013      	movs	r3, r2
 8000ca0:	43da      	mvns	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	2390      	movs	r3, #144	; 0x90
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d019      	beq.n	8000ce6 <HAL_GPIO_Init+0x1ee>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a47      	ldr	r2, [pc, #284]	; (8000dd4 <HAL_GPIO_Init+0x2dc>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d013      	beq.n	8000ce2 <HAL_GPIO_Init+0x1ea>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a46      	ldr	r2, [pc, #280]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d00d      	beq.n	8000cde <HAL_GPIO_Init+0x1e6>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a45      	ldr	r2, [pc, #276]	; (8000ddc <HAL_GPIO_Init+0x2e4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d007      	beq.n	8000cda <HAL_GPIO_Init+0x1e2>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a44      	ldr	r2, [pc, #272]	; (8000de0 <HAL_GPIO_Init+0x2e8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d101      	bne.n	8000cd6 <HAL_GPIO_Init+0x1de>
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	e008      	b.n	8000ce8 <HAL_GPIO_Init+0x1f0>
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	e006      	b.n	8000ce8 <HAL_GPIO_Init+0x1f0>
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e004      	b.n	8000ce8 <HAL_GPIO_Init+0x1f0>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e002      	b.n	8000ce8 <HAL_GPIO_Init+0x1f0>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <HAL_GPIO_Init+0x1f0>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	2103      	movs	r1, #3
 8000cec:	400a      	ands	r2, r1
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	4093      	lsls	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cf8:	4935      	ldr	r1, [pc, #212]	; (8000dd0 <HAL_GPIO_Init+0x2d8>)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3302      	adds	r3, #2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <HAL_GPIO_Init+0x2ec>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	025b      	lsls	r3, r3, #9
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d2a:	4b2e      	ldr	r3, [pc, #184]	; (8000de4 <HAL_GPIO_Init+0x2ec>)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d30:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <HAL_GPIO_Init+0x2ec>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43da      	mvns	r2, r3
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	029b      	lsls	r3, r3, #10
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <HAL_GPIO_Init+0x2ec>)
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_GPIO_Init+0x2ec>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	035b      	lsls	r3, r3, #13
 8000d72:	4013      	ands	r3, r2
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_GPIO_Init+0x2ec>)
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_GPIO_Init+0x2ec>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	039b      	lsls	r3, r3, #14
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_GPIO_Init+0x2ec>)
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	40da      	lsrs	r2, r3
 8000dbc:	1e13      	subs	r3, r2, #0
 8000dbe:	d000      	beq.n	8000dc2 <HAL_GPIO_Init+0x2ca>
 8000dc0:	e6a2      	b.n	8000b08 <HAL_GPIO_Init+0x10>
  } 
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b006      	add	sp, #24
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	48000800 	.word	0x48000800
 8000ddc:	48000c00 	.word	0x48000c00
 8000de0:	48001000 	.word	0x48001000
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	0008      	movs	r0, r1
 8000df2:	0011      	movs	r1, r2
 8000df4:	1cbb      	adds	r3, r7, #2
 8000df6:	1c02      	adds	r2, r0, #0
 8000df8:	801a      	strh	r2, [r3, #0]
 8000dfa:	1c7b      	adds	r3, r7, #1
 8000dfc:	1c0a      	adds	r2, r1, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e00:	1c7b      	adds	r3, r7, #1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d004      	beq.n	8000e12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e08:	1cbb      	adds	r3, r7, #2
 8000e0a:	881a      	ldrh	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e10:	e003      	b.n	8000e1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e12:	1cbb      	adds	r3, r7, #2
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f000 fb76 	bl	8001524 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d100      	bne.n	8000e44 <HAL_RCC_OscConfig+0x20>
 8000e42:	e08e      	b.n	8000f62 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e44:	4bc5      	ldr	r3, [pc, #788]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	220c      	movs	r2, #12
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d00e      	beq.n	8000e6e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e50:	4bc2      	ldr	r3, [pc, #776]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	220c      	movs	r2, #12
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d117      	bne.n	8000e8c <HAL_RCC_OscConfig+0x68>
 8000e5c:	4bbf      	ldr	r3, [pc, #764]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	23c0      	movs	r3, #192	; 0xc0
 8000e62:	025b      	lsls	r3, r3, #9
 8000e64:	401a      	ands	r2, r3
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	025b      	lsls	r3, r3, #9
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d10e      	bne.n	8000e8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6e:	4bbb      	ldr	r3, [pc, #748]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	029b      	lsls	r3, r3, #10
 8000e76:	4013      	ands	r3, r2
 8000e78:	d100      	bne.n	8000e7c <HAL_RCC_OscConfig+0x58>
 8000e7a:	e071      	b.n	8000f60 <HAL_RCC_OscConfig+0x13c>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d000      	beq.n	8000e86 <HAL_RCC_OscConfig+0x62>
 8000e84:	e06c      	b.n	8000f60 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	f000 fb4c 	bl	8001524 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d107      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x80>
 8000e94:	4bb1      	ldr	r3, [pc, #708]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4bb0      	ldr	r3, [pc, #704]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	0249      	lsls	r1, r1, #9
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e02f      	b.n	8000f04 <HAL_RCC_OscConfig+0xe0>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10c      	bne.n	8000ec6 <HAL_RCC_OscConfig+0xa2>
 8000eac:	4bab      	ldr	r3, [pc, #684]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4baa      	ldr	r3, [pc, #680]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000eb2:	49ab      	ldr	r1, [pc, #684]	; (8001160 <HAL_RCC_OscConfig+0x33c>)
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	4ba8      	ldr	r3, [pc, #672]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4ba7      	ldr	r3, [pc, #668]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000ebe:	49a9      	ldr	r1, [pc, #676]	; (8001164 <HAL_RCC_OscConfig+0x340>)
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e01e      	b.n	8000f04 <HAL_RCC_OscConfig+0xe0>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b05      	cmp	r3, #5
 8000ecc:	d10e      	bne.n	8000eec <HAL_RCC_OscConfig+0xc8>
 8000ece:	4ba3      	ldr	r3, [pc, #652]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4ba2      	ldr	r3, [pc, #648]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	02c9      	lsls	r1, r1, #11
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	4b9f      	ldr	r3, [pc, #636]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b9e      	ldr	r3, [pc, #632]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e00b      	b.n	8000f04 <HAL_RCC_OscConfig+0xe0>
 8000eec:	4b9b      	ldr	r3, [pc, #620]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b9a      	ldr	r3, [pc, #616]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000ef2:	499b      	ldr	r1, [pc, #620]	; (8001160 <HAL_RCC_OscConfig+0x33c>)
 8000ef4:	400a      	ands	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	4b98      	ldr	r3, [pc, #608]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b97      	ldr	r3, [pc, #604]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000efe:	4999      	ldr	r1, [pc, #612]	; (8001164 <HAL_RCC_OscConfig+0x340>)
 8000f00:	400a      	ands	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d014      	beq.n	8000f36 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fc6a 	bl	80007e4 <HAL_GetTick>
 8000f10:	0003      	movs	r3, r0
 8000f12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f16:	f7ff fc65 	bl	80007e4 <HAL_GetTick>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b64      	cmp	r3, #100	; 0x64
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e2fd      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f28:	4b8c      	ldr	r3, [pc, #560]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	4013      	ands	r3, r2
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0xf2>
 8000f34:	e015      	b.n	8000f62 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f36:	f7ff fc55 	bl	80007e4 <HAL_GetTick>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fc50 	bl	80007e4 <HAL_GetTick>
 8000f44:	0002      	movs	r2, r0
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e2e8      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	4b82      	ldr	r3, [pc, #520]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	029b      	lsls	r3, r3, #10
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x11c>
 8000f5e:	e000      	b.n	8000f62 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2202      	movs	r2, #2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d100      	bne.n	8000f6e <HAL_RCC_OscConfig+0x14a>
 8000f6c:	e06c      	b.n	8001048 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f6e:	4b7b      	ldr	r3, [pc, #492]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	220c      	movs	r2, #12
 8000f74:	4013      	ands	r3, r2
 8000f76:	d00e      	beq.n	8000f96 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f78:	4b78      	ldr	r3, [pc, #480]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	220c      	movs	r2, #12
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d11f      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x1a0>
 8000f84:	4b75      	ldr	r3, [pc, #468]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	23c0      	movs	r3, #192	; 0xc0
 8000f8a:	025b      	lsls	r3, r3, #9
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d116      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	4b71      	ldr	r3, [pc, #452]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d005      	beq.n	8000fac <HAL_RCC_OscConfig+0x188>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d001      	beq.n	8000fac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e2bb      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fac:	4b6b      	ldr	r3, [pc, #428]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	22f8      	movs	r2, #248	; 0xf8
 8000fb2:	4393      	bics	r3, r2
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	00da      	lsls	r2, r3, #3
 8000fbc:	4b67      	ldr	r3, [pc, #412]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc2:	e041      	b.n	8001048 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d024      	beq.n	8001016 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fcc:	4b63      	ldr	r3, [pc, #396]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b62      	ldr	r3, [pc, #392]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fc04 	bl	80007e4 <HAL_GetTick>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe2:	f7ff fbff 	bl	80007e4 <HAL_GetTick>
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e297      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff4:	4b59      	ldr	r3, [pc, #356]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d0f1      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffe:	4b57      	ldr	r3, [pc, #348]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	22f8      	movs	r2, #248	; 0xf8
 8001004:	4393      	bics	r3, r2
 8001006:	0019      	movs	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	00da      	lsls	r2, r3, #3
 800100e:	4b53      	ldr	r3, [pc, #332]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	e018      	b.n	8001048 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001016:	4b51      	ldr	r3, [pc, #324]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b50      	ldr	r3, [pc, #320]	; (800115c <HAL_RCC_OscConfig+0x338>)
 800101c:	2101      	movs	r1, #1
 800101e:	438a      	bics	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fbdf 	bl	80007e4 <HAL_GetTick>
 8001026:	0003      	movs	r3, r0
 8001028:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102c:	f7ff fbda 	bl	80007e4 <HAL_GetTick>
 8001030:	0002      	movs	r2, r0
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e272      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103e:	4b47      	ldr	r3, [pc, #284]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2202      	movs	r2, #2
 8001044:	4013      	ands	r3, r2
 8001046:	d1f1      	bne.n	800102c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2208      	movs	r2, #8
 800104e:	4013      	ands	r3, r2
 8001050:	d036      	beq.n	80010c0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d019      	beq.n	800108e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105a:	4b40      	ldr	r3, [pc, #256]	; (800115c <HAL_RCC_OscConfig+0x338>)
 800105c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800105e:	4b3f      	ldr	r3, [pc, #252]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8001060:	2101      	movs	r1, #1
 8001062:	430a      	orrs	r2, r1
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001066:	f7ff fbbd 	bl	80007e4 <HAL_GetTick>
 800106a:	0003      	movs	r3, r0
 800106c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001070:	f7ff fbb8 	bl	80007e4 <HAL_GetTick>
 8001074:	0002      	movs	r2, r0
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e250      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001082:	4b36      	ldr	r3, [pc, #216]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	2202      	movs	r2, #2
 8001088:	4013      	ands	r3, r2
 800108a:	d0f1      	beq.n	8001070 <HAL_RCC_OscConfig+0x24c>
 800108c:	e018      	b.n	80010c0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8001090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001092:	4b32      	ldr	r3, [pc, #200]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8001094:	2101      	movs	r1, #1
 8001096:	438a      	bics	r2, r1
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109a:	f7ff fba3 	bl	80007e4 <HAL_GetTick>
 800109e:	0003      	movs	r3, r0
 80010a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a4:	f7ff fb9e 	bl	80007e4 <HAL_GetTick>
 80010a8:	0002      	movs	r2, r0
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e236      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <HAL_RCC_OscConfig+0x338>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	2202      	movs	r2, #2
 80010bc:	4013      	ands	r3, r2
 80010be:	d1f1      	bne.n	80010a4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2204      	movs	r2, #4
 80010c6:	4013      	ands	r3, r2
 80010c8:	d100      	bne.n	80010cc <HAL_RCC_OscConfig+0x2a8>
 80010ca:	e0b5      	b.n	8001238 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010cc:	201f      	movs	r0, #31
 80010ce:	183b      	adds	r3, r7, r0
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <HAL_RCC_OscConfig+0x338>)
 80010d6:	69da      	ldr	r2, [r3, #28]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	055b      	lsls	r3, r3, #21
 80010dc:	4013      	ands	r3, r2
 80010de:	d110      	bne.n	8001102 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <HAL_RCC_OscConfig+0x338>)
 80010e2:	69da      	ldr	r2, [r3, #28]
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_RCC_OscConfig+0x338>)
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	0549      	lsls	r1, r1, #21
 80010ea:	430a      	orrs	r2, r1
 80010ec:	61da      	str	r2, [r3, #28]
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_RCC_OscConfig+0x338>)
 80010f0:	69da      	ldr	r2, [r3, #28]
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	055b      	lsls	r3, r3, #21
 80010f6:	4013      	ands	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010fc:	183b      	adds	r3, r7, r0
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_RCC_OscConfig+0x344>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4013      	ands	r3, r2
 800110c:	d11a      	bne.n	8001144 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <HAL_RCC_OscConfig+0x344>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_RCC_OscConfig+0x344>)
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	0049      	lsls	r1, r1, #1
 8001118:	430a      	orrs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800111c:	f7ff fb62 	bl	80007e4 <HAL_GetTick>
 8001120:	0003      	movs	r3, r0
 8001122:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001126:	f7ff fb5d 	bl	80007e4 <HAL_GetTick>
 800112a:	0002      	movs	r2, r0
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e1f5      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_RCC_OscConfig+0x344>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4013      	ands	r3, r2
 8001142:	d0f0      	beq.n	8001126 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10f      	bne.n	800116c <HAL_RCC_OscConfig+0x348>
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_RCC_OscConfig+0x338>)
 800114e:	6a1a      	ldr	r2, [r3, #32]
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8001152:	2101      	movs	r1, #1
 8001154:	430a      	orrs	r2, r1
 8001156:	621a      	str	r2, [r3, #32]
 8001158:	e036      	b.n	80011c8 <HAL_RCC_OscConfig+0x3a4>
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	40021000 	.word	0x40021000
 8001160:	fffeffff 	.word	0xfffeffff
 8001164:	fffbffff 	.word	0xfffbffff
 8001168:	40007000 	.word	0x40007000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10c      	bne.n	800118e <HAL_RCC_OscConfig+0x36a>
 8001174:	4bca      	ldr	r3, [pc, #808]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001176:	6a1a      	ldr	r2, [r3, #32]
 8001178:	4bc9      	ldr	r3, [pc, #804]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800117a:	2101      	movs	r1, #1
 800117c:	438a      	bics	r2, r1
 800117e:	621a      	str	r2, [r3, #32]
 8001180:	4bc7      	ldr	r3, [pc, #796]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	4bc6      	ldr	r3, [pc, #792]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001186:	2104      	movs	r1, #4
 8001188:	438a      	bics	r2, r1
 800118a:	621a      	str	r2, [r3, #32]
 800118c:	e01c      	b.n	80011c8 <HAL_RCC_OscConfig+0x3a4>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b05      	cmp	r3, #5
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x38c>
 8001196:	4bc2      	ldr	r3, [pc, #776]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001198:	6a1a      	ldr	r2, [r3, #32]
 800119a:	4bc1      	ldr	r3, [pc, #772]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800119c:	2104      	movs	r1, #4
 800119e:	430a      	orrs	r2, r1
 80011a0:	621a      	str	r2, [r3, #32]
 80011a2:	4bbf      	ldr	r3, [pc, #764]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80011a4:	6a1a      	ldr	r2, [r3, #32]
 80011a6:	4bbe      	ldr	r3, [pc, #760]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80011a8:	2101      	movs	r1, #1
 80011aa:	430a      	orrs	r2, r1
 80011ac:	621a      	str	r2, [r3, #32]
 80011ae:	e00b      	b.n	80011c8 <HAL_RCC_OscConfig+0x3a4>
 80011b0:	4bbb      	ldr	r3, [pc, #748]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80011b2:	6a1a      	ldr	r2, [r3, #32]
 80011b4:	4bba      	ldr	r3, [pc, #744]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	438a      	bics	r2, r1
 80011ba:	621a      	str	r2, [r3, #32]
 80011bc:	4bb8      	ldr	r3, [pc, #736]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80011be:	6a1a      	ldr	r2, [r3, #32]
 80011c0:	4bb7      	ldr	r3, [pc, #732]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80011c2:	2104      	movs	r1, #4
 80011c4:	438a      	bics	r2, r1
 80011c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d014      	beq.n	80011fa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d0:	f7ff fb08 	bl	80007e4 <HAL_GetTick>
 80011d4:	0003      	movs	r3, r0
 80011d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d8:	e009      	b.n	80011ee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011da:	f7ff fb03 	bl	80007e4 <HAL_GetTick>
 80011de:	0002      	movs	r2, r0
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	4aaf      	ldr	r2, [pc, #700]	; (80014a4 <HAL_RCC_OscConfig+0x680>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e19a      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ee:	4bac      	ldr	r3, [pc, #688]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x3b6>
 80011f8:	e013      	b.n	8001222 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff faf3 	bl	80007e4 <HAL_GetTick>
 80011fe:	0003      	movs	r3, r0
 8001200:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001202:	e009      	b.n	8001218 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001204:	f7ff faee 	bl	80007e4 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	4aa5      	ldr	r2, [pc, #660]	; (80014a4 <HAL_RCC_OscConfig+0x680>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e185      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001218:	4ba1      	ldr	r3, [pc, #644]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	2202      	movs	r2, #2
 800121e:	4013      	ands	r3, r2
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001222:	231f      	movs	r3, #31
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d105      	bne.n	8001238 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800122c:	4b9c      	ldr	r3, [pc, #624]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800122e:	69da      	ldr	r2, [r3, #28]
 8001230:	4b9b      	ldr	r3, [pc, #620]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001232:	499d      	ldr	r1, [pc, #628]	; (80014a8 <HAL_RCC_OscConfig+0x684>)
 8001234:	400a      	ands	r2, r1
 8001236:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2210      	movs	r2, #16
 800123e:	4013      	ands	r3, r2
 8001240:	d063      	beq.n	800130a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d12a      	bne.n	80012a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800124a:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800124c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800124e:	4b94      	ldr	r3, [pc, #592]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001250:	2104      	movs	r1, #4
 8001252:	430a      	orrs	r2, r1
 8001254:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001256:	4b92      	ldr	r3, [pc, #584]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800125a:	4b91      	ldr	r3, [pc, #580]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800125c:	2101      	movs	r1, #1
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001262:	f7ff fabf 	bl	80007e4 <HAL_GetTick>
 8001266:	0003      	movs	r3, r0
 8001268:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800126c:	f7ff faba 	bl	80007e4 <HAL_GetTick>
 8001270:	0002      	movs	r2, r0
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e152      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800127e:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d0f1      	beq.n	800126c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001288:	4b85      	ldr	r3, [pc, #532]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800128a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128c:	22f8      	movs	r2, #248	; 0xf8
 800128e:	4393      	bics	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	00da      	lsls	r2, r3, #3
 8001298:	4b81      	ldr	r3, [pc, #516]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800129a:	430a      	orrs	r2, r1
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
 800129e:	e034      	b.n	800130a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	3305      	adds	r3, #5
 80012a6:	d111      	bne.n	80012cc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012a8:	4b7d      	ldr	r3, [pc, #500]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80012aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ac:	4b7c      	ldr	r3, [pc, #496]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80012ae:	2104      	movs	r1, #4
 80012b0:	438a      	bics	r2, r1
 80012b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012b4:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80012b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b8:	22f8      	movs	r2, #248	; 0xf8
 80012ba:	4393      	bics	r3, r2
 80012bc:	0019      	movs	r1, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	00da      	lsls	r2, r3, #3
 80012c4:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80012c6:	430a      	orrs	r2, r1
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ca:	e01e      	b.n	800130a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012cc:	4b74      	ldr	r3, [pc, #464]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80012ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012d0:	4b73      	ldr	r3, [pc, #460]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80012d2:	2104      	movs	r1, #4
 80012d4:	430a      	orrs	r2, r1
 80012d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012d8:	4b71      	ldr	r3, [pc, #452]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80012da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012dc:	4b70      	ldr	r3, [pc, #448]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80012de:	2101      	movs	r1, #1
 80012e0:	438a      	bics	r2, r1
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e4:	f7ff fa7e 	bl	80007e4 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012ee:	f7ff fa79 	bl	80007e4 <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e111      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001300:	4b67      	ldr	r3, [pc, #412]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001304:	2202      	movs	r2, #2
 8001306:	4013      	ands	r3, r2
 8001308:	d1f1      	bne.n	80012ee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2220      	movs	r2, #32
 8001310:	4013      	ands	r3, r2
 8001312:	d05c      	beq.n	80013ce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001314:	4b62      	ldr	r3, [pc, #392]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	220c      	movs	r2, #12
 800131a:	4013      	ands	r3, r2
 800131c:	2b0c      	cmp	r3, #12
 800131e:	d00e      	beq.n	800133e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001320:	4b5f      	ldr	r3, [pc, #380]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	220c      	movs	r2, #12
 8001326:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001328:	2b08      	cmp	r3, #8
 800132a:	d114      	bne.n	8001356 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800132c:	4b5c      	ldr	r3, [pc, #368]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	23c0      	movs	r3, #192	; 0xc0
 8001332:	025b      	lsls	r3, r3, #9
 8001334:	401a      	ands	r2, r3
 8001336:	23c0      	movs	r3, #192	; 0xc0
 8001338:	025b      	lsls	r3, r3, #9
 800133a:	429a      	cmp	r2, r3
 800133c:	d10b      	bne.n	8001356 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800133e:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	4013      	ands	r3, r2
 8001348:	d040      	beq.n	80013cc <HAL_RCC_OscConfig+0x5a8>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d03c      	beq.n	80013cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e0e6      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d01b      	beq.n	8001396 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800135e:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001362:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	0249      	lsls	r1, r1, #9
 8001368:	430a      	orrs	r2, r1
 800136a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fa3a 	bl	80007e4 <HAL_GetTick>
 8001370:	0003      	movs	r3, r0
 8001372:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001376:	f7ff fa35 	bl	80007e4 <HAL_GetTick>
 800137a:	0002      	movs	r2, r0
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e0cd      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001388:	4b45      	ldr	r3, [pc, #276]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800138a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	025b      	lsls	r3, r3, #9
 8001390:	4013      	ands	r3, r2
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x552>
 8001394:	e01b      	b.n	80013ce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001396:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139a:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800139c:	4943      	ldr	r1, [pc, #268]	; (80014ac <HAL_RCC_OscConfig+0x688>)
 800139e:	400a      	ands	r2, r1
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a2:	f7ff fa1f 	bl	80007e4 <HAL_GetTick>
 80013a6:	0003      	movs	r3, r0
 80013a8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013ac:	f7ff fa1a 	bl	80007e4 <HAL_GetTick>
 80013b0:	0002      	movs	r2, r0
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e0b2      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013be:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80013c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	025b      	lsls	r3, r3, #9
 80013c6:	4013      	ands	r3, r2
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x588>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013cc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d100      	bne.n	80013d8 <HAL_RCC_OscConfig+0x5b4>
 80013d6:	e0a4      	b.n	8001522 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	220c      	movs	r2, #12
 80013de:	4013      	ands	r3, r2
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d100      	bne.n	80013e6 <HAL_RCC_OscConfig+0x5c2>
 80013e4:	e078      	b.n	80014d8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d14c      	bne.n	8001488 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 80013f4:	492e      	ldr	r1, [pc, #184]	; (80014b0 <HAL_RCC_OscConfig+0x68c>)
 80013f6:	400a      	ands	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff f9f3 	bl	80007e4 <HAL_GetTick>
 80013fe:	0003      	movs	r3, r0
 8001400:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff f9ee 	bl	80007e4 <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e086      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	049b      	lsls	r3, r3, #18
 800141e:	4013      	ands	r3, r2
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001422:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001426:	220f      	movs	r2, #15
 8001428:	4393      	bics	r3, r2
 800142a:	0019      	movs	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001432:	430a      	orrs	r2, r1
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <HAL_RCC_OscConfig+0x690>)
 800143c:	4013      	ands	r3, r2
 800143e:	0019      	movs	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	431a      	orrs	r2, r3
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800144c:	430a      	orrs	r2, r1
 800144e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	0449      	lsls	r1, r1, #17
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145e:	f7ff f9c1 	bl	80007e4 <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff f9bc 	bl	80007e4 <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e054      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	049b      	lsls	r3, r3, #18
 8001482:	4013      	ands	r3, r2
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x644>
 8001486:	e04c      	b.n	8001522 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <HAL_RCC_OscConfig+0x67c>)
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <HAL_RCC_OscConfig+0x68c>)
 8001490:	400a      	ands	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff f9a6 	bl	80007e4 <HAL_GetTick>
 8001498:	0003      	movs	r3, r0
 800149a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x6a6>
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	40021000 	.word	0x40021000
 80014a4:	00001388 	.word	0x00001388
 80014a8:	efffffff 	.word	0xefffffff
 80014ac:	fffeffff 	.word	0xfffeffff
 80014b0:	feffffff 	.word	0xfeffffff
 80014b4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff f994 	bl	80007e4 <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e02c      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_RCC_OscConfig+0x708>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	049b      	lsls	r3, r3, #18
 80014d2:	4013      	ands	r3, r2
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x694>
 80014d6:	e024      	b.n	8001522 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e01f      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_RCC_OscConfig+0x708>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_RCC_OscConfig+0x708>)
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	23c0      	movs	r3, #192	; 0xc0
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	401a      	ands	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d10e      	bne.n	800151e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	220f      	movs	r2, #15
 8001504:	401a      	ands	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d107      	bne.n	800151e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	23f0      	movs	r3, #240	; 0xf0
 8001512:	039b      	lsls	r3, r3, #14
 8001514:	401a      	ands	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800151a:	429a      	cmp	r2, r3
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b008      	add	sp, #32
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000

08001530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0bf      	b.n	80016c4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001544:	4b61      	ldr	r3, [pc, #388]	; (80016cc <HAL_RCC_ClockConfig+0x19c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2201      	movs	r2, #1
 800154a:	4013      	ands	r3, r2
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d911      	bls.n	8001576 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b5e      	ldr	r3, [pc, #376]	; (80016cc <HAL_RCC_ClockConfig+0x19c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2201      	movs	r2, #1
 8001558:	4393      	bics	r3, r2
 800155a:	0019      	movs	r1, r3
 800155c:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <HAL_RCC_ClockConfig+0x19c>)
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001564:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_RCC_ClockConfig+0x19c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2201      	movs	r2, #1
 800156a:	4013      	ands	r3, r2
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d001      	beq.n	8001576 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0a6      	b.n	80016c4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2202      	movs	r2, #2
 800157c:	4013      	ands	r3, r2
 800157e:	d015      	beq.n	80015ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2204      	movs	r2, #4
 8001586:	4013      	ands	r3, r2
 8001588:	d006      	beq.n	8001598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800158a:	4b51      	ldr	r3, [pc, #324]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 8001590:	21e0      	movs	r1, #224	; 0xe0
 8001592:	00c9      	lsls	r1, r1, #3
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001598:	4b4d      	ldr	r3, [pc, #308]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	22f0      	movs	r2, #240	; 0xf0
 800159e:	4393      	bics	r3, r2
 80015a0:	0019      	movs	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	4b4a      	ldr	r3, [pc, #296]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 80015a8:	430a      	orrs	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	d04c      	beq.n	8001650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	029b      	lsls	r3, r3, #10
 80015c6:	4013      	ands	r3, r2
 80015c8:	d120      	bne.n	800160c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e07a      	b.n	80016c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d6:	4b3e      	ldr	r3, [pc, #248]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	049b      	lsls	r3, r3, #18
 80015de:	4013      	ands	r3, r2
 80015e0:	d114      	bne.n	800160c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e06e      	b.n	80016c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 80015f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	025b      	lsls	r3, r3, #9
 80015f6:	4013      	ands	r3, r2
 80015f8:	d108      	bne.n	800160c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e062      	b.n	80016c4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fe:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2202      	movs	r2, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d101      	bne.n	800160c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e05b      	b.n	80016c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	4393      	bics	r3, r2
 8001614:	0019      	movs	r1, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 800161c:	430a      	orrs	r2, r1
 800161e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001620:	f7ff f8e0 	bl	80007e4 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001628:	e009      	b.n	800163e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162a:	f7ff f8db 	bl	80007e4 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <HAL_RCC_ClockConfig+0x1a4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e042      	b.n	80016c4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	220c      	movs	r2, #12
 8001644:	401a      	ands	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	429a      	cmp	r2, r3
 800164e:	d1ec      	bne.n	800162a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_RCC_ClockConfig+0x19c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2201      	movs	r2, #1
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d211      	bcs.n	8001682 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_RCC_ClockConfig+0x19c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	4393      	bics	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_RCC_ClockConfig+0x19c>)
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_RCC_ClockConfig+0x19c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	4013      	ands	r3, r2
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d001      	beq.n	8001682 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e020      	b.n	80016c4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2204      	movs	r2, #4
 8001688:	4013      	ands	r3, r2
 800168a:	d009      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <HAL_RCC_ClockConfig+0x1a8>)
 8001692:	4013      	ands	r3, r2
 8001694:	0019      	movs	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 800169c:	430a      	orrs	r2, r1
 800169e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016a0:	f000 f820 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 80016a4:	0001      	movs	r1, r0
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_RCC_ClockConfig+0x1a0>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	220f      	movs	r2, #15
 80016ae:	4013      	ands	r3, r2
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_RCC_ClockConfig+0x1ac>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	000a      	movs	r2, r1
 80016b6:	40da      	lsrs	r2, r3
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_RCC_ClockConfig+0x1b0>)
 80016ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff f84b 	bl	8000758 <HAL_InitTick>
  
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b004      	add	sp, #16
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40022000 	.word	0x40022000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	00001388 	.word	0x00001388
 80016d8:	fffff8ff 	.word	0xfffff8ff
 80016dc:	08002f84 	.word	0x08002f84
 80016e0:	20000000 	.word	0x20000000

080016e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b08f      	sub	sp, #60	; 0x3c
 80016e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016ea:	2314      	movs	r3, #20
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	4a38      	ldr	r2, [pc, #224]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xec>)
 80016f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016f2:	c313      	stmia	r3!, {r0, r1, r4}
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4a36      	ldr	r2, [pc, #216]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80016fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001718:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001720:	220c      	movs	r2, #12
 8001722:	4013      	ands	r3, r2
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d047      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0xd4>
 8001728:	d849      	bhi.n	80017be <HAL_RCC_GetSysClockFreq+0xda>
 800172a:	2b04      	cmp	r3, #4
 800172c:	d002      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x50>
 800172e:	2b08      	cmp	r3, #8
 8001730:	d003      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x56>
 8001732:	e044      	b.n	80017be <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001734:	4b29      	ldr	r3, [pc, #164]	; (80017dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001738:	e044      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	0c9b      	lsrs	r3, r3, #18
 800173e:	220f      	movs	r2, #15
 8001740:	4013      	ands	r3, r2
 8001742:	2214      	movs	r2, #20
 8001744:	18ba      	adds	r2, r7, r2
 8001746:	5cd3      	ldrb	r3, [r2, r3]
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	220f      	movs	r2, #15
 8001750:	4013      	ands	r3, r2
 8001752:	1d3a      	adds	r2, r7, #4
 8001754:	5cd3      	ldrb	r3, [r2, r3]
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175a:	23c0      	movs	r3, #192	; 0xc0
 800175c:	025b      	lsls	r3, r3, #9
 800175e:	401a      	ands	r2, r3
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	025b      	lsls	r3, r3, #9
 8001764:	429a      	cmp	r2, r3
 8001766:	d109      	bne.n	800177c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800176a:	481c      	ldr	r0, [pc, #112]	; (80017dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800176c:	f7fe fccc 	bl	8000108 <__udivsi3>
 8001770:	0003      	movs	r3, r0
 8001772:	001a      	movs	r2, r3
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	4353      	muls	r3, r2
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
 800177a:	e01a      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800177c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177e:	23c0      	movs	r3, #192	; 0xc0
 8001780:	025b      	lsls	r3, r3, #9
 8001782:	401a      	ands	r2, r3
 8001784:	23c0      	movs	r3, #192	; 0xc0
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	429a      	cmp	r2, r3
 800178a:	d109      	bne.n	80017a0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800178c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800178e:	4814      	ldr	r0, [pc, #80]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001790:	f7fe fcba 	bl	8000108 <__udivsi3>
 8001794:	0003      	movs	r3, r0
 8001796:	001a      	movs	r2, r3
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	4353      	muls	r3, r2
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
 800179e:	e008      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017a2:	480e      	ldr	r0, [pc, #56]	; (80017dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a4:	f7fe fcb0 	bl	8000108 <__udivsi3>
 80017a8:	0003      	movs	r3, r0
 80017aa:	001a      	movs	r2, r3
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	4353      	muls	r3, r2
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80017b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017b6:	e005      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017bc:	e002      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b00f      	add	sp, #60	; 0x3c
 80017cc:	bd90      	pop	{r4, r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	08002f64 	.word	0x08002f64
 80017d4:	08002f74 	.word	0x08002f74
 80017d8:	40021000 	.word	0x40021000
 80017dc:	007a1200 	.word	0x007a1200
 80017e0:	02dc6c00 	.word	0x02dc6c00

080017e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e8:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	20000000 	.word	0x20000000

080017f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017fc:	f7ff fff2 	bl	80017e4 <HAL_RCC_GetHCLKFreq>
 8001800:	0001      	movs	r1, r0
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	2207      	movs	r2, #7
 800180a:	4013      	ands	r3, r2
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	40d9      	lsrs	r1, r3
 8001812:	000b      	movs	r3, r1
}    
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	40021000 	.word	0x40021000
 8001820:	08002f94 	.word	0x08002f94

08001824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	025b      	lsls	r3, r3, #9
 800183c:	4013      	ands	r3, r2
 800183e:	d100      	bne.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001840:	e08e      	b.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2017      	movs	r0, #23
 8001844:	183b      	adds	r3, r7, r0
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184a:	4b6e      	ldr	r3, [pc, #440]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800184c:	69da      	ldr	r2, [r3, #28]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	055b      	lsls	r3, r3, #21
 8001852:	4013      	ands	r3, r2
 8001854:	d110      	bne.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b6b      	ldr	r3, [pc, #428]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	0549      	lsls	r1, r1, #21
 8001860:	430a      	orrs	r2, r1
 8001862:	61da      	str	r2, [r3, #28]
 8001864:	4b67      	ldr	r3, [pc, #412]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001866:	69da      	ldr	r2, [r3, #28]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	055b      	lsls	r3, r3, #21
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001872:	183b      	adds	r3, r7, r0
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4013      	ands	r3, r2
 8001882:	d11a      	bne.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001884:	4b60      	ldr	r3, [pc, #384]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b5f      	ldr	r3, [pc, #380]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	0049      	lsls	r1, r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001892:	f7fe ffa7 	bl	80007e4 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189a:	e008      	b.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189c:	f7fe ffa2 	bl	80007e4 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0a6      	b.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ae:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4013      	ands	r3, r2
 80018b8:	d0f0      	beq.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018ba:	4b52      	ldr	r3, [pc, #328]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018bc:	6a1a      	ldr	r2, [r3, #32]
 80018be:	23c0      	movs	r3, #192	; 0xc0
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4013      	ands	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d034      	beq.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	23c0      	movs	r3, #192	; 0xc0
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d02c      	beq.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018dc:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4a4a      	ldr	r2, [pc, #296]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018e8:	6a1a      	ldr	r2, [r3, #32]
 80018ea:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	0249      	lsls	r1, r1, #9
 80018f0:	430a      	orrs	r2, r1
 80018f2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018f6:	6a1a      	ldr	r2, [r3, #32]
 80018f8:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018fa:	4945      	ldr	r1, [pc, #276]	; (8001a10 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001900:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	4013      	ands	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7fe ff69 	bl	80007e4 <HAL_GetTick>
 8001912:	0003      	movs	r3, r0
 8001914:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001916:	e009      	b.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7fe ff64 	bl	80007e4 <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	4a3c      	ldr	r2, [pc, #240]	; (8001a14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e067      	b.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	2202      	movs	r2, #2
 8001932:	4013      	ands	r3, r2
 8001934:	d0f0      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001936:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a34      	ldr	r2, [pc, #208]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800193c:	4013      	ands	r3, r2
 800193e:	0019      	movs	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001946:	430a      	orrs	r2, r1
 8001948:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800194a:	2317      	movs	r3, #23
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001956:	69da      	ldr	r2, [r3, #28]
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800195a:	492f      	ldr	r1, [pc, #188]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800195c:	400a      	ands	r2, r1
 800195e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	4013      	ands	r3, r2
 8001968:	d009      	beq.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	2203      	movs	r2, #3
 8001970:	4393      	bics	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800197a:	430a      	orrs	r2, r1
 800197c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2202      	movs	r2, #2
 8001984:	4013      	ands	r3, r2
 8001986:	d009      	beq.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800198e:	4013      	ands	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001998:	430a      	orrs	r2, r1
 800199a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2220      	movs	r2, #32
 80019a2:	4013      	ands	r3, r2
 80019a4:	d009      	beq.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	2210      	movs	r2, #16
 80019ac:	4393      	bics	r3, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019b6:	430a      	orrs	r2, r1
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	029b      	lsls	r3, r3, #10
 80019c2:	4013      	ands	r3, r2
 80019c4:	d009      	beq.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	2280      	movs	r2, #128	; 0x80
 80019cc:	4393      	bics	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699a      	ldr	r2, [r3, #24]
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019d6:	430a      	orrs	r2, r1
 80019d8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4013      	ands	r3, r2
 80019e4:	d009      	beq.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	4393      	bics	r3, r2
 80019ee:	0019      	movs	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f6:	430a      	orrs	r2, r1
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b006      	add	sp, #24
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	fffffcff 	.word	0xfffffcff
 8001a10:	fffeffff 	.word	0xfffeffff
 8001a14:	00001388 	.word	0x00001388
 8001a18:	efffffff 	.word	0xefffffff
 8001a1c:	fffcffff 	.word	0xfffcffff

08001a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e044      	b.n	8001abc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d107      	bne.n	8001a4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2274      	movs	r2, #116	; 0x74
 8001a3e:	2100      	movs	r1, #0
 8001a40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7fe fdb1 	bl	80005ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2224      	movs	r2, #36	; 0x24
 8001a4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	438a      	bics	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	0018      	movs	r0, r3
 8001a64:	f000 fc36 	bl	80022d4 <UART_SetConfig>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e024      	b.n	8001abc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f000 fdb1 	bl	80025e4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	490d      	ldr	r1, [pc, #52]	; (8001ac4 <HAL_UART_Init+0xa4>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	212a      	movs	r1, #42	; 0x2a
 8001a9e:	438a      	bics	r2, r1
 8001aa0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2101      	movs	r1, #1
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 fe49 	bl	800274c <UART_CheckIdleState>
 8001aba:	0003      	movs	r3, r0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b002      	add	sp, #8
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	ffffb7ff 	.word	0xffffb7ff

08001ac8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	1dbb      	adds	r3, r7, #6
 8001ad6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	d000      	beq.n	8001ae2 <HAL_UART_Transmit+0x1a>
 8001ae0:	e096      	b.n	8001c10 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_UART_Transmit+0x28>
 8001ae8:	1dbb      	adds	r3, r7, #6
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e08e      	b.n	8001c12 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	015b      	lsls	r3, r3, #5
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d109      	bne.n	8001b14 <HAL_UART_Transmit+0x4c>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d001      	beq.n	8001b14 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e07e      	b.n	8001c12 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2274      	movs	r2, #116	; 0x74
 8001b18:	5c9b      	ldrb	r3, [r3, r2]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_UART_Transmit+0x5a>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e077      	b.n	8001c12 <HAL_UART_Transmit+0x14a>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2274      	movs	r2, #116	; 0x74
 8001b26:	2101      	movs	r1, #1
 8001b28:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	2100      	movs	r1, #0
 8001b30:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2221      	movs	r2, #33	; 0x21
 8001b36:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b38:	f7fe fe54 	bl	80007e4 <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1dba      	adds	r2, r7, #6
 8001b44:	2150      	movs	r1, #80	; 0x50
 8001b46:	8812      	ldrh	r2, [r2, #0]
 8001b48:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1dba      	adds	r2, r7, #6
 8001b4e:	2152      	movs	r1, #82	; 0x52
 8001b50:	8812      	ldrh	r2, [r2, #0]
 8001b52:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	015b      	lsls	r3, r3, #5
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d108      	bne.n	8001b72 <HAL_UART_Transmit+0xaa>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d104      	bne.n	8001b72 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	e003      	b.n	8001b7a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2274      	movs	r2, #116	; 0x74
 8001b7e:	2100      	movs	r1, #0
 8001b80:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001b82:	e02d      	b.n	8001be0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	f000 fe23 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e039      	b.n	8001c12 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10b      	bne.n	8001bbc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	881a      	ldrh	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	05d2      	lsls	r2, r2, #23
 8001bae:	0dd2      	lsrs	r2, r2, #23
 8001bb0:	b292      	uxth	r2, r2
 8001bb2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	e008      	b.n	8001bce <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b292      	uxth	r2, r2
 8001bc6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2252      	movs	r2, #82	; 0x52
 8001bd2:	5a9b      	ldrh	r3, [r3, r2]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b299      	uxth	r1, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2252      	movs	r2, #82	; 0x52
 8001bde:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2252      	movs	r2, #82	; 0x52
 8001be4:	5a9b      	ldrh	r3, [r3, r2]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1cb      	bne.n	8001b84 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	0013      	movs	r3, r2
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2140      	movs	r1, #64	; 0x40
 8001bfa:	f000 fdef 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 8001bfe:	1e03      	subs	r3, r0, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e005      	b.n	8001c12 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e000      	b.n	8001c12 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001c10:	2302      	movs	r3, #2
  }
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b008      	add	sp, #32
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b088      	sub	sp, #32
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	1dbb      	adds	r3, r7, #6
 8001c26:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d150      	bne.n	8001cd2 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_UART_Receive_IT+0x24>
 8001c36:	1dbb      	adds	r3, r7, #6
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e048      	b.n	8001cd4 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	015b      	lsls	r3, r3, #5
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d109      	bne.n	8001c62 <HAL_UART_Receive_IT+0x48>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d001      	beq.n	8001c62 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e038      	b.n	8001cd4 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2274      	movs	r2, #116	; 0x74
 8001c66:	5c9b      	ldrb	r3, [r3, r2]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_UART_Receive_IT+0x56>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e031      	b.n	8001cd4 <HAL_UART_Receive_IT+0xba>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2274      	movs	r2, #116	; 0x74
 8001c74:	2101      	movs	r1, #1
 8001c76:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	041b      	lsls	r3, r3, #16
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d019      	beq.n	8001cc0 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8001c90:	613b      	str	r3, [r7, #16]
  return(result);
 8001c92:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f383 8810 	msr	PRIMASK, r3
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	04c9      	lsls	r1, r1, #19
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f383 8810 	msr	PRIMASK, r3
}
 8001cbe:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001cc0:	1dbb      	adds	r3, r7, #6
 8001cc2:	881a      	ldrh	r2, [r3, #0]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f000 fe4b 	bl	8002964 <UART_Start_Receive_IT>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	e000      	b.n	8001cd4 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
  }
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b008      	add	sp, #32
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b0ab      	sub	sp, #172	; 0xac
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	22a4      	movs	r2, #164	; 0xa4
 8001cec:	18b9      	adds	r1, r7, r2
 8001cee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	20a0      	movs	r0, #160	; 0xa0
 8001cf8:	1839      	adds	r1, r7, r0
 8001cfa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	219c      	movs	r1, #156	; 0x9c
 8001d04:	1879      	adds	r1, r7, r1
 8001d06:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001d08:	0011      	movs	r1, r2
 8001d0a:	18bb      	adds	r3, r7, r2
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a99      	ldr	r2, [pc, #612]	; (8001f74 <HAL_UART_IRQHandler+0x298>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	2298      	movs	r2, #152	; 0x98
 8001d14:	18bc      	adds	r4, r7, r2
 8001d16:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001d18:	18bb      	adds	r3, r7, r2
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d114      	bne.n	8001d4a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2220      	movs	r2, #32
 8001d26:	4013      	ands	r3, r2
 8001d28:	d00f      	beq.n	8001d4a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d2a:	183b      	adds	r3, r7, r0
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	4013      	ands	r3, r2
 8001d32:	d00a      	beq.n	8001d4a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d100      	bne.n	8001d3e <HAL_UART_IRQHandler+0x62>
 8001d3c:	e296      	b.n	800226c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	0010      	movs	r0, r2
 8001d46:	4798      	blx	r3
      }
      return;
 8001d48:	e290      	b.n	800226c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001d4a:	2398      	movs	r3, #152	; 0x98
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d100      	bne.n	8001d56 <HAL_UART_IRQHandler+0x7a>
 8001d54:	e114      	b.n	8001f80 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001d56:	239c      	movs	r3, #156	; 0x9c
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d106      	bne.n	8001d70 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001d62:	23a0      	movs	r3, #160	; 0xa0
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a83      	ldr	r2, [pc, #524]	; (8001f78 <HAL_UART_IRQHandler+0x29c>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d100      	bne.n	8001d70 <HAL_UART_IRQHandler+0x94>
 8001d6e:	e107      	b.n	8001f80 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001d70:	23a4      	movs	r3, #164	; 0xa4
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2201      	movs	r2, #1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d012      	beq.n	8001da2 <HAL_UART_IRQHandler+0xc6>
 8001d7c:	23a0      	movs	r3, #160	; 0xa0
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	d00b      	beq.n	8001da2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2280      	movs	r2, #128	; 0x80
 8001d96:	589b      	ldr	r3, [r3, r2]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2180      	movs	r1, #128	; 0x80
 8001da0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001da2:	23a4      	movs	r3, #164	; 0xa4
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	d011      	beq.n	8001dd2 <HAL_UART_IRQHandler+0xf6>
 8001dae:	239c      	movs	r3, #156	; 0x9c
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2201      	movs	r2, #1
 8001db6:	4013      	ands	r3, r2
 8001db8:	d00b      	beq.n	8001dd2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2280      	movs	r2, #128	; 0x80
 8001dc6:	589b      	ldr	r3, [r3, r2]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001dd2:	23a4      	movs	r3, #164	; 0xa4
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2204      	movs	r2, #4
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d011      	beq.n	8001e02 <HAL_UART_IRQHandler+0x126>
 8001dde:	239c      	movs	r3, #156	; 0x9c
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	d00b      	beq.n	8001e02 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2204      	movs	r2, #4
 8001df0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	589b      	ldr	r3, [r3, r2]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2180      	movs	r1, #128	; 0x80
 8001e00:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001e02:	23a4      	movs	r3, #164	; 0xa4
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2208      	movs	r2, #8
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d017      	beq.n	8001e3e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e0e:	23a0      	movs	r3, #160	; 0xa0
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2220      	movs	r2, #32
 8001e16:	4013      	ands	r3, r2
 8001e18:	d105      	bne.n	8001e26 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001e1a:	239c      	movs	r3, #156	; 0x9c
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2201      	movs	r2, #1
 8001e22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e24:	d00b      	beq.n	8001e3e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	589b      	ldr	r3, [r3, r2]
 8001e34:	2208      	movs	r2, #8
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2180      	movs	r1, #128	; 0x80
 8001e3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001e3e:	23a4      	movs	r3, #164	; 0xa4
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_UART_IRQHandler+0x198>
 8001e4c:	23a0      	movs	r3, #160	; 0xa0
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	04db      	lsls	r3, r3, #19
 8001e56:	4013      	ands	r3, r2
 8001e58:	d00c      	beq.n	8001e74 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2280      	movs	r2, #128	; 0x80
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	589b      	ldr	r3, [r3, r2]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2180      	movs	r1, #128	; 0x80
 8001e72:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	589b      	ldr	r3, [r3, r2]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d100      	bne.n	8001e80 <HAL_UART_IRQHandler+0x1a4>
 8001e7e:	e1f7      	b.n	8002270 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001e80:	23a4      	movs	r3, #164	; 0xa4
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2220      	movs	r2, #32
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d00e      	beq.n	8001eaa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001e8c:	23a0      	movs	r3, #160	; 0xa0
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2220      	movs	r2, #32
 8001e94:	4013      	ands	r3, r2
 8001e96:	d008      	beq.n	8001eaa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	589b      	ldr	r3, [r3, r2]
 8001eb0:	2194      	movs	r1, #148	; 0x94
 8001eb2:	187a      	adds	r2, r7, r1
 8001eb4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2240      	movs	r2, #64	; 0x40
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b40      	cmp	r3, #64	; 0x40
 8001ec2:	d004      	beq.n	8001ece <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2228      	movs	r2, #40	; 0x28
 8001eca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ecc:	d047      	beq.n	8001f5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f000 fdf7 	bl	8002ac4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2240      	movs	r2, #64	; 0x40
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b40      	cmp	r3, #64	; 0x40
 8001ee2:	d137      	bne.n	8001f54 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8001ee8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eec:	2090      	movs	r0, #144	; 0x90
 8001eee:	183a      	adds	r2, r7, r0
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ef8:	f383 8810 	msr	PRIMASK, r3
}
 8001efc:	46c0      	nop			; (mov r8, r8)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2140      	movs	r1, #64	; 0x40
 8001f0a:	438a      	bics	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	183b      	adds	r3, r7, r0
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f16:	f383 8810 	msr	PRIMASK, r3
}
 8001f1a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d012      	beq.n	8001f4a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f28:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <HAL_UART_IRQHandler+0x2a0>)
 8001f2a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7fe fd9b 	bl	8000a6c <HAL_DMA_Abort_IT>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d01a      	beq.n	8001f70 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	0018      	movs	r0, r3
 8001f46:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f48:	e012      	b.n	8001f70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f000 f9ad 	bl	80022ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f52:	e00d      	b.n	8001f70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 f9a8 	bl	80022ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f5c:	e008      	b.n	8001f70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f000 f9a3 	bl	80022ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2280      	movs	r2, #128	; 0x80
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001f6e:	e17f      	b.n	8002270 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f70:	46c0      	nop			; (mov r8, r8)
    return;
 8001f72:	e17d      	b.n	8002270 <HAL_UART_IRQHandler+0x594>
 8001f74:	0000080f 	.word	0x0000080f
 8001f78:	04000120 	.word	0x04000120
 8001f7c:	08002b89 	.word	0x08002b89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d000      	beq.n	8001f8a <HAL_UART_IRQHandler+0x2ae>
 8001f88:	e131      	b.n	80021ee <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001f8a:	23a4      	movs	r3, #164	; 0xa4
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2210      	movs	r2, #16
 8001f92:	4013      	ands	r3, r2
 8001f94:	d100      	bne.n	8001f98 <HAL_UART_IRQHandler+0x2bc>
 8001f96:	e12a      	b.n	80021ee <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001f98:	23a0      	movs	r3, #160	; 0xa0
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d100      	bne.n	8001fa6 <HAL_UART_IRQHandler+0x2ca>
 8001fa4:	e123      	b.n	80021ee <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2210      	movs	r2, #16
 8001fac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2240      	movs	r2, #64	; 0x40
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b40      	cmp	r3, #64	; 0x40
 8001fba:	d000      	beq.n	8001fbe <HAL_UART_IRQHandler+0x2e2>
 8001fbc:	e09b      	b.n	80020f6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	217e      	movs	r1, #126	; 0x7e
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d100      	bne.n	8001fd6 <HAL_UART_IRQHandler+0x2fa>
 8001fd4:	e14e      	b.n	8002274 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2258      	movs	r2, #88	; 0x58
 8001fda:	5a9b      	ldrh	r3, [r3, r2]
 8001fdc:	187a      	adds	r2, r7, r1
 8001fde:	8812      	ldrh	r2, [r2, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d300      	bcc.n	8001fe6 <HAL_UART_IRQHandler+0x30a>
 8001fe4:	e146      	b.n	8002274 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	187a      	adds	r2, r7, r1
 8001fea:	215a      	movs	r1, #90	; 0x5a
 8001fec:	8812      	ldrh	r2, [r2, #0]
 8001fee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	d06e      	beq.n	80020d8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002002:	67bb      	str	r3, [r7, #120]	; 0x78
 8002004:	2301      	movs	r3, #1
 8002006:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200a:	f383 8810 	msr	PRIMASK, r3
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	499a      	ldr	r1, [pc, #616]	; (8002284 <HAL_UART_IRQHandler+0x5a8>)
 800201c:	400a      	ands	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002022:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002026:	f383 8810 	msr	PRIMASK, r3
}
 800202a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800202c:	f3ef 8310 	mrs	r3, PRIMASK
 8002030:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002034:	677b      	str	r3, [r7, #116]	; 0x74
 8002036:	2301      	movs	r3, #1
 8002038:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800203a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800203c:	f383 8810 	msr	PRIMASK, r3
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2101      	movs	r1, #1
 800204e:	438a      	bics	r2, r1
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002054:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002058:	f383 8810 	msr	PRIMASK, r3
}
 800205c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800205e:	f3ef 8310 	mrs	r3, PRIMASK
 8002062:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002064:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002066:	673b      	str	r3, [r7, #112]	; 0x70
 8002068:	2301      	movs	r3, #1
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800206c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800206e:	f383 8810 	msr	PRIMASK, r3
}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2140      	movs	r1, #64	; 0x40
 8002080:	438a      	bics	r2, r1
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002086:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800208a:	f383 8810 	msr	PRIMASK, r3
}
 800208e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800209c:	f3ef 8310 	mrs	r3, PRIMASK
 80020a0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80020a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020a6:	2301      	movs	r3, #1
 80020a8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ac:	f383 8810 	msr	PRIMASK, r3
}
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2110      	movs	r1, #16
 80020be:	438a      	bics	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c8:	f383 8810 	msr	PRIMASK, r3
}
 80020cc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7fe fc92 	bl	80009fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2258      	movs	r2, #88	; 0x58
 80020dc:	5a9a      	ldrh	r2, [r3, r2]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	215a      	movs	r1, #90	; 0x5a
 80020e2:	5a5b      	ldrh	r3, [r3, r1]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0011      	movs	r1, r2
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 f8e4 	bl	80022bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80020f4:	e0be      	b.n	8002274 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2258      	movs	r2, #88	; 0x58
 80020fa:	5a99      	ldrh	r1, [r3, r2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	225a      	movs	r2, #90	; 0x5a
 8002100:	5a9b      	ldrh	r3, [r3, r2]
 8002102:	b29a      	uxth	r2, r3
 8002104:	208e      	movs	r0, #142	; 0x8e
 8002106:	183b      	adds	r3, r7, r0
 8002108:	1a8a      	subs	r2, r1, r2
 800210a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	225a      	movs	r2, #90	; 0x5a
 8002110:	5a9b      	ldrh	r3, [r3, r2]
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d100      	bne.n	800211a <HAL_UART_IRQHandler+0x43e>
 8002118:	e0ae      	b.n	8002278 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800211a:	183b      	adds	r3, r7, r0
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d100      	bne.n	8002124 <HAL_UART_IRQHandler+0x448>
 8002122:	e0a9      	b.n	8002278 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002124:	f3ef 8310 	mrs	r3, PRIMASK
 8002128:	60fb      	str	r3, [r7, #12]
  return(result);
 800212a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800212c:	2488      	movs	r4, #136	; 0x88
 800212e:	193a      	adds	r2, r7, r4
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	2301      	movs	r3, #1
 8002134:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f383 8810 	msr	PRIMASK, r3
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	494f      	ldr	r1, [pc, #316]	; (8002288 <HAL_UART_IRQHandler+0x5ac>)
 800214a:	400a      	ands	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	193b      	adds	r3, r7, r4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f383 8810 	msr	PRIMASK, r3
}
 800215a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800215c:	f3ef 8310 	mrs	r3, PRIMASK
 8002160:	61bb      	str	r3, [r7, #24]
  return(result);
 8002162:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002164:	2484      	movs	r4, #132	; 0x84
 8002166:	193a      	adds	r2, r7, r4
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	2301      	movs	r3, #1
 800216c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f383 8810 	msr	PRIMASK, r3
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	438a      	bics	r2, r1
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	193b      	adds	r3, r7, r4
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	f383 8810 	msr	PRIMASK, r3
}
 8002192:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021a6:	f3ef 8310 	mrs	r3, PRIMASK
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021ae:	2480      	movs	r4, #128	; 0x80
 80021b0:	193a      	adds	r2, r7, r4
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	2301      	movs	r3, #1
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	f383 8810 	msr	PRIMASK, r3
}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2110      	movs	r1, #16
 80021cc:	438a      	bics	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	193b      	adds	r3, r7, r4
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d8:	f383 8810 	msr	PRIMASK, r3
}
 80021dc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021de:	183b      	adds	r3, r7, r0
 80021e0:	881a      	ldrh	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0011      	movs	r1, r2
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 f868 	bl	80022bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80021ec:	e044      	b.n	8002278 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80021ee:	23a4      	movs	r3, #164	; 0xa4
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	035b      	lsls	r3, r3, #13
 80021f8:	4013      	ands	r3, r2
 80021fa:	d010      	beq.n	800221e <HAL_UART_IRQHandler+0x542>
 80021fc:	239c      	movs	r3, #156	; 0x9c
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	03db      	lsls	r3, r3, #15
 8002206:	4013      	ands	r3, r2
 8002208:	d009      	beq.n	800221e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2280      	movs	r2, #128	; 0x80
 8002210:	0352      	lsls	r2, r2, #13
 8002212:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0018      	movs	r0, r3
 8002218:	f000 fe60 	bl	8002edc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800221c:	e02f      	b.n	800227e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800221e:	23a4      	movs	r3, #164	; 0xa4
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	4013      	ands	r3, r2
 8002228:	d00f      	beq.n	800224a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800222a:	23a0      	movs	r3, #160	; 0xa0
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	4013      	ands	r3, r2
 8002234:	d009      	beq.n	800224a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01e      	beq.n	800227c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	0010      	movs	r0, r2
 8002246:	4798      	blx	r3
    }
    return;
 8002248:	e018      	b.n	800227c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800224a:	23a4      	movs	r3, #164	; 0xa4
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2240      	movs	r2, #64	; 0x40
 8002252:	4013      	ands	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_UART_IRQHandler+0x5a2>
 8002256:	23a0      	movs	r3, #160	; 0xa0
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2240      	movs	r2, #64	; 0x40
 800225e:	4013      	ands	r3, r2
 8002260:	d00d      	beq.n	800227e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f000 fca6 	bl	8002bb6 <UART_EndTransmit_IT>
    return;
 800226a:	e008      	b.n	800227e <HAL_UART_IRQHandler+0x5a2>
      return;
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	e006      	b.n	800227e <HAL_UART_IRQHandler+0x5a2>
    return;
 8002270:	46c0      	nop			; (mov r8, r8)
 8002272:	e004      	b.n	800227e <HAL_UART_IRQHandler+0x5a2>
      return;
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	e002      	b.n	800227e <HAL_UART_IRQHandler+0x5a2>
      return;
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	e000      	b.n	800227e <HAL_UART_IRQHandler+0x5a2>
    return;
 800227c:	46c0      	nop			; (mov r8, r8)
  }

}
 800227e:	46bd      	mov	sp, r7
 8002280:	b02b      	add	sp, #172	; 0xac
 8002282:	bd90      	pop	{r4, r7, pc}
 8002284:	fffffeff 	.word	0xfffffeff
 8002288:	fffffedf 	.word	0xfffffedf

0800228c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b002      	add	sp, #8
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	000a      	movs	r2, r1
 80022c6:	1cbb      	adds	r3, r7, #2
 80022c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b002      	add	sp, #8
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022dc:	231e      	movs	r3, #30
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4aaf      	ldr	r2, [pc, #700]	; (80025c0 <UART_SetConfig+0x2ec>)
 8002304:	4013      	ands	r3, r2
 8002306:	0019      	movs	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	430a      	orrs	r2, r1
 8002310:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4aaa      	ldr	r2, [pc, #680]	; (80025c4 <UART_SetConfig+0x2f0>)
 800231a:	4013      	ands	r3, r2
 800231c:	0019      	movs	r1, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4aa1      	ldr	r2, [pc, #644]	; (80025c8 <UART_SetConfig+0x2f4>)
 8002342:	4013      	ands	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	430a      	orrs	r2, r1
 800234e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a9d      	ldr	r2, [pc, #628]	; (80025cc <UART_SetConfig+0x2f8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d127      	bne.n	80023aa <UART_SetConfig+0xd6>
 800235a:	4b9d      	ldr	r3, [pc, #628]	; (80025d0 <UART_SetConfig+0x2fc>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	2203      	movs	r2, #3
 8002360:	4013      	ands	r3, r2
 8002362:	2b03      	cmp	r3, #3
 8002364:	d00d      	beq.n	8002382 <UART_SetConfig+0xae>
 8002366:	d81b      	bhi.n	80023a0 <UART_SetConfig+0xcc>
 8002368:	2b02      	cmp	r3, #2
 800236a:	d014      	beq.n	8002396 <UART_SetConfig+0xc2>
 800236c:	d818      	bhi.n	80023a0 <UART_SetConfig+0xcc>
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <UART_SetConfig+0xa4>
 8002372:	2b01      	cmp	r3, #1
 8002374:	d00a      	beq.n	800238c <UART_SetConfig+0xb8>
 8002376:	e013      	b.n	80023a0 <UART_SetConfig+0xcc>
 8002378:	231f      	movs	r3, #31
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e065      	b.n	800244e <UART_SetConfig+0x17a>
 8002382:	231f      	movs	r3, #31
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2202      	movs	r2, #2
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e060      	b.n	800244e <UART_SetConfig+0x17a>
 800238c:	231f      	movs	r3, #31
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2204      	movs	r2, #4
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	e05b      	b.n	800244e <UART_SetConfig+0x17a>
 8002396:	231f      	movs	r3, #31
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	2208      	movs	r2, #8
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e056      	b.n	800244e <UART_SetConfig+0x17a>
 80023a0:	231f      	movs	r3, #31
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2210      	movs	r2, #16
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e051      	b.n	800244e <UART_SetConfig+0x17a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a89      	ldr	r2, [pc, #548]	; (80025d4 <UART_SetConfig+0x300>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d134      	bne.n	800241e <UART_SetConfig+0x14a>
 80023b4:	4b86      	ldr	r3, [pc, #536]	; (80025d0 <UART_SetConfig+0x2fc>)
 80023b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b8:	23c0      	movs	r3, #192	; 0xc0
 80023ba:	029b      	lsls	r3, r3, #10
 80023bc:	4013      	ands	r3, r2
 80023be:	22c0      	movs	r2, #192	; 0xc0
 80023c0:	0292      	lsls	r2, r2, #10
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d017      	beq.n	80023f6 <UART_SetConfig+0x122>
 80023c6:	22c0      	movs	r2, #192	; 0xc0
 80023c8:	0292      	lsls	r2, r2, #10
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d822      	bhi.n	8002414 <UART_SetConfig+0x140>
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	0292      	lsls	r2, r2, #10
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d019      	beq.n	800240a <UART_SetConfig+0x136>
 80023d6:	2280      	movs	r2, #128	; 0x80
 80023d8:	0292      	lsls	r2, r2, #10
 80023da:	4293      	cmp	r3, r2
 80023dc:	d81a      	bhi.n	8002414 <UART_SetConfig+0x140>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <UART_SetConfig+0x118>
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	0252      	lsls	r2, r2, #9
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00a      	beq.n	8002400 <UART_SetConfig+0x12c>
 80023ea:	e013      	b.n	8002414 <UART_SetConfig+0x140>
 80023ec:	231f      	movs	r3, #31
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
 80023f4:	e02b      	b.n	800244e <UART_SetConfig+0x17a>
 80023f6:	231f      	movs	r3, #31
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2202      	movs	r2, #2
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	e026      	b.n	800244e <UART_SetConfig+0x17a>
 8002400:	231f      	movs	r3, #31
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2204      	movs	r2, #4
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e021      	b.n	800244e <UART_SetConfig+0x17a>
 800240a:	231f      	movs	r3, #31
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2208      	movs	r2, #8
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e01c      	b.n	800244e <UART_SetConfig+0x17a>
 8002414:	231f      	movs	r3, #31
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	2210      	movs	r2, #16
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	e017      	b.n	800244e <UART_SetConfig+0x17a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a6d      	ldr	r2, [pc, #436]	; (80025d8 <UART_SetConfig+0x304>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d104      	bne.n	8002432 <UART_SetConfig+0x15e>
 8002428:	231f      	movs	r3, #31
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e00d      	b.n	800244e <UART_SetConfig+0x17a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a69      	ldr	r2, [pc, #420]	; (80025dc <UART_SetConfig+0x308>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d104      	bne.n	8002446 <UART_SetConfig+0x172>
 800243c:	231f      	movs	r3, #31
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e003      	b.n	800244e <UART_SetConfig+0x17a>
 8002446:	231f      	movs	r3, #31
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2210      	movs	r2, #16
 800244c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	429a      	cmp	r2, r3
 8002458:	d15d      	bne.n	8002516 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800245a:	231f      	movs	r3, #31
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b08      	cmp	r3, #8
 8002462:	d015      	beq.n	8002490 <UART_SetConfig+0x1bc>
 8002464:	dc18      	bgt.n	8002498 <UART_SetConfig+0x1c4>
 8002466:	2b04      	cmp	r3, #4
 8002468:	d00d      	beq.n	8002486 <UART_SetConfig+0x1b2>
 800246a:	dc15      	bgt.n	8002498 <UART_SetConfig+0x1c4>
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <UART_SetConfig+0x1a2>
 8002470:	2b02      	cmp	r3, #2
 8002472:	d005      	beq.n	8002480 <UART_SetConfig+0x1ac>
 8002474:	e010      	b.n	8002498 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002476:	f7ff f9bf 	bl	80017f8 <HAL_RCC_GetPCLK1Freq>
 800247a:	0003      	movs	r3, r0
 800247c:	61bb      	str	r3, [r7, #24]
        break;
 800247e:	e012      	b.n	80024a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002480:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <UART_SetConfig+0x30c>)
 8002482:	61bb      	str	r3, [r7, #24]
        break;
 8002484:	e00f      	b.n	80024a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002486:	f7ff f92d 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 800248a:	0003      	movs	r3, r0
 800248c:	61bb      	str	r3, [r7, #24]
        break;
 800248e:	e00a      	b.n	80024a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	61bb      	str	r3, [r7, #24]
        break;
 8002496:	e006      	b.n	80024a6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800249c:	231e      	movs	r3, #30
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
        break;
 80024a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d100      	bne.n	80024ae <UART_SetConfig+0x1da>
 80024ac:	e07b      	b.n	80025a6 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	005a      	lsls	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	18d2      	adds	r2, r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	0019      	movs	r1, r3
 80024c0:	0010      	movs	r0, r2
 80024c2:	f7fd fe21 	bl	8000108 <__udivsi3>
 80024c6:	0003      	movs	r3, r0
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b0f      	cmp	r3, #15
 80024d0:	d91c      	bls.n	800250c <UART_SetConfig+0x238>
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	025b      	lsls	r3, r3, #9
 80024d8:	429a      	cmp	r2, r3
 80024da:	d217      	bcs.n	800250c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	200e      	movs	r0, #14
 80024e2:	183b      	adds	r3, r7, r0
 80024e4:	210f      	movs	r1, #15
 80024e6:	438a      	bics	r2, r1
 80024e8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	085b      	lsrs	r3, r3, #1
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2207      	movs	r2, #7
 80024f2:	4013      	ands	r3, r2
 80024f4:	b299      	uxth	r1, r3
 80024f6:	183b      	adds	r3, r7, r0
 80024f8:	183a      	adds	r2, r7, r0
 80024fa:	8812      	ldrh	r2, [r2, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	183a      	adds	r2, r7, r0
 8002506:	8812      	ldrh	r2, [r2, #0]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	e04c      	b.n	80025a6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800250c:	231e      	movs	r3, #30
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e047      	b.n	80025a6 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002516:	231f      	movs	r3, #31
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d015      	beq.n	800254c <UART_SetConfig+0x278>
 8002520:	dc18      	bgt.n	8002554 <UART_SetConfig+0x280>
 8002522:	2b04      	cmp	r3, #4
 8002524:	d00d      	beq.n	8002542 <UART_SetConfig+0x26e>
 8002526:	dc15      	bgt.n	8002554 <UART_SetConfig+0x280>
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <UART_SetConfig+0x25e>
 800252c:	2b02      	cmp	r3, #2
 800252e:	d005      	beq.n	800253c <UART_SetConfig+0x268>
 8002530:	e010      	b.n	8002554 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002532:	f7ff f961 	bl	80017f8 <HAL_RCC_GetPCLK1Freq>
 8002536:	0003      	movs	r3, r0
 8002538:	61bb      	str	r3, [r7, #24]
        break;
 800253a:	e012      	b.n	8002562 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <UART_SetConfig+0x30c>)
 800253e:	61bb      	str	r3, [r7, #24]
        break;
 8002540:	e00f      	b.n	8002562 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002542:	f7ff f8cf 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 8002546:	0003      	movs	r3, r0
 8002548:	61bb      	str	r3, [r7, #24]
        break;
 800254a:	e00a      	b.n	8002562 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	61bb      	str	r3, [r7, #24]
        break;
 8002552:	e006      	b.n	8002562 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002558:	231e      	movs	r3, #30
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
        break;
 8002560:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01e      	beq.n	80025a6 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	085a      	lsrs	r2, r3, #1
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	18d2      	adds	r2, r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	0019      	movs	r1, r3
 8002578:	0010      	movs	r0, r2
 800257a:	f7fd fdc5 	bl	8000108 <__udivsi3>
 800257e:	0003      	movs	r3, r0
 8002580:	b29b      	uxth	r3, r3
 8002582:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	d909      	bls.n	800259e <UART_SetConfig+0x2ca>
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	025b      	lsls	r3, r3, #9
 8002590:	429a      	cmp	r2, r3
 8002592:	d204      	bcs.n	800259e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	e003      	b.n	80025a6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800259e:	231e      	movs	r3, #30
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80025b2:	231e      	movs	r3, #30
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	781b      	ldrb	r3, [r3, #0]
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b008      	add	sp, #32
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	efff69f3 	.word	0xefff69f3
 80025c4:	ffffcfff 	.word	0xffffcfff
 80025c8:	fffff4ff 	.word	0xfffff4ff
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40004400 	.word	0x40004400
 80025d8:	40004800 	.word	0x40004800
 80025dc:	40004c00 	.word	0x40004c00
 80025e0:	007a1200 	.word	0x007a1200

080025e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	2201      	movs	r2, #1
 80025f2:	4013      	ands	r3, r2
 80025f4:	d00b      	beq.n	800260e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4a4a      	ldr	r2, [pc, #296]	; (8002728 <UART_AdvFeatureConfig+0x144>)
 80025fe:	4013      	ands	r3, r2
 8002600:	0019      	movs	r1, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	2202      	movs	r2, #2
 8002614:	4013      	ands	r3, r2
 8002616:	d00b      	beq.n	8002630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a43      	ldr	r2, [pc, #268]	; (800272c <UART_AdvFeatureConfig+0x148>)
 8002620:	4013      	ands	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	2204      	movs	r2, #4
 8002636:	4013      	ands	r3, r2
 8002638:	d00b      	beq.n	8002652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a3b      	ldr	r2, [pc, #236]	; (8002730 <UART_AdvFeatureConfig+0x14c>)
 8002642:	4013      	ands	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	2208      	movs	r2, #8
 8002658:	4013      	ands	r3, r2
 800265a:	d00b      	beq.n	8002674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4a34      	ldr	r2, [pc, #208]	; (8002734 <UART_AdvFeatureConfig+0x150>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	2210      	movs	r2, #16
 800267a:	4013      	ands	r3, r2
 800267c:	d00b      	beq.n	8002696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a2c      	ldr	r2, [pc, #176]	; (8002738 <UART_AdvFeatureConfig+0x154>)
 8002686:	4013      	ands	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	2220      	movs	r2, #32
 800269c:	4013      	ands	r3, r2
 800269e:	d00b      	beq.n	80026b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	4a25      	ldr	r2, [pc, #148]	; (800273c <UART_AdvFeatureConfig+0x158>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	2240      	movs	r2, #64	; 0x40
 80026be:	4013      	ands	r3, r2
 80026c0:	d01d      	beq.n	80026fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <UART_AdvFeatureConfig+0x15c>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	035b      	lsls	r3, r3, #13
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d10b      	bne.n	80026fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a15      	ldr	r2, [pc, #84]	; (8002744 <UART_AdvFeatureConfig+0x160>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	2280      	movs	r2, #128	; 0x80
 8002704:	4013      	ands	r3, r2
 8002706:	d00b      	beq.n	8002720 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <UART_AdvFeatureConfig+0x164>)
 8002710:	4013      	ands	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	605a      	str	r2, [r3, #4]
  }
}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}
 8002728:	fffdffff 	.word	0xfffdffff
 800272c:	fffeffff 	.word	0xfffeffff
 8002730:	fffbffff 	.word	0xfffbffff
 8002734:	ffff7fff 	.word	0xffff7fff
 8002738:	ffffefff 	.word	0xffffefff
 800273c:	ffffdfff 	.word	0xffffdfff
 8002740:	ffefffff 	.word	0xffefffff
 8002744:	ff9fffff 	.word	0xff9fffff
 8002748:	fff7ffff 	.word	0xfff7ffff

0800274c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af02      	add	r7, sp, #8
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	2100      	movs	r1, #0
 800275a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800275c:	f7fe f842 	bl	80007e4 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2208      	movs	r2, #8
 800276c:	4013      	ands	r3, r2
 800276e:	2b08      	cmp	r3, #8
 8002770:	d10c      	bne.n	800278c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	0391      	lsls	r1, r2, #14
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <UART_CheckIdleState+0x8c>)
 800277c:	9200      	str	r2, [sp, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	f000 f82c 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 8002784:	1e03      	subs	r3, r0, #0
 8002786:	d001      	beq.n	800278c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e021      	b.n	80027d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2204      	movs	r2, #4
 8002794:	4013      	ands	r3, r2
 8002796:	2b04      	cmp	r3, #4
 8002798:	d10c      	bne.n	80027b4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2280      	movs	r2, #128	; 0x80
 800279e:	03d1      	lsls	r1, r2, #15
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <UART_CheckIdleState+0x8c>)
 80027a4:	9200      	str	r2, [sp, #0]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f000 f818 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 80027ac:	1e03      	subs	r3, r0, #0
 80027ae:	d001      	beq.n	80027b4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e00d      	b.n	80027d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2274      	movs	r2, #116	; 0x74
 80027ca:	2100      	movs	r1, #0
 80027cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b004      	add	sp, #16
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	01ffffff 	.word	0x01ffffff

080027dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b094      	sub	sp, #80	; 0x50
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	1dfb      	adds	r3, r7, #7
 80027ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ec:	e0a3      	b.n	8002936 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f0:	3301      	adds	r3, #1
 80027f2:	d100      	bne.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80027f4:	e09f      	b.n	8002936 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f6:	f7fd fff5 	bl	80007e4 <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <UART_WaitOnFlagUntilTimeout+0x30>
 8002806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002808:	2b00      	cmp	r3, #0
 800280a:	d13d      	bne.n	8002888 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800280c:	f3ef 8310 	mrs	r3, PRIMASK
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002814:	647b      	str	r3, [r7, #68]	; 0x44
 8002816:	2301      	movs	r3, #1
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	f383 8810 	msr	PRIMASK, r3
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	494c      	ldr	r1, [pc, #304]	; (8002960 <UART_WaitOnFlagUntilTimeout+0x184>)
 800282e:	400a      	ands	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002834:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	f383 8810 	msr	PRIMASK, r3
}
 800283c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800283e:	f3ef 8310 	mrs	r3, PRIMASK
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002846:	643b      	str	r3, [r7, #64]	; 0x40
 8002848:	2301      	movs	r3, #1
 800284a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284e:	f383 8810 	msr	PRIMASK, r3
}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2101      	movs	r1, #1
 8002860:	438a      	bics	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800286a:	f383 8810 	msr	PRIMASK, r3
}
 800286e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2274      	movs	r2, #116	; 0x74
 8002880:	2100      	movs	r1, #0
 8002882:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e067      	b.n	8002958 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d050      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69da      	ldr	r2, [r3, #28]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	401a      	ands	r2, r3
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d146      	bne.n	8002936 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	0112      	lsls	r2, r2, #4
 80028b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b2:	f3ef 8310 	mrs	r3, PRIMASK
 80028b6:	613b      	str	r3, [r7, #16]
  return(result);
 80028b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028bc:	2301      	movs	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f383 8810 	msr	PRIMASK, r3
}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4923      	ldr	r1, [pc, #140]	; (8002960 <UART_WaitOnFlagUntilTimeout+0x184>)
 80028d4:	400a      	ands	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f383 8810 	msr	PRIMASK, r3
}
 80028e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e4:	f3ef 8310 	mrs	r3, PRIMASK
 80028e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80028ea:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ee:	2301      	movs	r3, #1
 80028f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	f383 8810 	msr	PRIMASK, r3
}
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	438a      	bics	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	f383 8810 	msr	PRIMASK, r3
}
 8002914:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	2120      	movs	r1, #32
 8002928:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2274      	movs	r2, #116	; 0x74
 800292e:	2100      	movs	r1, #0
 8002930:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e010      	b.n	8002958 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	4013      	ands	r3, r2
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	425a      	negs	r2, r3
 8002946:	4153      	adcs	r3, r2
 8002948:	b2db      	uxtb	r3, r3
 800294a:	001a      	movs	r2, r3
 800294c:	1dfb      	adds	r3, r7, #7
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d100      	bne.n	8002956 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002954:	e74b      	b.n	80027ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b014      	add	sp, #80	; 0x50
 800295e:	bd80      	pop	{r7, pc}
 8002960:	fffffe5f 	.word	0xfffffe5f

08002964 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	1dbb      	adds	r3, r7, #6
 8002970:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1dba      	adds	r2, r7, #6
 800297c:	2158      	movs	r1, #88	; 0x58
 800297e:	8812      	ldrh	r2, [r2, #0]
 8002980:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1dba      	adds	r2, r7, #6
 8002986:	215a      	movs	r1, #90	; 0x5a
 8002988:	8812      	ldrh	r2, [r2, #0]
 800298a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	015b      	lsls	r3, r3, #5
 800299a:	429a      	cmp	r2, r3
 800299c:	d10d      	bne.n	80029ba <UART_Start_Receive_IT+0x56>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d104      	bne.n	80029b0 <UART_Start_Receive_IT+0x4c>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	225c      	movs	r2, #92	; 0x5c
 80029aa:	4943      	ldr	r1, [pc, #268]	; (8002ab8 <UART_Start_Receive_IT+0x154>)
 80029ac:	5299      	strh	r1, [r3, r2]
 80029ae:	e02e      	b.n	8002a0e <UART_Start_Receive_IT+0xaa>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	225c      	movs	r2, #92	; 0x5c
 80029b4:	21ff      	movs	r1, #255	; 0xff
 80029b6:	5299      	strh	r1, [r3, r2]
 80029b8:	e029      	b.n	8002a0e <UART_Start_Receive_IT+0xaa>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10d      	bne.n	80029de <UART_Start_Receive_IT+0x7a>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d104      	bne.n	80029d4 <UART_Start_Receive_IT+0x70>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	225c      	movs	r2, #92	; 0x5c
 80029ce:	21ff      	movs	r1, #255	; 0xff
 80029d0:	5299      	strh	r1, [r3, r2]
 80029d2:	e01c      	b.n	8002a0e <UART_Start_Receive_IT+0xaa>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	225c      	movs	r2, #92	; 0x5c
 80029d8:	217f      	movs	r1, #127	; 0x7f
 80029da:	5299      	strh	r1, [r3, r2]
 80029dc:	e017      	b.n	8002a0e <UART_Start_Receive_IT+0xaa>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	055b      	lsls	r3, r3, #21
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d10d      	bne.n	8002a06 <UART_Start_Receive_IT+0xa2>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d104      	bne.n	80029fc <UART_Start_Receive_IT+0x98>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	225c      	movs	r2, #92	; 0x5c
 80029f6:	217f      	movs	r1, #127	; 0x7f
 80029f8:	5299      	strh	r1, [r3, r2]
 80029fa:	e008      	b.n	8002a0e <UART_Start_Receive_IT+0xaa>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	225c      	movs	r2, #92	; 0x5c
 8002a00:	213f      	movs	r1, #63	; 0x3f
 8002a02:	5299      	strh	r1, [r3, r2]
 8002a04:	e003      	b.n	8002a0e <UART_Start_Receive_IT+0xaa>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	225c      	movs	r2, #92	; 0x5c
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	2100      	movs	r1, #0
 8002a14:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2222      	movs	r2, #34	; 0x22
 8002a1a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a20:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a22:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a26:	2301      	movs	r3, #1
 8002a28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f383 8810 	msr	PRIMASK, r3
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	f383 8810 	msr	PRIMASK, r3
}
 8002a4c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	015b      	lsls	r3, r3, #5
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d107      	bne.n	8002a6a <UART_Start_Receive_IT+0x106>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a15      	ldr	r2, [pc, #84]	; (8002abc <UART_Start_Receive_IT+0x158>)
 8002a66:	665a      	str	r2, [r3, #100]	; 0x64
 8002a68:	e002      	b.n	8002a70 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <UART_Start_Receive_IT+0x15c>)
 8002a6e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2274      	movs	r2, #116	; 0x74
 8002a74:	2100      	movs	r1, #0
 8002a76:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a78:	f3ef 8310 	mrs	r3, PRIMASK
 8002a7c:	613b      	str	r3, [r7, #16]
  return(result);
 8002a7e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a82:	2301      	movs	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f383 8810 	msr	PRIMASK, r3
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2190      	movs	r1, #144	; 0x90
 8002a9a:	0049      	lsls	r1, r1, #1
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f383 8810 	msr	PRIMASK, r3
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b00c      	add	sp, #48	; 0x30
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	000001ff 	.word	0x000001ff
 8002abc:	08002d75 	.word	0x08002d75
 8002ac0:	08002c0d 	.word	0x08002c0d

08002ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08e      	sub	sp, #56	; 0x38
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002acc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad0:	617b      	str	r3, [r7, #20]
  return(result);
 8002ad2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f383 8810 	msr	PRIMASK, r3
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4925      	ldr	r1, [pc, #148]	; (8002b84 <UART_EndRxTransfer+0xc0>)
 8002aee:	400a      	ands	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f383 8810 	msr	PRIMASK, r3
}
 8002afc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002afe:	f3ef 8310 	mrs	r3, PRIMASK
 8002b02:	623b      	str	r3, [r7, #32]
  return(result);
 8002b04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
 8002b08:	2301      	movs	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f383 8810 	msr	PRIMASK, r3
}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	438a      	bics	r2, r1
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	f383 8810 	msr	PRIMASK, r3
}
 8002b2e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d118      	bne.n	8002b6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b38:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b42:	2301      	movs	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f383 8810 	msr	PRIMASK, r3
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2110      	movs	r1, #16
 8002b5a:	438a      	bics	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b00e      	add	sp, #56	; 0x38
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	fffffedf 	.word	0xfffffedf

08002b88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	225a      	movs	r2, #90	; 0x5a
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2252      	movs	r2, #82	; 0x52
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f7ff fb7f 	bl	80022ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b004      	add	sp, #16
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f383 8810 	msr	PRIMASK, r3
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	438a      	bics	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f383 8810 	msr	PRIMASK, r3
}
 8002bee:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7ff fb44 	bl	800228c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b006      	add	sp, #24
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b090      	sub	sp, #64	; 0x40
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002c14:	203e      	movs	r0, #62	; 0x3e
 8002c16:	183b      	adds	r3, r7, r0
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	215c      	movs	r1, #92	; 0x5c
 8002c1c:	5a52      	ldrh	r2, [r2, r1]
 8002c1e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c24:	2b22      	cmp	r3, #34	; 0x22
 8002c26:	d000      	beq.n	8002c2a <UART_RxISR_8BIT+0x1e>
 8002c28:	e095      	b.n	8002d56 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	213c      	movs	r1, #60	; 0x3c
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002c34:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	183b      	adds	r3, r7, r0
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b2d9      	uxtb	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	400a      	ands	r2, r1
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	225a      	movs	r2, #90	; 0x5a
 8002c5a:	5a9b      	ldrh	r3, [r3, r2]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b299      	uxth	r1, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	225a      	movs	r2, #90	; 0x5a
 8002c66:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	225a      	movs	r2, #90	; 0x5a
 8002c6c:	5a9b      	ldrh	r3, [r3, r2]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d178      	bne.n	8002d66 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c74:	f3ef 8310 	mrs	r3, PRIMASK
 8002c78:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c7a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c7e:	2301      	movs	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f383 8810 	msr	PRIMASK, r3
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4936      	ldr	r1, [pc, #216]	; (8002d70 <UART_RxISR_8BIT+0x164>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	f383 8810 	msr	PRIMASK, r3
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	f383 8810 	msr	PRIMASK, r3
}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	438a      	bics	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	f383 8810 	msr	PRIMASK, r3
}
 8002cd6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d12f      	bne.n	8002d4c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cf8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f383 8810 	msr	PRIMASK, r3
}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2110      	movs	r1, #16
 8002d14:	438a      	bics	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f383 8810 	msr	PRIMASK, r3
}
 8002d22:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d103      	bne.n	8002d3a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2210      	movs	r2, #16
 8002d38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2258      	movs	r2, #88	; 0x58
 8002d3e:	5a9a      	ldrh	r2, [r3, r2]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0011      	movs	r1, r2
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7ff fab9 	bl	80022bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002d4a:	e00c      	b.n	8002d66 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f7ff faa4 	bl	800229c <HAL_UART_RxCpltCallback>
}
 8002d54:	e007      	b.n	8002d66 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2108      	movs	r1, #8
 8002d62:	430a      	orrs	r2, r1
 8002d64:	619a      	str	r2, [r3, #24]
}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b010      	add	sp, #64	; 0x40
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	fffffedf 	.word	0xfffffedf

08002d74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b090      	sub	sp, #64	; 0x40
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002d7c:	203e      	movs	r0, #62	; 0x3e
 8002d7e:	183b      	adds	r3, r7, r0
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	215c      	movs	r1, #92	; 0x5c
 8002d84:	5a52      	ldrh	r2, [r2, r1]
 8002d86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d8c:	2b22      	cmp	r3, #34	; 0x22
 8002d8e:	d000      	beq.n	8002d92 <UART_RxISR_16BIT+0x1e>
 8002d90:	e095      	b.n	8002ebe <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	213c      	movs	r1, #60	; 0x3c
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002d9c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	183a      	adds	r2, r7, r0
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	8812      	ldrh	r2, [r2, #0]
 8002dac:	4013      	ands	r3, r2
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	1c9a      	adds	r2, r3, #2
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	225a      	movs	r2, #90	; 0x5a
 8002dc2:	5a9b      	ldrh	r3, [r3, r2]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b299      	uxth	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	225a      	movs	r2, #90	; 0x5a
 8002dce:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	225a      	movs	r2, #90	; 0x5a
 8002dd4:	5a9b      	ldrh	r3, [r3, r2]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d178      	bne.n	8002ece <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8002de0:	617b      	str	r3, [r7, #20]
  return(result);
 8002de2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
 8002de6:	2301      	movs	r3, #1
 8002de8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f383 8810 	msr	PRIMASK, r3
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4936      	ldr	r1, [pc, #216]	; (8002ed8 <UART_RxISR_16BIT+0x164>)
 8002dfe:	400a      	ands	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f383 8810 	msr	PRIMASK, r3
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e12:	623b      	str	r3, [r7, #32]
  return(result);
 8002e14:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e16:	633b      	str	r3, [r7, #48]	; 0x30
 8002e18:	2301      	movs	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	f383 8810 	msr	PRIMASK, r3
}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2101      	movs	r1, #1
 8002e30:	438a      	bics	r2, r1
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	f383 8810 	msr	PRIMASK, r3
}
 8002e3e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d12f      	bne.n	8002eb4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e60:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e64:	2301      	movs	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f383 8810 	msr	PRIMASK, r3
}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	438a      	bics	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f383 8810 	msr	PRIMASK, r3
}
 8002e8a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	2210      	movs	r2, #16
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d103      	bne.n	8002ea2 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2258      	movs	r2, #88	; 0x58
 8002ea6:	5a9a      	ldrh	r2, [r3, r2]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0011      	movs	r1, r2
 8002eac:	0018      	movs	r0, r3
 8002eae:	f7ff fa05 	bl	80022bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002eb2:	e00c      	b.n	8002ece <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f7ff f9f0 	bl	800229c <HAL_UART_RxCpltCallback>
}
 8002ebc:	e007      	b.n	8002ece <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2108      	movs	r1, #8
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	619a      	str	r2, [r3, #24]
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b010      	add	sp, #64	; 0x40
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	fffffedf 	.word	0xfffffedf

08002edc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd80      	pop	{r7, pc}

08002eec <__libc_init_array>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	2600      	movs	r6, #0
 8002ef0:	4d0c      	ldr	r5, [pc, #48]	; (8002f24 <__libc_init_array+0x38>)
 8002ef2:	4c0d      	ldr	r4, [pc, #52]	; (8002f28 <__libc_init_array+0x3c>)
 8002ef4:	1b64      	subs	r4, r4, r5
 8002ef6:	10a4      	asrs	r4, r4, #2
 8002ef8:	42a6      	cmp	r6, r4
 8002efa:	d109      	bne.n	8002f10 <__libc_init_array+0x24>
 8002efc:	2600      	movs	r6, #0
 8002efe:	f000 f821 	bl	8002f44 <_init>
 8002f02:	4d0a      	ldr	r5, [pc, #40]	; (8002f2c <__libc_init_array+0x40>)
 8002f04:	4c0a      	ldr	r4, [pc, #40]	; (8002f30 <__libc_init_array+0x44>)
 8002f06:	1b64      	subs	r4, r4, r5
 8002f08:	10a4      	asrs	r4, r4, #2
 8002f0a:	42a6      	cmp	r6, r4
 8002f0c:	d105      	bne.n	8002f1a <__libc_init_array+0x2e>
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	00b3      	lsls	r3, r6, #2
 8002f12:	58eb      	ldr	r3, [r5, r3]
 8002f14:	4798      	blx	r3
 8002f16:	3601      	adds	r6, #1
 8002f18:	e7ee      	b.n	8002ef8 <__libc_init_array+0xc>
 8002f1a:	00b3      	lsls	r3, r6, #2
 8002f1c:	58eb      	ldr	r3, [r5, r3]
 8002f1e:	4798      	blx	r3
 8002f20:	3601      	adds	r6, #1
 8002f22:	e7f2      	b.n	8002f0a <__libc_init_array+0x1e>
 8002f24:	08002f9c 	.word	0x08002f9c
 8002f28:	08002f9c 	.word	0x08002f9c
 8002f2c:	08002f9c 	.word	0x08002f9c
 8002f30:	08002fa0 	.word	0x08002fa0

08002f34 <memset>:
 8002f34:	0003      	movs	r3, r0
 8002f36:	1882      	adds	r2, r0, r2
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <memset+0xa>
 8002f3c:	4770      	bx	lr
 8002f3e:	7019      	strb	r1, [r3, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	e7f9      	b.n	8002f38 <memset+0x4>

08002f44 <_init>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr

08002f50 <_fini>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr
