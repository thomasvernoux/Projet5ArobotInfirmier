
stm32f4_disc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00005998  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b38  08005b38  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b40  08005b40  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b44  08005b44  00015b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005b48  00020000  2**2
=======
  1 .text         00004be8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d8c  08004d8c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d94  08004d94  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d94  08004d94  00014d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d98  08004d98  00014d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004d9c  00020000  2**2
>>>>>>> Stashed changes
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000017a4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200017b4  200017b4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
 13 .debug_info   00015f06  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c61  00000000  00000000  00035f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00038ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee8  00000000  00000000  00039bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002256c  00000000  00000000  0003aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145e7  00000000  00000000  0005d00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd70a  00000000  00000000  000715f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013ecfd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004294  00000000  00000000  0013ed50  2**2
=======
 13 .debug_info   0001569f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bf4  00000000  00000000  000356df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  000382d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb8  00000000  00000000  000392b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002255e  00000000  00000000  0003a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013879  00000000  00000000  0005c6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd658  00000000  00000000  0006ff47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013d59f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040cc  00000000  00000000  0013d5f4  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001a8:	08005b08 	.word	0x08005b08
=======
 80001a8:	08004d58 	.word	0x08004d58
>>>>>>> Stashed changes

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
<<<<<<< Updated upstream
 80001c4:	08005b08 	.word	0x08005b08

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96e 	b.w	8000ca8 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468c      	mov	ip, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8083 	bne.w	8000afa <__udivmoddi4+0x116>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d947      	bls.n	8000a8a <__udivmoddi4+0xa6>
 80009fa:	fab2 f282 	clz	r2, r2
 80009fe:	b142      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	f1c2 0020 	rsb	r0, r2, #32
 8000a04:	fa24 f000 	lsr.w	r0, r4, r0
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	4097      	lsls	r7, r2
 8000a0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbbc f6f8 	udiv	r6, ip, r8
 8000a1c:	fa1f fe87 	uxth.w	lr, r7
 8000a20:	fb08 c116 	mls	r1, r8, r6, ip
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f10e 	mul.w	r1, r6, lr
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 8119 	bcs.w	8000c6c <__udivmoddi4+0x288>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8116 	bls.w	8000c6c <__udivmoddi4+0x288>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	443b      	add	r3, r7
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	45a6      	cmp	lr, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8105 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a66:	45a6      	cmp	lr, r4
 8000a68:	f240 8102 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443c      	add	r4, r7
 8000a70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a74:	eba4 040e 	sub.w	r4, r4, lr
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	b902      	cbnz	r2, 8000a8e <__udivmoddi4+0xaa>
 8000a8c:	deff      	udf	#255	; 0xff
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d150      	bne.n	8000b38 <__udivmoddi4+0x154>
 8000a96:	1bcb      	subs	r3, r1, r7
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	2601      	movs	r6, #1
 8000aa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000aa6:	0c21      	lsrs	r1, r4, #16
 8000aa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d907      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 8000ab8:	1879      	adds	r1, r7, r1
 8000aba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0xe2>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	f200 80e9 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000ac6:	4684      	mov	ip, r0
 8000ac8:	1ac9      	subs	r1, r1, r3
 8000aca:	b2a3      	uxth	r3, r4
 8000acc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad8:	fb08 f800 	mul.w	r8, r8, r0
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x10c>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x10a>
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	f200 80d9 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000aee:	4618      	mov	r0, r3
 8000af0:	eba4 0408 	sub.w	r4, r4, r8
 8000af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af8:	e7bf      	b.n	8000a7a <__udivmoddi4+0x96>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x12e>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <__udivmoddi4+0x282>
 8000b04:	2600      	movs	r6, #0
 8000b06:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f683 	clz	r6, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d14a      	bne.n	8000bb0 <__udivmoddi4+0x1cc>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0x140>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80b8 	bhi.w	8000c94 <__udivmoddi4+0x2b0>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0103 	sbc.w	r1, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d0a8      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000b32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b36:	e7a5      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000b38:	f1c2 0320 	rsb	r3, r2, #32
 8000b3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b40:	4097      	lsls	r7, r2
 8000b42:	fa01 f002 	lsl.w	r0, r1, r2
 8000b46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4a:	40d9      	lsrs	r1, r3
 8000b4c:	4330      	orrs	r0, r6
 8000b4e:	0c03      	lsrs	r3, r0, #16
 8000b50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f108 	mul.w	r1, r6, r8
 8000b64:	4299      	cmp	r1, r3
 8000b66:	fa04 f402 	lsl.w	r4, r4, r2
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x19c>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b72:	f080 808d 	bcs.w	8000c90 <__udivmoddi4+0x2ac>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 808a 	bls.w	8000c90 <__udivmoddi4+0x2ac>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b281      	uxth	r1, r0
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb00 f308 	mul.w	r3, r0, r8
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x1c4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b9e:	d273      	bcs.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d971      	bls.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4439      	add	r1, r7
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bae:	e778      	b.n	8000aa2 <__udivmoddi4+0xbe>
 8000bb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	0c3b      	lsrs	r3, r7, #16
 8000bd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd6:	fa1f f884 	uxth.w	r8, r4
 8000bda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000be2:	fb09 fa08 	mul.w	sl, r9, r8
 8000be6:	458a      	cmp	sl, r1
 8000be8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bec:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x220>
 8000bf2:	1861      	adds	r1, r4, r1
 8000bf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf8:	d248      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfa:	458a      	cmp	sl, r1
 8000bfc:	d946      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4421      	add	r1, r4
 8000c04:	eba1 010a 	sub.w	r1, r1, sl
 8000c08:	b2bf      	uxth	r7, r7
 8000c0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c16:	fb00 f808 	mul.w	r8, r0, r8
 8000c1a:	45b8      	cmp	r8, r7
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x24a>
 8000c1e:	19e7      	adds	r7, r4, r7
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d22e      	bcs.n	8000c84 <__udivmoddi4+0x2a0>
 8000c26:	45b8      	cmp	r8, r7
 8000c28:	d92c      	bls.n	8000c84 <__udivmoddi4+0x2a0>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4427      	add	r7, r4
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	eba7 0708 	sub.w	r7, r7, r8
 8000c36:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3a:	454f      	cmp	r7, r9
 8000c3c:	46c6      	mov	lr, r8
 8000c3e:	4649      	mov	r1, r9
 8000c40:	d31a      	bcc.n	8000c78 <__udivmoddi4+0x294>
 8000c42:	d017      	beq.n	8000c74 <__udivmoddi4+0x290>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x27a>
 8000c46:	ebb3 020e 	subs.w	r2, r3, lr
 8000c4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c52:	40f2      	lsrs	r2, r6
 8000c54:	ea4c 0202 	orr.w	r2, ip, r2
 8000c58:	40f7      	lsrs	r7, r6
 8000c5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e70b      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e9      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6fd      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c74:	4543      	cmp	r3, r8
 8000c76:	d2e5      	bcs.n	8000c44 <__udivmoddi4+0x260>
 8000c78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7df      	b.n	8000c44 <__udivmoddi4+0x260>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e7d2      	b.n	8000c2e <__udivmoddi4+0x24a>
 8000c88:	4660      	mov	r0, ip
 8000c8a:	e78d      	b.n	8000ba8 <__udivmoddi4+0x1c4>
 8000c8c:	4681      	mov	r9, r0
 8000c8e:	e7b9      	b.n	8000c04 <__udivmoddi4+0x220>
 8000c90:	4666      	mov	r6, ip
 8000c92:	e775      	b.n	8000b80 <__udivmoddi4+0x19c>
 8000c94:	4630      	mov	r0, r6
 8000c96:	e74a      	b.n	8000b2e <__udivmoddi4+0x14a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	4439      	add	r1, r7
 8000c9e:	e713      	b.n	8000ac8 <__udivmoddi4+0xe4>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	e724      	b.n	8000af0 <__udivmoddi4+0x10c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <moteur1>:
=======
 80001c4:	08004d58 	.word	0x08004d58

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <moteur1>:
>>>>>>> Stashed changes



/// CONGIG COMMANDE

void moteur1(){
<<<<<<< Updated upstream
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	txData[0] &=  0b11110111;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <moteur1+0x1c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f023 0308 	bic.w	r3, r3, #8
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <moteur1+0x1c>)
 8000cbc:	701a      	strb	r2, [r3, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	2000002c 	.word	0x2000002c

08000ccc <moteur2>:

void moteur2(){
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	txData[0] |=  0b00001000;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <moteur2+0x1c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <moteur2+0x1c>)
 8000cdc:	701a      	strb	r2, [r3, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	2000002c 	.word	0x2000002c

08000cec <cmd_arret>:
	txData[0] |=  0b00000001;
=======
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	txData[0] &=  0b11110111;
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <moteur1+0x1c>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	f023 0308 	bic.w	r3, r3, #8
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b03      	ldr	r3, [pc, #12]	; (80004dc <moteur1+0x1c>)
 80004d0:	701a      	strb	r2, [r3, #0]
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	2000002c 	.word	0x2000002c

080004e0 <moteur2>:

void moteur2(){
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
	txData[0] |=  0b00001000;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <moteur2+0x1c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	f043 0308 	orr.w	r3, r3, #8
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4b03      	ldr	r3, [pc, #12]	; (80004fc <moteur2+0x1c>)
 80004f0:	701a      	strb	r2, [r3, #0]
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	2000002c 	.word	0x2000002c

08000500 <cmd_marche>:
>>>>>>> Stashed changes

	txData[1] =   0b00000010;
}

<<<<<<< Updated upstream
void cmd_arret(){
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

	txData[0] &=  0b11111001;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <cmd_arret+0x30>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	f023 0306 	bic.w	r3, r3, #6
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <cmd_arret+0x30>)
 8000cfc:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000001;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <cmd_arret+0x30>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <cmd_arret+0x30>)
 8000d0a:	701a      	strb	r2, [r3, #0]
	txData[1] =   0b00000000;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <cmd_arret+0x30>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	705a      	strb	r2, [r3, #1]
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	2000002c 	.word	0x2000002c

08000d20 <sens_rotation>:

/*
 * Commande sens de rotation
 */
void sens_rotation(){
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	txData[0] &=  0b11111010;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <sens_rotation+0x2c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	f023 0305 	bic.w	r3, r3, #5
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <sens_rotation+0x2c>)
 8000d30:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000010;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <sens_rotation+0x2c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <sens_rotation+0x2c>)
 8000d3e:	701a      	strb	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	2000002c 	.word	0x2000002c

08000d50 <sens_rotation_avant>:

void sens_rotation_avant(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	sens_rotation();
 8000d54:	f7ff ffe4 	bl	8000d20 <sens_rotation>
	txData[1] =  0b00000000;
 8000d58:	4b02      	ldr	r3, [pc, #8]	; (8000d64 <sens_rotation_avant+0x14>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	705a      	strb	r2, [r3, #1]

=======
void cmd_marche(){
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

	txData[0] &=  0b11111001;
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <cmd_marche+0x30>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	f023 0306 	bic.w	r3, r3, #6
 800050c:	b2da      	uxtb	r2, r3
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <cmd_marche+0x30>)
 8000510:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000001;
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <cmd_marche+0x30>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <cmd_marche+0x30>)
 800051e:	701a      	strb	r2, [r3, #0]

	txData[1] =   0b00000010;
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <cmd_marche+0x30>)
 8000522:	2202      	movs	r2, #2
 8000524:	705a      	strb	r2, [r3, #1]
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	2000002c 	.word	0x2000002c

08000534 <config_freq_PWM>:
>>>>>>> Stashed changes
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000002c 	.word	0x2000002c

08000d68 <sens_rotation_arriere>:

void sens_rotation_arriere(){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	sens_rotation();
 8000d6c:	f7ff ffd8 	bl	8000d20 <sens_rotation>
	txData[1] =  0b00000010;
 8000d70:	4b02      	ldr	r3, [pc, #8]	; (8000d7c <sens_rotation_arriere+0x14>)
 8000d72:	2202      	movs	r2, #2
 8000d74:	705a      	strb	r2, [r3, #1]
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000002c 	.word	0x2000002c

08000d80 <config_freq_PWM>:

/*
 * Configuration de la PWM
 */
void config_freq_PWM(){
<<<<<<< Updated upstream
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	txData[0] &=  0b11111100;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <config_freq_PWM+0x2c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	f023 0303 	bic.w	r3, r3, #3
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <config_freq_PWM+0x2c>)
 8000d90:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000100;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <config_freq_PWM+0x2c>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <config_freq_PWM+0x2c>)
 8000d9e:	701a      	strb	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	2000002c 	.word	0x2000002c

08000db0 <vit_rap_cyc>:
=======
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	txData[0] &=  0b11111100;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <config_freq_PWM+0x2c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	f023 0303 	bic.w	r3, r3, #3
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <config_freq_PWM+0x2c>)
 8000544:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000100;
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <config_freq_PWM+0x2c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f043 0304 	orr.w	r3, r3, #4
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <config_freq_PWM+0x2c>)
 8000552:	701a      	strb	r2, [r3, #0]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	2000002c 	.word	0x2000002c

08000564 <vit_rap_cyc>:
>>>>>>> Stashed changes

/*
 * rapport cyclique
 * attention c'est sur 7 bits
 */
void vit_rap_cyc(uint8_t vitesse){
<<<<<<< Updated upstream
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	txData[0] &=  0b11111000;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <vit_rap_cyc+0x3c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	f023 0307 	bic.w	r3, r3, #7
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <vit_rap_cyc+0x3c>)
 8000dc6:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000111;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <vit_rap_cyc+0x3c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	f043 0307 	orr.w	r3, r3, #7
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <vit_rap_cyc+0x3c>)
 8000dd4:	701a      	strb	r2, [r3, #0]
	txData[1] =  vitesse << 1;
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <vit_rap_cyc+0x3c>)
 8000dde:	705a      	strb	r2, [r3, #1]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	2000002c 	.word	0x2000002c

08000df0 <fct_vierge>:
=======
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	txData[0] &=  0b11111111;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <vit_rap_cyc+0x38>)
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <vit_rap_cyc+0x38>)
 8000574:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000111;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <vit_rap_cyc+0x38>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	f043 0307 	orr.w	r3, r3, #7
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <vit_rap_cyc+0x38>)
 8000582:	701a      	strb	r2, [r3, #0]
	txData[1] =  vitesse << 1;
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <vit_rap_cyc+0x38>)
 800058c:	705a      	strb	r2, [r3, #1]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000002c 	.word	0x2000002c

080005a0 <fct_vierge>:
>>>>>>> Stashed changes



void fct_vierge(){
<<<<<<< Updated upstream
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
	txData[0] =  0b00000000;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <fct_vierge+0x1c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
	txData[1] =  0b00000000;
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <fct_vierge+0x1c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	705a      	strb	r2, [r3, #1]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	2000002c 	.word	0x2000002c

08000e10 <spi_transmission>:


void spi_transmission(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	HAL_SPI_Init( &hspi1 );
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <spi_transmission+0x30>)
 8000e16:	f002 faaf 	bl	8003378 <HAL_SPI_Init>
	HAL_SPI_Transmit (&hspi1, txData, 2, 100);
 8000e1a:	2364      	movs	r3, #100	; 0x64
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	4909      	ldr	r1, [pc, #36]	; (8000e44 <spi_transmission+0x34>)
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <spi_transmission+0x30>)
 8000e22:	f002 fb5a 	bl	80034da <HAL_SPI_Transmit>
	while( hspi1.State == HAL_SPI_STATE_BUSY );
 8000e26:	bf00      	nop
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <spi_transmission+0x30>)
 8000e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d0f9      	beq.n	8000e28 <spi_transmission+0x18>
	HAL_SPI_DeInit( &hspi1 );
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <spi_transmission+0x30>)
 8000e36:	f002 fb28 	bl	800348a <HAL_SPI_DeInit>
	//HAL_Delay(10);
	return;
 8000e3a:	bf00      	nop
}
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200014c0 	.word	0x200014c0
 8000e44:	2000002c 	.word	0x2000002c

08000e48 <callback_adoucissement_vitesse>:



void callback_adoucissement_vitesse(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

	if (vitesse_actuelle < objectif_vitesse){
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <callback_adoucissement_vitesse+0x84>)
 8000e50:	781a      	ldrb	r2, [r3, #0]
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <callback_adoucissement_vitesse+0x88>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d211      	bcs.n	8000e7e <callback_adoucissement_vitesse+0x36>
		vitesse_actuelle += 1;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <callback_adoucissement_vitesse+0x84>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <callback_adoucissement_vitesse+0x84>)
 8000e64:	701a      	strb	r2, [r3, #0]

		fct_vierge();
 8000e66:	f7ff ffc3 	bl	8000df0 <fct_vierge>
		moteur2();
 8000e6a:	f7ff ff2f 	bl	8000ccc <moteur2>
		vit_rap_cyc(vitesse_actuelle);
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <callback_adoucissement_vitesse+0x84>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff9c 	bl	8000db0 <vit_rap_cyc>
		spi_transmission();
 8000e78:	f7ff ffca 	bl	8000e10 <spi_transmission>
	else if (vitesse_actuelle == objectif_vitesse){
		int a = 3; // onjectif atteint
		a++;
	}

}
 8000e7c:	e022      	b.n	8000ec4 <callback_adoucissement_vitesse+0x7c>
	else if (vitesse_actuelle > objectif_vitesse){
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <callback_adoucissement_vitesse+0x84>)
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <callback_adoucissement_vitesse+0x88>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d911      	bls.n	8000eae <callback_adoucissement_vitesse+0x66>
		vitesse_actuelle -= 1;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <callback_adoucissement_vitesse+0x84>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <callback_adoucissement_vitesse+0x84>)
 8000e94:	701a      	strb	r2, [r3, #0]
		fct_vierge();
 8000e96:	f7ff ffab 	bl	8000df0 <fct_vierge>
		moteur2();
 8000e9a:	f7ff ff17 	bl	8000ccc <moteur2>
		vit_rap_cyc(vitesse_actuelle);
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <callback_adoucissement_vitesse+0x84>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff84 	bl	8000db0 <vit_rap_cyc>
		spi_transmission();
 8000ea8:	f7ff ffb2 	bl	8000e10 <spi_transmission>
}
 8000eac:	e00a      	b.n	8000ec4 <callback_adoucissement_vitesse+0x7c>
	else if (vitesse_actuelle == objectif_vitesse){
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <callback_adoucissement_vitesse+0x84>)
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <callback_adoucissement_vitesse+0x88>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d104      	bne.n	8000ec4 <callback_adoucissement_vitesse+0x7c>
		int a = 3; // onjectif atteint
 8000eba:	2303      	movs	r3, #3
 8000ebc:	607b      	str	r3, [r7, #4]
		a++;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000045 	.word	0x20000045
 8000ed0:	20000046 	.word	0x20000046

08000ed4 <reception_M0>:
=======
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	txData[0] =  0b00000000;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <fct_vierge+0x1c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	txData[1] =  0b00000000;
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <fct_vierge+0x1c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	705a      	strb	r2, [r3, #1]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	2000002c 	.word	0x2000002c

080005c0 <spi_transmission>:


void spi_transmission(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_SPI_Init( &hspi1 );
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <spi_transmission+0x30>)
 80005c6:	f002 f98d 	bl	80028e4 <HAL_SPI_Init>
	HAL_SPI_Transmit (&hspi1, txData, 2, 100);
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	2202      	movs	r2, #2
 80005ce:	4909      	ldr	r1, [pc, #36]	; (80005f4 <spi_transmission+0x34>)
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <spi_transmission+0x30>)
 80005d2:	f002 fa38 	bl	8002a46 <HAL_SPI_Transmit>
	while( hspi1.State == HAL_SPI_STATE_BUSY );
 80005d6:	bf00      	nop
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <spi_transmission+0x30>)
 80005da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d0f9      	beq.n	80005d8 <spi_transmission+0x18>
	HAL_SPI_DeInit( &hspi1 );
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <spi_transmission+0x30>)
 80005e6:	f002 fa06 	bl	80029f6 <HAL_SPI_DeInit>
	//HAL_Delay(10);
	return;
 80005ea:	bf00      	nop
}
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	2000051c 	.word	0x2000051c
 80005f4:	2000002c 	.word	0x2000002c

080005f8 <reception_M0>:
>>>>>>> Stashed changes
void setup_com_M0(){
	HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, sizeof(UART6_rxBuffer));

}

void reception_M0(){
<<<<<<< Updated upstream
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, sizeof(UART6_rxBuffer));
 8000ed8:	220a      	movs	r2, #10
 8000eda:	4903      	ldr	r1, [pc, #12]	; (8000ee8 <reception_M0+0x14>)
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <reception_M0+0x18>)
 8000ede:	f003 fef5 	bl	8004ccc <HAL_UART_Receive_IT>


}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000048 	.word	0x20000048
 8000eec:	2000165c 	.word	0x2000165c

08000ef0 <recevoir_message_pc2>:
=======
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, sizeof(UART6_rxBuffer));
 80005fc:	220a      	movs	r2, #10
 80005fe:	4903      	ldr	r1, [pc, #12]	; (800060c <reception_M0+0x14>)
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <reception_M0+0x18>)
 8000602:	f003 fb97 	bl	8003d34 <HAL_UART_Receive_IT>


}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000044 	.word	0x20000044
 8000610:	200006d0 	.word	0x200006d0

08000614 <recevoir_message_pc2>:
>>>>>>> Stashed changes
	}
	*/
}


void recevoir_message_pc2(){
<<<<<<< Updated upstream
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
		HAL_UART_Receive_IT(&huart2, UART2_rxBuffer_2, sizeof(UART2_rxBuffer_2));
		traiter_message_pc();
	}
*/

	message_recu_PC[pc_message_recu_index] = UART2_rxBuffer;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <recevoir_message_pc2+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <recevoir_message_pc2+0x5c>)
 8000efc:	7819      	ldrb	r1, [r3, #0]
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <recevoir_message_pc2+0x60>)
 8000f00:	5499      	strb	r1, [r3, r2]
	pc_message_recu_index ++;
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <recevoir_message_pc2+0x58>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <recevoir_message_pc2+0x58>)
 8000f0c:	701a      	strb	r2, [r3, #0]


	if (UART2_rxBuffer == 101){ // on est a la fin du message
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <recevoir_message_pc2+0x5c>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b65      	cmp	r3, #101	; 0x65
 8000f14:	d110      	bne.n	8000f38 <recevoir_message_pc2+0x48>
		pc_message_recu_index = 0;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <recevoir_message_pc2+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]


		traiter_message_pc();
 8000f1c:	f000 f81c 	bl	8000f58 <traiter_message_pc>

		message_recu_PC[0] = 0;
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <recevoir_message_pc2+0x60>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
		message_recu_PC[1] = 0;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <recevoir_message_pc2+0x60>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	705a      	strb	r2, [r3, #1]
		message_recu_PC[2] = 0;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <recevoir_message_pc2+0x60>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	709a      	strb	r2, [r3, #2]
		message_recu_PC[3] = 0;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <recevoir_message_pc2+0x60>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	70da      	strb	r2, [r3, #3]


=======
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

	if (UART2_rxBuffer_2[pc_message_recu_index] == 101){ // on est a la fin du message
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <recevoir_message_pc2+0x44>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <recevoir_message_pc2+0x48>)
 8000620:	5c9b      	ldrb	r3, [r3, r2]
 8000622:	2b65      	cmp	r3, #101	; 0x65
 8000624:	d110      	bne.n	8000648 <recevoir_message_pc2+0x34>
		strcpy((char *)message_recu_PC,(char *)UART2_rxBuffer_2);
 8000626:	490d      	ldr	r1, [pc, #52]	; (800065c <recevoir_message_pc2+0x48>)
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <recevoir_message_pc2+0x4c>)
 800062a:	f004 fb8d 	bl	8004d48 <strcpy>
		pc_message_recu_index = 0;
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <recevoir_message_pc2+0x44>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
		traiter_message_pc();
 8000634:	f000 f818 	bl	8000668 <traiter_message_pc>

		HAL_UART_Abort(&huart2);
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <recevoir_message_pc2+0x50>)
 800063a:	f003 fbab 	bl	8003d94 <HAL_UART_Abort>
		HAL_UART_Receive_IT(&huart2, UART2_rxBuffer_2, sizeof(UART2_rxBuffer_2));
 800063e:	2264      	movs	r2, #100	; 0x64
 8000640:	4906      	ldr	r1, [pc, #24]	; (800065c <recevoir_message_pc2+0x48>)
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <recevoir_message_pc2+0x50>)
 8000644:	f003 fb76 	bl	8003d34 <HAL_UART_Receive_IT>
>>>>>>> Stashed changes
	}

	HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4904      	ldr	r1, [pc, #16]	; (8000f4c <recevoir_message_pc2+0x5c>)
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <recevoir_message_pc2+0x64>)
 8000f3e:	f003 fec5 	bl	8004ccc <HAL_UART_Receive_IT>

	pc_message_recu_index ++;
<<<<<<< Updated upstream
	 */


}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000044 	.word	0x20000044
 8000f4c:	2000160c 	.word	0x2000160c
 8000f50:	20000054 	.word	0x20000054
 8000f54:	2000176c 	.word	0x2000176c

08000f58 <traiter_message_pc>:


void traiter_message_pc(){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
=======
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <recevoir_message_pc2+0x44>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b01      	ldr	r3, [pc, #4]	; (8000658 <recevoir_message_pc2+0x44>)
 8000652:	701a      	strb	r2, [r3, #0]

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000040 	.word	0x20000040
 800065c:	20000624 	.word	0x20000624
 8000660:	20000050 	.word	0x20000050
 8000664:	200007e0 	.word	0x200007e0

08000668 <traiter_message_pc>:


void traiter_message_pc(){
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0


	fct_vierge();
 800066e:	f7ff ff97 	bl	80005a0 <fct_vierge>
>>>>>>> Stashed changes

	int a;

	fct_vierge();
 8000f5e:	f7ff ff47 	bl	8000df0 <fct_vierge>

	switch(message_recu_PC[0]){
<<<<<<< Updated upstream
 8000f62:	4b46      	ldr	r3, [pc, #280]	; (800107c <traiter_message_pc+0x124>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	f200 8083 	bhi.w	8001072 <traiter_message_pc+0x11a>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <traiter_message_pc+0x1c>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08000f91 	.word	0x08000f91
 8000f78:	08000fb3 	.word	0x08000fb3
 8000f7c:	08000ff9 	.word	0x08000ff9
 8000f80:	0800103f 	.word	0x0800103f
 8000f84:	08001045 	.word	0x08001045
 8000f88:	0800104b 	.word	0x0800104b
 8000f8c:	08001069 	.word	0x08001069
=======
 8000672:	4b27      	ldr	r3, [pc, #156]	; (8000710 <traiter_message_pc+0xa8>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b06      	cmp	r3, #6
 8000678:	d846      	bhi.n	8000708 <traiter_message_pc+0xa0>
 800067a:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <traiter_message_pc+0x18>)
 800067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000680:	0800069d 	.word	0x0800069d
 8000684:	080006a3 	.word	0x080006a3
 8000688:	080006c5 	.word	0x080006c5
 800068c:	080006cb 	.word	0x080006cb
 8000690:	080006d1 	.word	0x080006d1
 8000694:	080006d7 	.word	0x080006d7
 8000698:	080006f1 	.word	0x080006f1
>>>>>>> Stashed changes



	case 0:   // stop
<<<<<<< Updated upstream
		fct_vierge();
 8000f90:	f7ff ff2e 	bl	8000df0 <fct_vierge>
		moteur1();
 8000f94:	f7ff fe8a 	bl	8000cac <moteur1>
		cmd_arret();
 8000f98:	f7ff fea8 	bl	8000cec <cmd_arret>
		spi_transmission();
 8000f9c:	f7ff ff38 	bl	8000e10 <spi_transmission>

		fct_vierge();
 8000fa0:	f7ff ff26 	bl	8000df0 <fct_vierge>
		moteur2();
 8000fa4:	f7ff fe92 	bl	8000ccc <moteur2>
		cmd_arret();
 8000fa8:	f7ff fea0 	bl	8000cec <cmd_arret>
		spi_transmission();
 8000fac:	f7ff ff30 	bl	8000e10 <spi_transmission>

		break;
 8000fb0:	e05f      	b.n	8001072 <traiter_message_pc+0x11a>
=======
		a = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
		break;
 80006a0:	e032      	b.n	8000708 <traiter_message_pc+0xa0>
>>>>>>> Stashed changes

	case 1:   // avancer

		fct_vierge();
 8000fb2:	f7ff ff1d 	bl	8000df0 <fct_vierge>
		moteur1();
 8000fb6:	f7ff fe79 	bl	8000cac <moteur1>
		sens_rotation_avant();
 8000fba:	f7ff fec9 	bl	8000d50 <sens_rotation_avant>
		spi_transmission();
 8000fbe:	f7ff ff27 	bl	8000e10 <spi_transmission>

		fct_vierge();
 8000fc2:	f7ff ff15 	bl	8000df0 <fct_vierge>
		moteur2();
 8000fc6:	f7ff fe81 	bl	8000ccc <moteur2>
		sens_rotation_avant();
 8000fca:	f7ff fec1 	bl	8000d50 <sens_rotation_avant>
		spi_transmission();
 8000fce:	f7ff ff1f 	bl	8000e10 <spi_transmission>


		fct_vierge();
<<<<<<< Updated upstream
 8000fd2:	f7ff ff0d 	bl	8000df0 <fct_vierge>
		moteur1();
 8000fd6:	f7ff fe69 	bl	8000cac <moteur1>
		vit_rap_cyc(10); // on va a 10 pourcent
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f7ff fee8 	bl	8000db0 <vit_rap_cyc>
		spi_transmission();
 8000fe0:	f7ff ff16 	bl	8000e10 <spi_transmission>

		fct_vierge();
 8000fe4:	f7ff ff04 	bl	8000df0 <fct_vierge>
		moteur2();
 8000fe8:	f7ff fe70 	bl	8000ccc <moteur2>
		vit_rap_cyc(10);
 8000fec:	200a      	movs	r0, #10
 8000fee:	f7ff fedf 	bl	8000db0 <vit_rap_cyc>
		spi_transmission();
 8000ff2:	f7ff ff0d 	bl	8000e10 <spi_transmission>



		break;
 8000ff6:	e03c      	b.n	8001072 <traiter_message_pc+0x11a>

	case 2:   // reculer

		fct_vierge();
 8000ff8:	f7ff fefa 	bl	8000df0 <fct_vierge>
		moteur1();
 8000ffc:	f7ff fe56 	bl	8000cac <moteur1>
		sens_rotation_arriere();
 8001000:	f7ff feb2 	bl	8000d68 <sens_rotation_arriere>
		spi_transmission();
 8001004:	f7ff ff04 	bl	8000e10 <spi_transmission>

		fct_vierge();
 8001008:	f7ff fef2 	bl	8000df0 <fct_vierge>
		moteur2();
 800100c:	f7ff fe5e 	bl	8000ccc <moteur2>
		sens_rotation_arriere();
 8001010:	f7ff feaa 	bl	8000d68 <sens_rotation_arriere>
		spi_transmission();
 8001014:	f7ff fefc 	bl	8000e10 <spi_transmission>


		fct_vierge();
 8001018:	f7ff feea 	bl	8000df0 <fct_vierge>
		moteur1();
 800101c:	f7ff fe46 	bl	8000cac <moteur1>
		vit_rap_cyc(10); // on va a 10 pourcent
 8001020:	200a      	movs	r0, #10
 8001022:	f7ff fec5 	bl	8000db0 <vit_rap_cyc>
		spi_transmission();
 8001026:	f7ff fef3 	bl	8000e10 <spi_transmission>

		fct_vierge();
 800102a:	f7ff fee1 	bl	8000df0 <fct_vierge>
		moteur2();
 800102e:	f7ff fe4d 	bl	8000ccc <moteur2>
		vit_rap_cyc(10);
 8001032:	200a      	movs	r0, #10
 8001034:	f7ff febc 	bl	8000db0 <vit_rap_cyc>
		spi_transmission();
 8001038:	f7ff feea 	bl	8000e10 <spi_transmission>


		break;
 800103c:	e019      	b.n	8001072 <traiter_message_pc+0x11a>

	case 3:   // droite
		a = 3;
 800103e:	2303      	movs	r3, #3
 8001040:	607b      	str	r3, [r7, #4]
		break;
 8001042:	e016      	b.n	8001072 <traiter_message_pc+0x11a>

	case 4:   // gauche
		a = 4;
 8001044:	2304      	movs	r3, #4
 8001046:	607b      	str	r3, [r7, #4]

		break;
 8001048:	e013      	b.n	8001072 <traiter_message_pc+0x11a>

	case 5:   // controle PWM
		fct_vierge();
 800104a:	f7ff fed1 	bl	8000df0 <fct_vierge>
		moteur2();
 800104e:	f7ff fe3d 	bl	8000ccc <moteur2>
		config_freq_PWM();
 8001052:	f7ff fe95 	bl	8000d80 <config_freq_PWM>
		txData[1] = message_recu_PC[1] << 1;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <traiter_message_pc+0x124>)
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <traiter_message_pc+0x128>)
 8001060:	705a      	strb	r2, [r3, #1]
		spi_transmission();
 8001062:	f7ff fed5 	bl	8000e10 <spi_transmission>
		break;
 8001066:	e004      	b.n	8001072 <traiter_message_pc+0x11a>

	case 6:  // contrôle du rapport cyclique
		//fct_vierge();
		//moteur2();
		//vit_rap_cyc(message_recu_PC[1]);  // modif pour la rampe d'accélération
		objectif_vitesse = message_recu_PC[1];
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <traiter_message_pc+0x124>)
 800106a:	785a      	ldrb	r2, [r3, #1]
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <traiter_message_pc+0x12c>)
 800106e:	701a      	strb	r2, [r3, #0]
		//spi_transmission();

		break;
 8001070:	bf00      	nop
=======
 80006a2:	f7ff ff7d 	bl	80005a0 <fct_vierge>
		moteur1();
 80006a6:	f7ff ff0b 	bl	80004c0 <moteur1>
		cmd_marche();
 80006aa:	f7ff ff29 	bl	8000500 <cmd_marche>
		spi_transmission();
 80006ae:	f7ff ff87 	bl	80005c0 <spi_transmission>

		fct_vierge();
 80006b2:	f7ff ff75 	bl	80005a0 <fct_vierge>
		moteur2();
 80006b6:	f7ff ff13 	bl	80004e0 <moteur2>
		cmd_marche();
 80006ba:	f7ff ff21 	bl	8000500 <cmd_marche>
		spi_transmission();
 80006be:	f7ff ff7f 	bl	80005c0 <spi_transmission>


		break;
 80006c2:	e021      	b.n	8000708 <traiter_message_pc+0xa0>

	case 2:   // reculer
		a = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	607b      	str	r3, [r7, #4]

		break;
 80006c8:	e01e      	b.n	8000708 <traiter_message_pc+0xa0>

	case 3:   // droite
		a = 3;
 80006ca:	2303      	movs	r3, #3
 80006cc:	607b      	str	r3, [r7, #4]
		break;
 80006ce:	e01b      	b.n	8000708 <traiter_message_pc+0xa0>

	case 4:   // gauche
		a = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	607b      	str	r3, [r7, #4]

		break;
 80006d4:	e018      	b.n	8000708 <traiter_message_pc+0xa0>

	case 5:   // controle PWM
		fct_vierge();
 80006d6:	f7ff ff63 	bl	80005a0 <fct_vierge>
		moteur2();
 80006da:	f7ff ff01 	bl	80004e0 <moteur2>
		config_freq_PWM();
 80006de:	f7ff ff29 	bl	8000534 <config_freq_PWM>
		txData[1] = message_recu_PC[1];
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <traiter_message_pc+0xa8>)
 80006e4:	785a      	ldrb	r2, [r3, #1]
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <traiter_message_pc+0xac>)
 80006e8:	705a      	strb	r2, [r3, #1]
		spi_transmission();
 80006ea:	f7ff ff69 	bl	80005c0 <spi_transmission>
		break;
 80006ee:	e00b      	b.n	8000708 <traiter_message_pc+0xa0>

	case 6:  // contrôle du rapport cyclique
		fct_vierge();
 80006f0:	f7ff ff56 	bl	80005a0 <fct_vierge>
		moteur2();
 80006f4:	f7ff fef4 	bl	80004e0 <moteur2>
		vit_rap_cyc(message_recu_PC[1]);
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <traiter_message_pc+0xa8>)
 80006fa:	785b      	ldrb	r3, [r3, #1]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff31 	bl	8000564 <vit_rap_cyc>
		spi_transmission();
 8000702:	f7ff ff5d 	bl	80005c0 <spi_transmission>

		break;
 8000706:	bf00      	nop
>>>>>>> Stashed changes





}
<<<<<<< Updated upstream
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000054 	.word	0x20000054
 8001080:	2000002c 	.word	0x2000002c
 8001084:	20000046 	.word	0x20000046

08001088 <MX_GPIO_Init>:
=======
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000050 	.word	0x20000050
 8000714:	2000002c 	.word	0x2000002c

08000718 <MX_GPIO_Init>:
>>>>>>> Stashed changes
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	4b9a      	ldr	r3, [pc, #616]	; (800130c <MX_GPIO_Init+0x284>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a99      	ldr	r2, [pc, #612]	; (800130c <MX_GPIO_Init+0x284>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b97      	ldr	r3, [pc, #604]	; (800130c <MX_GPIO_Init+0x284>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	4b93      	ldr	r3, [pc, #588]	; (800130c <MX_GPIO_Init+0x284>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a92      	ldr	r2, [pc, #584]	; (800130c <MX_GPIO_Init+0x284>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b90      	ldr	r3, [pc, #576]	; (800130c <MX_GPIO_Init+0x284>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b8c      	ldr	r3, [pc, #560]	; (800130c <MX_GPIO_Init+0x284>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a8b      	ldr	r2, [pc, #556]	; (800130c <MX_GPIO_Init+0x284>)
 80010e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b89      	ldr	r3, [pc, #548]	; (800130c <MX_GPIO_Init+0x284>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b85      	ldr	r3, [pc, #532]	; (800130c <MX_GPIO_Init+0x284>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a84      	ldr	r2, [pc, #528]	; (800130c <MX_GPIO_Init+0x284>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b82      	ldr	r3, [pc, #520]	; (800130c <MX_GPIO_Init+0x284>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	4b7e      	ldr	r3, [pc, #504]	; (800130c <MX_GPIO_Init+0x284>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a7d      	ldr	r2, [pc, #500]	; (800130c <MX_GPIO_Init+0x284>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b7b      	ldr	r3, [pc, #492]	; (800130c <MX_GPIO_Init+0x284>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b77      	ldr	r3, [pc, #476]	; (800130c <MX_GPIO_Init+0x284>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a76      	ldr	r2, [pc, #472]	; (800130c <MX_GPIO_Init+0x284>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b74      	ldr	r3, [pc, #464]	; (800130c <MX_GPIO_Init+0x284>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2108      	movs	r1, #8
 800114a:	4871      	ldr	r0, [pc, #452]	; (8001310 <MX_GPIO_Init+0x288>)
 800114c:	f001 fc6c 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2101      	movs	r1, #1
 8001154:	486f      	ldr	r0, [pc, #444]	; (8001314 <MX_GPIO_Init+0x28c>)
 8001156:	f001 fc67 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800115a:	2200      	movs	r2, #0
 800115c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001160:	486d      	ldr	r0, [pc, #436]	; (8001318 <MX_GPIO_Init+0x290>)
 8001162:	f001 fc61 	bl	8002a28 <HAL_GPIO_WritePin>
=======
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4b9a      	ldr	r3, [pc, #616]	; (800099c <MX_GPIO_Init+0x284>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a99      	ldr	r2, [pc, #612]	; (800099c <MX_GPIO_Init+0x284>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b97      	ldr	r3, [pc, #604]	; (800099c <MX_GPIO_Init+0x284>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b93      	ldr	r3, [pc, #588]	; (800099c <MX_GPIO_Init+0x284>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a92      	ldr	r2, [pc, #584]	; (800099c <MX_GPIO_Init+0x284>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b90      	ldr	r3, [pc, #576]	; (800099c <MX_GPIO_Init+0x284>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b8c      	ldr	r3, [pc, #560]	; (800099c <MX_GPIO_Init+0x284>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a8b      	ldr	r2, [pc, #556]	; (800099c <MX_GPIO_Init+0x284>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b89      	ldr	r3, [pc, #548]	; (800099c <MX_GPIO_Init+0x284>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b85      	ldr	r3, [pc, #532]	; (800099c <MX_GPIO_Init+0x284>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a84      	ldr	r2, [pc, #528]	; (800099c <MX_GPIO_Init+0x284>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b82      	ldr	r3, [pc, #520]	; (800099c <MX_GPIO_Init+0x284>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b7e      	ldr	r3, [pc, #504]	; (800099c <MX_GPIO_Init+0x284>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a7d      	ldr	r2, [pc, #500]	; (800099c <MX_GPIO_Init+0x284>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b7b      	ldr	r3, [pc, #492]	; (800099c <MX_GPIO_Init+0x284>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b77      	ldr	r3, [pc, #476]	; (800099c <MX_GPIO_Init+0x284>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a76      	ldr	r2, [pc, #472]	; (800099c <MX_GPIO_Init+0x284>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b74      	ldr	r3, [pc, #464]	; (800099c <MX_GPIO_Init+0x284>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4871      	ldr	r0, [pc, #452]	; (80009a0 <MX_GPIO_Init+0x288>)
 80007dc:	f001 fbda 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	486f      	ldr	r0, [pc, #444]	; (80009a4 <MX_GPIO_Init+0x28c>)
 80007e6:	f001 fbd5 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f0:	486d      	ldr	r0, [pc, #436]	; (80009a8 <MX_GPIO_Init+0x290>)
 80007f2:	f001 fbcf 	bl	8001f94 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
<<<<<<< Updated upstream
 8001166:	2308      	movs	r3, #8
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4864      	ldr	r0, [pc, #400]	; (8001310 <MX_GPIO_Init+0x288>)
 800117e:	f001 f9bb 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001182:	2301      	movs	r3, #1
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	485e      	ldr	r0, [pc, #376]	; (8001314 <MX_GPIO_Init+0x28c>)
 800119a:	f001 f9ad 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800119e:	2308      	movs	r3, #8
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ae:	2305      	movs	r3, #5
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4856      	ldr	r0, [pc, #344]	; (8001314 <MX_GPIO_Init+0x28c>)
 80011ba:	f001 f99d 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011be:	2301      	movs	r3, #1
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011c2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4852      	ldr	r0, [pc, #328]	; (800131c <MX_GPIO_Init+0x294>)
 80011d4:	f001 f990 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80011d8:	2310      	movs	r3, #16
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011e8:	2306      	movs	r3, #6
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	484a      	ldr	r0, [pc, #296]	; (800131c <MX_GPIO_Init+0x294>)
 80011f4:	f001 f980 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80011f8:	2304      	movs	r3, #4
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	4845      	ldr	r0, [pc, #276]	; (8001320 <MX_GPIO_Init+0x298>)
 800120c:	f001 f974 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001222:	2305      	movs	r3, #5
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	483c      	ldr	r0, [pc, #240]	; (8001320 <MX_GPIO_Init+0x298>)
 800122e:	f001 f963 	bl	80024f8 <HAL_GPIO_Init>
=======
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4864      	ldr	r0, [pc, #400]	; (80009a0 <MX_GPIO_Init+0x288>)
 800080e:	f001 f929 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	485e      	ldr	r0, [pc, #376]	; (80009a4 <MX_GPIO_Init+0x28c>)
 800082a:	f001 f91b 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4856      	ldr	r0, [pc, #344]	; (80009a4 <MX_GPIO_Init+0x28c>)
 800084a:	f001 f90b 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000852:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	4852      	ldr	r0, [pc, #328]	; (80009ac <MX_GPIO_Init+0x294>)
 8000864:	f001 f8fe 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000868:	2310      	movs	r3, #16
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000878:	2306      	movs	r3, #6
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	484a      	ldr	r0, [pc, #296]	; (80009ac <MX_GPIO_Init+0x294>)
 8000884:	f001 f8ee 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000888:	2304      	movs	r3, #4
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4845      	ldr	r0, [pc, #276]	; (80009b0 <MX_GPIO_Init+0x298>)
 800089c:	f001 f8e2 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b2:	2305      	movs	r3, #5
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	483c      	ldr	r0, [pc, #240]	; (80009b0 <MX_GPIO_Init+0x298>)
 80008be:	f001 f8d1 	bl	8001a64 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
<<<<<<< Updated upstream
 8001232:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001236:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4833      	ldr	r0, [pc, #204]	; (8001318 <MX_GPIO_Init+0x290>)
 800124c:	f001 f954 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001250:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001262:	2306      	movs	r3, #6
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4829      	ldr	r0, [pc, #164]	; (8001314 <MX_GPIO_Init+0x28c>)
 800126e:	f001 f943 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4825      	ldr	r0, [pc, #148]	; (800131c <MX_GPIO_Init+0x294>)
 8001288:	f001 f936 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800128c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800129e:	230a      	movs	r3, #10
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	481c      	ldr	r0, [pc, #112]	; (800131c <MX_GPIO_Init+0x294>)
 80012aa:	f001 f925 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80012ae:	2320      	movs	r3, #32
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4815      	ldr	r0, [pc, #84]	; (8001318 <MX_GPIO_Init+0x290>)
 80012c2:	f001 f919 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80012c6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012cc:	2312      	movs	r3, #18
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d8:	2304      	movs	r3, #4
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	480f      	ldr	r0, [pc, #60]	; (8001320 <MX_GPIO_Init+0x298>)
 80012e4:	f001 f908 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_GPIO_Init+0x288>)
 80012fe:	f001 f8fb 	bl	80024f8 <HAL_GPIO_Init>

}
 8001302:	bf00      	nop
 8001304:	3730      	adds	r7, #48	; 0x30
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40021000 	.word	0x40021000
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	00000000 	.word	0x00000000

08001328 <uart_lidar_recieve>:
=======
 80008c2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008c6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4833      	ldr	r0, [pc, #204]	; (80009a8 <MX_GPIO_Init+0x290>)
 80008dc:	f001 f8c2 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f2:	2306      	movs	r3, #6
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4829      	ldr	r0, [pc, #164]	; (80009a4 <MX_GPIO_Init+0x28c>)
 80008fe:	f001 f8b1 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4825      	ldr	r0, [pc, #148]	; (80009ac <MX_GPIO_Init+0x294>)
 8000918:	f001 f8a4 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800091c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800092e:	230a      	movs	r3, #10
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	481c      	ldr	r0, [pc, #112]	; (80009ac <MX_GPIO_Init+0x294>)
 800093a:	f001 f893 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800093e:	2320      	movs	r3, #32
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4815      	ldr	r0, [pc, #84]	; (80009a8 <MX_GPIO_Init+0x290>)
 8000952:	f001 f887 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000956:	f44f 7310 	mov.w	r3, #576	; 0x240
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095c:	2312      	movs	r3, #18
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000960:	2301      	movs	r3, #1
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000968:	2304      	movs	r3, #4
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	480f      	ldr	r0, [pc, #60]	; (80009b0 <MX_GPIO_Init+0x298>)
 8000974:	f001 f876 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_GPIO_Init+0x288>)
 800098e:	f001 f869 	bl	8001a64 <HAL_GPIO_Init>

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020400 	.word	0x40020400

080009b4 <demarrer_pwm_lidar>:





void demarrer_pwm_lidar(){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  TIM1->CCR1 = 20000;
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <demarrer_pwm_lidar+0x18>)
 80009ba:	f644 6220 	movw	r2, #20000	; 0x4e20
 80009be:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009c0:	2100      	movs	r1, #0
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <demarrer_pwm_lidar+0x1c>)
 80009c4:	f002 fbb4 	bl	8003130 <HAL_TIM_PWM_Start>
  return;
 80009c8:	bf00      	nop

  // debug
  memset(historique_reception,0,sizeof(historique_reception));


  }
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40010000 	.word	0x40010000
 80009d0:	200005d8 	.word	0x200005d8

080009d4 <lidar_scan>:
	uint8_t Data[2] = {0xA5, 0x50};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}

void lidar_scan(){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
	uint8_t Data[2] = {0xA5, 0x20};
 80009da:	f242 03a5 	movw	r3, #8357	; 0x20a5
 80009de:	80bb      	strh	r3, [r7, #4]
	HAL_UART_Transmit(&huart3, Data, 2, 100);
 80009e0:	1d39      	adds	r1, r7, #4
 80009e2:	2364      	movs	r3, #100	; 0x64
 80009e4:	2202      	movs	r2, #2
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <lidar_scan+0x20>)
 80009e8:	f003 f912 	bl	8003c10 <HAL_UART_Transmit>
	return;
 80009ec:	bf00      	nop
}
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000688 	.word	0x20000688

080009f8 <uart_lidar_recieve>:
>>>>>>> Stashed changes
	uint8_t Data[2] = {0xA5, 0x25};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}

void uart_lidar_recieve(){
<<<<<<< Updated upstream
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

	octet_recu = UART3_rxBuffer;
 800132e:	4b72      	ldr	r3, [pc, #456]	; (80014f8 <uart_lidar_recieve+0x1d0>)
 8001330:	781a      	ldrb	r2, [r3, #0]
 8001332:	4b72      	ldr	r3, [pc, #456]	; (80014fc <uart_lidar_recieve+0x1d4>)
 8001334:	701a      	strb	r2, [r3, #0]

	historique_reception[indice_historique_reception] = UART3_rxBuffer;
 8001336:	4b72      	ldr	r3, [pc, #456]	; (8001500 <uart_lidar_recieve+0x1d8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6f      	ldr	r2, [pc, #444]	; (80014f8 <uart_lidar_recieve+0x1d0>)
 800133c:	7811      	ldrb	r1, [r2, #0]
 800133e:	4a71      	ldr	r2, [pc, #452]	; (8001504 <uart_lidar_recieve+0x1dc>)
 8001340:	54d1      	strb	r1, [r2, r3]
	//indice_historique_reception ++;



	if (indice_historique_reception == 500){
 8001342:	4b6f      	ldr	r3, [pc, #444]	; (8001500 <uart_lidar_recieve+0x1d8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800134a:	d102      	bne.n	8001352 <uart_lidar_recieve+0x2a>
		indice_historique_reception = 0;
 800134c:	4b6c      	ldr	r3, [pc, #432]	; (8001500 <uart_lidar_recieve+0x1d8>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
=======
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0

	octet_recu = UART3_rxBuffer;
 80009fe:	4b54      	ldr	r3, [pc, #336]	; (8000b50 <uart_lidar_recieve+0x158>)
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	4b54      	ldr	r3, [pc, #336]	; (8000b54 <uart_lidar_recieve+0x15c>)
 8000a04:	701a      	strb	r2, [r3, #0]

	historique_reception[indice_historique_reception] = UART3_rxBuffer;
 8000a06:	4b54      	ldr	r3, [pc, #336]	; (8000b58 <uart_lidar_recieve+0x160>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a51      	ldr	r2, [pc, #324]	; (8000b50 <uart_lidar_recieve+0x158>)
 8000a0c:	7811      	ldrb	r1, [r2, #0]
 8000a0e:	4a53      	ldr	r2, [pc, #332]	; (8000b5c <uart_lidar_recieve+0x164>)
 8000a10:	54d1      	strb	r1, [r2, r3]
	indice_historique_reception ++;
 8000a12:	4b51      	ldr	r3, [pc, #324]	; (8000b58 <uart_lidar_recieve+0x160>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a4f      	ldr	r2, [pc, #316]	; (8000b58 <uart_lidar_recieve+0x160>)
 8000a1a:	6013      	str	r3, [r2, #0]

	if (indice_historique_reception == 500){
 8000a1c:	4b4e      	ldr	r3, [pc, #312]	; (8000b58 <uart_lidar_recieve+0x160>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4

		indice_historique_reception == 0;
>>>>>>> Stashed changes
	}


	switch (lidar_state){
<<<<<<< Updated upstream
 8001352:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <uart_lidar_recieve+0x1e0>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <uart_lidar_recieve+0x38>
 800135a:	2b01      	cmp	r3, #1
 800135c:	d041      	beq.n	80013e2 <uart_lidar_recieve+0xba>
=======
 8000a24:	4b4e      	ldr	r3, [pc, #312]	; (8000b60 <uart_lidar_recieve+0x168>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <uart_lidar_recieve+0x3a>
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d041      	beq.n	8000ab4 <uart_lidar_recieve+0xbc>
>>>>>>> Stashed changes


			break;

		default:
			break;
<<<<<<< Updated upstream
 800135e:	e0c0      	b.n	80014e2 <uart_lidar_recieve+0x1ba>
			if ((octet_recu == 0xA5) && (last_bit_state == end) ){  // on recoit l'octet de start
 8001360:	4b66      	ldr	r3, [pc, #408]	; (80014fc <uart_lidar_recieve+0x1d4>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2ba5      	cmp	r3, #165	; 0xa5
 8001366:	d112      	bne.n	800138e <uart_lidar_recieve+0x66>
 8001368:	4b68      	ldr	r3, [pc, #416]	; (800150c <uart_lidar_recieve+0x1e4>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b04      	cmp	r3, #4
 800136e:	d10e      	bne.n	800138e <uart_lidar_recieve+0x66>
				bit_state = start1;
 8001370:	4b67      	ldr	r3, [pc, #412]	; (8001510 <uart_lidar_recieve+0x1e8>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
				taille_message_recu = 0; // on remet a zero la taille du message recu
 8001376:	4b67      	ldr	r3, [pc, #412]	; (8001514 <uart_lidar_recieve+0x1ec>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
				index_ecriture_message_recu = 0;
 800137c:	4b66      	ldr	r3, [pc, #408]	; (8001518 <uart_lidar_recieve+0x1f0>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
				memset(lidar_message_recu,0,sizeof(lidar_message_recu)); // on efface le buffer
 8001382:	2214      	movs	r2, #20
 8001384:	2100      	movs	r1, #0
 8001386:	4865      	ldr	r0, [pc, #404]	; (800151c <uart_lidar_recieve+0x1f4>)
 8001388:	f004 fbb6 	bl	8005af8 <memset>
 800138c:	e024      	b.n	80013d8 <uart_lidar_recieve+0xb0>
			else if ((last_bit_state == start1) && (octet_recu == 0x5A)){ // on recoit le deuxième octet de start
 800138e:	4b5f      	ldr	r3, [pc, #380]	; (800150c <uart_lidar_recieve+0x1e4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d107      	bne.n	80013a6 <uart_lidar_recieve+0x7e>
 8001396:	4b59      	ldr	r3, [pc, #356]	; (80014fc <uart_lidar_recieve+0x1d4>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b5a      	cmp	r3, #90	; 0x5a
 800139c:	d103      	bne.n	80013a6 <uart_lidar_recieve+0x7e>
				bit_state = start2;
 800139e:	4b5c      	ldr	r3, [pc, #368]	; (8001510 <uart_lidar_recieve+0x1e8>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e018      	b.n	80013d8 <uart_lidar_recieve+0xb0>
			else if (last_bit_state == start2){   // on a l'octet qui donne la taille de la communication
 80013a6:	4b59      	ldr	r3, [pc, #356]	; (800150c <uart_lidar_recieve+0x1e4>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d107      	bne.n	80013be <uart_lidar_recieve+0x96>
				bit_state = size;
 80013ae:	4b58      	ldr	r3, [pc, #352]	; (8001510 <uart_lidar_recieve+0x1e8>)
 80013b0:	2202      	movs	r2, #2
 80013b2:	701a      	strb	r2, [r3, #0]
				taille_message_recu = octet_recu;
 80013b4:	4b51      	ldr	r3, [pc, #324]	; (80014fc <uart_lidar_recieve+0x1d4>)
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	4b56      	ldr	r3, [pc, #344]	; (8001514 <uart_lidar_recieve+0x1ec>)
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e00c      	b.n	80013d8 <uart_lidar_recieve+0xb0>
			else if ((last_bit_state == size) || (last_bit_state == data)){     // on a une data
 80013be:	4b53      	ldr	r3, [pc, #332]	; (800150c <uart_lidar_recieve+0x1e4>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d003      	beq.n	80013ce <uart_lidar_recieve+0xa6>
 80013c6:	4b51      	ldr	r3, [pc, #324]	; (800150c <uart_lidar_recieve+0x1e4>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d104      	bne.n	80013d8 <uart_lidar_recieve+0xb0>
				bit_state = data;
 80013ce:	4b50      	ldr	r3, [pc, #320]	; (8001510 <uart_lidar_recieve+0x1e8>)
 80013d0:	2203      	movs	r2, #3
 80013d2:	701a      	strb	r2, [r3, #0]
				reception_octet_data();
 80013d4:	f000 f8b0 	bl	8001538 <reception_octet_data>
			last_bit_state = bit_state; // machine d'état
 80013d8:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <uart_lidar_recieve+0x1e8>)
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	4b4b      	ldr	r3, [pc, #300]	; (800150c <uart_lidar_recieve+0x1e4>)
 80013de:	701a      	strb	r2, [r3, #0]
			break;
 80013e0:	e07f      	b.n	80014e2 <uart_lidar_recieve+0x1ba>
			if (compteur == 4){
 80013e2:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <uart_lidar_recieve+0x1f8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d16f      	bne.n	80014ca <uart_lidar_recieve+0x1a2>
				num_frame_scan ++;
 80013ea:	4b4e      	ldr	r3, [pc, #312]	; (8001524 <uart_lidar_recieve+0x1fc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <uart_lidar_recieve+0x1fc>)
 80013f2:	6013      	str	r3, [r2, #0]
				compteur = 0;
 80013f4:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <uart_lidar_recieve+0x1f8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
				if (error_check() == 1){
 80013fa:	f000 f8e3 	bl	80015c4 <error_check>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b01      	cmp	r3, #1
 8001402:	d102      	bne.n	800140a <uart_lidar_recieve+0xe2>
					compteur = 0;
 8001404:	4b46      	ldr	r3, [pc, #280]	; (8001520 <uart_lidar_recieve+0x1f8>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
				uint8_t a1 = lidar_message_recu[1] >> 1;
 800140a:	4b44      	ldr	r3, [pc, #272]	; (800151c <uart_lidar_recieve+0x1f4>)
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	085b      	lsrs	r3, r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
				uint8_t a2 = lidar_message_recu[2];
 8001412:	4b42      	ldr	r3, [pc, #264]	; (800151c <uart_lidar_recieve+0x1f4>)
 8001414:	789b      	ldrb	r3, [r3, #2]
 8001416:	73bb      	strb	r3, [r7, #14]
				uint8_t d1 = lidar_message_recu[3];
 8001418:	4b40      	ldr	r3, [pc, #256]	; (800151c <uart_lidar_recieve+0x1f4>)
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	737b      	strb	r3, [r7, #13]
				uint8_t d2 = lidar_message_recu[4];
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <uart_lidar_recieve+0x1f4>)
 8001420:	791b      	ldrb	r3, [r3, #4]
 8001422:	733b      	strb	r3, [r7, #12]
				indice_historique_angle ++;
 8001424:	4b40      	ldr	r3, [pc, #256]	; (8001528 <uart_lidar_recieve+0x200>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a3f      	ldr	r2, [pc, #252]	; (8001528 <uart_lidar_recieve+0x200>)
 800142c:	6013      	str	r3, [r2, #0]
				uint16_t angle_16 = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	817b      	strh	r3, [r7, #10]
				angle_16 = a2 << 8 | a1;
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	b21a      	sxth	r2, r3
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21b      	sxth	r3, r3
 8001440:	817b      	strh	r3, [r7, #10]
				angle_16 = angle_16 >> 1;
 8001442:	897b      	ldrh	r3, [r7, #10]
 8001444:	085b      	lsrs	r3, r3, #1
 8001446:	817b      	strh	r3, [r7, #10]
				historique_angle[indice_historique_angle] = (int)angle_16 / 64;
 8001448:	897b      	ldrh	r3, [r7, #10]
 800144a:	099b      	lsrs	r3, r3, #6
 800144c:	b29a      	uxth	r2, r3
 800144e:	4b36      	ldr	r3, [pc, #216]	; (8001528 <uart_lidar_recieve+0x200>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4611      	mov	r1, r2
 8001454:	4a35      	ldr	r2, [pc, #212]	; (800152c <uart_lidar_recieve+0x204>)
 8001456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (indice_historique_angle >= 900){
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <uart_lidar_recieve+0x200>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001462:	db02      	blt.n	800146a <uart_lidar_recieve+0x142>
					indice_historique_angle  = 0;
 8001464:	4b30      	ldr	r3, [pc, #192]	; (8001528 <uart_lidar_recieve+0x200>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
				angle_16 = (int) (angle_16 / 64 / 1.42);
 800146a:	897b      	ldrh	r3, [r7, #10]
 800146c:	099b      	lsrs	r3, r3, #6
 800146e:	b29b      	uxth	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe fffb 	bl	800046c <__aeabi_i2d>
 8001476:	a31e      	add	r3, pc, #120	; (adr r3, 80014f0 <uart_lidar_recieve+0x1c8>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff f98a 	bl	8000794 <__aeabi_ddiv>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fa6c 	bl	8000964 <__aeabi_d2iz>
 800148c:	4603      	mov	r3, r0
 800148e:	817b      	strh	r3, [r7, #10]
				uint8_t lidar_message_a_transmettre[5] = {1, angle_16, a2, d1, d2};
 8001490:	2301      	movs	r3, #1
 8001492:	713b      	strb	r3, [r7, #4]
 8001494:	897b      	ldrh	r3, [r7, #10]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	717b      	strb	r3, [r7, #5]
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	71bb      	strb	r3, [r7, #6]
 800149e:	7b7b      	ldrb	r3, [r7, #13]
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	7b3b      	ldrb	r3, [r7, #12]
 80014a4:	723b      	strb	r3, [r7, #8]
				if (NUMtrame >= 2){
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <uart_lidar_recieve+0x208>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	dd08      	ble.n	80014c0 <uart_lidar_recieve+0x198>
					HAL_UART_Transmit(&huart2, lidar_message_a_transmettre, 5, 100);
 80014ae:	1d39      	adds	r1, r7, #4
 80014b0:	2364      	movs	r3, #100	; 0x64
 80014b2:	2205      	movs	r2, #5
 80014b4:	481f      	ldr	r0, [pc, #124]	; (8001534 <uart_lidar_recieve+0x20c>)
 80014b6:	f003 fb77 	bl	8004ba8 <HAL_UART_Transmit>
					NUMtrame = 0;
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <uart_lidar_recieve+0x208>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
				NUMtrame ++;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <uart_lidar_recieve+0x208>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a1a      	ldr	r2, [pc, #104]	; (8001530 <uart_lidar_recieve+0x208>)
 80014c8:	6013      	str	r3, [r2, #0]
			lidar_message_recu[compteur] = octet_recu;
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <uart_lidar_recieve+0x1f8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <uart_lidar_recieve+0x1d4>)
 80014d0:	7811      	ldrb	r1, [r2, #0]
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <uart_lidar_recieve+0x1f4>)
 80014d4:	54d1      	strb	r1, [r2, r3]
			compteur ++;
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <uart_lidar_recieve+0x1f8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	4a10      	ldr	r2, [pc, #64]	; (8001520 <uart_lidar_recieve+0x1f8>)
 80014de:	6013      	str	r3, [r2, #0]
			break;
 80014e0:	bf00      	nop
=======
 8000a30:	e089      	b.n	8000b46 <uart_lidar_recieve+0x14e>
			if ((octet_recu == 0xA5) && (last_bit_state == end) ){  // on recoit l'octet de start
 8000a32:	4b48      	ldr	r3, [pc, #288]	; (8000b54 <uart_lidar_recieve+0x15c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2ba5      	cmp	r3, #165	; 0xa5
 8000a38:	d112      	bne.n	8000a60 <uart_lidar_recieve+0x68>
 8000a3a:	4b4a      	ldr	r3, [pc, #296]	; (8000b64 <uart_lidar_recieve+0x16c>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	d10e      	bne.n	8000a60 <uart_lidar_recieve+0x68>
				bit_state = start1;
 8000a42:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <uart_lidar_recieve+0x170>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
				taille_message_recu = 0; // on remet a zero la taille du message recu
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <uart_lidar_recieve+0x174>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
				index_ecriture_message_recu = 0;
 8000a4e:	4b48      	ldr	r3, [pc, #288]	; (8000b70 <uart_lidar_recieve+0x178>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
				memset(lidar_message_recu,0,sizeof(lidar_message_recu)); // on efface le buffer
 8000a54:	2214      	movs	r2, #20
 8000a56:	2100      	movs	r1, #0
 8000a58:	4846      	ldr	r0, [pc, #280]	; (8000b74 <uart_lidar_recieve+0x17c>)
 8000a5a:	f004 f96d 	bl	8004d38 <memset>
 8000a5e:	e024      	b.n	8000aaa <uart_lidar_recieve+0xb2>
			else if ((last_bit_state == start1) && (octet_recu == 0x5A)){ // on recoit le deuxième octet de start
 8000a60:	4b40      	ldr	r3, [pc, #256]	; (8000b64 <uart_lidar_recieve+0x16c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d107      	bne.n	8000a78 <uart_lidar_recieve+0x80>
 8000a68:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <uart_lidar_recieve+0x15c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b5a      	cmp	r3, #90	; 0x5a
 8000a6e:	d103      	bne.n	8000a78 <uart_lidar_recieve+0x80>
				bit_state = start2;
 8000a70:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <uart_lidar_recieve+0x170>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	e018      	b.n	8000aaa <uart_lidar_recieve+0xb2>
			else if (last_bit_state == start2){   // on a l'octet qui donne la taille de la communication
 8000a78:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <uart_lidar_recieve+0x16c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d107      	bne.n	8000a90 <uart_lidar_recieve+0x98>
				bit_state = size;
 8000a80:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <uart_lidar_recieve+0x170>)
 8000a82:	2202      	movs	r2, #2
 8000a84:	701a      	strb	r2, [r3, #0]
				taille_message_recu = octet_recu;
 8000a86:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <uart_lidar_recieve+0x15c>)
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	4b38      	ldr	r3, [pc, #224]	; (8000b6c <uart_lidar_recieve+0x174>)
 8000a8c:	701a      	strb	r2, [r3, #0]
 8000a8e:	e00c      	b.n	8000aaa <uart_lidar_recieve+0xb2>
			else if ((last_bit_state == size) || (last_bit_state == data)){     // on a une data
 8000a90:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <uart_lidar_recieve+0x16c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d003      	beq.n	8000aa0 <uart_lidar_recieve+0xa8>
 8000a98:	4b32      	ldr	r3, [pc, #200]	; (8000b64 <uart_lidar_recieve+0x16c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d104      	bne.n	8000aaa <uart_lidar_recieve+0xb2>
				bit_state = data;
 8000aa0:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <uart_lidar_recieve+0x170>)
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	701a      	strb	r2, [r3, #0]
				reception_octet_data();
 8000aa6:	f000 f86f 	bl	8000b88 <reception_octet_data>
			last_bit_state = bit_state; // machine d'état
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <uart_lidar_recieve+0x170>)
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <uart_lidar_recieve+0x16c>)
 8000ab0:	701a      	strb	r2, [r3, #0]
			break;
 8000ab2:	e048      	b.n	8000b46 <uart_lidar_recieve+0x14e>
			if (compteur == 4){
 8000ab4:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <uart_lidar_recieve+0x180>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d138      	bne.n	8000b2e <uart_lidar_recieve+0x136>
				num_frame_scan ++;
 8000abc:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <uart_lidar_recieve+0x184>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	4a2e      	ldr	r2, [pc, #184]	; (8000b7c <uart_lidar_recieve+0x184>)
 8000ac4:	6013      	str	r3, [r2, #0]
				compteur = 0;
 8000ac6:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <uart_lidar_recieve+0x180>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
				if (error_check() == 0){
 8000acc:	f000 f8a2 	bl	8000c14 <error_check>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d102      	bne.n	8000adc <uart_lidar_recieve+0xe4>
					compteur = 4;
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <uart_lidar_recieve+0x180>)
 8000ad8:	2204      	movs	r2, #4
 8000ada:	601a      	str	r2, [r3, #0]
				uint8_t a1 = (lidar_message_recu[1] & 0b11111110) >> 1;
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <uart_lidar_recieve+0x17c>)
 8000ade:	785b      	ldrb	r3, [r3, #1]
 8000ae0:	085b      	lsrs	r3, r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
				uint8_t a2 = lidar_message_recu[2];
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <uart_lidar_recieve+0x17c>)
 8000ae6:	789b      	ldrb	r3, [r3, #2]
 8000ae8:	73bb      	strb	r3, [r7, #14]
				uint8_t d1 = lidar_message_recu[3];
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <uart_lidar_recieve+0x17c>)
 8000aec:	78db      	ldrb	r3, [r3, #3]
 8000aee:	737b      	strb	r3, [r7, #13]
				uint8_t d2 = lidar_message_recu[4];
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <uart_lidar_recieve+0x17c>)
 8000af2:	791b      	ldrb	r3, [r3, #4]
 8000af4:	733b      	strb	r3, [r7, #12]
				uint8_t lidar_message_a_transmettre[5] = {1, a1, a2, d1, d2};
 8000af6:	2301      	movs	r3, #1
 8000af8:	713b      	strb	r3, [r7, #4]
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	717b      	strb	r3, [r7, #5]
 8000afe:	7bbb      	ldrb	r3, [r7, #14]
 8000b00:	71bb      	strb	r3, [r7, #6]
 8000b02:	7b7b      	ldrb	r3, [r7, #13]
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	7b3b      	ldrb	r3, [r7, #12]
 8000b08:	723b      	strb	r3, [r7, #8]
				if (NUMtrame >= 1){
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <uart_lidar_recieve+0x188>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	dd08      	ble.n	8000b24 <uart_lidar_recieve+0x12c>
					HAL_UART_Transmit(&huart2, lidar_message_a_transmettre, 5, 100);
 8000b12:	1d39      	adds	r1, r7, #4
 8000b14:	2364      	movs	r3, #100	; 0x64
 8000b16:	2205      	movs	r2, #5
 8000b18:	481a      	ldr	r0, [pc, #104]	; (8000b84 <uart_lidar_recieve+0x18c>)
 8000b1a:	f003 f879 	bl	8003c10 <HAL_UART_Transmit>
					NUMtrame = 0;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <uart_lidar_recieve+0x188>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
				NUMtrame ++;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <uart_lidar_recieve+0x188>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <uart_lidar_recieve+0x188>)
 8000b2c:	6013      	str	r3, [r2, #0]
			lidar_message_recu[compteur] = octet_recu;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <uart_lidar_recieve+0x180>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <uart_lidar_recieve+0x15c>)
 8000b34:	7811      	ldrb	r1, [r2, #0]
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <uart_lidar_recieve+0x17c>)
 8000b38:	54d1      	strb	r1, [r2, r3]
			compteur ++;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <uart_lidar_recieve+0x180>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <uart_lidar_recieve+0x180>)
 8000b42:	6013      	str	r3, [r2, #0]
			break;
 8000b44:	bf00      	nop
>>>>>>> Stashed changes


		}

	return;
<<<<<<< Updated upstream
 80014e2:	bf00      	nop
}
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	f3af 8000 	nop.w
 80014f0:	eb851eb8 	.word	0xeb851eb8
 80014f4:	3ff6b851 	.word	0x3ff6b851
 80014f8:	20001658 	.word	0x20001658
 80014fc:	200000bd 	.word	0x200000bd
 8001500:	2000003c 	.word	0x2000003c
 8001504:	200000c0 	.word	0x200000c0
 8001508:	2000002e 	.word	0x2000002e
 800150c:	20000000 	.word	0x20000000
 8001510:	200000bc 	.word	0x200000bc
 8001514:	200000be 	.word	0x200000be
 8001518:	200000b8 	.word	0x200000b8
 800151c:	200004a8 	.word	0x200004a8
 8001520:	20000034 	.word	0x20000034
 8001524:	20000030 	.word	0x20000030
 8001528:	20000040 	.word	0x20000040
 800152c:	200004bc 	.word	0x200004bc
 8001530:	20000038 	.word	0x20000038
 8001534:	2000176c 	.word	0x2000176c

08001538 <reception_octet_data>:

void reception_octet_data(){
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
		lidar_message_recu[index_ecriture_message_recu] = octet_recu;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <reception_octet_data+0x38>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <reception_octet_data+0x3c>)
 8001542:	7811      	ldrb	r1, [r2, #0]
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <reception_octet_data+0x40>)
 8001546:	54d1      	strb	r1, [r2, r3]
		index_ecriture_message_recu ++;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <reception_octet_data+0x38>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <reception_octet_data+0x38>)
 8001550:	6013      	str	r3, [r2, #0]
		if (index_ecriture_message_recu == taille_message_recu){
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <reception_octet_data+0x44>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <reception_octet_data+0x38>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d105      	bne.n	800156c <reception_octet_data+0x34>
			bit_state = end;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <reception_octet_data+0x48>)
 8001562:	2204      	movs	r2, #4
 8001564:	701a      	strb	r2, [r3, #0]
			lidar_fin_du_message_recu();
 8001566:	f000 f80d 	bl	8001584 <lidar_fin_du_message_recu>
=======
 8000b46:	bf00      	nop
}
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200006cc 	.word	0x200006cc
 8000b54:	200000b9 	.word	0x200000b9
 8000b58:	2000003c 	.word	0x2000003c
 8000b5c:	200000bc 	.word	0x200000bc
 8000b60:	2000002e 	.word	0x2000002e
 8000b64:	20000000 	.word	0x20000000
 8000b68:	200000b8 	.word	0x200000b8
 8000b6c:	200000ba 	.word	0x200000ba
 8000b70:	200000b4 	.word	0x200000b4
 8000b74:	200004a4 	.word	0x200004a4
 8000b78:	20000034 	.word	0x20000034
 8000b7c:	20000030 	.word	0x20000030
 8000b80:	20000038 	.word	0x20000038
 8000b84:	200007e0 	.word	0x200007e0

08000b88 <reception_octet_data>:

void reception_octet_data(){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
		lidar_message_recu[index_ecriture_message_recu] = octet_recu;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <reception_octet_data+0x38>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <reception_octet_data+0x3c>)
 8000b92:	7811      	ldrb	r1, [r2, #0]
 8000b94:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <reception_octet_data+0x40>)
 8000b96:	54d1      	strb	r1, [r2, r3]
		index_ecriture_message_recu ++;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <reception_octet_data+0x38>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <reception_octet_data+0x38>)
 8000ba0:	6013      	str	r3, [r2, #0]
		if (index_ecriture_message_recu == taille_message_recu){
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <reception_octet_data+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <reception_octet_data+0x38>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d105      	bne.n	8000bbc <reception_octet_data+0x34>
			bit_state = end;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <reception_octet_data+0x48>)
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	701a      	strb	r2, [r3, #0]
			lidar_fin_du_message_recu();
 8000bb6:	f000 f80d 	bl	8000bd4 <lidar_fin_du_message_recu>
>>>>>>> Stashed changes
		}


	return;
<<<<<<< Updated upstream
 800156a:	bf00      	nop
 800156c:	bf00      	nop
}
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200000b8 	.word	0x200000b8
 8001574:	200000bd 	.word	0x200000bd
 8001578:	200004a8 	.word	0x200004a8
 800157c:	200000be 	.word	0x200000be
 8001580:	200000bc 	.word	0x200000bc

08001584 <lidar_fin_du_message_recu>:


void lidar_fin_du_message_recu(){      // on transmet le message au PC
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

	// on est en mode scan
	if((lidar_message_recu[0] == 0x0) && (lidar_message_recu[1] == 0x0) && (lidar_message_recu[2] == 0x40) && (lidar_message_recu[3] == 0x81)){
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <lidar_fin_du_message_recu+0x38>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10f      	bne.n	80015b0 <lidar_fin_du_message_recu+0x2c>
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <lidar_fin_du_message_recu+0x38>)
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10b      	bne.n	80015b0 <lidar_fin_du_message_recu+0x2c>
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <lidar_fin_du_message_recu+0x38>)
 800159a:	789b      	ldrb	r3, [r3, #2]
 800159c:	2b40      	cmp	r3, #64	; 0x40
 800159e:	d107      	bne.n	80015b0 <lidar_fin_du_message_recu+0x2c>
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <lidar_fin_du_message_recu+0x38>)
 80015a2:	78db      	ldrb	r3, [r3, #3]
 80015a4:	2b81      	cmp	r3, #129	; 0x81
 80015a6:	d103      	bne.n	80015b0 <lidar_fin_du_message_recu+0x2c>
		lidar_state = scan;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <lidar_fin_du_message_recu+0x3c>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
=======
 8000bba:	bf00      	nop
 8000bbc:	bf00      	nop
}
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000b4 	.word	0x200000b4
 8000bc4:	200000b9 	.word	0x200000b9
 8000bc8:	200004a4 	.word	0x200004a4
 8000bcc:	200000ba 	.word	0x200000ba
 8000bd0:	200000b8 	.word	0x200000b8

08000bd4 <lidar_fin_du_message_recu>:


void lidar_fin_du_message_recu(){      // on transmet le message au PC
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

	// on est en mode scan
	if((lidar_message_recu[0] == 0x0) && (lidar_message_recu[1] == 0x0) && (lidar_message_recu[2] == 0x40) && (lidar_message_recu[3] == 0x81)){
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <lidar_fin_du_message_recu+0x38>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d10f      	bne.n	8000c00 <lidar_fin_du_message_recu+0x2c>
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <lidar_fin_du_message_recu+0x38>)
 8000be2:	785b      	ldrb	r3, [r3, #1]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10b      	bne.n	8000c00 <lidar_fin_du_message_recu+0x2c>
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <lidar_fin_du_message_recu+0x38>)
 8000bea:	789b      	ldrb	r3, [r3, #2]
 8000bec:	2b40      	cmp	r3, #64	; 0x40
 8000bee:	d107      	bne.n	8000c00 <lidar_fin_du_message_recu+0x2c>
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <lidar_fin_du_message_recu+0x38>)
 8000bf2:	78db      	ldrb	r3, [r3, #3]
 8000bf4:	2b81      	cmp	r3, #129	; 0x81
 8000bf6:	d103      	bne.n	8000c00 <lidar_fin_du_message_recu+0x2c>
		lidar_state = scan;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <lidar_fin_du_message_recu+0x3c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
	}




	return;
<<<<<<< Updated upstream
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
=======
 8000bfe:	bf00      	nop
 8000c00:	bf00      	nop
>>>>>>> Stashed changes



}
<<<<<<< Updated upstream
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200004a8 	.word	0x200004a8
 80015c0:	2000002e 	.word	0x2000002e

080015c4 <error_check>:


int error_check(){
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0

	uint8_t trame_copie = lidar_message_recu[0];
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <error_check+0x60>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
	trame_copie &= 0b11000000;
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d6:	71fb      	strb	r3, [r7, #7]


	if (trame_copie == 0b11000000 || trame_copie == 0b00000000){
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2bc0      	cmp	r3, #192	; 0xc0
 80015dc:	d002      	beq.n	80015e4 <error_check+0x20>
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d104      	bne.n	80015ee <error_check+0x2a>
		index_ecriture_message_recu = 0;
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <error_check+0x64>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
		return 1; // erreur sur le bit S et S/
 80015ea:	2301      	movs	r3, #1
 80015ec:	e013      	b.n	8001616 <error_check+0x52>
=======
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200004a4 	.word	0x200004a4
 8000c10:	2000002e 	.word	0x2000002e

08000c14 <error_check>:


int error_check(){
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0

	uint8_t trame_copie = lidar_message_recu[0];
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <error_check+0x60>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
	trame_copie &= 0b11000000;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c26:	71fb      	strb	r3, [r7, #7]


	if (trame_copie == 0b11000000 || trame_copie == 0b00000000){
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2bc0      	cmp	r3, #192	; 0xc0
 8000c2c:	d002      	beq.n	8000c34 <error_check+0x20>
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d104      	bne.n	8000c3e <error_check+0x2a>
		index_ecriture_message_recu = 0;
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <error_check+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
		return 1; // erreur sur le bit S et S/
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e013      	b.n	8000c66 <error_check+0x52>
>>>>>>> Stashed changes
	}
	uint8_t trame_copie2 = lidar_message_recu[1];
<<<<<<< Updated upstream
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <error_check+0x60>)
 80015f0:	785b      	ldrb	r3, [r3, #1]
 80015f2:	71bb      	strb	r3, [r7, #6]
	trame_copie2 &= 0b10000000;
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015fa:	71bb      	strb	r3, [r7, #6]
	if (trame_copie2 == 0B0 && index_ecriture_message_recu >= 1){
 80015fc:	79bb      	ldrb	r3, [r7, #6]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d108      	bne.n	8001614 <error_check+0x50>
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <error_check+0x64>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	dd04      	ble.n	8001614 <error_check+0x50>
		index_ecriture_message_recu = 0;
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <error_check+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
		return 1;
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <error_check+0x52>
	}

	return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200004a8 	.word	0x200004a8
 8001628:	200000b8 	.word	0x200000b8

0800162c <main>:
=======
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <error_check+0x60>)
 8000c40:	785b      	ldrb	r3, [r3, #1]
 8000c42:	71bb      	strb	r3, [r7, #6]
	trame_copie2 &= 0b10000000;
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c4a:	71bb      	strb	r3, [r7, #6]
	if (trame_copie2 == 0B0 && index_ecriture_message_recu >= 1){
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d108      	bne.n	8000c64 <error_check+0x50>
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <error_check+0x64>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	dd04      	ble.n	8000c64 <error_check+0x50>
		index_ecriture_message_recu = 0;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <error_check+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
		return 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <error_check+0x52>
	}

	return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200004a4 	.word	0x200004a4
 8000c78:	200000b4 	.word	0x200000b4

08000c7c <main>:
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
=======
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8001630:	f000 fcf6 	bl	8002020 <HAL_Init>
=======
 8000c82:	f000 fc77 	bl	8001574 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 8001634:	f000 f83e 	bl	80016b4 <SystemClock_Config>
=======
 8000c86:	f000 f83f 	bl	8000d08 <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 8001638:	f7ff fd26 	bl	8001088 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800163c:	f000 fb5a 	bl	8001cf4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001640:	f000 fb82 	bl	8001d48 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001644:	f000 f8a6 	bl	8001794 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001648:	f000 fa00 	bl	8001a4c <MX_TIM1_Init>
  MX_USART6_UART_Init();
 800164c:	f000 fba6 	bl	8001d9c <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8001650:	f000 fa80 	bl	8001b54 <MX_TIM2_Init>
=======
 8000c8a:	f7ff fd45 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c8e:	f000 fadb 	bl	8001248 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c92:	f000 fb03 	bl	800129c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c96:	f000 f8a7 	bl	8000de8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000c9a:	f000 f9f5 	bl	8001088 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8000c9e:	f000 fb27 	bl	80012f0 <MX_USART6_UART_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN 2 */



<<<<<<< Updated upstream
  HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer, 1);
 8001654:	2201      	movs	r2, #1
 8001656:	490f      	ldr	r1, [pc, #60]	; (8001694 <main+0x68>)
 8001658:	480f      	ldr	r0, [pc, #60]	; (8001698 <main+0x6c>)
 800165a:	f003 fb37 	bl	8004ccc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1);
 800165e:	2201      	movs	r2, #1
 8001660:	490e      	ldr	r1, [pc, #56]	; (800169c <main+0x70>)
 8001662:	480f      	ldr	r0, [pc, #60]	; (80016a0 <main+0x74>)
 8001664:	f003 fb32 	bl	8004ccc <HAL_UART_Receive_IT>



  objectif_vitesse = 0;
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <main+0x78>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
  vitesse_actuelle = 0;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <main+0x7c>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]


  //reset_lidar();
  //demarrer_pwm_lidar();
  //lidar_stop();
  HAL_Delay(50);
 8001674:	2032      	movs	r0, #50	; 0x32
 8001676:	f000 fd45 	bl	8002104 <HAL_Delay>


  /*
   * Test rampe
   */
  vitesse_actuelle = 0;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <main+0x7c>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
  //objectif_vitesse = 20;

  HAL_TIM_Base_Start_IT(&htim2);
 8001680:	480a      	ldr	r0, [pc, #40]	; (80016ac <main+0x80>)
 8001682:	f002 fa9f 	bl	8003bc4 <HAL_TIM_Base_Start_IT>
=======
  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer_2, sizeof(&UART2_rxBuffer_2));
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	4912      	ldr	r1, [pc, #72]	; (8000cf0 <main+0x74>)
 8000ca6:	4813      	ldr	r0, [pc, #76]	; (8000cf4 <main+0x78>)
 8000ca8:	f003 f844 	bl	8003d34 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	4912      	ldr	r1, [pc, #72]	; (8000cf8 <main+0x7c>)
 8000cb0:	4812      	ldr	r0, [pc, #72]	; (8000cfc <main+0x80>)
 8000cb2:	f003 f83f 	bl	8003d34 <HAL_UART_Receive_IT>




  //reset_lidar();
  demarrer_pwm_lidar();
 8000cb6:	f7ff fe7d 	bl	80009b4 <demarrer_pwm_lidar>
  lidar_scan();
 8000cba:	f7ff fe8b 	bl	80009d4 <lidar_scan>
>>>>>>> Stashed changes
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
<<<<<<< Updated upstream
 8001686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168a:	4809      	ldr	r0, [pc, #36]	; (80016b0 <main+0x84>)
 800168c:	f001 f9e5 	bl	8002a5a <HAL_GPIO_TogglePin>
 8001690:	e7f9      	b.n	8001686 <main+0x5a>
 8001692:	bf00      	nop
 8001694:	2000160c 	.word	0x2000160c
 8001698:	2000176c 	.word	0x2000176c
 800169c:	20001658 	.word	0x20001658
 80016a0:	20001614 	.word	0x20001614
 80016a4:	20000046 	.word	0x20000046
 80016a8:	20000045 	.word	0x20000045
 80016ac:	200015c4 	.word	0x200015c4
 80016b0:	40020c00 	.word	0x40020c00

080016b4 <SystemClock_Config>:
=======
 8000cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc2:	480f      	ldr	r0, [pc, #60]	; (8000d00 <main+0x84>)
 8000cc4:	f001 f97f 	bl	8001fc6 <HAL_GPIO_TogglePin>
	  uint8_t test[3] = {1,2,3};
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <main+0x88>)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	8019      	strh	r1, [r3, #0]
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	0c12      	lsrs	r2, r2, #16
 8000cd6:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, test, 3, 100);
 8000cd8:	1d39      	adds	r1, r7, #4
 8000cda:	2364      	movs	r3, #100	; 0x64
 8000cdc:	2203      	movs	r2, #3
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <main+0x78>)
 8000ce0:	f002 ff96 	bl	8003c10 <HAL_UART_Transmit>
	  //test_spi();
	  //test_spi_inverse();

	  //tests_lidar();

	  HAL_Delay(500);
 8000ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce8:	f000 fcb6 	bl	8001658 <HAL_Delay>
  {
 8000cec:	e7e7      	b.n	8000cbe <main+0x42>
 8000cee:	bf00      	nop
 8000cf0:	20000624 	.word	0x20000624
 8000cf4:	200007e0 	.word	0x200007e0
 8000cf8:	200006cc 	.word	0x200006cc
 8000cfc:	20000688 	.word	0x20000688
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	08004d70 	.word	0x08004d70

08000d08 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b094      	sub	sp, #80	; 0x50
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0320 	add.w	r3, r7, #32
 80016be:	2230      	movs	r2, #48	; 0x30
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fa18 	bl	8005af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
=======
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	; 0x50
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	2230      	movs	r2, #48	; 0x30
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f004 f80e 	bl	8004d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <SystemClock_Config+0xcc>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	4a27      	ldr	r2, [pc, #156]	; (8001780 <SystemClock_Config+0xcc>)
 80016e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e6:	6413      	str	r3, [r2, #64]	; 0x40
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <SystemClock_Config+0xcc>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f4:	2300      	movs	r3, #0
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <SystemClock_Config+0xd0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a21      	ldr	r2, [pc, #132]	; (8001784 <SystemClock_Config+0xd0>)
 80016fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <SystemClock_Config+0xd0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
=======
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <SystemClock_Config+0xcc>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	4a27      	ldr	r2, [pc, #156]	; (8000dd4 <SystemClock_Config+0xcc>)
 8000d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3c:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <SystemClock_Config+0xcc>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <SystemClock_Config+0xd0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <SystemClock_Config+0xd0>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <SystemClock_Config+0xd0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
>>>>>>> Stashed changes
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< Updated upstream
 8001710:	2301      	movs	r3, #1
 8001712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171a:	2302      	movs	r3, #2
 800171c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001724:	2308      	movs	r3, #8
 8001726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001728:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800172c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800172e:	2302      	movs	r3, #2
 8001730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001732:	2307      	movs	r3, #7
 8001734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	4618      	mov	r0, r3
 800173c:	f001 f9a8 	bl	8002a90 <HAL_RCC_OscConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001746:	f000 f81f 	bl	8001788 <Error_Handler>
=======
 8000d64:	2301      	movs	r3, #1
 8000d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d86:	2307      	movs	r3, #7
 8000d88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 f934 	bl	8001ffc <HAL_RCC_OscConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d9a:	f000 f81f 	bl	8000ddc <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 800174a:	230f      	movs	r3, #15
 800174c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174e:	2302      	movs	r3, #2
 8001750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001756:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800175a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	2105      	movs	r1, #5
 8001768:	4618      	mov	r0, r3
 800176a:	f001 fc09 	bl	8002f80 <HAL_RCC_ClockConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001774:	f000 f808 	bl	8001788 <Error_Handler>
  }
}
 8001778:	bf00      	nop
 800177a:	3750      	adds	r7, #80	; 0x50
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000

08001788 <Error_Handler>:
=======
 8000d9e:	230f      	movs	r3, #15
 8000da0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da2:	2302      	movs	r3, #2
 8000da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000daa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2105      	movs	r1, #5
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 fb95 	bl	80024ec <HAL_RCC_ClockConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dc8:	f000 f808 	bl	8000ddc <Error_Handler>
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3750      	adds	r7, #80	; 0x50
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40007000 	.word	0x40007000

08000ddc <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
=======
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
=======
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x8>
	...

08001794 <MX_SPI1_Init>:
=======
 8000de4:	e7fe      	b.n	8000de4 <Error_Handler+0x8>
	...

08000de8 <MX_SPI1_Init>:
>>>>>>> Stashed changes

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
<<<<<<< Updated upstream
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
=======
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
<<<<<<< Updated upstream
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_SPI1_Init+0x64>)
 800179a:	4a18      	ldr	r2, [pc, #96]	; (80017fc <MX_SPI1_Init+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017c8:	2230      	movs	r2, #48	; 0x30
 80017ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017e0:	220a      	movs	r2, #10
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_SPI1_Init+0x64>)
 80017e6:	f001 fdc7 	bl	8003378 <HAL_SPI_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017f0:	f7ff ffca 	bl	8001788 <Error_Handler>
=======
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000dee:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <MX_SPI1_Init+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000df4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000df8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e1c:	2230      	movs	r2, #48	; 0x30
 8000e1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e34:	220a      	movs	r2, #10
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e3a:	f001 fd53 	bl	80028e4 <HAL_SPI_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e44:	f7ff ffca 	bl	8000ddc <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< Updated upstream
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200014c0 	.word	0x200014c0
 80017fc:	40013000 	.word	0x40013000

08001800 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <HAL_SPI_MspInit+0xb4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d144      	bne.n	80018ac <HAL_SPI_MspInit+0xac>
=======
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000051c 	.word	0x2000051c
 8000e50:	40013000 	.word	0x40013000

08000e54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a25      	ldr	r2, [pc, #148]	; (8000f08 <HAL_SPI_MspInit+0xb4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d144      	bne.n	8000f00 <HAL_SPI_MspInit+0xac>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< Updated upstream
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_SPI_MspInit+0xb8>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a23      	ldr	r2, [pc, #140]	; (80018b8 <HAL_SPI_MspInit+0xb8>)
 800182c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_SPI_MspInit+0xb8>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_SPI_MspInit+0xb8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <HAL_SPI_MspInit+0xb8>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_SPI_MspInit+0xb8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
=======
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <HAL_SPI_MspInit+0xb8>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <HAL_SPI_MspInit+0xb8>)
 8000e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_SPI_MspInit+0xb8>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_SPI_MspInit+0xb8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <HAL_SPI_MspInit+0xb8>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <HAL_SPI_MspInit+0xb8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
<<<<<<< Updated upstream
 800185a:	23e0      	movs	r3, #224	; 0xe0
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800186a:	2305      	movs	r3, #5
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4811      	ldr	r0, [pc, #68]	; (80018bc <HAL_SPI_MspInit+0xbc>)
 8001876:	f000 fe3f 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800187a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800187e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188c:	2305      	movs	r3, #5
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4809      	ldr	r0, [pc, #36]	; (80018bc <HAL_SPI_MspInit+0xbc>)
 8001898:	f000 fe2e 	bl	80024f8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2023      	movs	r0, #35	; 0x23
 80018a2:	f000 fd52 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80018a6:	2023      	movs	r0, #35	; 0x23
 80018a8:	f000 fd6b 	bl	8002382 <HAL_NVIC_EnableIRQ>
=======
 8000eae:	23e0      	movs	r3, #224	; 0xe0
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4811      	ldr	r0, [pc, #68]	; (8000f10 <HAL_SPI_MspInit+0xbc>)
 8000eca:	f000 fdcb 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ee0:	2305      	movs	r3, #5
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <HAL_SPI_MspInit+0xbc>)
 8000eec:	f000 fdba 	bl	8001a64 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2023      	movs	r0, #35	; 0x23
 8000ef6:	f000 fcd2 	bl	800189e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000efa:	2023      	movs	r0, #35	; 0x23
 8000efc:	f000 fceb 	bl	80018d6 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40013000 	.word	0x40013000
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000

080018c0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_SPI_MspDeInit+0x38>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d10d      	bne.n	80018ee <HAL_SPI_MspDeInit+0x2e>
=======
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40013000 	.word	0x40013000
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020000 	.word	0x40020000

08000f14 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_SPI_MspDeInit+0x38>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10d      	bne.n	8000f42 <HAL_SPI_MspDeInit+0x2e>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
<<<<<<< Updated upstream
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_SPI_MspDeInit+0x3c>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <HAL_SPI_MspDeInit+0x3c>)
 80018d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
=======
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_SPI_MspDeInit+0x3c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_SPI_MspDeInit+0x3c>)
 8000f2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
>>>>>>> Stashed changes
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin|GPIO_PIN_15);
<<<<<<< Updated upstream
 80018de:	f248 01e0 	movw	r1, #32992	; 0x80e0
 80018e2:	4807      	ldr	r0, [pc, #28]	; (8001900 <HAL_SPI_MspDeInit+0x40>)
 80018e4:	f000 ffa4 	bl	8002830 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80018e8:	2023      	movs	r0, #35	; 0x23
 80018ea:	f000 fd58 	bl	800239e <HAL_NVIC_DisableIRQ>
=======
 8000f32:	f248 01e0 	movw	r1, #32992	; 0x80e0
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <HAL_SPI_MspDeInit+0x40>)
 8000f38:	f000 ff30 	bl	8001d9c <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000f3c:	2023      	movs	r0, #35	; 0x23
 8000f3e:	f000 fcd8 	bl	80018f2 <HAL_NVIC_DisableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
<<<<<<< Updated upstream
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40013000 	.word	0x40013000
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000

08001904 <HAL_MspInit>:
=======
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40013000 	.word	0x40013000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
=======
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_MspInit+0x4c>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_MspInit+0x4c>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_MspInit+0x4c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_MspInit+0x4c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <HAL_MspInit+0x4c>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_MspInit+0x4c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001942:	2007      	movs	r0, #7
 8001944:	f000 fcf6 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>
=======
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f96:	2007      	movs	r0, #7
 8000f98:	f000 fc76 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800

08001954 <NMI_Handler>:
=======
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
=======
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< Updated upstream
 8001958:	e7fe      	b.n	8001958 <NMI_Handler+0x4>

0800195a <HardFault_Handler>:
=======
 8000fac:	e7fe      	b.n	8000fac <NMI_Handler+0x4>

08000fae <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
=======
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800195e:	e7fe      	b.n	800195e <HardFault_Handler+0x4>

08001960 <MemManage_Handler>:
=======
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
=======
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001964:	e7fe      	b.n	8001964 <MemManage_Handler+0x4>

08001966 <BusFault_Handler>:
=======
 8000fb8:	e7fe      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fba <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
=======
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800196a:	e7fe      	b.n	800196a <BusFault_Handler+0x4>

0800196c <UsageFault_Handler>:
=======
 8000fbe:	e7fe      	b.n	8000fbe <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
=======
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001970:	e7fe      	b.n	8001970 <UsageFault_Handler+0x4>

08001972 <SVC_Handler>:
=======
 8000fc4:	e7fe      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc6 <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
=======
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <DebugMon_Handler>:
=======
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
=======
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <PendSV_Handler>:
=======
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
=======
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <SysTick_Handler>:
=======
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
=======
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 80019a0:	f000 fb90 	bl	80020c4 <HAL_IncTick>
=======
 8000ff4:	f000 fb10 	bl	8001618 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <TIM2_IRQHandler+0x14>)
 80019ae:	f002 f9c8 	bl	8003d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  callback_adoucissement_vitesse();
 80019b2:	f7ff fa49 	bl	8000e48 <callback_adoucissement_vitesse>



  /* USER CODE END TIM2_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200015c4 	.word	0x200015c4

080019c0 <SPI1_IRQHandler>:
=======
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <SPI1_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
<<<<<<< Updated upstream
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
=======
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
<<<<<<< Updated upstream
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <SPI1_IRQHandler+0x10>)
 80019c6:	f001 fec5 	bl	8003754 <HAL_SPI_IRQHandler>
=======
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <SPI1_IRQHandler+0x10>)
 8001002:	f001 fe5d 	bl	8002cc0 <HAL_SPI_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
<<<<<<< Updated upstream
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200014c0 	.word	0x200014c0

080019d4 <USART2_IRQHandler>:
=======
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000051c 	.word	0x2000051c

08001010 <USART2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< Updated upstream
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
=======
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< Updated upstream
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <USART2_IRQHandler+0x14>)
 80019da:	f003 f9a7 	bl	8004d2c <HAL_UART_IRQHandler>
=======
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <USART2_IRQHandler+0x14>)
 8001016:	f002 ffa9 	bl	8003f6c <HAL_UART_IRQHandler>
>>>>>>> Stashed changes

  */

  //uart_pc_recieve();

  recevoir_message_pc2();
<<<<<<< Updated upstream
 80019de:	f7ff fa87 	bl	8000ef0 <recevoir_message_pc2>
=======
 800101a:	f7ff fafb 	bl	8000614 <recevoir_message_pc2>
>>>>>>> Stashed changes


  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< Updated upstream
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000176c 	.word	0x2000176c

080019ec <USART3_IRQHandler>:
=======
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200007e0 	.word	0x200007e0

08001028 <USART3_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
<<<<<<< Updated upstream
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
=======
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
<<<<<<< Updated upstream
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <USART3_IRQHandler+0x1c>)
 80019f2:	f003 f99b 	bl	8004d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  uart_lidar_recieve();
 80019f6:	f7ff fc97 	bl	8001328 <uart_lidar_recieve>

  HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1);
 80019fa:	2201      	movs	r2, #1
 80019fc:	4903      	ldr	r1, [pc, #12]	; (8001a0c <USART3_IRQHandler+0x20>)
 80019fe:	4802      	ldr	r0, [pc, #8]	; (8001a08 <USART3_IRQHandler+0x1c>)
 8001a00:	f003 f964 	bl	8004ccc <HAL_UART_Receive_IT>
=======
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <USART3_IRQHandler+0x1c>)
 800102e:	f002 ff9d 	bl	8003f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  uart_lidar_recieve();
 8001032:	f7ff fce1 	bl	80009f8 <uart_lidar_recieve>

  HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1);
 8001036:	2201      	movs	r2, #1
 8001038:	4903      	ldr	r1, [pc, #12]	; (8001048 <USART3_IRQHandler+0x20>)
 800103a:	4802      	ldr	r0, [pc, #8]	; (8001044 <USART3_IRQHandler+0x1c>)
 800103c:	f002 fe7a 	bl	8003d34 <HAL_UART_Receive_IT>
>>>>>>> Stashed changes




  /* USER CODE END USART3_IRQn 1 */
}
<<<<<<< Updated upstream
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20001614 	.word	0x20001614
 8001a0c:	20001658 	.word	0x20001658

08001a10 <USART6_IRQHandler>:
=======
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000688 	.word	0x20000688
 8001048:	200006cc 	.word	0x200006cc

0800104c <USART6_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
=======
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
<<<<<<< Updated upstream
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <USART6_IRQHandler+0x14>)
 8001a16:	f003 f989 	bl	8004d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  reception_M0();
 8001a1a:	f7ff fa5b 	bl	8000ed4 <reception_M0>
=======
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <USART6_IRQHandler+0x14>)
 8001052:	f002 ff8b 	bl	8003f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  reception_M0();
 8001056:	f7ff facf 	bl	80005f8 <reception_M0>
>>>>>>> Stashed changes


  /* USER CODE END USART6_IRQn 1 */
}
<<<<<<< Updated upstream
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000165c 	.word	0x2000165c

08001a28 <SystemInit>:
=======
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200006d0 	.word	0x200006d0

08001064 <SystemInit>:
>>>>>>> Stashed changes
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <SystemInit+0x20>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <SystemInit+0x20>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <MX_TIM1_Init>:
=======
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <MX_TIM1_Init>:

>>>>>>> Stashed changes
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
<<<<<<< Updated upstream
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b092      	sub	sp, #72	; 0x48
 8001a50:	af00      	add	r7, sp, #0
=======
 8001088:	b580      	push	{r7, lr}
 800108a:	b092      	sub	sp, #72	; 0x48
 800108c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< Updated upstream
 8001a52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
 8001a6c:	615a      	str	r2, [r3, #20]
 8001a6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2220      	movs	r2, #32
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f004 f83e 	bl	8005af8 <memset>
=======
 800108e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2220      	movs	r2, #32
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 fe40 	bl	8004d38 <memset>
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< Updated upstream
 8001a7c:	4b33      	ldr	r3, [pc, #204]	; (8001b4c <MX_TIM1_Init+0x100>)
 8001a7e:	4a34      	ldr	r2, [pc, #208]	; (8001b50 <MX_TIM1_Init+0x104>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a82:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <MX_TIM1_Init+0x100>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <MX_TIM1_Init+0x100>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <MX_TIM1_Init+0x100>)
 8001a90:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001a94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <MX_TIM1_Init+0x100>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a9c:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <MX_TIM1_Init+0x100>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <MX_TIM1_Init+0x100>)
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001aa8:	4828      	ldr	r0, [pc, #160]	; (8001b4c <MX_TIM1_Init+0x100>)
 8001aaa:	f002 f8fb 	bl	8003ca4 <HAL_TIM_PWM_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001ab4:	f7ff fe68 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ac0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4821      	ldr	r0, [pc, #132]	; (8001b4c <MX_TIM1_Init+0x100>)
 8001ac8:	f002 feea 	bl	80048a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ad2:	f7ff fe59 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad6:	2360      	movs	r3, #96	; 0x60
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af8:	2200      	movs	r2, #0
 8001afa:	4619      	mov	r1, r3
 8001afc:	4813      	ldr	r0, [pc, #76]	; (8001b4c <MX_TIM1_Init+0x100>)
 8001afe:	f002 fa29 	bl	8003f54 <HAL_TIM_PWM_ConfigChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001b08:	f7ff fe3e 	bl	8001788 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <MX_TIM1_Init+0x100>)
 8001b30:	f002 ff32 	bl	8004998 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001b3a:	f7ff fe25 	bl	8001788 <Error_Handler>
=======
 80010b8:	4b33      	ldr	r3, [pc, #204]	; (8001188 <MX_TIM1_Init+0x100>)
 80010ba:	4a34      	ldr	r2, [pc, #208]	; (800118c <MX_TIM1_Init+0x104>)
 80010bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010be:	4b32      	ldr	r3, [pc, #200]	; (8001188 <MX_TIM1_Init+0x100>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b30      	ldr	r3, [pc, #192]	; (8001188 <MX_TIM1_Init+0x100>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <MX_TIM1_Init+0x100>)
 80010cc:	f24c 3250 	movw	r2, #50000	; 0xc350
 80010d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <MX_TIM1_Init+0x100>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <MX_TIM1_Init+0x100>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <MX_TIM1_Init+0x100>)
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010e4:	4828      	ldr	r0, [pc, #160]	; (8001188 <MX_TIM1_Init+0x100>)
 80010e6:	f001 ffd3 	bl	8003090 <HAL_TIM_PWM_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80010f0:	f7ff fe74 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001100:	4619      	mov	r1, r3
 8001102:	4821      	ldr	r0, [pc, #132]	; (8001188 <MX_TIM1_Init+0x100>)
 8001104:	f002 fc14 	bl	8003930 <HAL_TIMEx_MasterConfigSynchronization>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800110e:	f7ff fe65 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001112:	2360      	movs	r3, #96	; 0x60
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800112c:	2300      	movs	r3, #0
 800112e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	2200      	movs	r2, #0
 8001136:	4619      	mov	r1, r3
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <MX_TIM1_Init+0x100>)
 800113a:	f002 f8c1 	bl	80032c0 <HAL_TIM_PWM_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001144:	f7ff fe4a 	bl	8000ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800115c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001160:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <MX_TIM1_Init+0x100>)
 800116c:	f002 fc5c 	bl	8003a28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001176:	f7ff fe31 	bl	8000ddc <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
<<<<<<< Updated upstream
 8001b3e:	4803      	ldr	r0, [pc, #12]	; (8001b4c <MX_TIM1_Init+0x100>)
 8001b40:	f000 f89e 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 8001b44:	bf00      	nop
 8001b46:	3748      	adds	r7, #72	; 0x48
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000157c 	.word	0x2000157c
 8001b50:	40010000 	.word	0x40010000

08001b54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <MX_TIM2_Init+0x98>)
 8001b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <MX_TIM2_Init+0x98>)
 8001b7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <MX_TIM2_Init+0x98>)
 8001b82:	2210      	movs	r2, #16
 8001b84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000;
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_TIM2_Init+0x98>)
 8001b88:	f247 5230 	movw	r2, #30000	; 0x7530
 8001b8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <MX_TIM2_Init+0x98>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <MX_TIM2_Init+0x98>)
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b9a:	4814      	ldr	r0, [pc, #80]	; (8001bec <MX_TIM2_Init+0x98>)
 8001b9c:	f001 ffc2 	bl	8003b24 <HAL_TIM_Base_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ba6:	f7ff fdef 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480d      	ldr	r0, [pc, #52]	; (8001bec <MX_TIM2_Init+0x98>)
 8001bb8:	f002 fa8e 	bl	80040d8 <HAL_TIM_ConfigClockSource>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bc2:	f7ff fde1 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bce:	463b      	mov	r3, r7
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4806      	ldr	r0, [pc, #24]	; (8001bec <MX_TIM2_Init+0x98>)
 8001bd4:	f002 fe64 	bl	80048a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bde:	f7ff fdd3 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200015c4 	.word	0x200015c4

08001bf0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_TIM_PWM_MspInit+0x3c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d10d      	bne.n	8001c1e <HAL_TIM_PWM_MspInit+0x2e>
=======
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <MX_TIM1_Init+0x100>)
 800117c:	f000 f82a 	bl	80011d4 <HAL_TIM_MspPostInit>

}
 8001180:	bf00      	nop
 8001182:	3748      	adds	r7, #72	; 0x48
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200005d8 	.word	0x200005d8
 800118c:	40010000 	.word	0x40010000

08001190 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <HAL_TIM_PWM_MspInit+0x3c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d10d      	bne.n	80011be <HAL_TIM_PWM_MspInit+0x2e>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< Updated upstream
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_TIM_PWM_MspInit+0x40>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_TIM_PWM_MspInit+0x40>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <HAL_TIM_PWM_MspInit+0x40>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
=======
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_TIM_PWM_MspInit+0x40>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_TIM_PWM_MspInit+0x40>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_TIM_PWM_MspInit+0x40>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c44:	d115      	bne.n	8001c72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_TIM_Base_MspInit+0x48>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <HAL_TIM_Base_MspInit+0x48>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_TIM_Base_MspInit+0x48>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	201c      	movs	r0, #28
 8001c68:	f000 fb6f 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c6c:	201c      	movs	r0, #28
 8001c6e:	f000 fb88 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800

08001c80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <HAL_TIM_MspPostInit+0x68>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d11e      	bne.n	8001ce0 <HAL_TIM_MspPostInit+0x60>
=======
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40010000 	.word	0x40010000
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a12      	ldr	r2, [pc, #72]	; (800123c <HAL_TIM_MspPostInit+0x68>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d11e      	bne.n	8001234 <HAL_TIM_MspPostInit+0x60>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
<<<<<<< Updated upstream
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_TIM_MspPostInit+0x6c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_TIM_MspPostInit+0x6c>)
 8001cac:	f043 0310 	orr.w	r3, r3, #16
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_TIM_MspPostInit+0x6c>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
=======
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_TIM_MspPostInit+0x6c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <HAL_TIM_MspPostInit+0x6c>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_TIM_MspPostInit+0x6c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
<<<<<<< Updated upstream
 8001cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_TIM_MspPostInit+0x70>)
 8001cdc:	f000 fc0c 	bl	80024f8 <HAL_GPIO_Init>
=======
 8001212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001216:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001224:	2301      	movs	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4619      	mov	r1, r3
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_TIM_MspPostInit+0x70>)
 8001230:	f000 fc18 	bl	8001a64 <HAL_GPIO_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
<<<<<<< Updated upstream
 8001ce0:	bf00      	nop
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <MX_USART2_UART_Init>:
=======
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40010000 	.word	0x40010000
 8001240:	40023800 	.word	0x40023800
 8001244:	40021000 	.word	0x40021000

08001248 <MX_USART2_UART_Init>:
>>>>>>> Stashed changes
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
<<<<<<< Updated upstream
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
=======
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< Updated upstream
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_USART2_UART_Init+0x4c>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <MX_USART2_UART_Init+0x50>)
 8001cfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <MX_USART2_UART_Init+0x4c>)
 8001d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_USART2_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_USART2_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <MX_USART2_UART_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_USART2_UART_Init+0x4c>)
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <MX_USART2_UART_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <MX_USART2_UART_Init+0x4c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <MX_USART2_UART_Init+0x4c>)
 8001d2c:	f002 fe9a 	bl	8004a64 <HAL_UART_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d36:	f7ff fd27 	bl	8001788 <Error_Handler>
=======
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <MX_USART2_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001280:	f002 fc24 	bl	8003acc <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128a:	f7ff fda7 	bl	8000ddc <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< Updated upstream
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000176c 	.word	0x2000176c
 8001d44:	40004400 	.word	0x40004400

08001d48 <MX_USART3_UART_Init>:
=======
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200007e0 	.word	0x200007e0
 8001298:	40004400 	.word	0x40004400

0800129c <MX_USART3_UART_Init>:
>>>>>>> Stashed changes
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
<<<<<<< Updated upstream
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
=======
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< Updated upstream
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <MX_USART3_UART_Init+0x4c>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <MX_USART3_UART_Init+0x50>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <MX_USART3_UART_Init+0x4c>)
 8001d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <MX_USART3_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <MX_USART3_UART_Init+0x4c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <MX_USART3_UART_Init+0x4c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_USART3_UART_Init+0x4c>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <MX_USART3_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <MX_USART3_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_USART3_UART_Init+0x4c>)
 8001d80:	f002 fe70 	bl	8004a64 <HAL_UART_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d8a:	f7ff fcfd 	bl	8001788 <Error_Handler>
=======
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_USART3_UART_Init+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <MX_USART3_UART_Init+0x50>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_USART3_UART_Init+0x4c>)
 80012a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_USART3_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_USART3_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_USART3_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_USART3_UART_Init+0x4c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_USART3_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_USART3_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_USART3_UART_Init+0x4c>)
 80012d4:	f002 fbfa 	bl	8003acc <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012de:	f7ff fd7d 	bl	8000ddc <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< Updated upstream
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20001614 	.word	0x20001614
 8001d98:	40004800 	.word	0x40004800

08001d9c <MX_USART6_UART_Init>:
=======
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000688 	.word	0x20000688
 80012ec:	40004800 	.word	0x40004800

080012f0 <MX_USART6_UART_Init>:
>>>>>>> Stashed changes
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
<<<<<<< Updated upstream
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
=======
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
<<<<<<< Updated upstream
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_USART6_UART_Init+0x4c>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <MX_USART6_UART_Init+0x50>)
 8001da4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <MX_USART6_UART_Init+0x4c>)
 8001da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_USART6_UART_Init+0x4c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_USART6_UART_Init+0x4c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <MX_USART6_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_USART6_UART_Init+0x4c>)
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <MX_USART6_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_USART6_UART_Init+0x4c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_USART6_UART_Init+0x4c>)
 8001dd4:	f002 fe93 	bl	8004afe <HAL_HalfDuplex_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001dde:	f7ff fcd3 	bl	8001788 <Error_Handler>
=======
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART6_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_USART6_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_USART6_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART6_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART6_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART6_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART6_UART_Init+0x4c>)
 8001316:	2204      	movs	r2, #4
 8001318:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART6_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART6_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART6_UART_Init+0x4c>)
 8001328:	f002 fc1d 	bl	8003b66 <HAL_HalfDuplex_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f7ff fd53 	bl	8000ddc <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
<<<<<<< Updated upstream
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000165c 	.word	0x2000165c
 8001dec:	40011400 	.word	0x40011400

08001df0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08e      	sub	sp, #56	; 0x38
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a67      	ldr	r2, [pc, #412]	; (8001fac <HAL_UART_MspInit+0x1bc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d134      	bne.n	8001e7c <HAL_UART_MspInit+0x8c>
=======
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200006d0 	.word	0x200006d0
 8001340:	40011400 	.word	0x40011400

08001344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a67      	ldr	r2, [pc, #412]	; (8001500 <HAL_UART_MspInit+0x1bc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d134      	bne.n	80013d0 <HAL_UART_MspInit+0x8c>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< Updated upstream
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
 8001e16:	4b66      	ldr	r3, [pc, #408]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a65      	ldr	r2, [pc, #404]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
 8001e22:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	623b      	str	r3, [r7, #32]
 8001e2c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	4b5f      	ldr	r3, [pc, #380]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a5e      	ldr	r2, [pc, #376]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	69fb      	ldr	r3, [r7, #28]
=======
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
 800136a:	4b66      	ldr	r3, [pc, #408]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a65      	ldr	r2, [pc, #404]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b63      	ldr	r3, [pc, #396]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	623b      	str	r3, [r7, #32]
 8001380:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a5e      	ldr	r2, [pc, #376]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
>>>>>>> Stashed changes
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
<<<<<<< Updated upstream
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e62:	4619      	mov	r1, r3
 8001e64:	4853      	ldr	r0, [pc, #332]	; (8001fb4 <HAL_UART_MspInit+0x1c4>)
 8001e66:	f000 fb47 	bl	80024f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2026      	movs	r0, #38	; 0x26
 8001e70:	f000 fa6b 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e74:	2026      	movs	r0, #38	; 0x26
 8001e76:	f000 fa84 	bl	8002382 <HAL_NVIC_EnableIRQ>
=======
 800139e:	230c      	movs	r3, #12
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ae:	2307      	movs	r3, #7
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	4853      	ldr	r0, [pc, #332]	; (8001508 <HAL_UART_MspInit+0x1c4>)
 80013ba:	f000 fb53 	bl	8001a64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2026      	movs	r0, #38	; 0x26
 80013c4:	f000 fa6b 	bl	800189e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013c8:	2026      	movs	r0, #38	; 0x26
 80013ca:	f000 fa84 	bl	80018d6 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8001e7a:	e092      	b.n	8001fa2 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a4d      	ldr	r2, [pc, #308]	; (8001fb8 <HAL_UART_MspInit+0x1c8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d154      	bne.n	8001f30 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a48      	ldr	r2, [pc, #288]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	4b42      	ldr	r3, [pc, #264]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a41      	ldr	r2, [pc, #260]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a3a      	ldr	r2, [pc, #232]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eec:	2307      	movs	r3, #7
 8001eee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4831      	ldr	r0, [pc, #196]	; (8001fbc <HAL_UART_MspInit+0x1cc>)
 8001ef8:	f000 fafe 	bl	80024f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f0e:	2307      	movs	r3, #7
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f16:	4619      	mov	r1, r3
 8001f18:	4829      	ldr	r0, [pc, #164]	; (8001fc0 <HAL_UART_MspInit+0x1d0>)
 8001f1a:	f000 faed 	bl	80024f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	2027      	movs	r0, #39	; 0x27
 8001f24:	f000 fa11 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f28:	2027      	movs	r0, #39	; 0x27
 8001f2a:	f000 fa2a 	bl	8002382 <HAL_NVIC_EnableIRQ>
}
 8001f2e:	e038      	b.n	8001fa2 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART6)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a23      	ldr	r2, [pc, #140]	; (8001fc4 <HAL_UART_MspInit+0x1d4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d133      	bne.n	8001fa2 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001f44:	f043 0320 	orr.w	r3, r3, #32
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_UART_MspInit+0x1c0>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f72:	2340      	movs	r3, #64	; 0x40
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f76:	2312      	movs	r3, #18
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f82:	2308      	movs	r3, #8
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <HAL_UART_MspInit+0x1d8>)
 8001f8e:	f000 fab3 	bl	80024f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	2047      	movs	r0, #71	; 0x47
 8001f98:	f000 f9d7 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f9c:	2047      	movs	r0, #71	; 0x47
 8001f9e:	f000 f9f0 	bl	8002382 <HAL_NVIC_EnableIRQ>
}
 8001fa2:	bf00      	nop
 8001fa4:	3738      	adds	r7, #56	; 0x38
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40004400 	.word	0x40004400
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40004800 	.word	0x40004800
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40020c00 	.word	0x40020c00
 8001fc4:	40011400 	.word	0x40011400
 8001fc8:	40020800 	.word	0x40020800

08001fcc <Reset_Handler>:
=======
 80013ce:	e092      	b.n	80014f6 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART3)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a4d      	ldr	r2, [pc, #308]	; (800150c <HAL_UART_MspInit+0x1c8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d154      	bne.n	8001484 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	4b49      	ldr	r3, [pc, #292]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a48      	ldr	r2, [pc, #288]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 80013e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b46      	ldr	r3, [pc, #280]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	4b42      	ldr	r3, [pc, #264]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a41      	ldr	r2, [pc, #260]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a3a      	ldr	r2, [pc, #232]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800142e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001440:	2307      	movs	r3, #7
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	4831      	ldr	r0, [pc, #196]	; (8001510 <HAL_UART_MspInit+0x1cc>)
 800144c:	f000 fb0a 	bl	8001a64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001462:	2307      	movs	r3, #7
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	4619      	mov	r1, r3
 800146c:	4829      	ldr	r0, [pc, #164]	; (8001514 <HAL_UART_MspInit+0x1d0>)
 800146e:	f000 faf9 	bl	8001a64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2027      	movs	r0, #39	; 0x27
 8001478:	f000 fa11 	bl	800189e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800147c:	2027      	movs	r0, #39	; 0x27
 800147e:	f000 fa2a 	bl	80018d6 <HAL_NVIC_EnableIRQ>
}
 8001482:	e038      	b.n	80014f6 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART6)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a23      	ldr	r2, [pc, #140]	; (8001518 <HAL_UART_MspInit+0x1d4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d133      	bne.n	80014f6 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 8001498:	f043 0320 	orr.w	r3, r3, #32
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a14      	ldr	r2, [pc, #80]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_UART_MspInit+0x1c0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014c6:	2340      	movs	r3, #64	; 0x40
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ca:	2312      	movs	r3, #18
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014d6:	2308      	movs	r3, #8
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	4619      	mov	r1, r3
 80014e0:	480e      	ldr	r0, [pc, #56]	; (800151c <HAL_UART_MspInit+0x1d8>)
 80014e2:	f000 fabf 	bl	8001a64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2047      	movs	r0, #71	; 0x47
 80014ec:	f000 f9d7 	bl	800189e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80014f0:	2047      	movs	r0, #71	; 0x47
 80014f2:	f000 f9f0 	bl	80018d6 <HAL_NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3738      	adds	r7, #56	; 0x38
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40004400 	.word	0x40004400
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000
 800150c:	40004800 	.word	0x40004800
 8001510:	40020400 	.word	0x40020400
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40011400 	.word	0x40011400
 800151c:	40020800 	.word	0x40020800

08001520 <Reset_Handler>:

>>>>>>> Stashed changes
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< Updated upstream
 8001fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd0:	480d      	ldr	r0, [pc, #52]	; (8002008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fd2:	490e      	ldr	r1, [pc, #56]	; (800200c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fe8:	4c0b      	ldr	r4, [pc, #44]	; (8002018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ff6:	f7ff fd17 	bl	8001a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f003 fd59 	bl	8005ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffe:	f7ff fb15 	bl	800162c <main>
  bx  lr    
 8002002:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002010:	08005b48 	.word	0x08005b48
  ldr r2, =_sbss
 8002014:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002018:	200017b4 	.word	0x200017b4

0800201c <ADC_IRQHandler>:
=======
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001558 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001526:	490e      	ldr	r1, [pc, #56]	; (8001560 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800153c:	4c0b      	ldr	r4, [pc, #44]	; (800156c <LoopFillZerobss+0x26>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800154a:	f7ff fd8b 	bl	8001064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154e:	f003 fbcf 	bl	8004cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001552:	f7ff fb93 	bl	8000c7c <main>
  bx  lr    
 8001556:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001558:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001564:	08004d9c 	.word	0x08004d9c
  ldr r2, =_sbss
 8001568:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800156c:	20000828 	.word	0x20000828

08001570 <ADC_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
 800201c:	e7fe      	b.n	800201c <ADC_IRQHandler>
	...

08002020 <HAL_Init>:
=======
 8001570:	e7fe      	b.n	8001570 <ADC_IRQHandler>
	...

08001574 <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_Init+0x40>)
 800202a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202e:	6013      	str	r3, [r2, #0]
=======
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <HAL_Init+0x40>)
 800157e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001582:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< Updated upstream
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_Init+0x40>)
 8002036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203a:	6013      	str	r3, [r2, #0]
=======
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_Init+0x40>)
 800158a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< Updated upstream
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_Init+0x40>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_Init+0x40>)
 8002042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002046:	6013      	str	r3, [r2, #0]
=======
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_Init+0x40>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8002048:	2003      	movs	r0, #3
 800204a:	f000 f973 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204e:	2000      	movs	r0, #0
 8002050:	f000 f808 	bl	8002064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002054:	f7ff fc56 	bl	8001904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023c00 	.word	0x40023c00

08002064 <HAL_InitTick>:
=======
 800159c:	2003      	movs	r0, #3
 800159e:	f000 f973 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f808 	bl	80015b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a8:	f7ff fcd6 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_InitTick+0x54>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x58>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb3 f3f1 	udiv	r3, r3, r1
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f999 	bl	80023ba <HAL_SYSTICK_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00e      	b.n	80020b0 <HAL_InitTick+0x4c>
=======
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x54>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_InitTick+0x58>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f999 	bl	800190e <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00e      	b.n	8001604 <HAL_InitTick+0x4c>
>>>>>>> Stashed changes
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< Updated upstream
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d80a      	bhi.n	80020ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f000 f953 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <HAL_InitTick+0x5c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
=======
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d80a      	bhi.n	8001602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f000 f953 	bl	800189e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_InitTick+0x5c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000004 	.word	0x20000004
 80020bc:	2000000c 	.word	0x2000000c
 80020c0:	20000008 	.word	0x20000008

080020c4 <HAL_IncTick>:
=======
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000004 	.word	0x20000004
 8001610:	2000000c 	.word	0x2000000c
 8001614:	20000008 	.word	0x20000008

08001618 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	2000000c 	.word	0x2000000c
 80020e8:	200017b0 	.word	0x200017b0

080020ec <HAL_GetTick>:
=======
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000000c 	.word	0x2000000c
 800163c:	20000824 	.word	0x20000824

08001640 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	200017b0 	.word	0x200017b0

08002104 <HAL_Delay>:
=======
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000824 	.word	0x20000824

08001658 <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff ffee 	bl	80020ec <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_Delay+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffde 	bl	80020ec <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000000c 	.word	0x2000000c

0800214c <__NVIC_SetPriorityGrouping>:
=======
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffde 	bl	8001640 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2000000c 	.word	0x2000000c

080016a0 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_GetPriorityGrouping>:
=======
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_EnableIRQ>:
=======
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0b      	blt.n	80021da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4907      	ldr	r1, [pc, #28]	; (80021e8 <__NVIC_EnableIRQ+0x38>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2001      	movs	r0, #1
 80021d2:	fa00 f202 	lsl.w	r2, r0, r2
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_DisableIRQ>:
=======
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_DisableIRQ>:
>>>>>>> Stashed changes
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db12      	blt.n	8002224 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	490a      	ldr	r1, [pc, #40]	; (8002230 <__NVIC_DisableIRQ+0x44>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	3320      	adds	r3, #32
 8002214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db12      	blt.n	8001778 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	490a      	ldr	r1, [pc, #40]	; (8001784 <__NVIC_DisableIRQ+0x44>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	3320      	adds	r3, #32
 8001768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> Stashed changes
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
<<<<<<< Updated upstream
 8002218:	f3bf 8f4f 	dsb	sy
}
 800221c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800221e:	f3bf 8f6f 	isb	sy
}
 8002222:	bf00      	nop
=======
 800176c:	f3bf 8f4f 	dsb	sy
}
 8001770:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001772:	f3bf 8f6f 	isb	sy
}
 8001776:	bf00      	nop
>>>>>>> Stashed changes
    __DSB();
    __ISB();
  }
}
<<<<<<< Updated upstream
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
=======
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
=======
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	; (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
=======
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
=======
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
=======
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001854:	d301      	bcc.n	800185a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001856:	2301      	movs	r3, #1
 8001858:	e00f      	b.n	800187a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <SysTick_Config+0x40>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001862:	210f      	movs	r1, #15
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f7ff ff8e 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <SysTick_Config+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <SysTick_Config+0x40>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
=======
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff05 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
=======
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff05 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< Updated upstream
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
=======
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 800235c:	f7ff ff1a 	bl	8002194 <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
=======
 80018b0:	f7ff ff1a 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff8e 	bl	80017dc <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5d 	bl	8001788 <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
=======
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff0d 	bl	80021b0 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_DisableIRQ>:
=======
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff0d 	bl	8001704 <__NVIC_EnableIRQ>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_DisableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	71fb      	strb	r3, [r7, #7]
=======
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
<<<<<<< Updated upstream
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff1d 	bl	80021ec <__NVIC_DisableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
=======
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff1d 	bl	8001740 <__NVIC_DisableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ff94 	bl	80022f0 <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_DMA_Abort>:
=======
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff94 	bl	8001844 <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_DMA_Abort>:
>>>>>>> Stashed changes
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff fe84 	bl	80020ec <HAL_GetTick>
 80023e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d008      	beq.n	8002404 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e052      	b.n	80024aa <HAL_DMA_Abort+0xd8>
=======
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff fe84 	bl	8001640 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d008      	beq.n	8001958 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e052      	b.n	80019fe <HAL_DMA_Abort+0xd8>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< Updated upstream
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0216 	bic.w	r2, r2, #22
 8002412:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002422:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d103      	bne.n	8002434 <HAL_DMA_Abort+0x62>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0208 	bic.w	r2, r2, #8
 8002442:	601a      	str	r2, [r3, #0]
=======
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0216 	bic.w	r2, r2, #22
 8001966:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001976:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	d103      	bne.n	8001988 <HAL_DMA_Abort+0x62>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0208 	bic.w	r2, r2, #8
 8001996:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< Updated upstream
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002454:	e013      	b.n	800247e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002456:	f7ff fe49 	bl	80020ec <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b05      	cmp	r3, #5
 8002462:	d90c      	bls.n	800247e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2203      	movs	r2, #3
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e015      	b.n	80024aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e4      	bne.n	8002456 <HAL_DMA_Abort+0x84>
=======
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a8:	e013      	b.n	80019d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019aa:	f7ff fe49 	bl	8001640 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d90c      	bls.n	80019d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2220      	movs	r2, #32
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2203      	movs	r2, #3
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e015      	b.n	80019fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e4      	bne.n	80019aa <HAL_DMA_Abort+0x84>
>>>>>>> Stashed changes
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< Updated upstream
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	223f      	movs	r2, #63	; 0x3f
 8002492:	409a      	lsls	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_DMA_Abort_IT>:
=======
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	223f      	movs	r2, #63	; 0x3f
 80019e6:	409a      	lsls	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d004      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e00c      	b.n	80024ea <HAL_DMA_Abort_IT+0x38>
=======
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d004      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e00c      	b.n	8001a3e <HAL_DMA_Abort_IT+0x38>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< Updated upstream
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2205      	movs	r2, #5
 80024d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_GPIO_Init>:
=======
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2205      	movs	r2, #5
 8001a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
=======
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	e16b      	b.n	80027ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	429a      	cmp	r2, r3
 800252e:	f040 815a 	bne.w	80027e6 <HAL_GPIO_Init+0x2ee>
=======
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	e16b      	b.n	8001d58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 815a 	bne.w	8001d52 <HAL_GPIO_Init+0x2ee>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< Updated upstream
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d005      	beq.n	800254a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002546:	2b02      	cmp	r3, #2
 8002548:	d130      	bne.n	80025ac <HAL_GPIO_Init+0xb4>
=======
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d005      	beq.n	8001ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d130      	bne.n	8001b18 <HAL_GPIO_Init+0xb4>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< Updated upstream
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 0201 	and.w	r2, r3, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d017      	beq.n	80025e8 <HAL_GPIO_Init+0xf0>
=======
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aec:	2201      	movs	r2, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 0201 	and.w	r2, r3, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d017      	beq.n	8001b54 <HAL_GPIO_Init+0xf0>
>>>>>>> Stashed changes
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	60da      	str	r2, [r3, #12]
=======
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d123      	bne.n	800263c <HAL_GPIO_Init+0x144>
=======
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d123      	bne.n	8001ba8 <HAL_GPIO_Init+0x144>
>>>>>>> Stashed changes
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	08da      	lsrs	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3208      	adds	r2, #8
 8002636:	69b9      	ldr	r1, [r7, #24]
 8002638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	69b9      	ldr	r1, [r7, #24]
 8001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0203 	and.w	r2, r3, #3
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	601a      	str	r2, [r3, #0]
=======
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< Updated upstream
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80b4 	beq.w	80027e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b60      	ldr	r3, [pc, #384]	; (8002804 <HAL_GPIO_Init+0x30c>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	4a5f      	ldr	r2, [pc, #380]	; (8002804 <HAL_GPIO_Init+0x30c>)
 8002688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268c:	6453      	str	r3, [r2, #68]	; 0x44
 800268e:	4b5d      	ldr	r3, [pc, #372]	; (8002804 <HAL_GPIO_Init+0x30c>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269a:	4a5b      	ldr	r2, [pc, #364]	; (8002808 <HAL_GPIO_Init+0x310>)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	3302      	adds	r3, #2
 80026a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	220f      	movs	r2, #15
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_GPIO_Init+0x314>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d02b      	beq.n	800271e <HAL_GPIO_Init+0x226>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a51      	ldr	r2, [pc, #324]	; (8002810 <HAL_GPIO_Init+0x318>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d025      	beq.n	800271a <HAL_GPIO_Init+0x222>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a50      	ldr	r2, [pc, #320]	; (8002814 <HAL_GPIO_Init+0x31c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d01f      	beq.n	8002716 <HAL_GPIO_Init+0x21e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4f      	ldr	r2, [pc, #316]	; (8002818 <HAL_GPIO_Init+0x320>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x21a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4e      	ldr	r2, [pc, #312]	; (800281c <HAL_GPIO_Init+0x324>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x216>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4d      	ldr	r2, [pc, #308]	; (8002820 <HAL_GPIO_Init+0x328>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x212>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4c      	ldr	r2, [pc, #304]	; (8002824 <HAL_GPIO_Init+0x32c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x20e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4b      	ldr	r2, [pc, #300]	; (8002828 <HAL_GPIO_Init+0x330>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x20a>
 80026fe:	2307      	movs	r3, #7
 8002700:	e00e      	b.n	8002720 <HAL_GPIO_Init+0x228>
 8002702:	2308      	movs	r3, #8
 8002704:	e00c      	b.n	8002720 <HAL_GPIO_Init+0x228>
 8002706:	2306      	movs	r3, #6
 8002708:	e00a      	b.n	8002720 <HAL_GPIO_Init+0x228>
 800270a:	2305      	movs	r3, #5
 800270c:	e008      	b.n	8002720 <HAL_GPIO_Init+0x228>
 800270e:	2304      	movs	r3, #4
 8002710:	e006      	b.n	8002720 <HAL_GPIO_Init+0x228>
 8002712:	2303      	movs	r3, #3
 8002714:	e004      	b.n	8002720 <HAL_GPIO_Init+0x228>
 8002716:	2302      	movs	r3, #2
 8002718:	e002      	b.n	8002720 <HAL_GPIO_Init+0x228>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_GPIO_Init+0x228>
 800271e:	2300      	movs	r3, #0
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	f002 0203 	and.w	r2, r2, #3
 8002726:	0092      	lsls	r2, r2, #2
 8002728:	4093      	lsls	r3, r2
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002730:	4935      	ldr	r1, [pc, #212]	; (8002808 <HAL_GPIO_Init+0x310>)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800273e:	4b3b      	ldr	r3, [pc, #236]	; (800282c <HAL_GPIO_Init+0x334>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002762:	4a32      	ldr	r2, [pc, #200]	; (800282c <HAL_GPIO_Init+0x334>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002768:	4b30      	ldr	r3, [pc, #192]	; (800282c <HAL_GPIO_Init+0x334>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800278c:	4a27      	ldr	r2, [pc, #156]	; (800282c <HAL_GPIO_Init+0x334>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <HAL_GPIO_Init+0x334>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b6:	4a1d      	ldr	r2, [pc, #116]	; (800282c <HAL_GPIO_Init+0x334>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_GPIO_Init+0x334>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e0:	4a12      	ldr	r2, [pc, #72]	; (800282c <HAL_GPIO_Init+0x334>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b0f      	cmp	r3, #15
 80027f0:	f67f ae90 	bls.w	8002514 <HAL_GPIO_Init+0x1c>
=======
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80b4 	beq.w	8001d52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b60      	ldr	r3, [pc, #384]	; (8001d70 <HAL_GPIO_Init+0x30c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a5f      	ldr	r2, [pc, #380]	; (8001d70 <HAL_GPIO_Init+0x30c>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <HAL_GPIO_Init+0x30c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c06:	4a5b      	ldr	r2, [pc, #364]	; (8001d74 <HAL_GPIO_Init+0x310>)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_GPIO_Init+0x314>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d02b      	beq.n	8001c8a <HAL_GPIO_Init+0x226>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a51      	ldr	r2, [pc, #324]	; (8001d7c <HAL_GPIO_Init+0x318>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d025      	beq.n	8001c86 <HAL_GPIO_Init+0x222>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a50      	ldr	r2, [pc, #320]	; (8001d80 <HAL_GPIO_Init+0x31c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01f      	beq.n	8001c82 <HAL_GPIO_Init+0x21e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4f      	ldr	r2, [pc, #316]	; (8001d84 <HAL_GPIO_Init+0x320>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d019      	beq.n	8001c7e <HAL_GPIO_Init+0x21a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x216>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4d      	ldr	r2, [pc, #308]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x212>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <HAL_GPIO_Init+0x32c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x20e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4b      	ldr	r2, [pc, #300]	; (8001d94 <HAL_GPIO_Init+0x330>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x20a>
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	e00e      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c6e:	2308      	movs	r3, #8
 8001c70:	e00c      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c72:	2306      	movs	r3, #6
 8001c74:	e00a      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c76:	2305      	movs	r3, #5
 8001c78:	e008      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e004      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f002 0203 	and.w	r2, r2, #3
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	4093      	lsls	r3, r2
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9c:	4935      	ldr	r1, [pc, #212]	; (8001d74 <HAL_GPIO_Init+0x310>)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cce:	4a32      	ldr	r2, [pc, #200]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cd4:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf8:	4a27      	ldr	r2, [pc, #156]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	f67f ae90 	bls.w	8001a80 <HAL_GPIO_Init+0x1c>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	40013800 	.word	0x40013800
 800280c:	40020000 	.word	0x40020000
 8002810:	40020400 	.word	0x40020400
 8002814:	40020800 	.word	0x40020800
 8002818:	40020c00 	.word	0x40020c00
 800281c:	40021000 	.word	0x40021000
 8002820:	40021400 	.word	0x40021400
 8002824:	40021800 	.word	0x40021800
 8002828:	40021c00 	.word	0x40021c00
 800282c:	40013c00 	.word	0x40013c00

08002830 <HAL_GPIO_DeInit>:
=======
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40021400 	.word	0x40021400
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40021c00 	.word	0x40021c00
 8001d98:	40013c00 	.word	0x40013c00

08001d9c <HAL_GPIO_DeInit>:
>>>>>>> Stashed changes
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
=======
 8001d9c:	b480      	push	{r7}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e0cd      	b.n	80029e8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800284c:	2201      	movs	r2, #1
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	429a      	cmp	r2, r3
 8002864:	f040 80bd 	bne.w	80029e2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002868:	4a65      	ldr	r2, [pc, #404]	; (8002a00 <HAL_GPIO_DeInit+0x1d0>)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3302      	adds	r3, #2
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	4013      	ands	r3, r2
 8002888:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a5d      	ldr	r2, [pc, #372]	; (8002a04 <HAL_GPIO_DeInit+0x1d4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d02b      	beq.n	80028ea <HAL_GPIO_DeInit+0xba>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a5c      	ldr	r2, [pc, #368]	; (8002a08 <HAL_GPIO_DeInit+0x1d8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d025      	beq.n	80028e6 <HAL_GPIO_DeInit+0xb6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a5b      	ldr	r2, [pc, #364]	; (8002a0c <HAL_GPIO_DeInit+0x1dc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01f      	beq.n	80028e2 <HAL_GPIO_DeInit+0xb2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a5a      	ldr	r2, [pc, #360]	; (8002a10 <HAL_GPIO_DeInit+0x1e0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d019      	beq.n	80028de <HAL_GPIO_DeInit+0xae>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a59      	ldr	r2, [pc, #356]	; (8002a14 <HAL_GPIO_DeInit+0x1e4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_GPIO_DeInit+0xaa>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a58      	ldr	r2, [pc, #352]	; (8002a18 <HAL_GPIO_DeInit+0x1e8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00d      	beq.n	80028d6 <HAL_GPIO_DeInit+0xa6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a57      	ldr	r2, [pc, #348]	; (8002a1c <HAL_GPIO_DeInit+0x1ec>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <HAL_GPIO_DeInit+0xa2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a56      	ldr	r2, [pc, #344]	; (8002a20 <HAL_GPIO_DeInit+0x1f0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_GPIO_DeInit+0x9e>
 80028ca:	2307      	movs	r3, #7
 80028cc:	e00e      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028ce:	2308      	movs	r3, #8
 80028d0:	e00c      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028d2:	2306      	movs	r3, #6
 80028d4:	e00a      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028d6:	2305      	movs	r3, #5
 80028d8:	e008      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028da:	2304      	movs	r3, #4
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028de:	2303      	movs	r3, #3
 80028e0:	e004      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e002      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028ea:	2300      	movs	r3, #0
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	f002 0203 	and.w	r2, r2, #3
 80028f2:	0092      	lsls	r2, r2, #2
 80028f4:	4093      	lsls	r3, r2
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d132      	bne.n	8002962 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80028fc:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	43db      	mvns	r3, r3
 8002904:	4947      	ldr	r1, [pc, #284]	; (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 8002906:	4013      	ands	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800290a:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	43db      	mvns	r3, r3
 8002912:	4944      	ldr	r1, [pc, #272]	; (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 8002914:	4013      	ands	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002918:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	43db      	mvns	r3, r3
 8002920:	4940      	ldr	r1, [pc, #256]	; (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 8002922:	4013      	ands	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002926:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	43db      	mvns	r3, r3
 800292e:	493d      	ldr	r1, [pc, #244]	; (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 8002930:	4013      	ands	r3, r2
 8002932:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002944:	4a2e      	ldr	r2, [pc, #184]	; (8002a00 <HAL_GPIO_DeInit+0x1d0>)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	089b      	lsrs	r3, r3, #2
 800294a:	3302      	adds	r3, #2
 800294c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	43da      	mvns	r2, r3
 8002954:	482a      	ldr	r0, [pc, #168]	; (8002a00 <HAL_GPIO_DeInit+0x1d0>)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	400a      	ands	r2, r1
 800295c:	3302      	adds	r3, #2
 800295e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
=======
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e0cd      	b.n	8001f54 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db8:	2201      	movs	r2, #1
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	f040 80bd 	bne.w	8001f4e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001dd4:	4a65      	ldr	r2, [pc, #404]	; (8001f6c <HAL_GPIO_DeInit+0x1d0>)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	4013      	ands	r3, r2
 8001df4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a5d      	ldr	r2, [pc, #372]	; (8001f70 <HAL_GPIO_DeInit+0x1d4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d02b      	beq.n	8001e56 <HAL_GPIO_DeInit+0xba>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <HAL_GPIO_DeInit+0x1d8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d025      	beq.n	8001e52 <HAL_GPIO_DeInit+0xb6>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a5b      	ldr	r2, [pc, #364]	; (8001f78 <HAL_GPIO_DeInit+0x1dc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01f      	beq.n	8001e4e <HAL_GPIO_DeInit+0xb2>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a5a      	ldr	r2, [pc, #360]	; (8001f7c <HAL_GPIO_DeInit+0x1e0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d019      	beq.n	8001e4a <HAL_GPIO_DeInit+0xae>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a59      	ldr	r2, [pc, #356]	; (8001f80 <HAL_GPIO_DeInit+0x1e4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_DeInit+0xaa>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a58      	ldr	r2, [pc, #352]	; (8001f84 <HAL_GPIO_DeInit+0x1e8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00d      	beq.n	8001e42 <HAL_GPIO_DeInit+0xa6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a57      	ldr	r2, [pc, #348]	; (8001f88 <HAL_GPIO_DeInit+0x1ec>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <HAL_GPIO_DeInit+0xa2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a56      	ldr	r2, [pc, #344]	; (8001f8c <HAL_GPIO_DeInit+0x1f0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_GPIO_DeInit+0x9e>
 8001e36:	2307      	movs	r3, #7
 8001e38:	e00e      	b.n	8001e58 <HAL_GPIO_DeInit+0xbc>
 8001e3a:	2308      	movs	r3, #8
 8001e3c:	e00c      	b.n	8001e58 <HAL_GPIO_DeInit+0xbc>
 8001e3e:	2306      	movs	r3, #6
 8001e40:	e00a      	b.n	8001e58 <HAL_GPIO_DeInit+0xbc>
 8001e42:	2305      	movs	r3, #5
 8001e44:	e008      	b.n	8001e58 <HAL_GPIO_DeInit+0xbc>
 8001e46:	2304      	movs	r3, #4
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_DeInit+0xbc>
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e004      	b.n	8001e58 <HAL_GPIO_DeInit+0xbc>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e002      	b.n	8001e58 <HAL_GPIO_DeInit+0xbc>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_GPIO_DeInit+0xbc>
 8001e56:	2300      	movs	r3, #0
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	f002 0203 	and.w	r2, r2, #3
 8001e5e:	0092      	lsls	r2, r2, #2
 8001e60:	4093      	lsls	r3, r2
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d132      	bne.n	8001ece <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001e68:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <HAL_GPIO_DeInit+0x1f4>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	4947      	ldr	r1, [pc, #284]	; (8001f90 <HAL_GPIO_DeInit+0x1f4>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001e76:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <HAL_GPIO_DeInit+0x1f4>)
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4944      	ldr	r1, [pc, #272]	; (8001f90 <HAL_GPIO_DeInit+0x1f4>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001e84:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <HAL_GPIO_DeInit+0x1f4>)
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	4940      	ldr	r1, [pc, #256]	; (8001f90 <HAL_GPIO_DeInit+0x1f4>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001e92:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <HAL_GPIO_DeInit+0x1f4>)
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	493d      	ldr	r1, [pc, #244]	; (8001f90 <HAL_GPIO_DeInit+0x1f4>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001eb0:	4a2e      	ldr	r2, [pc, #184]	; (8001f6c <HAL_GPIO_DeInit+0x1d0>)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	482a      	ldr	r0, [pc, #168]	; (8001f6c <HAL_GPIO_DeInit+0x1d0>)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
>>>>>>> Stashed changes
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
<<<<<<< Updated upstream
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2103      	movs	r1, #3
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	401a      	ands	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	08da      	lsrs	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3208      	adds	r2, #8
 8002980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	08d2      	lsrs	r2, r2, #3
 8002998:	4019      	ands	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2103      	movs	r1, #3
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	2101      	movs	r1, #1
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	401a      	ands	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2103      	movs	r1, #3
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	401a      	ands	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3301      	adds	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b0f      	cmp	r3, #15
 80029ec:	f67f af2e 	bls.w	800284c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40013800 	.word	0x40013800
 8002a04:	40020000 	.word	0x40020000
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	40020c00 	.word	0x40020c00
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40021400 	.word	0x40021400
 8002a1c:	40021800 	.word	0x40021800
 8002a20:	40021c00 	.word	0x40021c00
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_GPIO_WritePin>:
=======
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2103      	movs	r1, #3
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	08d2      	lsrs	r2, r2, #3
 8001f04:	4019      	ands	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2103      	movs	r1, #3
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	2101      	movs	r1, #1
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	401a      	ands	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2103      	movs	r1, #3
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	401a      	ands	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2b0f      	cmp	r3, #15
 8001f58:	f67f af2e 	bls.w	8001db8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40013800 	.word	0x40013800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40021400 	.word	0x40021400
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	40021c00 	.word	0x40021c00
 8001f90:	40013c00 	.word	0x40013c00

08001f94 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
=======
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
=======
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< Updated upstream
 8002a44:	e003      	b.n	8002a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	041a      	lsls	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_GPIO_TogglePin>:
=======
 8001fb0:	e003      	b.n	8001fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	041a      	lsls	r2, r3, #16
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	619a      	str	r2, [r3, #24]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_GPIO_TogglePin>:
>>>>>>> Stashed changes
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	807b      	strh	r3, [r7, #2]
=======
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
<<<<<<< Updated upstream
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a6c:	887a      	ldrh	r2, [r7, #2]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4013      	ands	r3, r2
 8002a72:	041a      	lsls	r2, r3, #16
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	43d9      	mvns	r1, r3
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	619a      	str	r2, [r3, #24]
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_RCC_OscConfig>:
=======
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fd8:	887a      	ldrh	r2, [r7, #2]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	041a      	lsls	r2, r3, #16
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43d9      	mvns	r1, r3
 8001fe4:	887b      	ldrh	r3, [r7, #2]
 8001fe6:	400b      	ands	r3, r1
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	619a      	str	r2, [r3, #24]
}
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
=======
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e264      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
=======
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e264      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d075      	beq.n	8002b9a <HAL_RCC_OscConfig+0x10a>
=======
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d075      	beq.n	8002106 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< Updated upstream
 8002aae:	4ba3      	ldr	r3, [pc, #652]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d00c      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aba:	4ba0      	ldr	r3, [pc, #640]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d112      	bne.n	8002aec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac6:	4b9d      	ldr	r3, [pc, #628]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad2:	d10b      	bne.n	8002aec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	4b99      	ldr	r3, [pc, #612]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d05b      	beq.n	8002b98 <HAL_RCC_OscConfig+0x108>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d157      	bne.n	8002b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e23f      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
=======
 800201a:	4ba3      	ldr	r3, [pc, #652]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b04      	cmp	r3, #4
 8002024:	d00c      	beq.n	8002040 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002026:	4ba0      	ldr	r3, [pc, #640]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800202e:	2b08      	cmp	r3, #8
 8002030:	d112      	bne.n	8002058 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002032:	4b9d      	ldr	r3, [pc, #628]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800203e:	d10b      	bne.n	8002058 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	4b99      	ldr	r3, [pc, #612]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d05b      	beq.n	8002104 <HAL_RCC_OscConfig+0x108>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d157      	bne.n	8002104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e23f      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af4:	d106      	bne.n	8002b04 <HAL_RCC_OscConfig+0x74>
 8002af6:	4b91      	ldr	r3, [pc, #580]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a90      	ldr	r2, [pc, #576]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e01d      	b.n	8002b40 <HAL_RCC_OscConfig+0xb0>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x98>
 8002b0e:	4b8b      	ldr	r3, [pc, #556]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a8a      	ldr	r2, [pc, #552]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b88      	ldr	r3, [pc, #544]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a87      	ldr	r2, [pc, #540]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0xb0>
 8002b28:	4b84      	ldr	r3, [pc, #528]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a83      	ldr	r2, [pc, #524]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b81      	ldr	r3, [pc, #516]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a80      	ldr	r2, [pc, #512]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7ff fad0 	bl	80020ec <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b50:	f7ff facc 	bl	80020ec <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e204      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b76      	ldr	r3, [pc, #472]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0xc0>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x10a>
=======
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002060:	d106      	bne.n	8002070 <HAL_RCC_OscConfig+0x74>
 8002062:	4b91      	ldr	r3, [pc, #580]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a90      	ldr	r2, [pc, #576]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e01d      	b.n	80020ac <HAL_RCC_OscConfig+0xb0>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0x98>
 800207a:	4b8b      	ldr	r3, [pc, #556]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a8a      	ldr	r2, [pc, #552]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b88      	ldr	r3, [pc, #544]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a87      	ldr	r2, [pc, #540]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e00b      	b.n	80020ac <HAL_RCC_OscConfig+0xb0>
 8002094:	4b84      	ldr	r3, [pc, #528]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a83      	ldr	r2, [pc, #524]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 800209a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b81      	ldr	r3, [pc, #516]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a80      	ldr	r2, [pc, #512]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 80020a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff fac4 	bl	8001640 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff fac0 	bl	8001640 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e204      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0xc0>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8002b70:	f7ff fabc 	bl	80020ec <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b78:	f7ff fab8 	bl	80020ec <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e1f0      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	4b6c      	ldr	r3, [pc, #432]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0xe8>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
=======
 80020dc:	f7ff fab0 	bl	8001640 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e4:	f7ff faac 	bl	8001640 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	; 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1f0      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	4b6c      	ldr	r3, [pc, #432]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0xe8>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1de>
=======
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d063      	beq.n	80021da <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< Updated upstream
 8002ba6:	4b65      	ldr	r3, [pc, #404]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb2:	4b62      	ldr	r3, [pc, #392]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d11c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bbe:	4b5f      	ldr	r3, [pc, #380]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d116      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	4b5c      	ldr	r3, [pc, #368]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_RCC_OscConfig+0x152>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e1c4      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
=======
 8002112:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211e:	4b62      	ldr	r3, [pc, #392]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002126:	2b08      	cmp	r3, #8
 8002128:	d11c      	bne.n	8002164 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d116      	bne.n	8002164 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_RCC_OscConfig+0x152>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d001      	beq.n	800214e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e1c4      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8002be2:	4b56      	ldr	r3, [pc, #344]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4952      	ldr	r1, [pc, #328]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf6:	e03a      	b.n	8002c6e <HAL_RCC_OscConfig+0x1de>
=======
 800214e:	4b56      	ldr	r3, [pc, #344]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4952      	ldr	r1, [pc, #328]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	e03a      	b.n	80021da <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< Updated upstream
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c00:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <HAL_RCC_OscConfig+0x2b0>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7ff fa71 	bl	80020ec <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0e:	f7ff fa6d 	bl	80020ec <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e1a5      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c20:	4b46      	ldr	r3, [pc, #280]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x17e>
=======
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d020      	beq.n	80021ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800216c:	4b4f      	ldr	r3, [pc, #316]	; (80022ac <HAL_RCC_OscConfig+0x2b0>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002172:	f7ff fa65 	bl	8001640 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217a:	f7ff fa61 	bl	8001640 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e1a5      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x17e>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8002c2c:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4940      	ldr	r1, [pc, #256]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
 8002c40:	e015      	b.n	8002c6e <HAL_RCC_OscConfig+0x1de>
=======
 8002198:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4940      	ldr	r1, [pc, #256]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
 80021ac:	e015      	b.n	80021da <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 8002c42:	4b3f      	ldr	r3, [pc, #252]	; (8002d40 <HAL_RCC_OscConfig+0x2b0>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7ff fa50 	bl	80020ec <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c50:	f7ff fa4c 	bl	80020ec <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e184      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1c0>
=======
 80021ae:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <HAL_RCC_OscConfig+0x2b0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fa44 	bl	8001640 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021bc:	f7ff fa40 	bl	8001640 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e184      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x1c0>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d030      	beq.n	8002cdc <HAL_RCC_OscConfig+0x24c>
=======
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d030      	beq.n	8002248 <HAL_RCC_OscConfig+0x24c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< Updated upstream
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_RCC_OscConfig+0x2b4>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7ff fa30 	bl	80020ec <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c90:	f7ff fa2c 	bl	80020ec <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e164      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca2:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x200>
 8002cae:	e015      	b.n	8002cdc <HAL_RCC_OscConfig+0x24c>
=======
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d016      	beq.n	800221c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ee:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <HAL_RCC_OscConfig+0x2b4>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f4:	f7ff fa24 	bl	8001640 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021fc:	f7ff fa20 	bl	8001640 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e164      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220e:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x200>
 800221a:	e015      	b.n	8002248 <HAL_RCC_OscConfig+0x24c>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <HAL_RCC_OscConfig+0x2b4>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb6:	f7ff fa19 	bl	80020ec <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7ff fa15 	bl	80020ec <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e14d      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f0      	bne.n	8002cbe <HAL_RCC_OscConfig+0x22e>
=======
 800221c:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_RCC_OscConfig+0x2b4>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002222:	f7ff fa0d 	bl	8001640 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222a:	f7ff fa09 	bl	8001640 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e14d      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 800223e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x22e>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a0 	beq.w	8002e2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	75fb      	strb	r3, [r7, #23]
=======
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a0 	beq.w	8002396 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10f      	bne.n	8002d1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_RCC_OscConfig+0x2b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d121      	bne.n	8002d6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_RCC_OscConfig+0x2b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <HAL_RCC_OscConfig+0x2b8>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d32:	f7ff f9db 	bl	80020ec <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	e011      	b.n	8002d5e <HAL_RCC_OscConfig+0x2ce>
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	42470000 	.word	0x42470000
 8002d44:	42470e80 	.word	0x42470e80
 8002d48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4c:	f7ff f9ce 	bl	80020ec <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e106      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5e:	4b85      	ldr	r3, [pc, #532]	; (8002f74 <HAL_RCC_OscConfig+0x4e4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x2bc>
=======
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10f      	bne.n	8002286 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCC_OscConfig+0x2b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d121      	bne.n	80022d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_RCC_OscConfig+0x2b8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_RCC_OscConfig+0x2b8>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229e:	f7ff f9cf 	bl	8001640 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	e011      	b.n	80022ca <HAL_RCC_OscConfig+0x2ce>
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	42470000 	.word	0x42470000
 80022b0:	42470e80 	.word	0x42470e80
 80022b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b8:	f7ff f9c2 	bl	8001640 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e106      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	4b85      	ldr	r3, [pc, #532]	; (80024e0 <HAL_RCC_OscConfig+0x4e4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x2bc>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d106      	bne.n	8002d80 <HAL_RCC_OscConfig+0x2f0>
 8002d72:	4b81      	ldr	r3, [pc, #516]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a80      	ldr	r2, [pc, #512]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7e:	e01c      	b.n	8002dba <HAL_RCC_OscConfig+0x32a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b05      	cmp	r3, #5
 8002d86:	d10c      	bne.n	8002da2 <HAL_RCC_OscConfig+0x312>
 8002d88:	4b7b      	ldr	r3, [pc, #492]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	4a7a      	ldr	r2, [pc, #488]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002d8e:	f043 0304 	orr.w	r3, r3, #4
 8002d92:	6713      	str	r3, [r2, #112]	; 0x70
 8002d94:	4b78      	ldr	r3, [pc, #480]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4a77      	ldr	r2, [pc, #476]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002da0:	e00b      	b.n	8002dba <HAL_RCC_OscConfig+0x32a>
 8002da2:	4b75      	ldr	r3, [pc, #468]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	4a74      	ldr	r2, [pc, #464]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	6713      	str	r3, [r2, #112]	; 0x70
 8002dae:	4b72      	ldr	r3, [pc, #456]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	4a71      	ldr	r2, [pc, #452]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002db4:	f023 0304 	bic.w	r3, r3, #4
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d015      	beq.n	8002dee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7ff f993 	bl	80020ec <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7ff f98f 	bl	80020ec <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e0c5      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de0:	4b65      	ldr	r3, [pc, #404]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ee      	beq.n	8002dca <HAL_RCC_OscConfig+0x33a>
 8002dec:	e014      	b.n	8002e18 <HAL_RCC_OscConfig+0x388>
=======
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d106      	bne.n	80022ec <HAL_RCC_OscConfig+0x2f0>
 80022de:	4b81      	ldr	r3, [pc, #516]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	4a80      	ldr	r2, [pc, #512]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ea:	e01c      	b.n	8002326 <HAL_RCC_OscConfig+0x32a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d10c      	bne.n	800230e <HAL_RCC_OscConfig+0x312>
 80022f4:	4b7b      	ldr	r3, [pc, #492]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	4a7a      	ldr	r2, [pc, #488]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002300:	4b78      	ldr	r3, [pc, #480]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002304:	4a77      	ldr	r2, [pc, #476]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6713      	str	r3, [r2, #112]	; 0x70
 800230c:	e00b      	b.n	8002326 <HAL_RCC_OscConfig+0x32a>
 800230e:	4b75      	ldr	r3, [pc, #468]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	4a74      	ldr	r2, [pc, #464]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6713      	str	r3, [r2, #112]	; 0x70
 800231a:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a71      	ldr	r2, [pc, #452]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 8002320:	f023 0304 	bic.w	r3, r3, #4
 8002324:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d015      	beq.n	800235a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232e:	f7ff f987 	bl	8001640 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7ff f983 	bl	8001640 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	; 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0c5      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 800234e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ee      	beq.n	8002336 <HAL_RCC_OscConfig+0x33a>
 8002358:	e014      	b.n	8002384 <HAL_RCC_OscConfig+0x388>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8002dee:	f7ff f97d 	bl	80020ec <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7ff f979 	bl	80020ec <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0af      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0c:	4b5a      	ldr	r3, [pc, #360]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1ee      	bne.n	8002df6 <HAL_RCC_OscConfig+0x366>
=======
 800235a:	f7ff f971 	bl	8001640 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7ff f96d 	bl	8001640 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0af      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002378:	4b5a      	ldr	r3, [pc, #360]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1ee      	bne.n	8002362 <HAL_RCC_OscConfig+0x366>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d105      	bne.n	8002e2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1e:	4b56      	ldr	r3, [pc, #344]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	4a55      	ldr	r2, [pc, #340]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4b56      	ldr	r3, [pc, #344]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a55      	ldr	r2, [pc, #340]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 8002390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 809b 	beq.w	8002f6a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e34:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d05c      	beq.n	8002efa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d141      	bne.n	8002ecc <HAL_RCC_OscConfig+0x43c>
=======
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 809b 	beq.w	80024d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023a0:	4b50      	ldr	r3, [pc, #320]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d05c      	beq.n	8002466 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d141      	bne.n	8002438 <HAL_RCC_OscConfig+0x43c>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8002e48:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <HAL_RCC_OscConfig+0x4ec>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4e:	f7ff f94d 	bl	80020ec <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e56:	f7ff f949 	bl	80020ec <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e081      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e68:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f0      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3c6>
=======
 80023b4:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <HAL_RCC_OscConfig+0x4ec>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7ff f941 	bl	8001640 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7ff f93d 	bl	8001640 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e081      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d4:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x3c6>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< Updated upstream
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	019b      	lsls	r3, r3, #6
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	085b      	lsrs	r3, r3, #1
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	041b      	lsls	r3, r3, #16
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	4937      	ldr	r1, [pc, #220]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
=======
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	019b      	lsls	r3, r3, #6
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	3b01      	subs	r3, #1
 80023fa:	041b      	lsls	r3, r3, #16
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	061b      	lsls	r3, r3, #24
 8002404:	4937      	ldr	r1, [pc, #220]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8002e9e:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <HAL_RCC_OscConfig+0x4ec>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7ff f922 	bl	80020ec <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eac:	f7ff f91e 	bl	80020ec <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e056      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebe:	4b2e      	ldr	r3, [pc, #184]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x41c>
 8002eca:	e04e      	b.n	8002f6a <HAL_RCC_OscConfig+0x4da>
=======
 800240a:	4b37      	ldr	r3, [pc, #220]	; (80024e8 <HAL_RCC_OscConfig+0x4ec>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff f916 	bl	8001640 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002418:	f7ff f912 	bl	8001640 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e056      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242a:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x41c>
 8002436:	e04e      	b.n	80024d6 <HAL_RCC_OscConfig+0x4da>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <HAL_RCC_OscConfig+0x4ec>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7ff f90b 	bl	80020ec <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eda:	f7ff f907 	bl	80020ec <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e03f      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eec:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x44a>
 8002ef8:	e037      	b.n	8002f6a <HAL_RCC_OscConfig+0x4da>
=======
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_RCC_OscConfig+0x4ec>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7ff f8ff 	bl	8001640 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002446:	f7ff f8fb 	bl	8001640 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e03f      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002458:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x44a>
 8002464:	e037      	b.n	80024d6 <HAL_RCC_OscConfig+0x4da>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e032      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
=======
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e032      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <HAL_RCC_OscConfig+0x4e8>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	60fb      	str	r3, [r7, #12]
=======
 8002472:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCC_OscConfig+0x4e8>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< Updated upstream
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d028      	beq.n	8002f66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d121      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d11a      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f3c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d111      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	085b      	lsrs	r3, r3, #1
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
=======
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d028      	beq.n	80024d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d121      	bne.n	80024d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d11a      	bne.n	80024d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024a2:	4013      	ands	r3, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d111      	bne.n	80024d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	3b01      	subs	r3, #1
 80024bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40007000 	.word	0x40007000
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	42470060 	.word	0x42470060

08002f80 <HAL_RCC_ClockConfig>:
=======
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40007000 	.word	0x40007000
 80024e4:	40023800 	.word	0x40023800
 80024e8:	42470060 	.word	0x42470060

080024ec <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
=======
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0cc      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
=======
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0cc      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8002f94:	4b68      	ldr	r3, [pc, #416]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d90c      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b65      	ldr	r3, [pc, #404]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]
=======
 8002500:	4b68      	ldr	r3, [pc, #416]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d90c      	bls.n	8002528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8002faa:	4b63      	ldr	r3, [pc, #396]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0b8      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
=======
 8002516:	4b63      	ldr	r3, [pc, #396]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0b8      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_ClockConfig+0x8a>
=======
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> Stashed changes
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd4:	4b59      	ldr	r3, [pc, #356]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fec:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ff6:	6093      	str	r3, [r2, #8]
=======
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002540:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800254a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a52      	ldr	r2, [pc, #328]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002562:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8002ff8:	4b50      	ldr	r3, [pc, #320]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	494d      	ldr	r1, [pc, #308]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
=======
 8002564:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	494d      	ldr	r1, [pc, #308]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d044      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x120>
=======
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d044      	beq.n	800260c <HAL_RCC_ClockConfig+0x120>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d119      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e07f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
=======
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d119      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< Updated upstream
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d003      	beq.n	800303e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303a:	2b03      	cmp	r3, #3
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	4b3f      	ldr	r3, [pc, #252]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e06f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
=======
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
 800304e:	4b3b      	ldr	r3, [pc, #236]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e067      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
=======
 80025ba:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e067      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 800305e:	4b37      	ldr	r3, [pc, #220]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f023 0203 	bic.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4934      	ldr	r1, [pc, #208]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003070:	f7ff f83c 	bl	80020ec <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	e00a      	b.n	800308e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7ff f838 	bl	80020ec <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	; 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e04f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	4b2b      	ldr	r3, [pc, #172]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 020c 	and.w	r2, r3, #12
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d1eb      	bne.n	8003078 <HAL_RCC_ClockConfig+0xf8>
=======
 80025ca:	4b37      	ldr	r3, [pc, #220]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 0203 	bic.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4934      	ldr	r1, [pc, #208]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025dc:	f7ff f830 	bl	8001640 <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e4:	f7ff f82c 	bl	8001640 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e04f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 020c 	and.w	r2, r3, #12
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	429a      	cmp	r2, r3
 800260a:	d1eb      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 80030a0:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d20c      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b22      	ldr	r3, [pc, #136]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]
=======
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d20c      	bcs.n	8002634 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e032      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
=======
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e032      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4916      	ldr	r1, [pc, #88]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
=======
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4916      	ldr	r1, [pc, #88]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	490e      	ldr	r1, [pc, #56]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
=======
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	490e      	ldr	r1, [pc, #56]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< Updated upstream
 8003106:	f000 f821 	bl	800314c <HAL_RCC_GetSysClockFreq>
 800310a:	4602      	mov	r2, r0
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	490a      	ldr	r1, [pc, #40]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	5ccb      	ldrb	r3, [r1, r3]
 800311a:	fa22 f303 	lsr.w	r3, r2, r3
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe ff9c 	bl	8002064 <HAL_InitTick>

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023c00 	.word	0x40023c00
 800313c:	40023800 	.word	0x40023800
 8003140:	08005b20 	.word	0x08005b20
 8003144:	20000004 	.word	0x20000004
 8003148:	20000008 	.word	0x20000008

0800314c <HAL_RCC_GetSysClockFreq>:
=======
 8002672:	f000 f821 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8002676:	4602      	mov	r2, r0
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	490a      	ldr	r1, [pc, #40]	; (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	5ccb      	ldrb	r3, [r1, r3]
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe ff90 	bl	80015b8 <HAL_InitTick>

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00
 80026a8:	40023800 	.word	0x40023800
 80026ac:	08004d74 	.word	0x08004d74
 80026b0:	20000004 	.word	0x20000004
 80026b4:	20000008 	.word	0x20000008

080026b8 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 800314c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	2300      	movs	r3, #0
 800315e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003164:	4b67      	ldr	r3, [pc, #412]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b08      	cmp	r3, #8
 800316e:	d00d      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x40>
 8003170:	2b08      	cmp	r3, #8
 8003172:	f200 80bd 	bhi.w	80032f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x34>
 800317a:	2b04      	cmp	r3, #4
 800317c:	d003      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x3a>
 800317e:	e0b7      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x1a4>
=======
 80026b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	607b      	str	r3, [r7, #4]
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	2300      	movs	r3, #0
 80026ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d0:	4b67      	ldr	r3, [pc, #412]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d00d      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x40>
 80026dc:	2b08      	cmp	r3, #8
 80026de:	f200 80bd 	bhi.w	800285c <HAL_RCC_GetSysClockFreq+0x1a4>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x34>
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ea:	e0b7      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x1a4>
>>>>>>> Stashed changes
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8003180:	4b61      	ldr	r3, [pc, #388]	; (8003308 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003182:	60bb      	str	r3, [r7, #8]
       break;
 8003184:	e0b7      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x1aa>
=======
 80026ec:	4b61      	ldr	r3, [pc, #388]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026ee:	60bb      	str	r3, [r7, #8]
       break;
 80026f0:	e0b7      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 8003186:	4b61      	ldr	r3, [pc, #388]	; (800330c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003188:	60bb      	str	r3, [r7, #8]
      break;
 800318a:	e0b4      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x1aa>
=======
 80026f2:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026f4:	60bb      	str	r3, [r7, #8]
      break;
 80026f6:	e0b4      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
 800318c:	4b5d      	ldr	r3, [pc, #372]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003194:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003196:	4b5b      	ldr	r3, [pc, #364]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d04d      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a2:	4b58      	ldr	r3, [pc, #352]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	099b      	lsrs	r3, r3, #6
 80031a8:	461a      	mov	r2, r3
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031b2:	f04f 0100 	mov.w	r1, #0
 80031b6:	ea02 0800 	and.w	r8, r2, r0
 80031ba:	ea03 0901 	and.w	r9, r3, r1
 80031be:	4640      	mov	r0, r8
 80031c0:	4649      	mov	r1, r9
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	014b      	lsls	r3, r1, #5
 80031cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031d0:	0142      	lsls	r2, r0, #5
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	ebb0 0008 	subs.w	r0, r0, r8
 80031da:	eb61 0109 	sbc.w	r1, r1, r9
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	018b      	lsls	r3, r1, #6
 80031e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031ec:	0182      	lsls	r2, r0, #6
 80031ee:	1a12      	subs	r2, r2, r0
 80031f0:	eb63 0301 	sbc.w	r3, r3, r1
 80031f4:	f04f 0000 	mov.w	r0, #0
 80031f8:	f04f 0100 	mov.w	r1, #0
 80031fc:	00d9      	lsls	r1, r3, #3
 80031fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003202:	00d0      	lsls	r0, r2, #3
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	eb12 0208 	adds.w	r2, r2, r8
 800320c:	eb43 0309 	adc.w	r3, r3, r9
 8003210:	f04f 0000 	mov.w	r0, #0
 8003214:	f04f 0100 	mov.w	r1, #0
 8003218:	0259      	lsls	r1, r3, #9
 800321a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800321e:	0250      	lsls	r0, r2, #9
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	461a      	mov	r2, r3
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	f7fd fbc0 	bl	80009b4 <__aeabi_uldivmod>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4613      	mov	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e04a      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x188>
=======
 80026f8:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002700:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002702:	4b5b      	ldr	r3, [pc, #364]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d04d      	beq.n	80027aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270e:	4b58      	ldr	r3, [pc, #352]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	461a      	mov	r2, r3
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800271e:	f04f 0100 	mov.w	r1, #0
 8002722:	ea02 0800 	and.w	r8, r2, r0
 8002726:	ea03 0901 	and.w	r9, r3, r1
 800272a:	4640      	mov	r0, r8
 800272c:	4649      	mov	r1, r9
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	014b      	lsls	r3, r1, #5
 8002738:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800273c:	0142      	lsls	r2, r0, #5
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	ebb0 0008 	subs.w	r0, r0, r8
 8002746:	eb61 0109 	sbc.w	r1, r1, r9
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	018b      	lsls	r3, r1, #6
 8002754:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002758:	0182      	lsls	r2, r0, #6
 800275a:	1a12      	subs	r2, r2, r0
 800275c:	eb63 0301 	sbc.w	r3, r3, r1
 8002760:	f04f 0000 	mov.w	r0, #0
 8002764:	f04f 0100 	mov.w	r1, #0
 8002768:	00d9      	lsls	r1, r3, #3
 800276a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800276e:	00d0      	lsls	r0, r2, #3
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	eb12 0208 	adds.w	r2, r2, r8
 8002778:	eb43 0309 	adc.w	r3, r3, r9
 800277c:	f04f 0000 	mov.w	r0, #0
 8002780:	f04f 0100 	mov.w	r1, #0
 8002784:	0259      	lsls	r1, r3, #9
 8002786:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800278a:	0250      	lsls	r0, r2, #9
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	461a      	mov	r2, r3
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	f7fd fd14 	bl	80001c8 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e04a      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x188>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
 800323e:	4b31      	ldr	r3, [pc, #196]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	099b      	lsrs	r3, r3, #6
 8003244:	461a      	mov	r2, r3
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800324e:	f04f 0100 	mov.w	r1, #0
 8003252:	ea02 0400 	and.w	r4, r2, r0
 8003256:	ea03 0501 	and.w	r5, r3, r1
 800325a:	4620      	mov	r0, r4
 800325c:	4629      	mov	r1, r5
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	014b      	lsls	r3, r1, #5
 8003268:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800326c:	0142      	lsls	r2, r0, #5
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	1b00      	subs	r0, r0, r4
 8003274:	eb61 0105 	sbc.w	r1, r1, r5
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	018b      	lsls	r3, r1, #6
 8003282:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003286:	0182      	lsls	r2, r0, #6
 8003288:	1a12      	subs	r2, r2, r0
 800328a:	eb63 0301 	sbc.w	r3, r3, r1
 800328e:	f04f 0000 	mov.w	r0, #0
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	00d9      	lsls	r1, r3, #3
 8003298:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800329c:	00d0      	lsls	r0, r2, #3
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	1912      	adds	r2, r2, r4
 80032a4:	eb45 0303 	adc.w	r3, r5, r3
 80032a8:	f04f 0000 	mov.w	r0, #0
 80032ac:	f04f 0100 	mov.w	r1, #0
 80032b0:	0299      	lsls	r1, r3, #10
 80032b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032b6:	0290      	lsls	r0, r2, #10
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	461a      	mov	r2, r3
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	f7fd fb74 	bl	80009b4 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4613      	mov	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	0c1b      	lsrs	r3, r3, #16
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	3301      	adds	r3, #1
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	60bb      	str	r3, [r7, #8]
      break;
 80032ee:	e002      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x1aa>
=======
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	099b      	lsrs	r3, r3, #6
 80027b0:	461a      	mov	r2, r3
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	ea02 0400 	and.w	r4, r2, r0
 80027c2:	ea03 0501 	and.w	r5, r3, r1
 80027c6:	4620      	mov	r0, r4
 80027c8:	4629      	mov	r1, r5
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	014b      	lsls	r3, r1, #5
 80027d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027d8:	0142      	lsls	r2, r0, #5
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	1b00      	subs	r0, r0, r4
 80027e0:	eb61 0105 	sbc.w	r1, r1, r5
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	018b      	lsls	r3, r1, #6
 80027ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027f2:	0182      	lsls	r2, r0, #6
 80027f4:	1a12      	subs	r2, r2, r0
 80027f6:	eb63 0301 	sbc.w	r3, r3, r1
 80027fa:	f04f 0000 	mov.w	r0, #0
 80027fe:	f04f 0100 	mov.w	r1, #0
 8002802:	00d9      	lsls	r1, r3, #3
 8002804:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002808:	00d0      	lsls	r0, r2, #3
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	1912      	adds	r2, r2, r4
 8002810:	eb45 0303 	adc.w	r3, r5, r3
 8002814:	f04f 0000 	mov.w	r0, #0
 8002818:	f04f 0100 	mov.w	r1, #0
 800281c:	0299      	lsls	r1, r3, #10
 800281e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002822:	0290      	lsls	r0, r2, #10
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	f7fd fcc8 	bl	80001c8 <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4613      	mov	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	3301      	adds	r3, #1
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	60bb      	str	r3, [r7, #8]
      break;
 800285a:	e002      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> Stashed changes
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032f2:	60bb      	str	r3, [r7, #8]
      break;
 80032f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f6:	68bb      	ldr	r3, [r7, #8]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	00f42400 	.word	0x00f42400
 800330c:	007a1200 	.word	0x007a1200

08003310 <HAL_RCC_GetHCLKFreq>:
=======
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800285e:	60bb      	str	r3, [r7, #8]
      break;
 8002860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002862:	68bb      	ldr	r3, [r7, #8]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	00f42400 	.word	0x00f42400
 8002878:	007a1200 	.word	0x007a1200

0800287c <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <HAL_RCC_GetHCLKFreq+0x14>)
 8003316:	681b      	ldr	r3, [r3, #0]
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20000004 	.word	0x20000004

08003328 <HAL_RCC_GetPCLK1Freq>:
=======
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_RCC_GetHCLKFreq+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800332c:	f7ff fff0 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	0a9b      	lsrs	r3, r3, #10
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	4903      	ldr	r1, [pc, #12]	; (800334c <HAL_RCC_GetPCLK1Freq+0x24>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40023800 	.word	0x40023800
 800334c:	08005b30 	.word	0x08005b30

08003350 <HAL_RCC_GetPCLK2Freq>:
=======
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002898:	f7ff fff0 	bl	800287c <HAL_RCC_GetHCLKFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	0a9b      	lsrs	r3, r3, #10
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	4903      	ldr	r1, [pc, #12]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40023800 	.word	0x40023800
 80028b8:	08004d84 	.word	0x08004d84

080028bc <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003354:	f7ff ffdc 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	0b5b      	lsrs	r3, r3, #13
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4903      	ldr	r1, [pc, #12]	; (8003374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40023800 	.word	0x40023800
 8003374:	08005b30 	.word	0x08005b30

08003378 <HAL_SPI_Init>:
=======
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028c0:	f7ff ffdc 	bl	800287c <HAL_RCC_GetHCLKFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	0b5b      	lsrs	r3, r3, #13
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4903      	ldr	r1, [pc, #12]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40023800 	.word	0x40023800
 80028e0:	08004d84 	.word	0x08004d84

080028e4 <HAL_SPI_Init>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e07b      	b.n	8003482 <HAL_SPI_Init+0x10a>
=======
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e07b      	b.n	80029ee <HAL_SPI_Init+0x10a>
>>>>>>> Stashed changes
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< Updated upstream
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2b00      	cmp	r3, #0
 8003390:	d108      	bne.n	80033a4 <HAL_SPI_Init+0x2c>
=======
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d108      	bne.n	8002910 <HAL_SPI_Init+0x2c>
>>>>>>> Stashed changes
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< Updated upstream
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800339a:	d009      	beq.n	80033b0 <HAL_SPI_Init+0x38>
=======
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002906:	d009      	beq.n	800291c <HAL_SPI_Init+0x38>
>>>>>>> Stashed changes
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< Updated upstream
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	61da      	str	r2, [r3, #28]
 80033a2:	e005      	b.n	80033b0 <HAL_SPI_Init+0x38>
=======
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	61da      	str	r2, [r3, #28]
 800290e:	e005      	b.n	800291c <HAL_SPI_Init+0x38>
>>>>>>> Stashed changes
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< Updated upstream
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	615a      	str	r2, [r3, #20]
=======
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< Updated upstream
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< Updated upstream
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fe fa18 	bl	8001800 <HAL_SPI_MspInit>
=======
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe fa8c 	bl	8000e54 <HAL_SPI_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< Updated upstream
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e6:	601a      	str	r2, [r3, #0]
=======
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002952:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< Updated upstream
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	ea42 0103 	orr.w	r1, r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
=======
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	ea42 0103 	orr.w	r1, r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
<<<<<<< Updated upstream
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	f003 0104 	and.w	r1, r3, #4
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	f003 0210 	and.w	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
=======
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	f003 0104 	and.w	r1, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	f003 0210 	and.w	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< Updated upstream
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003470:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_SPI_DeInit>:
=======
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_SPI_DeInit>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e01a      	b.n	80034d2 <HAL_SPI_DeInit+0x48>
=======
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e01a      	b.n	8002a3e <HAL_SPI_DeInit+0x48>
>>>>>>> Stashed changes
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< Updated upstream
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b2:	601a      	str	r2, [r3, #0]
=======
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
<<<<<<< Updated upstream
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7fe fa03 	bl	80018c0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_SPI_Transmit>:
=======
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fe fa77 	bl	8000f14 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_SPI_Transmit>:
>>>>>>> Stashed changes
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 80034da:	b580      	push	{r7, lr}
 80034dc:	b088      	sub	sp, #32
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	77fb      	strb	r3, [r7, #31]
=======
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b088      	sub	sp, #32
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_SPI_Transmit+0x22>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e126      	b.n	800374a <HAL_SPI_Transmit+0x270>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003504:	f7fe fdf2 	bl	80020ec <HAL_GetTick>
 8003508:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d002      	beq.n	8003520 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800351a:	2302      	movs	r3, #2
 800351c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800351e:	e10b      	b.n	8003738 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_SPI_Transmit+0x52>
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003530:	e102      	b.n	8003738 <HAL_SPI_Transmit+0x25e>
=======
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_SPI_Transmit+0x22>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e126      	b.n	8002cb6 <HAL_SPI_Transmit+0x270>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a70:	f7fe fde6 	bl	8001640 <HAL_GetTick>
 8002a74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d002      	beq.n	8002a8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a8a:	e10b      	b.n	8002ca4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_SPI_Transmit+0x52>
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a9c:	e102      	b.n	8002ca4 <HAL_SPI_Transmit+0x25e>
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< Updated upstream
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2203      	movs	r2, #3
 8003536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003578:	d10f      	bne.n	800359a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003588:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003598:	601a      	str	r2, [r3, #0]
=======
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	88fa      	ldrh	r2, [r7, #6]
 8002ab6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	88fa      	ldrh	r2, [r7, #6]
 8002abc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae4:	d10f      	bne.n	8002b06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002af4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b04:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d007      	beq.n	80035b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b6:	601a      	str	r2, [r3, #0]
=======
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d007      	beq.n	8002b24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b22:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< Updated upstream
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c0:	d14b      	bne.n	800365a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_SPI_Transmit+0xf6>
 80035ca:	8afb      	ldrh	r3, [r7, #22]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d13e      	bne.n	800364e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	881a      	ldrh	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	1c9a      	adds	r2, r3, #2
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035f4:	e02b      	b.n	800364e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d112      	bne.n	800362a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	881a      	ldrh	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	1c9a      	adds	r2, r3, #2
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	86da      	strh	r2, [r3, #54]	; 0x36
 8003628:	e011      	b.n	800364e <HAL_SPI_Transmit+0x174>
=======
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b2c:	d14b      	bne.n	8002bc6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_SPI_Transmit+0xf6>
 8002b36:	8afb      	ldrh	r3, [r7, #22]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d13e      	bne.n	8002bba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	881a      	ldrh	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	1c9a      	adds	r2, r3, #2
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b60:	e02b      	b.n	8002bba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d112      	bne.n	8002b96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	881a      	ldrh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	1c9a      	adds	r2, r3, #2
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b94:	e011      	b.n	8002bba <HAL_SPI_Transmit+0x174>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 800362a:	f7fe fd5f 	bl	80020ec <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d803      	bhi.n	8003642 <HAL_SPI_Transmit+0x168>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d102      	bne.n	8003648 <HAL_SPI_Transmit+0x16e>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d102      	bne.n	800364e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800364c:	e074      	b.n	8003738 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ce      	bne.n	80035f6 <HAL_SPI_Transmit+0x11c>
 8003658:	e04c      	b.n	80036f4 <HAL_SPI_Transmit+0x21a>
=======
 8002b96:	f7fe fd53 	bl	8001640 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d803      	bhi.n	8002bae <HAL_SPI_Transmit+0x168>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d102      	bne.n	8002bb4 <HAL_SPI_Transmit+0x16e>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bb8:	e074      	b.n	8002ca4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ce      	bne.n	8002b62 <HAL_SPI_Transmit+0x11c>
 8002bc4:	e04c      	b.n	8002c60 <HAL_SPI_Transmit+0x21a>
>>>>>>> Stashed changes
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< Updated upstream
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_SPI_Transmit+0x18e>
 8003662:	8afb      	ldrh	r3, [r7, #22]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d140      	bne.n	80036ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	7812      	ldrb	r2, [r2, #0]
 8003674:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800368e:	e02c      	b.n	80036ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d113      	bne.n	80036c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	330c      	adds	r3, #12
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80036c4:	e011      	b.n	80036ea <HAL_SPI_Transmit+0x210>
=======
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_SPI_Transmit+0x18e>
 8002bce:	8afb      	ldrh	r3, [r7, #22]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d140      	bne.n	8002c56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	330c      	adds	r3, #12
 8002bde:	7812      	ldrb	r2, [r2, #0]
 8002be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bfa:	e02c      	b.n	8002c56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d113      	bne.n	8002c32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	7812      	ldrb	r2, [r2, #0]
 8002c16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c30:	e011      	b.n	8002c56 <HAL_SPI_Transmit+0x210>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 80036c6:	f7fe fd11 	bl	80020ec <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d803      	bhi.n	80036de <HAL_SPI_Transmit+0x204>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d102      	bne.n	80036e4 <HAL_SPI_Transmit+0x20a>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036e8:	e026      	b.n	8003738 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1cd      	bne.n	8003690 <HAL_SPI_Transmit+0x1b6>
=======
 8002c32:	f7fe fd05 	bl	8001640 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d803      	bhi.n	8002c4a <HAL_SPI_Transmit+0x204>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d102      	bne.n	8002c50 <HAL_SPI_Transmit+0x20a>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c54:	e026      	b.n	8002ca4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1cd      	bne.n	8002bfc <HAL_SPI_Transmit+0x1b6>
>>>>>>> Stashed changes
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	6839      	ldr	r1, [r7, #0]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f9d1 	bl	8003aa0 <SPI_EndRxTxTransaction>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	6839      	ldr	r1, [r7, #0]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f9d1 	bl	800300c <SPI_EndRxTxTransaction>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< Updated upstream
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e000      	b.n	8003738 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003736:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003748:	7ffb      	ldrb	r3, [r7, #31]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_SPI_IRQHandler>:
=======
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	77fb      	strb	r3, [r7, #31]
 8002ca0:	e000      	b.n	8002ca4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002ca2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_SPI_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	099b      	lsrs	r3, r3, #6
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10f      	bne.n	8003798 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
    return;
 8003796:	e0d7      	b.n	8003948 <HAL_SPI_IRQHandler+0x1f4>
=======
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10f      	bne.n	8002d04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
    return;
 8002d02:	e0d7      	b.n	8002eb4 <HAL_SPI_IRQHandler+0x1f4>
>>>>>>> Stashed changes
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
<<<<<<< Updated upstream
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_SPI_IRQHandler+0x66>
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	09db      	lsrs	r3, r3, #7
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
    return;
 80037b8:	e0c6      	b.n	8003948 <HAL_SPI_IRQHandler+0x1f4>
=======
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_SPI_IRQHandler+0x66>
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	09db      	lsrs	r3, r3, #7
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d004      	beq.n	8002d26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
    return;
 8002d24:	e0c6      	b.n	8002eb4 <HAL_SPI_IRQHandler+0x1f4>
>>>>>>> Stashed changes
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
<<<<<<< Updated upstream
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10c      	bne.n	80037e0 <HAL_SPI_IRQHandler+0x8c>
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80b4 	beq.w	8003948 <HAL_SPI_IRQHandler+0x1f4>
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80ad 	beq.w	8003948 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d023      	beq.n	8003842 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b03      	cmp	r3, #3
 8003804:	d011      	beq.n	800382a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	f043 0204 	orr.w	r2, r3, #4
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	e00b      	b.n	8003842 <HAL_SPI_IRQHandler+0xee>
=======
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10c      	bne.n	8002d4c <HAL_SPI_IRQHandler+0x8c>
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80b4 	beq.w	8002eb4 <HAL_SPI_IRQHandler+0x1f4>
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80ad 	beq.w	8002eb4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d023      	beq.n	8002dae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d011      	beq.n	8002d96 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	f043 0204 	orr.w	r2, r3, #4
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	e00b      	b.n	8002dae <HAL_SPI_IRQHandler+0xee>
>>>>>>> Stashed changes
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
<<<<<<< Updated upstream
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	693b      	ldr	r3, [r7, #16]
        return;
 8003840:	e082      	b.n	8003948 <HAL_SPI_IRQHandler+0x1f4>
=======
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	693b      	ldr	r3, [r7, #16]
        return;
 8002dac:	e082      	b.n	8002eb4 <HAL_SPI_IRQHandler+0x1f4>
>>>>>>> Stashed changes
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
<<<<<<< Updated upstream
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d014      	beq.n	8003878 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
=======
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d014      	beq.n	8002de4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
<<<<<<< Updated upstream
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00c      	beq.n	800389e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	f043 0208 	orr.w	r2, r3, #8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d04f      	beq.n	8003946 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038b4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d104      	bne.n	80038d2 <HAL_SPI_IRQHandler+0x17e>
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d034      	beq.n	800393c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0203 	bic.w	r2, r2, #3
 80038e0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d011      	beq.n	800390e <HAL_SPI_IRQHandler+0x1ba>
=======
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00c      	beq.n	8002e0a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	f043 0208 	orr.w	r2, r3, #8
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d04f      	beq.n	8002eb2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d104      	bne.n	8002e3e <HAL_SPI_IRQHandler+0x17e>
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d034      	beq.n	8002ea8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0203 	bic.w	r2, r2, #3
 8002e4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d011      	beq.n	8002e7a <HAL_SPI_IRQHandler+0x1ba>
>>>>>>> Stashed changes
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
<<<<<<< Updated upstream
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_SPI_IRQHandler+0x1fc>)
 80038f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe fddb 	bl	80024b2 <HAL_DMA_Abort_IT>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_SPI_IRQHandler+0x1fc>)
 8002e5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fdcf 	bl	8001a06 <HAL_DMA_Abort_IT>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
<<<<<<< Updated upstream
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003912:	2b00      	cmp	r3, #0
 8003914:	d016      	beq.n	8003944 <HAL_SPI_IRQHandler+0x1f0>
=======
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d016      	beq.n	8002eb0 <HAL_SPI_IRQHandler+0x1f0>
>>>>>>> Stashed changes
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
<<<<<<< Updated upstream
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391a:	4a0d      	ldr	r2, [pc, #52]	; (8003950 <HAL_SPI_IRQHandler+0x1fc>)
 800391c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe fdc5 	bl	80024b2 <HAL_DMA_Abort_IT>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800393a:	e003      	b.n	8003944 <HAL_SPI_IRQHandler+0x1f0>
=======
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e86:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <HAL_SPI_IRQHandler+0x1fc>)
 8002e88:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fdb9 	bl	8001a06 <HAL_DMA_Abort_IT>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002ea6:	e003      	b.n	8002eb0 <HAL_SPI_IRQHandler+0x1f0>
>>>>>>> Stashed changes
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
<<<<<<< Updated upstream
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f809 	bl	8003954 <HAL_SPI_ErrorCallback>
=======
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f809 	bl	8002ec0 <HAL_SPI_ErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
<<<<<<< Updated upstream
 8003942:	e000      	b.n	8003946 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003944:	bf00      	nop
    return;
 8003946:	bf00      	nop
  }
}
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	08003969 	.word	0x08003969

08003954 <HAL_SPI_ErrorCallback>:
=======
 8002eae:	e000      	b.n	8002eb2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002eb0:	bf00      	nop
    return;
 8002eb2:	bf00      	nop
  }
}
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	08002ed5 	.word	0x08002ed5

08002ec0 <HAL_SPI_ErrorCallback>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
=======
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
<<<<<<< Updated upstream
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <SPI_DMAAbortOnError>:
=======
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <SPI_DMAAbortOnError>:
>>>>>>> Stashed changes
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	86da      	strh	r2, [r3, #54]	; 0x36
=======
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	86da      	strh	r2, [r3, #54]	; 0x36
>>>>>>> Stashed changes

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
<<<<<<< Updated upstream
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f7ff ffe6 	bl	8003954 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <SPI_WaitFlagStateUntilTimeout>:
=======
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7ff ffe6 	bl	8002ec0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	71fb      	strb	r3, [r7, #7]
=======
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< Updated upstream
 80039a0:	f7fe fba4 	bl	80020ec <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039b0:	f7fe fb9c 	bl	80020ec <HAL_GetTick>
 80039b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039b6:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	015b      	lsls	r3, r3, #5
 80039bc:	0d1b      	lsrs	r3, r3, #20
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
 80039c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039c6:	e054      	b.n	8003a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d050      	beq.n	8003a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039d0:	f7fe fb8c 	bl	80020ec <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d902      	bls.n	80039e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d13d      	bne.n	8003a62 <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 8002f0c:	f7fe fb98 	bl	8001640 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	4413      	add	r3, r2
 8002f1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f1c:	f7fe fb90 	bl	8001640 <HAL_GetTick>
 8002f20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f22:	4b39      	ldr	r3, [pc, #228]	; (8003008 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	015b      	lsls	r3, r3, #5
 8002f28:	0d1b      	lsrs	r3, r3, #20
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	fb02 f303 	mul.w	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f32:	e054      	b.n	8002fde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d050      	beq.n	8002fde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f3c:	f7fe fb80 	bl	8001640 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d902      	bls.n	8002f52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d13d      	bne.n	8002fce <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> Stashed changes
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< Updated upstream
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039fe:	d111      	bne.n	8003a24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a08:	d004      	beq.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a12:	d107      	bne.n	8003a24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a22:	601a      	str	r2, [r3, #0]
=======
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f6a:	d111      	bne.n	8002f90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f74:	d004      	beq.n	8002f80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7e:	d107      	bne.n	8002f90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< Updated upstream
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2c:	d10f      	bne.n	8003a4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e017      	b.n	8003a92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	bf0c      	ite	eq
 8003a82:	2301      	moveq	r3, #1
 8003a84:	2300      	movne	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d19b      	bne.n	80039c8 <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f98:	d10f      	bne.n	8002fba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e017      	b.n	8002ffe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d19b      	bne.n	8002f34 <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> Stashed changes
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000004 	.word	0x20000004

08003aa0 <SPI_EndRxTxTransaction>:
=======
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000004 	.word	0x20000004

0800300c <SPI_EndRxTxTransaction>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <SPI_EndRxTxTransaction+0x7c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <SPI_EndRxTxTransaction+0x80>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	0d5b      	lsrs	r3, r3, #21
 8003ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003abc:	fb02 f303 	mul.w	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aca:	d112      	bne.n	8003af2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2180      	movs	r1, #128	; 0x80
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f7ff ff5a 	bl	8003990 <SPI_WaitFlagStateUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae6:	f043 0220 	orr.w	r2, r3, #32
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e00f      	b.n	8003b12 <SPI_EndRxTxTransaction+0x72>
=======
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af02      	add	r7, sp, #8
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <SPI_EndRxTxTransaction+0x7c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1b      	ldr	r2, [pc, #108]	; (800308c <SPI_EndRxTxTransaction+0x80>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0d5b      	lsrs	r3, r3, #21
 8003024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003028:	fb02 f303 	mul.w	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003036:	d112      	bne.n	800305e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2200      	movs	r2, #0
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff ff5a 	bl	8002efc <SPI_WaitFlagStateUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d016      	beq.n	800307c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e00f      	b.n	800307e <SPI_EndRxTxTransaction+0x72>
>>>>>>> Stashed changes
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
<<<<<<< Updated upstream
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <SPI_EndRxTxTransaction+0x6e>
=======
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <SPI_EndRxTxTransaction+0x6e>
>>>>>>> Stashed changes
      {
        break;
      }
      count--;
<<<<<<< Updated upstream
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b08:	2b80      	cmp	r3, #128	; 0x80
 8003b0a:	d0f2      	beq.n	8003af2 <SPI_EndRxTxTransaction+0x52>
 8003b0c:	e000      	b.n	8003b10 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b0e:	bf00      	nop
  }

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000004 	.word	0x20000004
 8003b20:	165e9f81 	.word	0x165e9f81

08003b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e041      	b.n	8003bba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fe f872 	bl	8001c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
=======
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	3b01      	subs	r3, #1
 8003068:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b80      	cmp	r3, #128	; 0x80
 8003076:	d0f2      	beq.n	800305e <SPI_EndRxTxTransaction+0x52>
 8003078:	e000      	b.n	800307c <SPI_EndRxTxTransaction+0x70>
        break;
 800307a:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	4619      	mov	r1, r3
 8003b62:	4610      	mov	r0, r2
 8003b64:	f000 fbb2 	bl	80042cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
<<<<<<< Updated upstream
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d001      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e04e      	b.n	8003c7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <HAL_TIM_Base_Start_IT+0xc4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d022      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x80>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c06:	d01d      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x80>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1f      	ldr	r2, [pc, #124]	; (8003c8c <HAL_TIM_Base_Start_IT+0xc8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d018      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x80>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d013      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x80>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1c      	ldr	r2, [pc, #112]	; (8003c94 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00e      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x80>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1b      	ldr	r2, [pc, #108]	; (8003c98 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d009      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x80>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <HAL_TIM_Base_Start_IT+0xd8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d004      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x80>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a18      	ldr	r2, [pc, #96]	; (8003ca0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d111      	bne.n	8003c68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b06      	cmp	r3, #6
 8003c54:	d010      	beq.n	8003c78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c66:	e007      	b.n	8003c78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40010400 	.word	0x40010400
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40001800 	.word	0x40001800

08003ca4 <HAL_TIM_PWM_Init>:
=======
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000004 	.word	0x20000004
 800308c:	165e9f81 	.word	0x165e9f81

08003090 <HAL_TIM_PWM_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e041      	b.n	8003d3a <HAL_TIM_PWM_Init+0x96>
=======
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e041      	b.n	8003126 <HAL_TIM_PWM_Init+0x96>
>>>>>>> Stashed changes
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< Updated upstream
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd ff90 	bl	8001bf0 <HAL_TIM_PWM_MspInit>
=======
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe f86a 	bl	8001190 <HAL_TIM_PWM_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f000 faf2 	bl	80042cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d122      	bne.n	8003d9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d11b      	bne.n	8003d9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f06f 0202 	mvn.w	r2, #2
 8003d6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fa82 	bl	800428e <HAL_TIM_IC_CaptureCallback>
 8003d8a:	e005      	b.n	8003d98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fa74 	bl	800427a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fa85 	bl	80042a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d122      	bne.n	8003df2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d11b      	bne.n	8003df2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f06f 0204 	mvn.w	r2, #4
 8003dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fa58 	bl	800428e <HAL_TIM_IC_CaptureCallback>
 8003dde:	e005      	b.n	8003dec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fa4a 	bl	800427a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fa5b 	bl	80042a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d122      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d11b      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f06f 0208 	mvn.w	r2, #8
 8003e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fa2e 	bl	800428e <HAL_TIM_IC_CaptureCallback>
 8003e32:	e005      	b.n	8003e40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fa20 	bl	800427a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa31 	bl	80042a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d122      	bne.n	8003e9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b10      	cmp	r3, #16
 8003e60:	d11b      	bne.n	8003e9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f06f 0210 	mvn.w	r2, #16
 8003e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2208      	movs	r2, #8
 8003e70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fa04 	bl	800428e <HAL_TIM_IC_CaptureCallback>
 8003e86:	e005      	b.n	8003e94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f9f6 	bl	800427a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fa07 	bl	80042a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d107      	bne.n	8003ec6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f06f 0201 	mvn.w	r2, #1
 8003ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f9d0 	bl	8004266 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	2b80      	cmp	r3, #128	; 0x80
 8003ed2:	d10e      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b80      	cmp	r3, #128	; 0x80
 8003ee0:	d107      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fdaf 	bl	8004a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d10e      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d107      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f9cc 	bl	80042b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d10e      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d107      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f06f 0220 	mvn.w	r2, #32
 8003f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fd79 	bl	8004a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_TIM_PWM_ConfigChannel>:
=======
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f000 f9b8 	bl	8003444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_TIM_PWM_Start+0x24>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b01      	cmp	r3, #1
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e022      	b.n	800319a <HAL_TIM_PWM_Start+0x6a>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b04      	cmp	r3, #4
 8003158:	d109      	bne.n	800316e <HAL_TIM_PWM_Start+0x3e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	bf14      	ite	ne
 8003166:	2301      	movne	r3, #1
 8003168:	2300      	moveq	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	e015      	b.n	800319a <HAL_TIM_PWM_Start+0x6a>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d109      	bne.n	8003188 <HAL_TIM_PWM_Start+0x58>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b01      	cmp	r3, #1
 800317e:	bf14      	ite	ne
 8003180:	2301      	movne	r3, #1
 8003182:	2300      	moveq	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e008      	b.n	800319a <HAL_TIM_PWM_Start+0x6a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e07c      	b.n	800329c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <HAL_TIM_PWM_Start+0x82>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b0:	e013      	b.n	80031da <HAL_TIM_PWM_Start+0xaa>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d104      	bne.n	80031c2 <HAL_TIM_PWM_Start+0x92>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c0:	e00b      	b.n	80031da <HAL_TIM_PWM_Start+0xaa>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d104      	bne.n	80031d2 <HAL_TIM_PWM_Start+0xa2>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d0:	e003      	b.n	80031da <HAL_TIM_PWM_Start+0xaa>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2201      	movs	r2, #1
 80031e0:	6839      	ldr	r1, [r7, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fb7e 	bl	80038e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2d      	ldr	r2, [pc, #180]	; (80032a4 <HAL_TIM_PWM_Start+0x174>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_TIM_PWM_Start+0xcc>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2c      	ldr	r2, [pc, #176]	; (80032a8 <HAL_TIM_PWM_Start+0x178>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <HAL_TIM_PWM_Start+0xd0>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <HAL_TIM_PWM_Start+0xd2>
 8003200:	2300      	movs	r3, #0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <HAL_TIM_PWM_Start+0x174>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d022      	beq.n	8003266 <HAL_TIM_PWM_Start+0x136>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d01d      	beq.n	8003266 <HAL_TIM_PWM_Start+0x136>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1f      	ldr	r2, [pc, #124]	; (80032ac <HAL_TIM_PWM_Start+0x17c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d018      	beq.n	8003266 <HAL_TIM_PWM_Start+0x136>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <HAL_TIM_PWM_Start+0x180>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_TIM_PWM_Start+0x136>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <HAL_TIM_PWM_Start+0x184>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00e      	beq.n	8003266 <HAL_TIM_PWM_Start+0x136>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <HAL_TIM_PWM_Start+0x178>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d009      	beq.n	8003266 <HAL_TIM_PWM_Start+0x136>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_TIM_PWM_Start+0x188>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_TIM_PWM_Start+0x136>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a16      	ldr	r2, [pc, #88]	; (80032bc <HAL_TIM_PWM_Start+0x18c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d111      	bne.n	800328a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b06      	cmp	r3, #6
 8003276:	d010      	beq.n	800329a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003288:	e007      	b.n	800329a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40010400 	.word	0x40010400
 80032ac:	40000400 	.word	0x40000400
 80032b0:	40000800 	.word	0x40000800
 80032b4:	40000c00 	.word	0x40000c00
 80032b8:	40014000 	.word	0x40014000
 80032bc:	40001800 	.word	0x40001800

080032c0 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< Updated upstream
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	75fb      	strb	r3, [r7, #23]
=======
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e0ae      	b.n	80040d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b0c      	cmp	r3, #12
 8003f7e:	f200 809f 	bhi.w	80040c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f82:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003fbd 	.word	0x08003fbd
 8003f8c:	080040c1 	.word	0x080040c1
 8003f90:	080040c1 	.word	0x080040c1
 8003f94:	080040c1 	.word	0x080040c1
 8003f98:	08003ffd 	.word	0x08003ffd
 8003f9c:	080040c1 	.word	0x080040c1
 8003fa0:	080040c1 	.word	0x080040c1
 8003fa4:	080040c1 	.word	0x080040c1
 8003fa8:	0800403f 	.word	0x0800403f
 8003fac:	080040c1 	.word	0x080040c1
 8003fb0:	080040c1 	.word	0x080040c1
 8003fb4:	080040c1 	.word	0x080040c1
 8003fb8:	0800407f 	.word	0x0800407f
=======
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032da:	2302      	movs	r3, #2
 80032dc:	e0ae      	b.n	800343c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	f200 809f 	bhi.w	800342c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003329 	.word	0x08003329
 80032f8:	0800342d 	.word	0x0800342d
 80032fc:	0800342d 	.word	0x0800342d
 8003300:	0800342d 	.word	0x0800342d
 8003304:	08003369 	.word	0x08003369
 8003308:	0800342d 	.word	0x0800342d
 800330c:	0800342d 	.word	0x0800342d
 8003310:	0800342d 	.word	0x0800342d
 8003314:	080033ab 	.word	0x080033ab
 8003318:	0800342d 	.word	0x0800342d
 800331c:	0800342d 	.word	0x0800342d
 8003320:	0800342d 	.word	0x0800342d
 8003324:	080033eb 	.word	0x080033eb
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fa22 	bl	800440c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0208 	orr.w	r2, r2, #8
 8003fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0204 	bic.w	r2, r2, #4
 8003fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6999      	ldr	r1, [r3, #24]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	619a      	str	r2, [r3, #24]
      break;
 8003ffa:	e064      	b.n	80040c6 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f928 	bl	8003584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0208 	orr.w	r2, r2, #8
 8003342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0204 	bic.w	r2, r2, #4
 8003352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6999      	ldr	r1, [r3, #24]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	619a      	str	r2, [r3, #24]
      break;
 8003366:	e064      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fa72 	bl	80044ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6999      	ldr	r1, [r3, #24]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	021a      	lsls	r2, r3, #8
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	619a      	str	r2, [r3, #24]
      break;
 800403c:	e043      	b.n	80040c6 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f978 	bl	8003664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6999      	ldr	r1, [r3, #24]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	021a      	lsls	r2, r3, #8
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	619a      	str	r2, [r3, #24]
      break;
 80033a8:	e043      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fac7 	bl	80045d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0208 	orr.w	r2, r2, #8
 8004058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69da      	ldr	r2, [r3, #28]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0204 	bic.w	r2, r2, #4
 8004068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69d9      	ldr	r1, [r3, #28]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	61da      	str	r2, [r3, #28]
      break;
 800407c:	e023      	b.n	80040c6 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f9cd 	bl	8003750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0208 	orr.w	r2, r2, #8
 80033c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0204 	bic.w	r2, r2, #4
 80033d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69d9      	ldr	r1, [r3, #28]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	61da      	str	r2, [r3, #28]
      break;
 80033e8:	e023      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fb1b 	bl	80046c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69d9      	ldr	r1, [r3, #28]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	021a      	lsls	r2, r3, #8
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	61da      	str	r2, [r3, #28]
      break;
 80040be:	e002      	b.n	80040c6 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fa21 	bl	8003838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69d9      	ldr	r1, [r3, #28]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	021a      	lsls	r2, r3, #8
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	61da      	str	r2, [r3, #28]
      break;
 800342a:	e002      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 80040c0:	2301      	movs	r3, #1
 80040c2:	75fb      	strb	r3, [r7, #23]
      break;
 80040c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_TIM_ConfigClockSource+0x1c>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e0b4      	b.n	800425e <HAL_TIM_ConfigClockSource+0x186>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800411a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412c:	d03e      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0xd4>
 800412e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004132:	f200 8087 	bhi.w	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 8004136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413a:	f000 8086 	beq.w	800424a <HAL_TIM_ConfigClockSource+0x172>
 800413e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004142:	d87f      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 8004144:	2b70      	cmp	r3, #112	; 0x70
 8004146:	d01a      	beq.n	800417e <HAL_TIM_ConfigClockSource+0xa6>
 8004148:	2b70      	cmp	r3, #112	; 0x70
 800414a:	d87b      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 800414c:	2b60      	cmp	r3, #96	; 0x60
 800414e:	d050      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004150:	2b60      	cmp	r3, #96	; 0x60
 8004152:	d877      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 8004154:	2b50      	cmp	r3, #80	; 0x50
 8004156:	d03c      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004158:	2b50      	cmp	r3, #80	; 0x50
 800415a:	d873      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 800415c:	2b40      	cmp	r3, #64	; 0x40
 800415e:	d058      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x13a>
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d86f      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 8004164:	2b30      	cmp	r3, #48	; 0x30
 8004166:	d064      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x15a>
 8004168:	2b30      	cmp	r3, #48	; 0x30
 800416a:	d86b      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 800416c:	2b20      	cmp	r3, #32
 800416e:	d060      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x15a>
 8004170:	2b20      	cmp	r3, #32
 8004172:	d867      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d05c      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x15a>
 8004178:	2b10      	cmp	r3, #16
 800417a:	d05a      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x15a>
 800417c:	e062      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6899      	ldr	r1, [r3, #8]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f000 fb67 	bl	8004860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	609a      	str	r2, [r3, #8]
      break;
 80041aa:	e04f      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	6899      	ldr	r1, [r3, #8]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f000 fb50 	bl	8004860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ce:	609a      	str	r2, [r3, #8]
      break;
 80041d0:	e03c      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	461a      	mov	r2, r3
 80041e0:	f000 fac4 	bl	800476c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2150      	movs	r1, #80	; 0x50
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fb1d 	bl	800482a <TIM_ITRx_SetConfig>
      break;
 80041f0:	e02c      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	461a      	mov	r2, r3
 8004200:	f000 fae3 	bl	80047ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2160      	movs	r1, #96	; 0x60
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fb0d 	bl	800482a <TIM_ITRx_SetConfig>
      break;
 8004210:	e01c      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	461a      	mov	r2, r3
 8004220:	f000 faa4 	bl	800476c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2140      	movs	r1, #64	; 0x40
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fafd 	bl	800482a <TIM_ITRx_SetConfig>
      break;
 8004230:	e00c      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f000 faf4 	bl	800482a <TIM_ITRx_SetConfig>
      break;
 8004242:	e003      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      break;
 8004248:	e000      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800424a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <TIM_Base_SetConfig>:
=======
 800342c:	2301      	movs	r3, #1
 800342e:	75fb      	strb	r3, [r7, #23]
      break;
 8003430:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a40      	ldr	r2, [pc, #256]	; (80043e0 <TIM_Base_SetConfig+0x114>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d013      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ea:	d00f      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a3d      	ldr	r2, [pc, #244]	; (80043e4 <TIM_Base_SetConfig+0x118>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00b      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a3c      	ldr	r2, [pc, #240]	; (80043e8 <TIM_Base_SetConfig+0x11c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d007      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a3b      	ldr	r2, [pc, #236]	; (80043ec <TIM_Base_SetConfig+0x120>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d003      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a3a      	ldr	r2, [pc, #232]	; (80043f0 <TIM_Base_SetConfig+0x124>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d108      	bne.n	800431e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a2f      	ldr	r2, [pc, #188]	; (80043e0 <TIM_Base_SetConfig+0x114>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d02b      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d027      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <TIM_Base_SetConfig+0x118>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d023      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a2b      	ldr	r2, [pc, #172]	; (80043e8 <TIM_Base_SetConfig+0x11c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d01f      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a2a      	ldr	r2, [pc, #168]	; (80043ec <TIM_Base_SetConfig+0x120>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01b      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <TIM_Base_SetConfig+0x124>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d017      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a28      	ldr	r2, [pc, #160]	; (80043f4 <TIM_Base_SetConfig+0x128>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d013      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a27      	ldr	r2, [pc, #156]	; (80043f8 <TIM_Base_SetConfig+0x12c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00f      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a26      	ldr	r2, [pc, #152]	; (80043fc <TIM_Base_SetConfig+0x130>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00b      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a25      	ldr	r2, [pc, #148]	; (8004400 <TIM_Base_SetConfig+0x134>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a24      	ldr	r2, [pc, #144]	; (8004404 <TIM_Base_SetConfig+0x138>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a23      	ldr	r2, [pc, #140]	; (8004408 <TIM_Base_SetConfig+0x13c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d108      	bne.n	8004390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
=======
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a40      	ldr	r2, [pc, #256]	; (8003558 <TIM_Base_SetConfig+0x114>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003462:	d00f      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a3d      	ldr	r2, [pc, #244]	; (800355c <TIM_Base_SetConfig+0x118>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00b      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a3c      	ldr	r2, [pc, #240]	; (8003560 <TIM_Base_SetConfig+0x11c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d007      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a3b      	ldr	r2, [pc, #236]	; (8003564 <TIM_Base_SetConfig+0x120>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a3a      	ldr	r2, [pc, #232]	; (8003568 <TIM_Base_SetConfig+0x124>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d108      	bne.n	8003496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2f      	ldr	r2, [pc, #188]	; (8003558 <TIM_Base_SetConfig+0x114>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d02b      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d027      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2c      	ldr	r2, [pc, #176]	; (800355c <TIM_Base_SetConfig+0x118>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d023      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <TIM_Base_SetConfig+0x11c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2a      	ldr	r2, [pc, #168]	; (8003564 <TIM_Base_SetConfig+0x120>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01b      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a29      	ldr	r2, [pc, #164]	; (8003568 <TIM_Base_SetConfig+0x124>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d017      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a28      	ldr	r2, [pc, #160]	; (800356c <TIM_Base_SetConfig+0x128>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a27      	ldr	r2, [pc, #156]	; (8003570 <TIM_Base_SetConfig+0x12c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00f      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a26      	ldr	r2, [pc, #152]	; (8003574 <TIM_Base_SetConfig+0x130>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00b      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a25      	ldr	r2, [pc, #148]	; (8003578 <TIM_Base_SetConfig+0x134>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d007      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a24      	ldr	r2, [pc, #144]	; (800357c <TIM_Base_SetConfig+0x138>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d003      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a23      	ldr	r2, [pc, #140]	; (8003580 <TIM_Base_SetConfig+0x13c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d108      	bne.n	8003508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <TIM_Base_SetConfig+0x114>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_Base_SetConfig+0xf8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a0c      	ldr	r2, [pc, #48]	; (80043f0 <TIM_Base_SetConfig+0x124>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d103      	bne.n	80043cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <TIM_Base_SetConfig+0x114>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <TIM_Base_SetConfig+0xf8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a0c      	ldr	r2, [pc, #48]	; (8003568 <TIM_Base_SetConfig+0x124>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d103      	bne.n	8003544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	615a      	str	r2, [r3, #20]
}
 80043d2:	bf00      	nop
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800
 80043ec:	40000c00 	.word	0x40000c00
 80043f0:	40010400 	.word	0x40010400
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800
 8004400:	40001800 	.word	0x40001800
 8004404:	40001c00 	.word	0x40001c00
 8004408:	40002000 	.word	0x40002000

0800440c <TIM_OC1_SetConfig>:
=======
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	615a      	str	r2, [r3, #20]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40010000 	.word	0x40010000
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40000c00 	.word	0x40000c00
 8003568:	40010400 	.word	0x40010400
 800356c:	40014000 	.word	0x40014000
 8003570:	40014400 	.word	0x40014400
 8003574:	40014800 	.word	0x40014800
 8003578:	40001800 	.word	0x40001800
 800357c:	40001c00 	.word	0x40001c00
 8003580:	40002000 	.word	0x40002000

08003584 <TIM_OC1_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
=======
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< Updated upstream
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0303 	bic.w	r3, r3, #3
 8004442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f023 0302 	bic.w	r3, r3, #2
 8004454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a20      	ldr	r2, [pc, #128]	; (80044e4 <TIM_OC1_SetConfig+0xd8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d003      	beq.n	8004470 <TIM_OC1_SetConfig+0x64>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a1f      	ldr	r2, [pc, #124]	; (80044e8 <TIM_OC1_SetConfig+0xdc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10c      	bne.n	800448a <TIM_OC1_SetConfig+0x7e>
=======
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f023 0201 	bic.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f023 0302 	bic.w	r3, r3, #2
 80035cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a20      	ldr	r2, [pc, #128]	; (800365c <TIM_OC1_SetConfig+0xd8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d003      	beq.n	80035e8 <TIM_OC1_SetConfig+0x64>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a1f      	ldr	r2, [pc, #124]	; (8003660 <TIM_OC1_SetConfig+0xdc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d10c      	bne.n	8003602 <TIM_OC1_SetConfig+0x7e>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< Updated upstream
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 0308 	bic.w	r3, r3, #8
 8004476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <TIM_OC1_SetConfig+0xd8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d003      	beq.n	800449a <TIM_OC1_SetConfig+0x8e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <TIM_OC1_SetConfig+0xdc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d111      	bne.n	80044be <TIM_OC1_SetConfig+0xb2>
=======
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f023 0308 	bic.w	r3, r3, #8
 80035ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a15      	ldr	r2, [pc, #84]	; (800365c <TIM_OC1_SetConfig+0xd8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_OC1_SetConfig+0x8e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <TIM_OC1_SetConfig+0xdc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d111      	bne.n	8003636 <TIM_OC1_SetConfig+0xb2>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< Updated upstream
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
=======
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	621a      	str	r2, [r3, #32]
}
 80044d8:	bf00      	nop
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40010400 	.word	0x40010400

080044ec <TIM_OC2_SetConfig>:
=======
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	621a      	str	r2, [r3, #32]
}
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40010000 	.word	0x40010000
 8003660:	40010400 	.word	0x40010400

08003664 <TIM_OC2_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
=======
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f023 0210 	bic.w	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0320 	bic.w	r3, r3, #32
 8004536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a22      	ldr	r2, [pc, #136]	; (80045d0 <TIM_OC2_SetConfig+0xe4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_OC2_SetConfig+0x68>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a21      	ldr	r2, [pc, #132]	; (80045d4 <TIM_OC2_SetConfig+0xe8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d10d      	bne.n	8004570 <TIM_OC2_SetConfig+0x84>
=======
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f023 0210 	bic.w	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0320 	bic.w	r3, r3, #32
 80036ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a22      	ldr	r2, [pc, #136]	; (8003748 <TIM_OC2_SetConfig+0xe4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_OC2_SetConfig+0x68>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a21      	ldr	r2, [pc, #132]	; (800374c <TIM_OC2_SetConfig+0xe8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10d      	bne.n	80036e8 <TIM_OC2_SetConfig+0x84>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< Updated upstream
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800455a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456e:	617b      	str	r3, [r7, #20]
=======
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e6:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< Updated upstream
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a17      	ldr	r2, [pc, #92]	; (80045d0 <TIM_OC2_SetConfig+0xe4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d003      	beq.n	8004580 <TIM_OC2_SetConfig+0x94>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <TIM_OC2_SetConfig+0xe8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d113      	bne.n	80045a8 <TIM_OC2_SetConfig+0xbc>
=======
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a17      	ldr	r2, [pc, #92]	; (8003748 <TIM_OC2_SetConfig+0xe4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d003      	beq.n	80036f8 <TIM_OC2_SetConfig+0x94>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a16      	ldr	r2, [pc, #88]	; (800374c <TIM_OC2_SetConfig+0xe8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d113      	bne.n	8003720 <TIM_OC2_SetConfig+0xbc>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< Updated upstream
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800458e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
=======
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40010400 	.word	0x40010400

080045d8 <TIM_OC3_SetConfig>:
=======
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40010400 	.word	0x40010400

08003750 <TIM_OC3_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
=======
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< Updated upstream
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <TIM_OC3_SetConfig+0xe0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d003      	beq.n	800463e <TIM_OC3_SetConfig+0x66>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a20      	ldr	r2, [pc, #128]	; (80046bc <TIM_OC3_SetConfig+0xe4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d10d      	bne.n	800465a <TIM_OC3_SetConfig+0x82>
=======
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0303 	bic.w	r3, r3, #3
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a21      	ldr	r2, [pc, #132]	; (8003830 <TIM_OC3_SetConfig+0xe0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d003      	beq.n	80037b6 <TIM_OC3_SetConfig+0x66>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a20      	ldr	r2, [pc, #128]	; (8003834 <TIM_OC3_SetConfig+0xe4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d10d      	bne.n	80037d2 <TIM_OC3_SetConfig+0x82>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< Updated upstream
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <TIM_OC3_SetConfig+0xe0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_OC3_SetConfig+0x92>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a15      	ldr	r2, [pc, #84]	; (80046bc <TIM_OC3_SetConfig+0xe4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d113      	bne.n	8004692 <TIM_OC3_SetConfig+0xba>
=======
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a16      	ldr	r2, [pc, #88]	; (8003830 <TIM_OC3_SetConfig+0xe0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <TIM_OC3_SetConfig+0x92>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a15      	ldr	r2, [pc, #84]	; (8003834 <TIM_OC3_SetConfig+0xe4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d113      	bne.n	800380a <TIM_OC3_SetConfig+0xba>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< Updated upstream
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
=======
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	621a      	str	r2, [r3, #32]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40010400 	.word	0x40010400

080046c0 <TIM_OC4_SetConfig>:
=======
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	621a      	str	r2, [r3, #32]
}
 8003824:	bf00      	nop
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40010000 	.word	0x40010000
 8003834:	40010400 	.word	0x40010400

08003838 <TIM_OC4_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
=======
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< Updated upstream
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800470a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	031b      	lsls	r3, r3, #12
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a12      	ldr	r2, [pc, #72]	; (8004764 <TIM_OC4_SetConfig+0xa4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d003      	beq.n	8004728 <TIM_OC4_SetConfig+0x68>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a11      	ldr	r2, [pc, #68]	; (8004768 <TIM_OC4_SetConfig+0xa8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d109      	bne.n	800473c <TIM_OC4_SetConfig+0x7c>
=======
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	031b      	lsls	r3, r3, #12
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a12      	ldr	r2, [pc, #72]	; (80038dc <TIM_OC4_SetConfig+0xa4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_OC4_SetConfig+0x68>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a11      	ldr	r2, [pc, #68]	; (80038e0 <TIM_OC4_SetConfig+0xa8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d109      	bne.n	80038b4 <TIM_OC4_SetConfig+0x7c>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< Updated upstream
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800472e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	019b      	lsls	r3, r3, #6
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
=======
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40010000 	.word	0x40010000
 8004768:	40010400 	.word	0x40010400

0800476c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f023 0201 	bic.w	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f023 030a 	bic.w	r3, r3, #10
 80047a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b087      	sub	sp, #28
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f023 0210 	bic.w	r2, r3, #16
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	031b      	lsls	r3, r3, #12
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004806:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	621a      	str	r2, [r3, #32]
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800482a:	b480      	push	{r7}
 800482c:	b085      	sub	sp, #20
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	f043 0307 	orr.w	r3, r3, #7
 800484c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	609a      	str	r2, [r3, #8]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800487a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	021a      	lsls	r2, r3, #8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	431a      	orrs	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4313      	orrs	r3, r2
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	609a      	str	r2, [r3, #8]
}
 8004894:	bf00      	nop
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40010000 	.word	0x40010000
 80038e0:	40010400 	.word	0x40010400

080038e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	2201      	movs	r2, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1a      	ldr	r2, [r3, #32]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	43db      	mvns	r3, r3
 8003906:	401a      	ands	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a1a      	ldr	r2, [r3, #32]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	431a      	orrs	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
=======
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e05a      	b.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a21      	ldr	r2, [pc, #132]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d022      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004904:	d01d      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1d      	ldr	r2, [pc, #116]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d018      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1b      	ldr	r2, [pc, #108]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1a      	ldr	r2, [pc, #104]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00e      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a18      	ldr	r2, [pc, #96]	; (800498c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a17      	ldr	r2, [pc, #92]	; (8004990 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a15      	ldr	r2, [pc, #84]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d10c      	bne.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4313      	orrs	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	609a      	str	r2, [r3, #8]
=======
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003944:	2302      	movs	r3, #2
 8003946:	e05a      	b.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a21      	ldr	r2, [pc, #132]	; (8003a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d022      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d01d      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d018      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1b      	ldr	r2, [pc, #108]	; (8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1a      	ldr	r2, [pc, #104]	; (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00e      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d009      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d10c      	bne.n	80039ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40010000 	.word	0x40010000
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40000c00 	.word	0x40000c00
 800498c:	40010400 	.word	0x40010400
 8004990:	40014000 	.word	0x40014000
 8004994:	40001800 	.word	0x40001800

08004998 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	40010400 	.word	0x40010400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40001800 	.word	0x40001800

08003a28 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> Stashed changes
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< Updated upstream
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
=======
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e03d      	b.n	8004a30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e03d      	b.n	8003ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< Updated upstream
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
=======
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< Updated upstream
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_UART_Init>:
=======
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_UART_Init>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e03f      	b.n	8004af6 <HAL_UART_Init+0x92>
=======
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e03f      	b.n	8003b5e <HAL_UART_Init+0x92>
>>>>>>> Stashed changes
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fd f9b0 	bl	8001df0 <HAL_UART_MspInit>
=======
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd fc26 	bl	8001344 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2224      	movs	r2, #36	; 0x24
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fe39 	bl	8005720 <UART_SetConfig>
=======
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 ff25 	bl	8004960 <UART_SetConfig>
>>>>>>> Stashed changes

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695a      	ldr	r2, [r3, #20]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_HalfDuplex_Init>:
=======
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_HalfDuplex_Init>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e047      	b.n	8004ba0 <HAL_HalfDuplex_Init+0xa2>
=======
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e047      	b.n	8003c08 <HAL_HalfDuplex_Init+0xa2>
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fd f963 	bl	8001df0 <HAL_UART_MspInit>
=======
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fd fbd9 	bl	8001344 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2224      	movs	r2, #36	; 0x24
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b40:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fdec 	bl	8005720 <UART_SetConfig>
=======
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2224      	movs	r2, #36	; 0x24
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fed8 	bl	8004960 <UART_SetConfig>
>>>>>>> Stashed changes

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004b66:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0208 	orr.w	r2, r2, #8
 8004b76:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b86:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_UART_Transmit>:
=======
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bbe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003bce:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0208 	orr.w	r2, r2, #8
 8003bde:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_UART_Transmit>:
>>>>>>> Stashed changes
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d17c      	bne.n	8004cc2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_UART_Transmit+0x2c>
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e075      	b.n	8004cc4 <HAL_UART_Transmit+0x11c>
=======
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	; 0x28
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d17c      	bne.n	8003d2a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_UART_Transmit+0x2c>
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e075      	b.n	8003d2c <HAL_UART_Transmit+0x11c>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_UART_Transmit+0x3e>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e06e      	b.n	8004cc4 <HAL_UART_Transmit+0x11c>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2221      	movs	r2, #33	; 0x21
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bfc:	f7fd fa76 	bl	80020ec <HAL_GetTick>
 8004c00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	88fa      	ldrh	r2, [r7, #6]
 8004c06:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c16:	d108      	bne.n	8004c2a <HAL_UART_Transmit+0x82>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	61bb      	str	r3, [r7, #24]
 8004c28:	e003      	b.n	8004c32 <HAL_UART_Transmit+0x8a>
=======
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_UART_Transmit+0x3e>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e06e      	b.n	8003d2c <HAL_UART_Transmit+0x11c>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2221      	movs	r2, #33	; 0x21
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c64:	f7fd fcec 	bl	8001640 <HAL_GetTick>
 8003c68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	88fa      	ldrh	r2, [r7, #6]
 8003c6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d108      	bne.n	8003c92 <HAL_UART_Transmit+0x82>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d104      	bne.n	8003c92 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	e003      	b.n	8003c9a <HAL_UART_Transmit+0x8a>
>>>>>>> Stashed changes
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< Updated upstream
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61bb      	str	r3, [r7, #24]
=======
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< Updated upstream
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c3a:	e02a      	b.n	8004c92 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2200      	movs	r2, #0
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fb28 	bl	800529c <UART_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e036      	b.n	8004cc4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10b      	bne.n	8004c74 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c6a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	3302      	adds	r3, #2
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	e007      	b.n	8004c84 <HAL_UART_Transmit+0xdc>
=======
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ca2:	e02a      	b.n	8003cfa <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2200      	movs	r2, #0
 8003cac:	2180      	movs	r1, #128	; 0x80
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fc14 	bl	80044dc <UART_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e036      	b.n	8003d2c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	e007      	b.n	8003cec <HAL_UART_Transmit+0xdc>
>>>>>>> Stashed changes
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< Updated upstream
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	781a      	ldrb	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3301      	adds	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1cf      	bne.n	8004c3c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2140      	movs	r1, #64	; 0x40
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 faf8 	bl	800529c <UART_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e006      	b.n	8004cc4 <HAL_UART_Transmit+0x11c>
=======
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	781a      	ldrb	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1cf      	bne.n	8003ca4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2140      	movs	r1, #64	; 0x40
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fbe4 	bl	80044dc <UART_WaitOnFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e006      	b.n	8003d2c <HAL_UART_Transmit+0x11c>
>>>>>>> Stashed changes
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <HAL_UART_Transmit+0x11c>
=======
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_UART_Transmit+0x11c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_UART_Receive_IT>:
=======
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UART_Receive_IT>:
>>>>>>> Stashed changes
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d11d      	bne.n	8004d22 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_UART_Receive_IT+0x26>
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e016      	b.n	8004d24 <HAL_UART_Receive_IT+0x58>
=======
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d11d      	bne.n	8003d8a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_UART_Receive_IT+0x26>
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e016      	b.n	8003d8c <HAL_UART_Receive_IT+0x58>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_UART_Receive_IT+0x38>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e00f      	b.n	8004d24 <HAL_UART_Receive_IT+0x58>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	461a      	mov	r2, r3
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fb2d 	bl	8005378 <UART_Start_Receive_IT>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	e000      	b.n	8004d24 <HAL_UART_Receive_IT+0x58>
=======
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_UART_Receive_IT+0x38>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e00f      	b.n	8003d8c <HAL_UART_Receive_IT+0x58>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fc19 	bl	80045b8 <UART_Start_Receive_IT>
 8003d86:	4603      	mov	r3, r0
 8003d88:	e000      	b.n	8003d8c <HAL_UART_Receive_IT+0x58>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8004d22:	2302      	movs	r3, #2
  }
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_UART_IRQHandler>:
=======
 8003d8a:	2302      	movs	r3, #2
  }
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b0a0      	sub	sp, #128	; 0x80
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8003dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dae:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8003db2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003dbc:	66ba      	str	r2, [r7, #104]	; 0x68
 8003dbe:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003dc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3314      	adds	r3, #20
 8003dd6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3314      	adds	r3, #20
 8003dee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003df0:	657a      	str	r2, [r7, #84]	; 0x54
 8003df2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003df6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e5      	bne.n	8003dd0 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d119      	bne.n	8003e40 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	f023 0310 	bic.w	r3, r3, #16
 8003e22:	677b      	str	r3, [r7, #116]	; 0x74
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e2c:	643a      	str	r2, [r7, #64]	; 0x40
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e5      	bne.n	8003e0c <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b80      	cmp	r3, #128	; 0x80
 8003e4c:	d136      	bne.n	8003ebc <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3314      	adds	r3, #20
 8003e54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e64:	673b      	str	r3, [r7, #112]	; 0x70
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3314      	adds	r3, #20
 8003e6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e5      	bne.n	8003e4e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d018      	beq.n	8003ebc <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	2200      	movs	r2, #0
 8003e90:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd fd45 	bl	8001926 <HAL_DMA_Abort>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00c      	beq.n	8003ebc <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fd fdcf 	bl	8001a4a <HAL_DMA_GetError>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d104      	bne.n	8003ebc <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e052      	b.n	8003f62 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b40      	cmp	r3, #64	; 0x40
 8003ec8:	d136      	bne.n	8003f38 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3314      	adds	r3, #20
 8003ed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3314      	adds	r3, #20
 8003ee8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eea:	61ba      	str	r2, [r7, #24]
 8003eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	6979      	ldr	r1, [r7, #20]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e5      	bne.n	8003eca <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d018      	beq.n	8003f38 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fd fd07 	bl	8001926 <HAL_DMA_Abort>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00c      	beq.n	8003f38 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd fd91 	bl	8001a4a <HAL_DMA_GetError>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d104      	bne.n	8003f38 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2210      	movs	r2, #16
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e014      	b.n	8003f62 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3780      	adds	r7, #128	; 0x80
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b0ba      	sub	sp, #232	; 0xe8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_UART_IRQHandler+0x66>
 8004d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fc0d 	bl	80055aa <UART_Receive_IT>
      return;
 8004d90:	e256      	b.n	8005240 <HAL_UART_IRQHandler+0x514>
=======
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b0ba      	sub	sp, #232	; 0xe8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x66>
 8003fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fc0d 	bl	80047ea <UART_Receive_IT>
      return;
 8003fd0:	e256      	b.n	8004480 <HAL_UART_IRQHandler+0x514>
>>>>>>> Stashed changes
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
<<<<<<< Updated upstream
 8004d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80de 	beq.w	8004f58 <HAL_UART_IRQHandler+0x22c>
 8004d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80d1 	beq.w	8004f58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00b      	beq.n	8004dda <HAL_UART_IRQHandler+0xae>
 8004dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f043 0201 	orr.w	r2, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8003fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80de 	beq.w	8004198 <HAL_UART_IRQHandler+0x22c>
 8003fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80d1 	beq.w	8004198 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_UART_IRQHandler+0xae>
 8004002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< Updated upstream
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <HAL_UART_IRQHandler+0xd2>
 8004de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f043 0202 	orr.w	r2, r3, #2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <HAL_UART_IRQHandler+0xd2>
 8004026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f043 0202 	orr.w	r2, r3, #2
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< Updated upstream
 8004dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00b      	beq.n	8004e22 <HAL_UART_IRQHandler+0xf6>
 8004e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f043 0204 	orr.w	r2, r3, #4
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_UART_IRQHandler+0xf6>
 800404a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f043 0204 	orr.w	r2, r3, #4
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
<<<<<<< Updated upstream
 8004e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d011      	beq.n	8004e52 <HAL_UART_IRQHandler+0x126>
 8004e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d105      	bne.n	8004e46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f043 0208 	orr.w	r2, r3, #8
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8004062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d011      	beq.n	8004092 <HAL_UART_IRQHandler+0x126>
 800406e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d105      	bne.n	8004086 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800407a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f043 0208 	orr.w	r2, r3, #8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 81ed 	beq.w	8005236 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_UART_IRQHandler+0x14e>
 8004e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fb98 	bl	80055aa <UART_Receive_IT>
=======
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 81ed 	beq.w	8004476 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_UART_IRQHandler+0x14e>
 80040a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fb98 	bl	80047ea <UART_Receive_IT>
>>>>>>> Stashed changes
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d103      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x17a>
 8004e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d04f      	beq.n	8004f46 <HAL_UART_IRQHandler+0x21a>
=======
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_UART_IRQHandler+0x17a>
 80040de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d04f      	beq.n	8004186 <HAL_UART_IRQHandler+0x21a>
>>>>>>> Stashed changes
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 faa0 	bl	80053ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb6:	2b40      	cmp	r3, #64	; 0x40
 8004eb8:	d141      	bne.n	8004f3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3314      	adds	r3, #20
 8004ec0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3314      	adds	r3, #20
 8004ee2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ee6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004eea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ef2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1d9      	bne.n	8004eba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d013      	beq.n	8004f36 <HAL_UART_IRQHandler+0x20a>
=======
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 faa0 	bl	800462c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d141      	bne.n	800417e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3314      	adds	r3, #20
 8004100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3314      	adds	r3, #20
 8004122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004126:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800412a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800413e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1d9      	bne.n	80040fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	2b00      	cmp	r3, #0
 800414c:	d013      	beq.n	8004176 <HAL_UART_IRQHandler+0x20a>
>>>>>>> Stashed changes
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< Updated upstream
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	4a7d      	ldr	r2, [pc, #500]	; (8005108 <HAL_UART_IRQHandler+0x3dc>)
 8004f14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fd fac9 	bl	80024b2 <HAL_DMA_Abort_IT>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d016      	beq.n	8004f54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f30:	4610      	mov	r0, r2
 8004f32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f34:	e00e      	b.n	8004f54 <HAL_UART_IRQHandler+0x228>
=======
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	4a7d      	ldr	r2, [pc, #500]	; (8004348 <HAL_UART_IRQHandler+0x3dc>)
 8004154:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	4618      	mov	r0, r3
 800415c:	f7fd fc53 	bl	8001a06 <HAL_DMA_Abort_IT>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d016      	beq.n	8004194 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004170:	4610      	mov	r0, r2
 8004172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	e00e      	b.n	8004194 <HAL_UART_IRQHandler+0x228>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f99a 	bl	8005270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	e00a      	b.n	8004f54 <HAL_UART_IRQHandler+0x228>
=======
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f99a 	bl	80044b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417c:	e00a      	b.n	8004194 <HAL_UART_IRQHandler+0x228>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f996 	bl	8005270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f44:	e006      	b.n	8004f54 <HAL_UART_IRQHandler+0x228>
=======
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f996 	bl	80044b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	e006      	b.n	8004194 <HAL_UART_IRQHandler+0x228>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f992 	bl	8005270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f52:	e170      	b.n	8005236 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	bf00      	nop
    return;
 8004f56:	e16e      	b.n	8005236 <HAL_UART_IRQHandler+0x50a>
=======
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f992 	bl	80044b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004192:	e170      	b.n	8004476 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	bf00      	nop
    return;
 8004196:	e16e      	b.n	8004476 <HAL_UART_IRQHandler+0x50a>
>>>>>>> Stashed changes
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	f040 814a 	bne.w	80051f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8143 	beq.w	80051f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 813c 	beq.w	80051f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	f040 80b4 	bne.w	800510c <HAL_UART_IRQHandler+0x3e0>
=======
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	2b01      	cmp	r3, #1
 800419e:	f040 814a 	bne.w	8004436 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8143 	beq.w	8004436 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 813c 	beq.w	8004436 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	f040 80b4 	bne.w	800434c <HAL_UART_IRQHandler+0x3e0>
>>>>>>> Stashed changes
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< Updated upstream
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 8140 	beq.w	800523a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	f080 8139 	bcs.w	800523a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fda:	f000 8088 	beq.w	80050ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	330c      	adds	r3, #12
 8004fe4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800500a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800500e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005016:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005022:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1d9      	bne.n	8004fde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3314      	adds	r3, #20
 8005030:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800503a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800503c:	f023 0301 	bic.w	r3, r3, #1
 8005040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3314      	adds	r3, #20
 800504a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800504e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005052:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005056:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1e1      	bne.n	800502a <HAL_UART_IRQHandler+0x2fe>
=======
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8140 	beq.w	800447a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004202:	429a      	cmp	r2, r3
 8004204:	f080 8139 	bcs.w	800447a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800420e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421a:	f000 8088 	beq.w	800432e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	330c      	adds	r3, #12
 8004224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004234:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800423c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800424a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800424e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004256:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1d9      	bne.n	800421e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3314      	adds	r3, #20
 8004270:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800427a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3314      	adds	r3, #20
 800428a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800428e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004292:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004296:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e1      	bne.n	800426a <HAL_UART_IRQHandler+0x2fe>
>>>>>>> Stashed changes

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3314      	adds	r3, #20
 800506c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3314      	adds	r3, #20
 8005086:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800508a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800508c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005090:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e3      	bne.n	8005066 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	330c      	adds	r3, #12
 80050b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050be:	f023 0310 	bic.w	r3, r3, #16
 80050c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	330c      	adds	r3, #12
 80050cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80050d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e3      	bne.n	80050ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fd f972 	bl	80023d2 <HAL_DMA_Abort>
=======
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3314      	adds	r3, #20
 80042ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3314      	adds	r3, #20
 80042c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e3      	bne.n	80042a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fe:	f023 0310 	bic.w	r3, r3, #16
 8004302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004310:	65ba      	str	r2, [r7, #88]	; 0x58
 8004312:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004316:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800431e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e3      	bne.n	80042ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd fafc 	bl	8001926 <HAL_DMA_Abort>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< Updated upstream
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	4619      	mov	r1, r3
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f8c0 	bl	8005284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005104:	e099      	b.n	800523a <HAL_UART_IRQHandler+0x50e>
 8005106:	bf00      	nop
 8005108:	080054b3 	.word	0x080054b3
=======
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004336:	b29b      	uxth	r3, r3
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	b29b      	uxth	r3, r3
 800433c:	4619      	mov	r1, r3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8c0 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004344:	e099      	b.n	800447a <HAL_UART_IRQHandler+0x50e>
 8004346:	bf00      	nop
 8004348:	080046f3 	.word	0x080046f3
>>>>>>> Stashed changes
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< Updated upstream
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005114:	b29b      	uxth	r3, r3
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 808b 	beq.w	800523e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8086 	beq.w	800523e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	330c      	adds	r3, #12
 8005138:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005144:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005148:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005156:	647a      	str	r2, [r7, #68]	; 0x44
 8005158:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800515c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e3      	bne.n	8005132 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3314      	adds	r3, #20
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	623b      	str	r3, [r7, #32]
   return(result);
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3314      	adds	r3, #20
 800518a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800518e:	633a      	str	r2, [r7, #48]	; 0x30
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e3      	bne.n	800516a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	60fb      	str	r3, [r7, #12]
   return(result);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0310 	bic.w	r3, r3, #16
 80051c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051d4:	61fa      	str	r2, [r7, #28]
 80051d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	69b9      	ldr	r1, [r7, #24]
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	617b      	str	r3, [r7, #20]
   return(result);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e3      	bne.n	80051b0 <HAL_UART_IRQHandler+0x484>
=======
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004354:	b29b      	uxth	r3, r3
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 808b 	beq.w	800447e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 8086 	beq.w	800447e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004396:	647a      	str	r2, [r7, #68]	; 0x44
 8004398:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800439c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e3      	bne.n	8004372 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3314      	adds	r3, #20
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	623b      	str	r3, [r7, #32]
   return(result);
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3314      	adds	r3, #20
 80043ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043ce:	633a      	str	r2, [r7, #48]	; 0x30
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e3      	bne.n	80043aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0310 	bic.w	r3, r3, #16
 8004406:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	330c      	adds	r3, #12
 8004410:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004414:	61fa      	str	r2, [r7, #28]
 8004416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	69b9      	ldr	r1, [r7, #24]
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	617b      	str	r3, [r7, #20]
   return(result);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e3      	bne.n	80043f0 <HAL_UART_IRQHandler+0x484>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< Updated upstream
 80051e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f848 	bl	8005284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051f4:	e023      	b.n	800523e <HAL_UART_IRQHandler+0x512>
=======
 8004428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f848 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004434:	e023      	b.n	800447e <HAL_UART_IRQHandler+0x512>
>>>>>>> Stashed changes
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< Updated upstream
 80051f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <HAL_UART_IRQHandler+0x4ea>
 8005202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f963 	bl	80054da <UART_Transmit_IT>
    return;
 8005214:	e014      	b.n	8005240 <HAL_UART_IRQHandler+0x514>
=======
 8004436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_UART_IRQHandler+0x4ea>
 8004442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f963 	bl	800471a <UART_Transmit_IT>
    return;
 8004454:	e014      	b.n	8004480 <HAL_UART_IRQHandler+0x514>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< Updated upstream
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00e      	beq.n	8005240 <HAL_UART_IRQHandler+0x514>
 8005222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f9a3 	bl	800557a <UART_EndTransmit_IT>
    return;
 8005234:	e004      	b.n	8005240 <HAL_UART_IRQHandler+0x514>
    return;
 8005236:	bf00      	nop
 8005238:	e002      	b.n	8005240 <HAL_UART_IRQHandler+0x514>
      return;
 800523a:	bf00      	nop
 800523c:	e000      	b.n	8005240 <HAL_UART_IRQHandler+0x514>
      return;
 800523e:	bf00      	nop
  }
}
 8005240:	37e8      	adds	r7, #232	; 0xe8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop

08005248 <HAL_UART_TxCpltCallback>:
=======
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00e      	beq.n	8004480 <HAL_UART_IRQHandler+0x514>
 8004462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f9a3 	bl	80047ba <UART_EndTransmit_IT>
    return;
 8004474:	e004      	b.n	8004480 <HAL_UART_IRQHandler+0x514>
    return;
 8004476:	bf00      	nop
 8004478:	e002      	b.n	8004480 <HAL_UART_IRQHandler+0x514>
      return;
 800447a:	bf00      	nop
 800447c:	e000      	b.n	8004480 <HAL_UART_IRQHandler+0x514>
      return;
 800447e:	bf00      	nop
  }
}
 8004480:	37e8      	adds	r7, #232	; 0xe8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop

08004488 <HAL_UART_TxCpltCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
=======
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_UART_RxCpltCallback>:
=======
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_UART_RxCpltCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
=======
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_UART_ErrorCallback>:
=======
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
=======
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_UARTEx_RxEventCallback>:
=======
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_UARTEx_RxEventCallback>:
>>>>>>> Stashed changes
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< Updated upstream
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	807b      	strh	r3, [r7, #2]
=======
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <UART_WaitOnFlagUntilTimeout>:
=======
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 800529c:	b580      	push	{r7, lr}
 800529e:	b090      	sub	sp, #64	; 0x40
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ac:	e050      	b.n	8005350 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b4:	d04c      	beq.n	8005350 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <UART_WaitOnFlagUntilTimeout+0x30>
 80052bc:	f7fc ff16 	bl	80020ec <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d241      	bcs.n	8005350 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	330c      	adds	r3, #12
 80052ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052ec:	637a      	str	r2, [r7, #52]	; 0x34
 80052ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e5      	bne.n	80052cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3314      	adds	r3, #20
 8005306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	613b      	str	r3, [r7, #16]
   return(result);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	63bb      	str	r3, [r7, #56]	; 0x38
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3314      	adds	r3, #20
 800531e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005320:	623a      	str	r2, [r7, #32]
 8005322:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	69f9      	ldr	r1, [r7, #28]
 8005326:	6a3a      	ldr	r2, [r7, #32]
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	61bb      	str	r3, [r7, #24]
   return(result);
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e5      	bne.n	8005300 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e00f      	b.n	8005370 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4013      	ands	r3, r2
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	429a      	cmp	r2, r3
 800535e:	bf0c      	ite	eq
 8005360:	2301      	moveq	r3, #1
 8005362:	2300      	movne	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	429a      	cmp	r2, r3
 800536c:	d09f      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0x12>
=======
 80044dc:	b580      	push	{r7, lr}
 80044de:	b090      	sub	sp, #64	; 0x40
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ec:	e050      	b.n	8004590 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d04c      	beq.n	8004590 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d007      	beq.n	800450c <UART_WaitOnFlagUntilTimeout+0x30>
 80044fc:	f7fd f8a0 	bl	8001640 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004508:	429a      	cmp	r2, r3
 800450a:	d241      	bcs.n	8004590 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800452c:	637a      	str	r2, [r7, #52]	; 0x34
 800452e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e5      	bne.n	800450c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	613b      	str	r3, [r7, #16]
   return(result);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f023 0301 	bic.w	r3, r3, #1
 8004556:	63bb      	str	r3, [r7, #56]	; 0x38
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3314      	adds	r3, #20
 800455e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004560:	623a      	str	r2, [r7, #32]
 8004562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	69f9      	ldr	r1, [r7, #28]
 8004566:	6a3a      	ldr	r2, [r7, #32]
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	61bb      	str	r3, [r7, #24]
   return(result);
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e5      	bne.n	8004540 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e00f      	b.n	80045b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4013      	ands	r3, r2
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	429a      	cmp	r2, r3
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d09f      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3740      	adds	r7, #64	; 0x40
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <UART_Start_Receive_IT>:
=======
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3740      	adds	r7, #64	; 0x40
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <UART_Start_Receive_IT>:
>>>>>>> Stashed changes
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	4613      	mov	r3, r2
 8005384:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	88fa      	ldrh	r2, [r7, #6]
 8005390:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	88fa      	ldrh	r2, [r7, #6]
 8005396:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2222      	movs	r2, #34	; 0x22
 80053a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053bc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0220 	orr.w	r2, r2, #32
 80053dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <UART_EndRxTransfer>:
=======
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2222      	movs	r2, #34	; 0x22
 80045e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045fc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0201 	orr.w	r2, r2, #1
 800460c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0220 	orr.w	r2, r2, #32
 800461c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80053ec:	b480      	push	{r7}
 80053ee:	b095      	sub	sp, #84	; 0x54
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800540a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	330c      	adds	r3, #12
 8005412:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005414:	643a      	str	r2, [r7, #64]	; 0x40
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800541a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e5      	bne.n	80053f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3314      	adds	r3, #20
 800542e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	61fb      	str	r3, [r7, #28]
   return(result);
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f023 0301 	bic.w	r3, r3, #1
 800543e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3314      	adds	r3, #20
 8005446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800544e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e5      	bne.n	8005428 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	2b01      	cmp	r3, #1
 8005462:	d119      	bne.n	8005498 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	330c      	adds	r3, #12
 800546a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	60bb      	str	r3, [r7, #8]
   return(result);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f023 0310 	bic.w	r3, r3, #16
 800547a:	647b      	str	r3, [r7, #68]	; 0x44
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005484:	61ba      	str	r2, [r7, #24]
 8005486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6979      	ldr	r1, [r7, #20]
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	613b      	str	r3, [r7, #16]
   return(result);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e5      	bne.n	8005464 <UART_EndRxTransfer+0x78>
=======
 800462c:	b480      	push	{r7}
 800462e:	b095      	sub	sp, #84	; 0x54
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	330c      	adds	r3, #12
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004654:	643a      	str	r2, [r7, #64]	; 0x40
 8004656:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800465a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e5      	bne.n	8004634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3314      	adds	r3, #20
 800466e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	61fb      	str	r3, [r7, #28]
   return(result);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3314      	adds	r3, #20
 8004686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004688:	62fa      	str	r2, [r7, #44]	; 0x2c
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800468e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d119      	bne.n	80046d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	330c      	adds	r3, #12
 80046aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f023 0310 	bic.w	r3, r3, #16
 80046ba:	647b      	str	r3, [r7, #68]	; 0x44
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046c4:	61ba      	str	r2, [r7, #24]
 80046c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6979      	ldr	r1, [r7, #20]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	613b      	str	r3, [r7, #16]
   return(result);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e5      	bne.n	80046a4 <UART_EndRxTransfer+0x78>
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054a6:	bf00      	nop
 80054a8:	3754      	adds	r7, #84	; 0x54
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <UART_DMAAbortOnError>:
=======
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046e6:	bf00      	nop
 80046e8:	3754      	adds	r7, #84	; 0x54
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <UART_DMAAbortOnError>:
>>>>>>> Stashed changes
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f7ff fecf 	bl	8005270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <UART_Transmit_IT>:
=======
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff fecf 	bl	80044b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <UART_Transmit_IT>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
=======
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< Updated upstream
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b21      	cmp	r3, #33	; 0x21
 80054ec:	d13e      	bne.n	800556c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f6:	d114      	bne.n	8005522 <UART_Transmit_IT+0x48>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d110      	bne.n	8005522 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005514:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	1c9a      	adds	r2, r3, #2
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	621a      	str	r2, [r3, #32]
 8005520:	e008      	b.n	8005534 <UART_Transmit_IT+0x5a>
=======
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b21      	cmp	r3, #33	; 0x21
 800472c:	d13e      	bne.n	80047ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	d114      	bne.n	8004762 <UART_Transmit_IT+0x48>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d110      	bne.n	8004762 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004754:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	1c9a      	adds	r2, r3, #2
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	621a      	str	r2, [r3, #32]
 8004760:	e008      	b.n	8004774 <UART_Transmit_IT+0x5a>
>>>>>>> Stashed changes
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< Updated upstream
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	1c59      	adds	r1, r3, #1
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6211      	str	r1, [r2, #32]
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29b      	uxth	r3, r3
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4619      	mov	r1, r3
 8005542:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10f      	bne.n	8005568 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005556:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005566:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <UART_Transmit_IT+0x94>
=======
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	1c59      	adds	r1, r3, #1
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6211      	str	r1, [r2, #32]
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29b      	uxth	r3, r3
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4619      	mov	r1, r3
 8004782:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10f      	bne.n	80047a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004796:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e000      	b.n	80047ae <UART_Transmit_IT+0x94>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <UART_EndTransmit_IT>:
=======
 80047ac:	2302      	movs	r3, #2
  }
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005590:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< Updated upstream
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff fe54 	bl	8005248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <UART_Receive_IT>:
=======
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fe54 	bl	8004488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <UART_Receive_IT>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b08c      	sub	sp, #48	; 0x30
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
=======
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b08c      	sub	sp, #48	; 0x30
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b22      	cmp	r3, #34	; 0x22
 80055bc:	f040 80ab 	bne.w	8005716 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c8:	d117      	bne.n	80055fa <UART_Receive_IT+0x50>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d113      	bne.n	80055fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	1c9a      	adds	r2, r3, #2
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28
 80055f8:	e026      	b.n	8005648 <UART_Receive_IT+0x9e>
=======
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b22      	cmp	r3, #34	; 0x22
 80047fc:	f040 80ab 	bne.w	8004956 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004808:	d117      	bne.n	800483a <UART_Receive_IT+0x50>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d113      	bne.n	800483a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b29b      	uxth	r3, r3
 8004824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004828:	b29a      	uxth	r2, r3
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	1c9a      	adds	r2, r3, #2
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	629a      	str	r2, [r3, #40]	; 0x28
 8004838:	e026      	b.n	8004888 <UART_Receive_IT+0x9e>
>>>>>>> Stashed changes
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< Updated upstream
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005600:	2300      	movs	r3, #0
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560c:	d007      	beq.n	800561e <UART_Receive_IT+0x74>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <UART_Receive_IT+0x82>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e008      	b.n	800563e <UART_Receive_IT+0x94>
=======
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004840:	2300      	movs	r3, #0
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484c:	d007      	beq.n	800485e <UART_Receive_IT+0x74>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <UART_Receive_IT+0x82>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	e008      	b.n	800487e <UART_Receive_IT+0x94>
>>>>>>> Stashed changes
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< Updated upstream
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005638:	b2da      	uxtb	r2, r3
 800563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29b      	uxth	r3, r3
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4619      	mov	r1, r3
 8005656:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005658:	2b00      	cmp	r3, #0
 800565a:	d15a      	bne.n	8005712 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0220 	bic.w	r2, r2, #32
 800566a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800567a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004878:	b2da      	uxtb	r2, r3
 800487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29b      	uxth	r3, r3
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	4619      	mov	r1, r3
 8004896:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004898:	2b00      	cmp	r3, #0
 800489a:	d15a      	bne.n	8004952 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0220 	bic.w	r2, r2, #32
 80048aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> Stashed changes

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	2b01      	cmp	r3, #1
 800569a:	d135      	bne.n	8005708 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	330c      	adds	r3, #12
 80056a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	613b      	str	r3, [r7, #16]
   return(result);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f023 0310 	bic.w	r3, r3, #16
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c2:	623a      	str	r2, [r7, #32]
 80056c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	69f9      	ldr	r1, [r7, #28]
 80056c8:	6a3a      	ldr	r2, [r7, #32]
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e5      	bne.n	80056a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d10a      	bne.n	80056fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
=======
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d135      	bne.n	8004948 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	613b      	str	r3, [r7, #16]
   return(result);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f023 0310 	bic.w	r3, r3, #16
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
 8004900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004902:	623a      	str	r2, [r7, #32]
 8004904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	69f9      	ldr	r1, [r7, #28]
 8004908:	6a3a      	ldr	r2, [r7, #32]
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e5      	bne.n	80048e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b10      	cmp	r3, #16
 8004922:	d10a      	bne.n	800493a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fdbf 	bl	8005284 <HAL_UARTEx_RxEventCallback>
 8005706:	e002      	b.n	800570e <UART_Receive_IT+0x164>
=======
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff fdbf 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
 8004946:	e002      	b.n	800494e <UART_Receive_IT+0x164>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
<<<<<<< Updated upstream
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fda7 	bl	800525c <HAL_UART_RxCpltCallback>
=======
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fda7 	bl	800449c <HAL_UART_RxCpltCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< Updated upstream
 800570e:	2300      	movs	r3, #0
 8005710:	e002      	b.n	8005718 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	e000      	b.n	8005718 <UART_Receive_IT+0x16e>
=======
 800494e:	2300      	movs	r3, #0
 8004950:	e002      	b.n	8004958 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e000      	b.n	8004958 <UART_Receive_IT+0x16e>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8005716:	2302      	movs	r3, #2
  }
}
 8005718:	4618      	mov	r0, r3
 800571a:	3730      	adds	r7, #48	; 0x30
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <UART_SetConfig>:
=======
 8004956:	2302      	movs	r3, #2
  }
}
 8004958:	4618      	mov	r0, r3
 800495a:	3730      	adds	r7, #48	; 0x30
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005724:	b09f      	sub	sp, #124	; 0x7c
 8005726:	af00      	add	r7, sp, #0
 8005728:	66f8      	str	r0, [r7, #108]	; 0x6c
=======
 8004960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004964:	b09f      	sub	sp, #124	; 0x7c
 8004966:	af00      	add	r7, sp, #0
 8004968:	66f8      	str	r0, [r7, #108]	; 0x6c
>>>>>>> Stashed changes
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005736:	68d9      	ldr	r1, [r3, #12]
 8005738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	ea40 0301 	orr.w	r3, r0, r1
 8005740:	6113      	str	r3, [r2, #16]
=======
 800496a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004976:	68d9      	ldr	r1, [r3, #12]
 8004978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	ea40 0301 	orr.w	r3, r0, r1
 8004980:	6113      	str	r3, [r2, #16]
>>>>>>> Stashed changes
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< Updated upstream
 8005742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	431a      	orrs	r2, r3
 800574c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	431a      	orrs	r2, r3
 8005752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	4313      	orrs	r3, r2
 8005758:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800575a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005764:	f021 010c 	bic.w	r1, r1, #12
 8005768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800576e:	430b      	orrs	r3, r1
 8005770:	60d3      	str	r3, [r2, #12]
=======
 8004982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	431a      	orrs	r2, r3
 800498c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	431a      	orrs	r2, r3
 8004992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	4313      	orrs	r3, r2
 8004998:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800499a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049a4:	f021 010c 	bic.w	r1, r1, #12
 80049a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049ae:	430b      	orrs	r3, r1
 80049b0:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< Updated upstream
 8005772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800577c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577e:	6999      	ldr	r1, [r3, #24]
 8005780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	ea40 0301 	orr.w	r3, r0, r1
 8005788:	6153      	str	r3, [r2, #20]
=======
 80049b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049be:	6999      	ldr	r1, [r3, #24]
 80049c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	ea40 0301 	orr.w	r3, r0, r1
 80049c8:	6153      	str	r3, [r2, #20]
>>>>>>> Stashed changes
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< Updated upstream
 800578a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4bc5      	ldr	r3, [pc, #788]	; (8005aa4 <UART_SetConfig+0x384>)
 8005790:	429a      	cmp	r2, r3
 8005792:	d004      	beq.n	800579e <UART_SetConfig+0x7e>
 8005794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	4bc3      	ldr	r3, [pc, #780]	; (8005aa8 <UART_SetConfig+0x388>)
 800579a:	429a      	cmp	r2, r3
 800579c:	d103      	bne.n	80057a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800579e:	f7fd fdd7 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 80057a2:	6778      	str	r0, [r7, #116]	; 0x74
 80057a4:	e002      	b.n	80057ac <UART_SetConfig+0x8c>
=======
 80049ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4bc5      	ldr	r3, [pc, #788]	; (8004ce4 <UART_SetConfig+0x384>)
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d004      	beq.n	80049de <UART_SetConfig+0x7e>
 80049d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	4bc3      	ldr	r3, [pc, #780]	; (8004ce8 <UART_SetConfig+0x388>)
 80049da:	429a      	cmp	r2, r3
 80049dc:	d103      	bne.n	80049e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049de:	f7fd ff6d 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 80049e2:	6778      	str	r0, [r7, #116]	; 0x74
 80049e4:	e002      	b.n	80049ec <UART_SetConfig+0x8c>
>>>>>>> Stashed changes
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< Updated upstream
 80057a6:	f7fd fdbf 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 80057aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b4:	f040 80b6 	bne.w	8005924 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ba:	461c      	mov	r4, r3
 80057bc:	f04f 0500 	mov.w	r5, #0
 80057c0:	4622      	mov	r2, r4
 80057c2:	462b      	mov	r3, r5
 80057c4:	1891      	adds	r1, r2, r2
 80057c6:	6439      	str	r1, [r7, #64]	; 0x40
 80057c8:	415b      	adcs	r3, r3
 80057ca:	647b      	str	r3, [r7, #68]	; 0x44
 80057cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057d0:	1912      	adds	r2, r2, r4
 80057d2:	eb45 0303 	adc.w	r3, r5, r3
 80057d6:	f04f 0000 	mov.w	r0, #0
 80057da:	f04f 0100 	mov.w	r1, #0
 80057de:	00d9      	lsls	r1, r3, #3
 80057e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057e4:	00d0      	lsls	r0, r2, #3
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	1911      	adds	r1, r2, r4
 80057ec:	6639      	str	r1, [r7, #96]	; 0x60
 80057ee:	416b      	adcs	r3, r5
 80057f0:	667b      	str	r3, [r7, #100]	; 0x64
 80057f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	1891      	adds	r1, r2, r2
 80057fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005800:	415b      	adcs	r3, r3
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005808:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800580c:	f7fb f8d2 	bl	80009b4 <__aeabi_uldivmod>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4ba5      	ldr	r3, [pc, #660]	; (8005aac <UART_SetConfig+0x38c>)
 8005816:	fba3 2302 	umull	r2, r3, r3, r2
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	011e      	lsls	r6, r3, #4
 800581e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005820:	461c      	mov	r4, r3
 8005822:	f04f 0500 	mov.w	r5, #0
 8005826:	4622      	mov	r2, r4
 8005828:	462b      	mov	r3, r5
 800582a:	1891      	adds	r1, r2, r2
 800582c:	6339      	str	r1, [r7, #48]	; 0x30
 800582e:	415b      	adcs	r3, r3
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
 8005832:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005836:	1912      	adds	r2, r2, r4
 8005838:	eb45 0303 	adc.w	r3, r5, r3
 800583c:	f04f 0000 	mov.w	r0, #0
 8005840:	f04f 0100 	mov.w	r1, #0
 8005844:	00d9      	lsls	r1, r3, #3
 8005846:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800584a:	00d0      	lsls	r0, r2, #3
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	1911      	adds	r1, r2, r4
 8005852:	65b9      	str	r1, [r7, #88]	; 0x58
 8005854:	416b      	adcs	r3, r5
 8005856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	461a      	mov	r2, r3
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	1891      	adds	r1, r2, r2
 8005864:	62b9      	str	r1, [r7, #40]	; 0x28
 8005866:	415b      	adcs	r3, r3
 8005868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800586e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005872:	f7fb f89f 	bl	80009b4 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4b8c      	ldr	r3, [pc, #560]	; (8005aac <UART_SetConfig+0x38c>)
 800587c:	fba3 1302 	umull	r1, r3, r3, r2
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	2164      	movs	r1, #100	; 0x64
 8005884:	fb01 f303 	mul.w	r3, r1, r3
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	3332      	adds	r3, #50	; 0x32
 800588e:	4a87      	ldr	r2, [pc, #540]	; (8005aac <UART_SetConfig+0x38c>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800589c:	441e      	add	r6, r3
 800589e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a0:	4618      	mov	r0, r3
 80058a2:	f04f 0100 	mov.w	r1, #0
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	1894      	adds	r4, r2, r2
 80058ac:	623c      	str	r4, [r7, #32]
 80058ae:	415b      	adcs	r3, r3
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
 80058b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058b6:	1812      	adds	r2, r2, r0
 80058b8:	eb41 0303 	adc.w	r3, r1, r3
 80058bc:	f04f 0400 	mov.w	r4, #0
 80058c0:	f04f 0500 	mov.w	r5, #0
 80058c4:	00dd      	lsls	r5, r3, #3
 80058c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058ca:	00d4      	lsls	r4, r2, #3
 80058cc:	4622      	mov	r2, r4
 80058ce:	462b      	mov	r3, r5
 80058d0:	1814      	adds	r4, r2, r0
 80058d2:	653c      	str	r4, [r7, #80]	; 0x50
 80058d4:	414b      	adcs	r3, r1
 80058d6:	657b      	str	r3, [r7, #84]	; 0x54
 80058d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	461a      	mov	r2, r3
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	1891      	adds	r1, r2, r2
 80058e4:	61b9      	str	r1, [r7, #24]
 80058e6:	415b      	adcs	r3, r3
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058f2:	f7fb f85f 	bl	80009b4 <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4b6c      	ldr	r3, [pc, #432]	; (8005aac <UART_SetConfig+0x38c>)
 80058fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	2164      	movs	r1, #100	; 0x64
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	3332      	adds	r3, #50	; 0x32
 800590e:	4a67      	ldr	r2, [pc, #412]	; (8005aac <UART_SetConfig+0x38c>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	f003 0207 	and.w	r2, r3, #7
 800591a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4432      	add	r2, r6
 8005920:	609a      	str	r2, [r3, #8]
=======
 80049e6:	f7fd ff55 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 80049ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f4:	f040 80b6 	bne.w	8004b64 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049fa:	461c      	mov	r4, r3
 80049fc:	f04f 0500 	mov.w	r5, #0
 8004a00:	4622      	mov	r2, r4
 8004a02:	462b      	mov	r3, r5
 8004a04:	1891      	adds	r1, r2, r2
 8004a06:	6439      	str	r1, [r7, #64]	; 0x40
 8004a08:	415b      	adcs	r3, r3
 8004a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a10:	1912      	adds	r2, r2, r4
 8004a12:	eb45 0303 	adc.w	r3, r5, r3
 8004a16:	f04f 0000 	mov.w	r0, #0
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	00d9      	lsls	r1, r3, #3
 8004a20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a24:	00d0      	lsls	r0, r2, #3
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	1911      	adds	r1, r2, r4
 8004a2c:	6639      	str	r1, [r7, #96]	; 0x60
 8004a2e:	416b      	adcs	r3, r5
 8004a30:	667b      	str	r3, [r7, #100]	; 0x64
 8004a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a40:	415b      	adcs	r3, r3
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a4c:	f7fb fbbc 	bl	80001c8 <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4ba5      	ldr	r3, [pc, #660]	; (8004cec <UART_SetConfig+0x38c>)
 8004a56:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	011e      	lsls	r6, r3, #4
 8004a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a60:	461c      	mov	r4, r3
 8004a62:	f04f 0500 	mov.w	r5, #0
 8004a66:	4622      	mov	r2, r4
 8004a68:	462b      	mov	r3, r5
 8004a6a:	1891      	adds	r1, r2, r2
 8004a6c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a6e:	415b      	adcs	r3, r3
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
 8004a72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a76:	1912      	adds	r2, r2, r4
 8004a78:	eb45 0303 	adc.w	r3, r5, r3
 8004a7c:	f04f 0000 	mov.w	r0, #0
 8004a80:	f04f 0100 	mov.w	r1, #0
 8004a84:	00d9      	lsls	r1, r3, #3
 8004a86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a8a:	00d0      	lsls	r0, r2, #3
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	1911      	adds	r1, r2, r4
 8004a92:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a94:	416b      	adcs	r3, r5
 8004a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	1891      	adds	r1, r2, r2
 8004aa4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004aa6:	415b      	adcs	r3, r3
 8004aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ab2:	f7fb fb89 	bl	80001c8 <__aeabi_uldivmod>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4b8c      	ldr	r3, [pc, #560]	; (8004cec <UART_SetConfig+0x38c>)
 8004abc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	2164      	movs	r1, #100	; 0x64
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	3332      	adds	r3, #50	; 0x32
 8004ace:	4a87      	ldr	r2, [pc, #540]	; (8004cec <UART_SetConfig+0x38c>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004adc:	441e      	add	r6, r3
 8004ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f04f 0100 	mov.w	r1, #0
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	1894      	adds	r4, r2, r2
 8004aec:	623c      	str	r4, [r7, #32]
 8004aee:	415b      	adcs	r3, r3
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
 8004af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004af6:	1812      	adds	r2, r2, r0
 8004af8:	eb41 0303 	adc.w	r3, r1, r3
 8004afc:	f04f 0400 	mov.w	r4, #0
 8004b00:	f04f 0500 	mov.w	r5, #0
 8004b04:	00dd      	lsls	r5, r3, #3
 8004b06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b0a:	00d4      	lsls	r4, r2, #3
 8004b0c:	4622      	mov	r2, r4
 8004b0e:	462b      	mov	r3, r5
 8004b10:	1814      	adds	r4, r2, r0
 8004b12:	653c      	str	r4, [r7, #80]	; 0x50
 8004b14:	414b      	adcs	r3, r1
 8004b16:	657b      	str	r3, [r7, #84]	; 0x54
 8004b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	1891      	adds	r1, r2, r2
 8004b24:	61b9      	str	r1, [r7, #24]
 8004b26:	415b      	adcs	r3, r3
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b32:	f7fb fb49 	bl	80001c8 <__aeabi_uldivmod>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4b6c      	ldr	r3, [pc, #432]	; (8004cec <UART_SetConfig+0x38c>)
 8004b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	2164      	movs	r1, #100	; 0x64
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	3332      	adds	r3, #50	; 0x32
 8004b4e:	4a67      	ldr	r2, [pc, #412]	; (8004cec <UART_SetConfig+0x38c>)
 8004b50:	fba2 2303 	umull	r2, r3, r2, r3
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	f003 0207 	and.w	r2, r3, #7
 8004b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4432      	add	r2, r6
 8004b60:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< Updated upstream
 8005922:	e0b9      	b.n	8005a98 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005926:	461c      	mov	r4, r3
 8005928:	f04f 0500 	mov.w	r5, #0
 800592c:	4622      	mov	r2, r4
 800592e:	462b      	mov	r3, r5
 8005930:	1891      	adds	r1, r2, r2
 8005932:	6139      	str	r1, [r7, #16]
 8005934:	415b      	adcs	r3, r3
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800593c:	1912      	adds	r2, r2, r4
 800593e:	eb45 0303 	adc.w	r3, r5, r3
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f04f 0100 	mov.w	r1, #0
 800594a:	00d9      	lsls	r1, r3, #3
 800594c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005950:	00d0      	lsls	r0, r2, #3
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	eb12 0804 	adds.w	r8, r2, r4
 800595a:	eb43 0905 	adc.w	r9, r3, r5
 800595e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4618      	mov	r0, r3
 8005964:	f04f 0100 	mov.w	r1, #0
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	008b      	lsls	r3, r1, #2
 8005972:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005976:	0082      	lsls	r2, r0, #2
 8005978:	4640      	mov	r0, r8
 800597a:	4649      	mov	r1, r9
 800597c:	f7fb f81a 	bl	80009b4 <__aeabi_uldivmod>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4b49      	ldr	r3, [pc, #292]	; (8005aac <UART_SetConfig+0x38c>)
 8005986:	fba3 2302 	umull	r2, r3, r3, r2
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	011e      	lsls	r6, r3, #4
 800598e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005990:	4618      	mov	r0, r3
 8005992:	f04f 0100 	mov.w	r1, #0
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	1894      	adds	r4, r2, r2
 800599c:	60bc      	str	r4, [r7, #8]
 800599e:	415b      	adcs	r3, r3
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a6:	1812      	adds	r2, r2, r0
 80059a8:	eb41 0303 	adc.w	r3, r1, r3
 80059ac:	f04f 0400 	mov.w	r4, #0
 80059b0:	f04f 0500 	mov.w	r5, #0
 80059b4:	00dd      	lsls	r5, r3, #3
 80059b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059ba:	00d4      	lsls	r4, r2, #3
 80059bc:	4622      	mov	r2, r4
 80059be:	462b      	mov	r3, r5
 80059c0:	1814      	adds	r4, r2, r0
 80059c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80059c4:	414b      	adcs	r3, r1
 80059c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f04f 0100 	mov.w	r1, #0
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	f04f 0300 	mov.w	r3, #0
 80059da:	008b      	lsls	r3, r1, #2
 80059dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059e0:	0082      	lsls	r2, r0, #2
 80059e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80059e6:	f7fa ffe5 	bl	80009b4 <__aeabi_uldivmod>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4b2f      	ldr	r3, [pc, #188]	; (8005aac <UART_SetConfig+0x38c>)
 80059f0:	fba3 1302 	umull	r1, r3, r3, r2
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	2164      	movs	r1, #100	; 0x64
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	3332      	adds	r3, #50	; 0x32
 8005a02:	4a2a      	ldr	r2, [pc, #168]	; (8005aac <UART_SetConfig+0x38c>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a0e:	441e      	add	r6, r3
 8005a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a12:	4618      	mov	r0, r3
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	1894      	adds	r4, r2, r2
 8005a1e:	603c      	str	r4, [r7, #0]
 8005a20:	415b      	adcs	r3, r3
 8005a22:	607b      	str	r3, [r7, #4]
 8005a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a28:	1812      	adds	r2, r2, r0
 8005a2a:	eb41 0303 	adc.w	r3, r1, r3
 8005a2e:	f04f 0400 	mov.w	r4, #0
 8005a32:	f04f 0500 	mov.w	r5, #0
 8005a36:	00dd      	lsls	r5, r3, #3
 8005a38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a3c:	00d4      	lsls	r4, r2, #3
 8005a3e:	4622      	mov	r2, r4
 8005a40:	462b      	mov	r3, r5
 8005a42:	eb12 0a00 	adds.w	sl, r2, r0
 8005a46:	eb43 0b01 	adc.w	fp, r3, r1
 8005a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f04f 0100 	mov.w	r1, #0
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	008b      	lsls	r3, r1, #2
 8005a5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a62:	0082      	lsls	r2, r0, #2
 8005a64:	4650      	mov	r0, sl
 8005a66:	4659      	mov	r1, fp
 8005a68:	f7fa ffa4 	bl	80009b4 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4b0e      	ldr	r3, [pc, #56]	; (8005aac <UART_SetConfig+0x38c>)
 8005a72:	fba3 1302 	umull	r1, r3, r3, r2
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	2164      	movs	r1, #100	; 0x64
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	3332      	adds	r3, #50	; 0x32
 8005a84:	4a09      	ldr	r2, [pc, #36]	; (8005aac <UART_SetConfig+0x38c>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4432      	add	r2, r6
 8005a96:	609a      	str	r2, [r3, #8]
}
 8005a98:	bf00      	nop
 8005a9a:	377c      	adds	r7, #124	; 0x7c
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40011000 	.word	0x40011000
 8005aa8:	40011400 	.word	0x40011400
 8005aac:	51eb851f 	.word	0x51eb851f

08005ab0 <__libc_init_array>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4d0d      	ldr	r5, [pc, #52]	; (8005ae8 <__libc_init_array+0x38>)
 8005ab4:	4c0d      	ldr	r4, [pc, #52]	; (8005aec <__libc_init_array+0x3c>)
 8005ab6:	1b64      	subs	r4, r4, r5
 8005ab8:	10a4      	asrs	r4, r4, #2
 8005aba:	2600      	movs	r6, #0
 8005abc:	42a6      	cmp	r6, r4
 8005abe:	d109      	bne.n	8005ad4 <__libc_init_array+0x24>
 8005ac0:	4d0b      	ldr	r5, [pc, #44]	; (8005af0 <__libc_init_array+0x40>)
 8005ac2:	4c0c      	ldr	r4, [pc, #48]	; (8005af4 <__libc_init_array+0x44>)
 8005ac4:	f000 f820 	bl	8005b08 <_init>
 8005ac8:	1b64      	subs	r4, r4, r5
 8005aca:	10a4      	asrs	r4, r4, #2
 8005acc:	2600      	movs	r6, #0
 8005ace:	42a6      	cmp	r6, r4
 8005ad0:	d105      	bne.n	8005ade <__libc_init_array+0x2e>
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad8:	4798      	blx	r3
 8005ada:	3601      	adds	r6, #1
 8005adc:	e7ee      	b.n	8005abc <__libc_init_array+0xc>
 8005ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae2:	4798      	blx	r3
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	e7f2      	b.n	8005ace <__libc_init_array+0x1e>
 8005ae8:	08005b40 	.word	0x08005b40
 8005aec:	08005b40 	.word	0x08005b40
 8005af0:	08005b40 	.word	0x08005b40
 8005af4:	08005b44 	.word	0x08005b44

08005af8 <memset>:
 8005af8:	4402      	add	r2, r0
 8005afa:	4603      	mov	r3, r0
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d100      	bne.n	8005b02 <memset+0xa>
 8005b00:	4770      	bx	lr
 8005b02:	f803 1b01 	strb.w	r1, [r3], #1
 8005b06:	e7f9      	b.n	8005afc <memset+0x4>

08005b08 <_init>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	bf00      	nop
 8005b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0e:	bc08      	pop	{r3}
 8005b10:	469e      	mov	lr, r3
 8005b12:	4770      	bx	lr

08005b14 <_fini>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	bf00      	nop
 8005b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1a:	bc08      	pop	{r3}
 8005b1c:	469e      	mov	lr, r3
 8005b1e:	4770      	bx	lr
=======
 8004b62:	e0b9      	b.n	8004cd8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b66:	461c      	mov	r4, r3
 8004b68:	f04f 0500 	mov.w	r5, #0
 8004b6c:	4622      	mov	r2, r4
 8004b6e:	462b      	mov	r3, r5
 8004b70:	1891      	adds	r1, r2, r2
 8004b72:	6139      	str	r1, [r7, #16]
 8004b74:	415b      	adcs	r3, r3
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b7c:	1912      	adds	r2, r2, r4
 8004b7e:	eb45 0303 	adc.w	r3, r5, r3
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f04f 0100 	mov.w	r1, #0
 8004b8a:	00d9      	lsls	r1, r3, #3
 8004b8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b90:	00d0      	lsls	r0, r2, #3
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	eb12 0804 	adds.w	r8, r2, r4
 8004b9a:	eb43 0905 	adc.w	r9, r3, r5
 8004b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	008b      	lsls	r3, r1, #2
 8004bb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bb6:	0082      	lsls	r2, r0, #2
 8004bb8:	4640      	mov	r0, r8
 8004bba:	4649      	mov	r1, r9
 8004bbc:	f7fb fb04 	bl	80001c8 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4b49      	ldr	r3, [pc, #292]	; (8004cec <UART_SetConfig+0x38c>)
 8004bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	011e      	lsls	r6, r3, #4
 8004bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f04f 0100 	mov.w	r1, #0
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	1894      	adds	r4, r2, r2
 8004bdc:	60bc      	str	r4, [r7, #8]
 8004bde:	415b      	adcs	r3, r3
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004be6:	1812      	adds	r2, r2, r0
 8004be8:	eb41 0303 	adc.w	r3, r1, r3
 8004bec:	f04f 0400 	mov.w	r4, #0
 8004bf0:	f04f 0500 	mov.w	r5, #0
 8004bf4:	00dd      	lsls	r5, r3, #3
 8004bf6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bfa:	00d4      	lsls	r4, r2, #3
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	462b      	mov	r3, r5
 8004c00:	1814      	adds	r4, r2, r0
 8004c02:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c04:	414b      	adcs	r3, r1
 8004c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f04f 0100 	mov.w	r1, #0
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	008b      	lsls	r3, r1, #2
 8004c1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c20:	0082      	lsls	r2, r0, #2
 8004c22:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c26:	f7fb facf 	bl	80001c8 <__aeabi_uldivmod>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4b2f      	ldr	r3, [pc, #188]	; (8004cec <UART_SetConfig+0x38c>)
 8004c30:	fba3 1302 	umull	r1, r3, r3, r2
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	2164      	movs	r1, #100	; 0x64
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	3332      	adds	r3, #50	; 0x32
 8004c42:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <UART_SetConfig+0x38c>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4e:	441e      	add	r6, r3
 8004c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c52:	4618      	mov	r0, r3
 8004c54:	f04f 0100 	mov.w	r1, #0
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	1894      	adds	r4, r2, r2
 8004c5e:	603c      	str	r4, [r7, #0]
 8004c60:	415b      	adcs	r3, r3
 8004c62:	607b      	str	r3, [r7, #4]
 8004c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c68:	1812      	adds	r2, r2, r0
 8004c6a:	eb41 0303 	adc.w	r3, r1, r3
 8004c6e:	f04f 0400 	mov.w	r4, #0
 8004c72:	f04f 0500 	mov.w	r5, #0
 8004c76:	00dd      	lsls	r5, r3, #3
 8004c78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c7c:	00d4      	lsls	r4, r2, #3
 8004c7e:	4622      	mov	r2, r4
 8004c80:	462b      	mov	r3, r5
 8004c82:	eb12 0a00 	adds.w	sl, r2, r0
 8004c86:	eb43 0b01 	adc.w	fp, r3, r1
 8004c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	f04f 0300 	mov.w	r3, #0
 8004c9c:	008b      	lsls	r3, r1, #2
 8004c9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ca2:	0082      	lsls	r2, r0, #2
 8004ca4:	4650      	mov	r0, sl
 8004ca6:	4659      	mov	r1, fp
 8004ca8:	f7fb fa8e 	bl	80001c8 <__aeabi_uldivmod>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <UART_SetConfig+0x38c>)
 8004cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	2164      	movs	r1, #100	; 0x64
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	3332      	adds	r3, #50	; 0x32
 8004cc4:	4a09      	ldr	r2, [pc, #36]	; (8004cec <UART_SetConfig+0x38c>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	f003 020f 	and.w	r2, r3, #15
 8004cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4432      	add	r2, r6
 8004cd6:	609a      	str	r2, [r3, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	377c      	adds	r7, #124	; 0x7c
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40011000 	.word	0x40011000
 8004ce8:	40011400 	.word	0x40011400
 8004cec:	51eb851f 	.word	0x51eb851f

08004cf0 <__libc_init_array>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4d0d      	ldr	r5, [pc, #52]	; (8004d28 <__libc_init_array+0x38>)
 8004cf4:	4c0d      	ldr	r4, [pc, #52]	; (8004d2c <__libc_init_array+0x3c>)
 8004cf6:	1b64      	subs	r4, r4, r5
 8004cf8:	10a4      	asrs	r4, r4, #2
 8004cfa:	2600      	movs	r6, #0
 8004cfc:	42a6      	cmp	r6, r4
 8004cfe:	d109      	bne.n	8004d14 <__libc_init_array+0x24>
 8004d00:	4d0b      	ldr	r5, [pc, #44]	; (8004d30 <__libc_init_array+0x40>)
 8004d02:	4c0c      	ldr	r4, [pc, #48]	; (8004d34 <__libc_init_array+0x44>)
 8004d04:	f000 f828 	bl	8004d58 <_init>
 8004d08:	1b64      	subs	r4, r4, r5
 8004d0a:	10a4      	asrs	r4, r4, #2
 8004d0c:	2600      	movs	r6, #0
 8004d0e:	42a6      	cmp	r6, r4
 8004d10:	d105      	bne.n	8004d1e <__libc_init_array+0x2e>
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d18:	4798      	blx	r3
 8004d1a:	3601      	adds	r6, #1
 8004d1c:	e7ee      	b.n	8004cfc <__libc_init_array+0xc>
 8004d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d22:	4798      	blx	r3
 8004d24:	3601      	adds	r6, #1
 8004d26:	e7f2      	b.n	8004d0e <__libc_init_array+0x1e>
 8004d28:	08004d94 	.word	0x08004d94
 8004d2c:	08004d94 	.word	0x08004d94
 8004d30:	08004d94 	.word	0x08004d94
 8004d34:	08004d98 	.word	0x08004d98

08004d38 <memset>:
 8004d38:	4402      	add	r2, r0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d100      	bne.n	8004d42 <memset+0xa>
 8004d40:	4770      	bx	lr
 8004d42:	f803 1b01 	strb.w	r1, [r3], #1
 8004d46:	e7f9      	b.n	8004d3c <memset+0x4>

08004d48 <strcpy>:
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d4e:	f803 2b01 	strb.w	r2, [r3], #1
 8004d52:	2a00      	cmp	r2, #0
 8004d54:	d1f9      	bne.n	8004d4a <strcpy+0x2>
 8004d56:	4770      	bx	lr

08004d58 <_init>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	bf00      	nop
 8004d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5e:	bc08      	pop	{r3}
 8004d60:	469e      	mov	lr, r3
 8004d62:	4770      	bx	lr

08004d64 <_fini>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	bf00      	nop
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr
>>>>>>> Stashed changes
