/*
 * lidar.c
 *
 *  Created on: Oct 14, 2021
 *      Author: Thomas VERNOUX
 */


#include "lidar.h"
#include "usart.h"
#include "gpio.h"
#include "main.h"
#include "tim.h"
#include <string.h>

enum BIT_STATE {start1, start2, size, data, end}; // structure pour le prochain bit qu'on va recevoir du lidar
enum BIT_STATE last_bit_state = end;
enum BIT_STATE bit_state;


uint8_t taille_message_recu;
uint8_t lidar_message_recu [100];
int index_ecriture_message_recu;

uint8_t octet_recu;





void demarrer_pwm_lidar(){

  TIM1->CCR1 = 30000;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  return;


  }




/*
 * Test
 */
void tests_lidar(){

	//reset_lidar();
	//HAL_Delay(1000);


	memset(lidar_message_recu,0,sizeof(lidar_message_recu));



	reset_lidar();

	HAL_delay(100);

	lidar_get_info();

	return;
}



void mouvement_moteur(int vitesse){

}

void reset_lidar(){
	uint8_t Data[2] = {0xA5, 0x40};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	memset(lidar_message_recu,0,sizeof(lidar_message_recu));
	return;
}



void lidar_get_info(){
	uint8_t Data[2] = {0xA5, 0x50};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}


void lidar_scan(){
	uint8_t Data[2] = {0xA5, 0x20};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}



void uart_lidar_recieve(){

	octet_recu = UART3_rxBuffer;


	if ((octet_recu == 0xA5) && (last_bit_state == end) ){  // on recoit l'octet de start
		bit_state = start1;
		taille_message_recu = 0; // on remet a zero la taille du message recu
		index_ecriture_message_recu = 0;
		memset(lidar_message_recu,0,sizeof(lidar_message_recu)); // on efface le buffer
		}

	else if ((last_bit_state == start1) && (octet_recu == 0x5A)){ // on recoit le deuxième octet de start
		bit_state = start2;
	}

	else if (last_bit_state == start2){   // on a l'octet qui donne la taille de la communication
		bit_state = size;
		taille_message_recu = octet_recu;
	}

	else{                                     // on a une data
		reception_octet_data();
		bit_state = data;
	}



	last_bit_state = bit_state; // machine d'état

	return;
}

void reception_octet_data(){
		lidar_message_recu[index_ecriture_message_recu] = octet_recu;
		index_ecriture_message_recu ++;
		if (index_ecriture_message_recu == taille_message_recu){
			bit_state = end;
		}


	return;
}














