/*
 * lidar.c
 *
 *  Created on: Oct 14, 2021
 *      Author: Thomas VERNOUX
 */


#include "lidar.h"
#include "usart.h"
#include "gpio.h"
#include "main.h"
#include "tim.h"

enum BIT_STATE {start1, start2, size, data, end}; // structure pour le prochain bit qu'on va recevoir du lidar
enum BIT_STATE last_bit_state = end;
enum BIT_STATE bit_state;


uint8_t taille_message_recu;
uint8_t lidar_message_recu [100];
int index_ecriture_message_recu;

uint8_octet_recu;





void demarrer_pwm_lidar(){

  TIM1->CCR1 = 30000;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  return;


  }

/*
 * Test
 */
void tests_lidar(){

	//reset_lidar();
	//HAL_Delay(1000);


	lidar_get_info();


	return;
}



void mouvement_moteur(int vitesse){

}

void reset_lidar(){
	uint8_t Data = 0x40;
	HAL_UART_Transmit(&huart3, &Data, sizeof(Data), 100);
	return;
}



void send_lidar(char Data[]){



	return;
}


void send_lidar_request(){
	//char Data[8] = "A520";

	return;


}

void lidar_get_info(){
	uint8_t Data[2] = {0xA5, 0x50};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}

void lidar_reception(){




}


void uart_lidar_recieve(){

	octet_recu = UART3_rxBuffer;


	if (octet_recu == 0xA5){  // on recoit peut etre un bit de start

		if (last_bit_state == end){ // on a une nouvelle communication (premier bit)
			bit_state = start1;
			taille_message_recu = 0; // on remet a zero la taille du message recu
			index_ecriture_message_recu = 0;
		}

		else if (last_bit_state == start1){ // on a le deuxieme bit de la communication
			bit_state = start2;
		}
		else{void reception_octet_data();} // on a une data
	}

	else if (last_bit_state == start2) { // on a l'octet qui donne la taille de la communication
		bit_state = size;
		taille_message_recu = octet_recu;
	}
	else {reception_octet_data();}








	last_bit_state = bit_state; // machine d'Ã©tat

	return;
}

void reception_octet_data(){
		lidar_message_recu[index_ecriture_message_recu] = octet_recu;
		index_ecriture_message_recu ++;
		if (index_ecriture_message_recu == taille_message_recu){
			bit_state = end;
		}


	return;
}














