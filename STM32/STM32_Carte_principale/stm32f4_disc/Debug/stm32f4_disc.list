
stm32f4_disc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ba8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005d30  08005d30  00015d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d48  08005d48  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005d48  08005d48  00015d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d50  08005d50  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d50  08005d50  00015d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00001808  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001818  20001818  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e58  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c61  00000000  00000000  00035e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00038b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee8  00000000  00000000  00039b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002256c  00000000  00000000  0003a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014601  00000000  00000000  0005cf64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd70a  00000000  00000000  00071565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013ec6f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042b4  00000000  00000000  0013ecc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005d18 	.word	0x08005d18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005d18 	.word	0x08005d18

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96e 	b.w	8000ca8 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468c      	mov	ip, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8083 	bne.w	8000afa <__udivmoddi4+0x116>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d947      	bls.n	8000a8a <__udivmoddi4+0xa6>
 80009fa:	fab2 f282 	clz	r2, r2
 80009fe:	b142      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	f1c2 0020 	rsb	r0, r2, #32
 8000a04:	fa24 f000 	lsr.w	r0, r4, r0
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	4097      	lsls	r7, r2
 8000a0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbbc f6f8 	udiv	r6, ip, r8
 8000a1c:	fa1f fe87 	uxth.w	lr, r7
 8000a20:	fb08 c116 	mls	r1, r8, r6, ip
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f10e 	mul.w	r1, r6, lr
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 8119 	bcs.w	8000c6c <__udivmoddi4+0x288>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8116 	bls.w	8000c6c <__udivmoddi4+0x288>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	443b      	add	r3, r7
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	45a6      	cmp	lr, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8105 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a66:	45a6      	cmp	lr, r4
 8000a68:	f240 8102 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443c      	add	r4, r7
 8000a70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a74:	eba4 040e 	sub.w	r4, r4, lr
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	b902      	cbnz	r2, 8000a8e <__udivmoddi4+0xaa>
 8000a8c:	deff      	udf	#255	; 0xff
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d150      	bne.n	8000b38 <__udivmoddi4+0x154>
 8000a96:	1bcb      	subs	r3, r1, r7
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	2601      	movs	r6, #1
 8000aa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000aa6:	0c21      	lsrs	r1, r4, #16
 8000aa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d907      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 8000ab8:	1879      	adds	r1, r7, r1
 8000aba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0xe2>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	f200 80e9 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000ac6:	4684      	mov	ip, r0
 8000ac8:	1ac9      	subs	r1, r1, r3
 8000aca:	b2a3      	uxth	r3, r4
 8000acc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad8:	fb08 f800 	mul.w	r8, r8, r0
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x10c>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x10a>
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	f200 80d9 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000aee:	4618      	mov	r0, r3
 8000af0:	eba4 0408 	sub.w	r4, r4, r8
 8000af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af8:	e7bf      	b.n	8000a7a <__udivmoddi4+0x96>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x12e>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <__udivmoddi4+0x282>
 8000b04:	2600      	movs	r6, #0
 8000b06:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f683 	clz	r6, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d14a      	bne.n	8000bb0 <__udivmoddi4+0x1cc>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0x140>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80b8 	bhi.w	8000c94 <__udivmoddi4+0x2b0>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0103 	sbc.w	r1, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d0a8      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000b32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b36:	e7a5      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000b38:	f1c2 0320 	rsb	r3, r2, #32
 8000b3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b40:	4097      	lsls	r7, r2
 8000b42:	fa01 f002 	lsl.w	r0, r1, r2
 8000b46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4a:	40d9      	lsrs	r1, r3
 8000b4c:	4330      	orrs	r0, r6
 8000b4e:	0c03      	lsrs	r3, r0, #16
 8000b50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f108 	mul.w	r1, r6, r8
 8000b64:	4299      	cmp	r1, r3
 8000b66:	fa04 f402 	lsl.w	r4, r4, r2
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x19c>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b72:	f080 808d 	bcs.w	8000c90 <__udivmoddi4+0x2ac>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 808a 	bls.w	8000c90 <__udivmoddi4+0x2ac>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b281      	uxth	r1, r0
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb00 f308 	mul.w	r3, r0, r8
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x1c4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b9e:	d273      	bcs.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d971      	bls.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4439      	add	r1, r7
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bae:	e778      	b.n	8000aa2 <__udivmoddi4+0xbe>
 8000bb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	0c3b      	lsrs	r3, r7, #16
 8000bd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd6:	fa1f f884 	uxth.w	r8, r4
 8000bda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000be2:	fb09 fa08 	mul.w	sl, r9, r8
 8000be6:	458a      	cmp	sl, r1
 8000be8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bec:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x220>
 8000bf2:	1861      	adds	r1, r4, r1
 8000bf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf8:	d248      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfa:	458a      	cmp	sl, r1
 8000bfc:	d946      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4421      	add	r1, r4
 8000c04:	eba1 010a 	sub.w	r1, r1, sl
 8000c08:	b2bf      	uxth	r7, r7
 8000c0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c16:	fb00 f808 	mul.w	r8, r0, r8
 8000c1a:	45b8      	cmp	r8, r7
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x24a>
 8000c1e:	19e7      	adds	r7, r4, r7
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d22e      	bcs.n	8000c84 <__udivmoddi4+0x2a0>
 8000c26:	45b8      	cmp	r8, r7
 8000c28:	d92c      	bls.n	8000c84 <__udivmoddi4+0x2a0>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4427      	add	r7, r4
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	eba7 0708 	sub.w	r7, r7, r8
 8000c36:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3a:	454f      	cmp	r7, r9
 8000c3c:	46c6      	mov	lr, r8
 8000c3e:	4649      	mov	r1, r9
 8000c40:	d31a      	bcc.n	8000c78 <__udivmoddi4+0x294>
 8000c42:	d017      	beq.n	8000c74 <__udivmoddi4+0x290>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x27a>
 8000c46:	ebb3 020e 	subs.w	r2, r3, lr
 8000c4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c52:	40f2      	lsrs	r2, r6
 8000c54:	ea4c 0202 	orr.w	r2, ip, r2
 8000c58:	40f7      	lsrs	r7, r6
 8000c5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e70b      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e9      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6fd      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c74:	4543      	cmp	r3, r8
 8000c76:	d2e5      	bcs.n	8000c44 <__udivmoddi4+0x260>
 8000c78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7df      	b.n	8000c44 <__udivmoddi4+0x260>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e7d2      	b.n	8000c2e <__udivmoddi4+0x24a>
 8000c88:	4660      	mov	r0, ip
 8000c8a:	e78d      	b.n	8000ba8 <__udivmoddi4+0x1c4>
 8000c8c:	4681      	mov	r9, r0
 8000c8e:	e7b9      	b.n	8000c04 <__udivmoddi4+0x220>
 8000c90:	4666      	mov	r6, ip
 8000c92:	e775      	b.n	8000b80 <__udivmoddi4+0x19c>
 8000c94:	4630      	mov	r0, r6
 8000c96:	e74a      	b.n	8000b2e <__udivmoddi4+0x14a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	4439      	add	r1, r7
 8000c9e:	e713      	b.n	8000ac8 <__udivmoddi4+0xe4>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	e724      	b.n	8000af0 <__udivmoddi4+0x10c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <moteur1>:



/// CONGIG COMMANDE

void moteur1(){
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	txData[0] &=  0b11110111;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <moteur1+0x1c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f023 0308 	bic.w	r3, r3, #8
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <moteur1+0x1c>)
 8000cbc:	701a      	strb	r2, [r3, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	2000002c 	.word	0x2000002c

08000ccc <moteur2>:

void moteur2(){
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	txData[0] |=  0b00001000;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <moteur2+0x1c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <moteur2+0x1c>)
 8000cdc:	701a      	strb	r2, [r3, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	2000002c 	.word	0x2000002c

08000cec <cmd_marche>:

	txData[0] &=  0b11111010;
	txData[0] |=  0b00000010;
}

void cmd_marche(){
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

	txData[0] &=  0b11111001;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <cmd_marche+0x30>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	f023 0306 	bic.w	r3, r3, #6
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <cmd_marche+0x30>)
 8000cfc:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000001;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <cmd_marche+0x30>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <cmd_marche+0x30>)
 8000d0a:	701a      	strb	r2, [r3, #0]

	txData[1] =   0b00000010;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <cmd_marche+0x30>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	705a      	strb	r2, [r3, #1]
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	2000002c 	.word	0x2000002c

08000d20 <config_freq_PWM>:
}

/*
 * Configuration de la PWM
 */
void config_freq_PWM(){
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	txData[0] &=  0b11111100;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <config_freq_PWM+0x2c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	f023 0303 	bic.w	r3, r3, #3
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <config_freq_PWM+0x2c>)
 8000d30:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000100;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <config_freq_PWM+0x2c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <config_freq_PWM+0x2c>)
 8000d3e:	701a      	strb	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	2000002c 	.word	0x2000002c

08000d50 <config_freq_PWM_p127>:
	txData[0] &=  0b11111100;
	txData[0] |=  0b00000100;
	txData[1] =  0b00000010;
}

void config_freq_PWM_p127(){
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
	txData[0] &=  0b11111100;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <config_freq_PWM_p127+0x30>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	f023 0303 	bic.w	r3, r3, #3
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <config_freq_PWM_p127+0x30>)
 8000d60:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000100;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <config_freq_PWM_p127+0x30>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <config_freq_PWM_p127+0x30>)
 8000d6e:	701a      	strb	r2, [r3, #0]
	txData[1] =  127 << 1;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <config_freq_PWM_p127+0x30>)
 8000d72:	22fe      	movs	r2, #254	; 0xfe
 8000d74:	705a      	strb	r2, [r3, #1]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	2000002c 	.word	0x2000002c

08000d84 <vit_rap_cyc>:

/*
 * rapport cyclique
 * attention c'est sur 7 bits
 */
void vit_rap_cyc(uint8_t vitesse){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	txData[0] &=  0b00000000;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <vit_rap_cyc+0x34>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000111;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <vit_rap_cyc+0x34>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	f043 0307 	orr.w	r3, r3, #7
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <vit_rap_cyc+0x34>)
 8000da0:	701a      	strb	r2, [r3, #0]
	txData[1] =  vitesse << 1;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <vit_rap_cyc+0x34>)
 8000daa:	705a      	strb	r2, [r3, #1]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	2000002c 	.word	0x2000002c

08000dbc <fct_vierge>:



void fct_vierge(){
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
	txData[0] =  0b00000000;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <fct_vierge+0x1c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
	txData[1] =  0b00000000;
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <fct_vierge+0x1c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	705a      	strb	r2, [r3, #1]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000002c 	.word	0x2000002c

08000ddc <spi_transmission>:


void spi_transmission(){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	HAL_SPI_Init( &hspi1 );
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <spi_transmission+0x30>)
 8000de2:	f002 fadd 	bl	80033a0 <HAL_SPI_Init>
	HAL_SPI_Transmit (&hspi1, txData, 2, 100);
 8000de6:	2364      	movs	r3, #100	; 0x64
 8000de8:	2202      	movs	r2, #2
 8000dea:	4909      	ldr	r1, [pc, #36]	; (8000e10 <spi_transmission+0x34>)
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <spi_transmission+0x30>)
 8000dee:	f002 fb88 	bl	8003502 <HAL_SPI_Transmit>
	while( hspi1.State == HAL_SPI_STATE_BUSY );
 8000df2:	bf00      	nop
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <spi_transmission+0x30>)
 8000df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d0f9      	beq.n	8000df4 <spi_transmission+0x18>
	HAL_SPI_DeInit( &hspi1 );
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <spi_transmission+0x30>)
 8000e02:	f002 fb56 	bl	80034b2 <HAL_SPI_DeInit>
	//HAL_Delay(10);
	return;
 8000e06:	bf00      	nop
}
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200014c4 	.word	0x200014c4
 8000e10:	2000002c 	.word	0x2000002c

08000e14 <callback_adoucissement_vitesse>:



void callback_adoucissement_vitesse(){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

	if (vitesse_actuelle < objectif_vitesse){
 8000e1a:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <callback_adoucissement_vitesse+0xd0>)
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <callback_adoucissement_vitesse+0xd4>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d222      	bcs.n	8000e6c <callback_adoucissement_vitesse+0x58>
		vitesse_actuelle += 1;
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <callback_adoucissement_vitesse+0xd0>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <callback_adoucissement_vitesse+0xd0>)
 8000e30:	701a      	strb	r2, [r3, #0]

		fct_vierge();
 8000e32:	f7ff ffc3 	bl	8000dbc <fct_vierge>
		moteur2();
 8000e36:	f7ff ff49 	bl	8000ccc <moteur2>
		vit_rap_cyc(vitesse_actuelle);
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <callback_adoucissement_vitesse+0xd0>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ffa0 	bl	8000d84 <vit_rap_cyc>

		HAL_SPI_Init( &hspi1 );
 8000e44:	4829      	ldr	r0, [pc, #164]	; (8000eec <callback_adoucissement_vitesse+0xd8>)
 8000e46:	f002 faab 	bl	80033a0 <HAL_SPI_Init>
		HAL_SPI_Transmit (&hspi1, txData, 2, 100);
 8000e4a:	2364      	movs	r3, #100	; 0x64
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4928      	ldr	r1, [pc, #160]	; (8000ef0 <callback_adoucissement_vitesse+0xdc>)
 8000e50:	4826      	ldr	r0, [pc, #152]	; (8000eec <callback_adoucissement_vitesse+0xd8>)
 8000e52:	f002 fb56 	bl	8003502 <HAL_SPI_Transmit>
		while( hspi1.State == HAL_SPI_STATE_BUSY );
 8000e56:	bf00      	nop
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <callback_adoucissement_vitesse+0xd8>)
 8000e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d0f9      	beq.n	8000e58 <callback_adoucissement_vitesse+0x44>
		HAL_SPI_DeInit( &hspi1 );
 8000e64:	4821      	ldr	r0, [pc, #132]	; (8000eec <callback_adoucissement_vitesse+0xd8>)
 8000e66:	f002 fb24 	bl	80034b2 <HAL_SPI_DeInit>
	else if (vitesse_actuelle == objectif_vitesse){
		int a = 3; // onjectif atteint
		a++;
	}

}
 8000e6a:	e036      	b.n	8000eda <callback_adoucissement_vitesse+0xc6>
	else if (vitesse_actuelle > objectif_vitesse){
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <callback_adoucissement_vitesse+0xd0>)
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <callback_adoucissement_vitesse+0xd4>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d925      	bls.n	8000ec4 <callback_adoucissement_vitesse+0xb0>
		vitesse_actuelle -= 1;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <callback_adoucissement_vitesse+0xd0>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <callback_adoucissement_vitesse+0xd0>)
 8000e82:	701a      	strb	r2, [r3, #0]
		fct_vierge();
 8000e84:	f7ff ff9a 	bl	8000dbc <fct_vierge>
		moteur2();
 8000e88:	f7ff ff20 	bl	8000ccc <moteur2>
		vit_rap_cyc(vitesse_actuelle);
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <callback_adoucissement_vitesse+0xd0>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff77 	bl	8000d84 <vit_rap_cyc>
		HAL_SPI_Init( &hspi1 );
 8000e96:	4815      	ldr	r0, [pc, #84]	; (8000eec <callback_adoucissement_vitesse+0xd8>)
 8000e98:	f002 fa82 	bl	80033a0 <HAL_SPI_Init>
		HAL_SPI_Transmit (&hspi1, txData, 2, 100);
 8000e9c:	2364      	movs	r3, #100	; 0x64
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	4913      	ldr	r1, [pc, #76]	; (8000ef0 <callback_adoucissement_vitesse+0xdc>)
 8000ea2:	4812      	ldr	r0, [pc, #72]	; (8000eec <callback_adoucissement_vitesse+0xd8>)
 8000ea4:	f002 fb2d 	bl	8003502 <HAL_SPI_Transmit>
		while( hspi1.State == HAL_SPI_STATE_BUSY );
 8000ea8:	bf00      	nop
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <callback_adoucissement_vitesse+0xd8>)
 8000eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d0f9      	beq.n	8000eaa <callback_adoucissement_vitesse+0x96>
		HAL_SPI_DeInit( &hspi1 );
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <callback_adoucissement_vitesse+0xd8>)
 8000eb8:	f002 fafb 	bl	80034b2 <HAL_SPI_DeInit>
		HAL_Delay(100);
 8000ebc:	2064      	movs	r0, #100	; 0x64
 8000ebe:	f001 f929 	bl	8002114 <HAL_Delay>
}
 8000ec2:	e00a      	b.n	8000eda <callback_adoucissement_vitesse+0xc6>
	else if (vitesse_actuelle == objectif_vitesse){
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <callback_adoucissement_vitesse+0xd0>)
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <callback_adoucissement_vitesse+0xd4>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d104      	bne.n	8000eda <callback_adoucissement_vitesse+0xc6>
		int a = 3; // onjectif atteint
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	607b      	str	r3, [r7, #4]
		a++;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	607b      	str	r3, [r7, #4]
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000002f 	.word	0x2000002f
 8000ee8:	2000002e 	.word	0x2000002e
 8000eec:	200014c4 	.word	0x200014c4
 8000ef0:	2000002c 	.word	0x2000002c

08000ef4 <reception_M0>:
void setup_com_M0(){
	HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, sizeof(UART6_rxBuffer));

}

void reception_M0(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, sizeof(UART6_rxBuffer));
 8000ef8:	220a      	movs	r2, #10
 8000efa:	4903      	ldr	r1, [pc, #12]	; (8000f08 <reception_M0+0x14>)
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <reception_M0+0x18>)
 8000efe:	f003 fef9 	bl	8004cf4 <HAL_UART_Receive_IT>


}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000004c 	.word	0x2000004c
 8000f0c:	200016c0 	.word	0x200016c0

08000f10 <recevoir_message_pc2>:
	}
	*/
}


void recevoir_message_pc2(){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0

	if (UART2_rxBuffer_2[pc_message_recu_index] == 101){ // on est a la fin du message
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <recevoir_message_pc2+0x44>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <recevoir_message_pc2+0x48>)
 8000f1c:	5c9b      	ldrb	r3, [r3, r2]
 8000f1e:	2b65      	cmp	r3, #101	; 0x65
 8000f20:	d110      	bne.n	8000f44 <recevoir_message_pc2+0x34>
		strcpy((char *)message_recu_PC,(char *)UART2_rxBuffer_2);
 8000f22:	490d      	ldr	r1, [pc, #52]	; (8000f58 <recevoir_message_pc2+0x48>)
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <recevoir_message_pc2+0x4c>)
 8000f26:	f004 feef 	bl	8005d08 <strcpy>
		pc_message_recu_index = 0;
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <recevoir_message_pc2+0x44>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
		traiter_message_pc();
 8000f30:	f000 f818 	bl	8000f64 <traiter_message_pc>

		HAL_UART_Abort(&huart2);
 8000f34:	480a      	ldr	r0, [pc, #40]	; (8000f60 <recevoir_message_pc2+0x50>)
 8000f36:	f003 ff0d 	bl	8004d54 <HAL_UART_Abort>
		HAL_UART_Receive_IT(&huart2, UART2_rxBuffer_2, sizeof(UART2_rxBuffer_2));
 8000f3a:	2264      	movs	r2, #100	; 0x64
 8000f3c:	4906      	ldr	r1, [pc, #24]	; (8000f58 <recevoir_message_pc2+0x48>)
 8000f3e:	4808      	ldr	r0, [pc, #32]	; (8000f60 <recevoir_message_pc2+0x50>)
 8000f40:	f003 fed8 	bl	8004cf4 <HAL_UART_Receive_IT>
	}

	pc_message_recu_index ++;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <recevoir_message_pc2+0x44>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b01      	ldr	r3, [pc, #4]	; (8000f54 <recevoir_message_pc2+0x44>)
 8000f4e:	701a      	strb	r2, [r3, #0]

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000048 	.word	0x20000048
 8000f58:	20001614 	.word	0x20001614
 8000f5c:	20000058 	.word	0x20000058
 8000f60:	200017d0 	.word	0x200017d0

08000f64 <traiter_message_pc>:


void traiter_message_pc(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0


	fct_vierge();
 8000f6a:	f7ff ff27 	bl	8000dbc <fct_vierge>

	int a;



	switch(message_recu_PC[0]){
 8000f6e:	4b27      	ldr	r3, [pc, #156]	; (800100c <traiter_message_pc+0xa8>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d845      	bhi.n	8001002 <traiter_message_pc+0x9e>
 8000f76:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <traiter_message_pc+0x18>)
 8000f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7c:	08000f99 	.word	0x08000f99
 8000f80:	08000f9f 	.word	0x08000f9f
 8000f84:	08000fc1 	.word	0x08000fc1
 8000f88:	08000fc7 	.word	0x08000fc7
 8000f8c:	08000fcd 	.word	0x08000fcd
 8000f90:	08000fd3 	.word	0x08000fd3
 8000f94:	08000fed 	.word	0x08000fed



	case 0:   // stop
		a = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
		break;
 8000f9c:	e031      	b.n	8001002 <traiter_message_pc+0x9e>

	case 1:   // avancer
		fct_vierge();
 8000f9e:	f7ff ff0d 	bl	8000dbc <fct_vierge>
		moteur1();
 8000fa2:	f7ff fe83 	bl	8000cac <moteur1>
		cmd_marche();
 8000fa6:	f7ff fea1 	bl	8000cec <cmd_marche>
		spi_transmission();
 8000faa:	f7ff ff17 	bl	8000ddc <spi_transmission>

		fct_vierge();
 8000fae:	f7ff ff05 	bl	8000dbc <fct_vierge>
		moteur2();
 8000fb2:	f7ff fe8b 	bl	8000ccc <moteur2>
		cmd_marche();
 8000fb6:	f7ff fe99 	bl	8000cec <cmd_marche>
		spi_transmission();
 8000fba:	f7ff ff0f 	bl	8000ddc <spi_transmission>


		break;
 8000fbe:	e020      	b.n	8001002 <traiter_message_pc+0x9e>

	case 2:   // reculer
		a = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	607b      	str	r3, [r7, #4]

		break;
 8000fc4:	e01d      	b.n	8001002 <traiter_message_pc+0x9e>

	case 3:   // droite
		a = 3;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	607b      	str	r3, [r7, #4]
		break;
 8000fca:	e01a      	b.n	8001002 <traiter_message_pc+0x9e>

	case 4:   // gauche
		a = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	607b      	str	r3, [r7, #4]

		break;
 8000fd0:	e017      	b.n	8001002 <traiter_message_pc+0x9e>

	case 5:   // controle PWM
		fct_vierge();
 8000fd2:	f7ff fef3 	bl	8000dbc <fct_vierge>
		moteur2();
 8000fd6:	f7ff fe79 	bl	8000ccc <moteur2>
		config_freq_PWM();
 8000fda:	f7ff fea1 	bl	8000d20 <config_freq_PWM>
		txData[1] = message_recu_PC[1];
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <traiter_message_pc+0xa8>)
 8000fe0:	785a      	ldrb	r2, [r3, #1]
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <traiter_message_pc+0xac>)
 8000fe4:	705a      	strb	r2, [r3, #1]
		spi_transmission();
 8000fe6:	f7ff fef9 	bl	8000ddc <spi_transmission>
		break;
 8000fea:	e00a      	b.n	8001002 <traiter_message_pc+0x9e>

	case 6:  // contrôle du rapport cyclique
		fct_vierge();
 8000fec:	f7ff fee6 	bl	8000dbc <fct_vierge>
		moteur2();
 8000ff0:	f7ff fe6c 	bl	8000ccc <moteur2>
		//vit_rap_cyc(message_recu_PC[1]);  // modif pour la rampe d'accélération
		objectif_vitesse = message_recu_PC[1];
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <traiter_message_pc+0xa8>)
 8000ff6:	785a      	ldrb	r2, [r3, #1]
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <traiter_message_pc+0xb0>)
 8000ffa:	701a      	strb	r2, [r3, #0]
		spi_transmission();
 8000ffc:	f7ff feee 	bl	8000ddc <spi_transmission>

		break;
 8001000:	bf00      	nop





}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000058 	.word	0x20000058
 8001010:	2000002c 	.word	0x2000002c
 8001014:	2000002e 	.word	0x2000002e

08001018 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	4b9a      	ldr	r3, [pc, #616]	; (800129c <MX_GPIO_Init+0x284>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a99      	ldr	r2, [pc, #612]	; (800129c <MX_GPIO_Init+0x284>)
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b97      	ldr	r3, [pc, #604]	; (800129c <MX_GPIO_Init+0x284>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	4b93      	ldr	r3, [pc, #588]	; (800129c <MX_GPIO_Init+0x284>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a92      	ldr	r2, [pc, #584]	; (800129c <MX_GPIO_Init+0x284>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b90      	ldr	r3, [pc, #576]	; (800129c <MX_GPIO_Init+0x284>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b8c      	ldr	r3, [pc, #560]	; (800129c <MX_GPIO_Init+0x284>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a8b      	ldr	r2, [pc, #556]	; (800129c <MX_GPIO_Init+0x284>)
 8001070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b89      	ldr	r3, [pc, #548]	; (800129c <MX_GPIO_Init+0x284>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b85      	ldr	r3, [pc, #532]	; (800129c <MX_GPIO_Init+0x284>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a84      	ldr	r2, [pc, #528]	; (800129c <MX_GPIO_Init+0x284>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b82      	ldr	r3, [pc, #520]	; (800129c <MX_GPIO_Init+0x284>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	4b7e      	ldr	r3, [pc, #504]	; (800129c <MX_GPIO_Init+0x284>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a7d      	ldr	r2, [pc, #500]	; (800129c <MX_GPIO_Init+0x284>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b7b      	ldr	r3, [pc, #492]	; (800129c <MX_GPIO_Init+0x284>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b77      	ldr	r3, [pc, #476]	; (800129c <MX_GPIO_Init+0x284>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a76      	ldr	r2, [pc, #472]	; (800129c <MX_GPIO_Init+0x284>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b74      	ldr	r3, [pc, #464]	; (800129c <MX_GPIO_Init+0x284>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2108      	movs	r1, #8
 80010da:	4871      	ldr	r0, [pc, #452]	; (80012a0 <MX_GPIO_Init+0x288>)
 80010dc:	f001 fcb8 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2101      	movs	r1, #1
 80010e4:	486f      	ldr	r0, [pc, #444]	; (80012a4 <MX_GPIO_Init+0x28c>)
 80010e6:	f001 fcb3 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010ea:	2200      	movs	r2, #0
 80010ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80010f0:	486d      	ldr	r0, [pc, #436]	; (80012a8 <MX_GPIO_Init+0x290>)
 80010f2:	f001 fcad 	bl	8002a50 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010f6:	2308      	movs	r3, #8
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4864      	ldr	r0, [pc, #400]	; (80012a0 <MX_GPIO_Init+0x288>)
 800110e:	f001 fa07 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001112:	2301      	movs	r3, #1
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	485e      	ldr	r0, [pc, #376]	; (80012a4 <MX_GPIO_Init+0x28c>)
 800112a:	f001 f9f9 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800112e:	2308      	movs	r3, #8
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800113e:	2305      	movs	r3, #5
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4856      	ldr	r0, [pc, #344]	; (80012a4 <MX_GPIO_Init+0x28c>)
 800114a:	f001 f9e9 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800114e:	2301      	movs	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001152:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	4852      	ldr	r0, [pc, #328]	; (80012ac <MX_GPIO_Init+0x294>)
 8001164:	f001 f9dc 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001168:	2310      	movs	r3, #16
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001178:	2306      	movs	r3, #6
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	484a      	ldr	r0, [pc, #296]	; (80012ac <MX_GPIO_Init+0x294>)
 8001184:	f001 f9cc 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001188:	2304      	movs	r3, #4
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4845      	ldr	r0, [pc, #276]	; (80012b0 <MX_GPIO_Init+0x298>)
 800119c:	f001 f9c0 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80011a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011b2:	2305      	movs	r3, #5
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	483c      	ldr	r0, [pc, #240]	; (80012b0 <MX_GPIO_Init+0x298>)
 80011be:	f001 f9af 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011c2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011c6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4833      	ldr	r0, [pc, #204]	; (80012a8 <MX_GPIO_Init+0x290>)
 80011dc:	f001 f9a0 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011e0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011f2:	2306      	movs	r3, #6
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4829      	ldr	r0, [pc, #164]	; (80012a4 <MX_GPIO_Init+0x28c>)
 80011fe:	f001 f98f 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4825      	ldr	r0, [pc, #148]	; (80012ac <MX_GPIO_Init+0x294>)
 8001218:	f001 f982 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800121c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800122e:	230a      	movs	r3, #10
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	481c      	ldr	r0, [pc, #112]	; (80012ac <MX_GPIO_Init+0x294>)
 800123a:	f001 f971 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800123e:	2320      	movs	r3, #32
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	4815      	ldr	r0, [pc, #84]	; (80012a8 <MX_GPIO_Init+0x290>)
 8001252:	f001 f965 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001256:	f44f 7310 	mov.w	r3, #576	; 0x240
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125c:	2312      	movs	r3, #18
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001260:	2301      	movs	r3, #1
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001268:	2304      	movs	r3, #4
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	480f      	ldr	r0, [pc, #60]	; (80012b0 <MX_GPIO_Init+0x298>)
 8001274:	f001 f954 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001278:	2302      	movs	r3, #2
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800127c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_GPIO_Init+0x288>)
 800128e:	f001 f947 	bl	8002520 <HAL_GPIO_Init>

}
 8001292:	bf00      	nop
 8001294:	3730      	adds	r7, #48	; 0x30
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020c00 	.word	0x40020c00
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400

080012b4 <lidar_scan>:
	uint8_t Data[2] = {0xA5, 0x50};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}

void lidar_scan(){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
	uint8_t Data[2] = {0xA5, 0x20};
 80012ba:	f242 03a5 	movw	r3, #8357	; 0x20a5
 80012be:	80bb      	strh	r3, [r7, #4]
	HAL_UART_Transmit(&huart3, Data, 2, 100);
 80012c0:	1d39      	adds	r1, r7, #4
 80012c2:	2364      	movs	r3, #100	; 0x64
 80012c4:	2202      	movs	r2, #2
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <lidar_scan+0x20>)
 80012c8:	f003 fc82 	bl	8004bd0 <HAL_UART_Transmit>
	return;
 80012cc:	bf00      	nop
}
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20001678 	.word	0x20001678

080012d8 <lidar_stop>:
	uint8_t Data[2] = {0xA5, 0x21};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}

void lidar_stop(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	uint8_t Data[2] = {0xA5, 0x25};
 80012de:	f242 53a5 	movw	r3, #9637	; 0x25a5
 80012e2:	80bb      	strh	r3, [r7, #4]
	HAL_UART_Transmit(&huart3, Data, 2, 100);
 80012e4:	1d39      	adds	r1, r7, #4
 80012e6:	2364      	movs	r3, #100	; 0x64
 80012e8:	2202      	movs	r2, #2
 80012ea:	4803      	ldr	r0, [pc, #12]	; (80012f8 <lidar_stop+0x20>)
 80012ec:	f003 fc70 	bl	8004bd0 <HAL_UART_Transmit>
	return;
 80012f0:	bf00      	nop
}
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20001678 	.word	0x20001678
 80012fc:	00000000 	.word	0x00000000

08001300 <uart_lidar_recieve>:

void uart_lidar_recieve(){
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0

	octet_recu = UART3_rxBuffer;
 8001306:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <uart_lidar_recieve+0x1d0>)
 8001308:	781a      	ldrb	r2, [r3, #0]
 800130a:	4b72      	ldr	r3, [pc, #456]	; (80014d4 <uart_lidar_recieve+0x1d4>)
 800130c:	701a      	strb	r2, [r3, #0]

	historique_reception[indice_historique_reception] = UART3_rxBuffer;
 800130e:	4b72      	ldr	r3, [pc, #456]	; (80014d8 <uart_lidar_recieve+0x1d8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6f      	ldr	r2, [pc, #444]	; (80014d0 <uart_lidar_recieve+0x1d0>)
 8001314:	7811      	ldrb	r1, [r2, #0]
 8001316:	4a71      	ldr	r2, [pc, #452]	; (80014dc <uart_lidar_recieve+0x1dc>)
 8001318:	54d1      	strb	r1, [r2, r3]
	//indice_historique_reception ++;



	if (indice_historique_reception == 500){
 800131a:	4b6f      	ldr	r3, [pc, #444]	; (80014d8 <uart_lidar_recieve+0x1d8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001322:	d102      	bne.n	800132a <uart_lidar_recieve+0x2a>
		indice_historique_reception = 0;
 8001324:	4b6c      	ldr	r3, [pc, #432]	; (80014d8 <uart_lidar_recieve+0x1d8>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
	}


	switch (lidar_state){
 800132a:	4b6d      	ldr	r3, [pc, #436]	; (80014e0 <uart_lidar_recieve+0x1e0>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <uart_lidar_recieve+0x38>
 8001332:	2b01      	cmp	r3, #1
 8001334:	d041      	beq.n	80013ba <uart_lidar_recieve+0xba>


			break;

		default:
			break;
 8001336:	e0c0      	b.n	80014ba <uart_lidar_recieve+0x1ba>
			if ((octet_recu == 0xA5) && (last_bit_state == end) ){  // on recoit l'octet de start
 8001338:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <uart_lidar_recieve+0x1d4>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2ba5      	cmp	r3, #165	; 0xa5
 800133e:	d112      	bne.n	8001366 <uart_lidar_recieve+0x66>
 8001340:	4b68      	ldr	r3, [pc, #416]	; (80014e4 <uart_lidar_recieve+0x1e4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b04      	cmp	r3, #4
 8001346:	d10e      	bne.n	8001366 <uart_lidar_recieve+0x66>
				bit_state = start1;
 8001348:	4b67      	ldr	r3, [pc, #412]	; (80014e8 <uart_lidar_recieve+0x1e8>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
				taille_message_recu = 0; // on remet a zero la taille du message recu
 800134e:	4b67      	ldr	r3, [pc, #412]	; (80014ec <uart_lidar_recieve+0x1ec>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
				index_ecriture_message_recu = 0;
 8001354:	4b66      	ldr	r3, [pc, #408]	; (80014f0 <uart_lidar_recieve+0x1f0>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
				memset(lidar_message_recu,0,sizeof(lidar_message_recu)); // on efface le buffer
 800135a:	2214      	movs	r2, #20
 800135c:	2100      	movs	r1, #0
 800135e:	4865      	ldr	r0, [pc, #404]	; (80014f4 <uart_lidar_recieve+0x1f4>)
 8001360:	f004 fcca 	bl	8005cf8 <memset>
 8001364:	e024      	b.n	80013b0 <uart_lidar_recieve+0xb0>
			else if ((last_bit_state == start1) && (octet_recu == 0x5A)){ // on recoit le deuxième octet de start
 8001366:	4b5f      	ldr	r3, [pc, #380]	; (80014e4 <uart_lidar_recieve+0x1e4>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d107      	bne.n	800137e <uart_lidar_recieve+0x7e>
 800136e:	4b59      	ldr	r3, [pc, #356]	; (80014d4 <uart_lidar_recieve+0x1d4>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b5a      	cmp	r3, #90	; 0x5a
 8001374:	d103      	bne.n	800137e <uart_lidar_recieve+0x7e>
				bit_state = start2;
 8001376:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <uart_lidar_recieve+0x1e8>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e018      	b.n	80013b0 <uart_lidar_recieve+0xb0>
			else if (last_bit_state == start2){   // on a l'octet qui donne la taille de la communication
 800137e:	4b59      	ldr	r3, [pc, #356]	; (80014e4 <uart_lidar_recieve+0x1e4>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d107      	bne.n	8001396 <uart_lidar_recieve+0x96>
				bit_state = size;
 8001386:	4b58      	ldr	r3, [pc, #352]	; (80014e8 <uart_lidar_recieve+0x1e8>)
 8001388:	2202      	movs	r2, #2
 800138a:	701a      	strb	r2, [r3, #0]
				taille_message_recu = octet_recu;
 800138c:	4b51      	ldr	r3, [pc, #324]	; (80014d4 <uart_lidar_recieve+0x1d4>)
 800138e:	781a      	ldrb	r2, [r3, #0]
 8001390:	4b56      	ldr	r3, [pc, #344]	; (80014ec <uart_lidar_recieve+0x1ec>)
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e00c      	b.n	80013b0 <uart_lidar_recieve+0xb0>
			else if ((last_bit_state == size) || (last_bit_state == data)){     // on a une data
 8001396:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <uart_lidar_recieve+0x1e4>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d003      	beq.n	80013a6 <uart_lidar_recieve+0xa6>
 800139e:	4b51      	ldr	r3, [pc, #324]	; (80014e4 <uart_lidar_recieve+0x1e4>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d104      	bne.n	80013b0 <uart_lidar_recieve+0xb0>
				bit_state = data;
 80013a6:	4b50      	ldr	r3, [pc, #320]	; (80014e8 <uart_lidar_recieve+0x1e8>)
 80013a8:	2203      	movs	r2, #3
 80013aa:	701a      	strb	r2, [r3, #0]
				reception_octet_data();
 80013ac:	f000 f8b0 	bl	8001510 <reception_octet_data>
			last_bit_state = bit_state; // machine d'état
 80013b0:	4b4d      	ldr	r3, [pc, #308]	; (80014e8 <uart_lidar_recieve+0x1e8>)
 80013b2:	781a      	ldrb	r2, [r3, #0]
 80013b4:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <uart_lidar_recieve+0x1e4>)
 80013b6:	701a      	strb	r2, [r3, #0]
			break;
 80013b8:	e07f      	b.n	80014ba <uart_lidar_recieve+0x1ba>
			if (compteur == 4){
 80013ba:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <uart_lidar_recieve+0x1f8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d16f      	bne.n	80014a2 <uart_lidar_recieve+0x1a2>
				num_frame_scan ++;
 80013c2:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <uart_lidar_recieve+0x1fc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <uart_lidar_recieve+0x1fc>)
 80013ca:	6013      	str	r3, [r2, #0]
				compteur = 0;
 80013cc:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <uart_lidar_recieve+0x1f8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
				if (error_check() == 1){
 80013d2:	f000 f8e3 	bl	800159c <error_check>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d102      	bne.n	80013e2 <uart_lidar_recieve+0xe2>
					compteur = 0;
 80013dc:	4b46      	ldr	r3, [pc, #280]	; (80014f8 <uart_lidar_recieve+0x1f8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
				uint8_t a1 = lidar_message_recu[1] >> 1;
 80013e2:	4b44      	ldr	r3, [pc, #272]	; (80014f4 <uart_lidar_recieve+0x1f4>)
 80013e4:	785b      	ldrb	r3, [r3, #1]
 80013e6:	085b      	lsrs	r3, r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
				uint8_t a2 = lidar_message_recu[2];
 80013ea:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <uart_lidar_recieve+0x1f4>)
 80013ec:	789b      	ldrb	r3, [r3, #2]
 80013ee:	73bb      	strb	r3, [r7, #14]
				uint8_t d1 = lidar_message_recu[3];
 80013f0:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <uart_lidar_recieve+0x1f4>)
 80013f2:	78db      	ldrb	r3, [r3, #3]
 80013f4:	737b      	strb	r3, [r7, #13]
				uint8_t d2 = lidar_message_recu[4];
 80013f6:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <uart_lidar_recieve+0x1f4>)
 80013f8:	791b      	ldrb	r3, [r3, #4]
 80013fa:	733b      	strb	r3, [r7, #12]
				indice_historique_angle ++;
 80013fc:	4b40      	ldr	r3, [pc, #256]	; (8001500 <uart_lidar_recieve+0x200>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	4a3f      	ldr	r2, [pc, #252]	; (8001500 <uart_lidar_recieve+0x200>)
 8001404:	6013      	str	r3, [r2, #0]
				uint16_t angle_16 = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	817b      	strh	r3, [r7, #10]
				angle_16 = a2 << 8 | a1;
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	b21a      	sxth	r2, r3
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	b21b      	sxth	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	b21b      	sxth	r3, r3
 8001418:	817b      	strh	r3, [r7, #10]
				angle_16 = angle_16 >> 1;
 800141a:	897b      	ldrh	r3, [r7, #10]
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	817b      	strh	r3, [r7, #10]
				historique_angle[indice_historique_angle] = (int)angle_16 / 64;
 8001420:	897b      	ldrh	r3, [r7, #10]
 8001422:	099b      	lsrs	r3, r3, #6
 8001424:	b29a      	uxth	r2, r3
 8001426:	4b36      	ldr	r3, [pc, #216]	; (8001500 <uart_lidar_recieve+0x200>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4611      	mov	r1, r2
 800142c:	4a35      	ldr	r2, [pc, #212]	; (8001504 <uart_lidar_recieve+0x204>)
 800142e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (indice_historique_angle >= 900){
 8001432:	4b33      	ldr	r3, [pc, #204]	; (8001500 <uart_lidar_recieve+0x200>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800143a:	db02      	blt.n	8001442 <uart_lidar_recieve+0x142>
					indice_historique_angle  = 0;
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <uart_lidar_recieve+0x200>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
				angle_16 = (int) (angle_16 / 64 / 1.42);
 8001442:	897b      	ldrh	r3, [r7, #10]
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	b29b      	uxth	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f80f 	bl	800046c <__aeabi_i2d>
 800144e:	a31e      	add	r3, pc, #120	; (adr r3, 80014c8 <uart_lidar_recieve+0x1c8>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f99e 	bl	8000794 <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fa80 	bl	8000964 <__aeabi_d2iz>
 8001464:	4603      	mov	r3, r0
 8001466:	817b      	strh	r3, [r7, #10]
				uint8_t lidar_message_a_transmettre[5] = {1, angle_16, a2, d1, d2};
 8001468:	2301      	movs	r3, #1
 800146a:	713b      	strb	r3, [r7, #4]
 800146c:	897b      	ldrh	r3, [r7, #10]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	717b      	strb	r3, [r7, #5]
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	71bb      	strb	r3, [r7, #6]
 8001476:	7b7b      	ldrb	r3, [r7, #13]
 8001478:	71fb      	strb	r3, [r7, #7]
 800147a:	7b3b      	ldrb	r3, [r7, #12]
 800147c:	723b      	strb	r3, [r7, #8]
				if (NUMtrame >= 2){
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <uart_lidar_recieve+0x208>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	dd08      	ble.n	8001498 <uart_lidar_recieve+0x198>
					HAL_UART_Transmit(&huart2, lidar_message_a_transmettre, 5, 100);
 8001486:	1d39      	adds	r1, r7, #4
 8001488:	2364      	movs	r3, #100	; 0x64
 800148a:	2205      	movs	r2, #5
 800148c:	481f      	ldr	r0, [pc, #124]	; (800150c <uart_lidar_recieve+0x20c>)
 800148e:	f003 fb9f 	bl	8004bd0 <HAL_UART_Transmit>
					NUMtrame = 0;
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <uart_lidar_recieve+0x208>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
				NUMtrame ++;
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <uart_lidar_recieve+0x208>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <uart_lidar_recieve+0x208>)
 80014a0:	6013      	str	r3, [r2, #0]
			lidar_message_recu[compteur] = octet_recu;
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <uart_lidar_recieve+0x1f8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <uart_lidar_recieve+0x1d4>)
 80014a8:	7811      	ldrb	r1, [r2, #0]
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <uart_lidar_recieve+0x1f4>)
 80014ac:	54d1      	strb	r1, [r2, r3]
			compteur ++;
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <uart_lidar_recieve+0x1f8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <uart_lidar_recieve+0x1f8>)
 80014b6:	6013      	str	r3, [r2, #0]
			break;
 80014b8:	bf00      	nop


		}

	return;
 80014ba:	bf00      	nop
}
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	f3af 8000 	nop.w
 80014c8:	eb851eb8 	.word	0xeb851eb8
 80014cc:	3ff6b851 	.word	0x3ff6b851
 80014d0:	200016bc 	.word	0x200016bc
 80014d4:	200000c1 	.word	0x200000c1
 80014d8:	20000040 	.word	0x20000040
 80014dc:	200000c4 	.word	0x200000c4
 80014e0:	20000030 	.word	0x20000030
 80014e4:	20000000 	.word	0x20000000
 80014e8:	200000c0 	.word	0x200000c0
 80014ec:	200000c2 	.word	0x200000c2
 80014f0:	200000bc 	.word	0x200000bc
 80014f4:	200004ac 	.word	0x200004ac
 80014f8:	20000038 	.word	0x20000038
 80014fc:	20000034 	.word	0x20000034
 8001500:	20000044 	.word	0x20000044
 8001504:	200004c0 	.word	0x200004c0
 8001508:	2000003c 	.word	0x2000003c
 800150c:	200017d0 	.word	0x200017d0

08001510 <reception_octet_data>:

void reception_octet_data(){
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
		lidar_message_recu[index_ecriture_message_recu] = octet_recu;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <reception_octet_data+0x38>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0c      	ldr	r2, [pc, #48]	; (800154c <reception_octet_data+0x3c>)
 800151a:	7811      	ldrb	r1, [r2, #0]
 800151c:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <reception_octet_data+0x40>)
 800151e:	54d1      	strb	r1, [r2, r3]
		index_ecriture_message_recu ++;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <reception_octet_data+0x38>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <reception_octet_data+0x38>)
 8001528:	6013      	str	r3, [r2, #0]
		if (index_ecriture_message_recu == taille_message_recu){
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <reception_octet_data+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <reception_octet_data+0x38>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d105      	bne.n	8001544 <reception_octet_data+0x34>
			bit_state = end;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <reception_octet_data+0x48>)
 800153a:	2204      	movs	r2, #4
 800153c:	701a      	strb	r2, [r3, #0]
			lidar_fin_du_message_recu();
 800153e:	f000 f80d 	bl	800155c <lidar_fin_du_message_recu>
		}


	return;
 8001542:	bf00      	nop
 8001544:	bf00      	nop
}
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200000bc 	.word	0x200000bc
 800154c:	200000c1 	.word	0x200000c1
 8001550:	200004ac 	.word	0x200004ac
 8001554:	200000c2 	.word	0x200000c2
 8001558:	200000c0 	.word	0x200000c0

0800155c <lidar_fin_du_message_recu>:


void lidar_fin_du_message_recu(){      // on transmet le message au PC
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

	// on est en mode scan
	if((lidar_message_recu[0] == 0x0) && (lidar_message_recu[1] == 0x0) && (lidar_message_recu[2] == 0x40) && (lidar_message_recu[3] == 0x81)){
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <lidar_fin_du_message_recu+0x38>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10f      	bne.n	8001588 <lidar_fin_du_message_recu+0x2c>
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <lidar_fin_du_message_recu+0x38>)
 800156a:	785b      	ldrb	r3, [r3, #1]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10b      	bne.n	8001588 <lidar_fin_du_message_recu+0x2c>
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <lidar_fin_du_message_recu+0x38>)
 8001572:	789b      	ldrb	r3, [r3, #2]
 8001574:	2b40      	cmp	r3, #64	; 0x40
 8001576:	d107      	bne.n	8001588 <lidar_fin_du_message_recu+0x2c>
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <lidar_fin_du_message_recu+0x38>)
 800157a:	78db      	ldrb	r3, [r3, #3]
 800157c:	2b81      	cmp	r3, #129	; 0x81
 800157e:	d103      	bne.n	8001588 <lidar_fin_du_message_recu+0x2c>
		lidar_state = scan;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <lidar_fin_du_message_recu+0x3c>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
	}




	return;
 8001586:	bf00      	nop
 8001588:	bf00      	nop



}
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200004ac 	.word	0x200004ac
 8001598:	20000030 	.word	0x20000030

0800159c <error_check>:


int error_check(){
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0

	uint8_t trame_copie = lidar_message_recu[0];
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <error_check+0x60>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
	trame_copie &= 0b11000000;
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015ae:	71fb      	strb	r3, [r7, #7]


	if (trame_copie == 0b11000000 || trame_copie == 0b00000000){
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2bc0      	cmp	r3, #192	; 0xc0
 80015b4:	d002      	beq.n	80015bc <error_check+0x20>
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d104      	bne.n	80015c6 <error_check+0x2a>
		index_ecriture_message_recu = 0;
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <error_check+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
		return 1; // erreur sur le bit S et S/
 80015c2:	2301      	movs	r3, #1
 80015c4:	e013      	b.n	80015ee <error_check+0x52>
	}
	uint8_t trame_copie2 = lidar_message_recu[1];
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <error_check+0x60>)
 80015c8:	785b      	ldrb	r3, [r3, #1]
 80015ca:	71bb      	strb	r3, [r7, #6]
	trame_copie2 &= 0b10000000;
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015d2:	71bb      	strb	r3, [r7, #6]
	if (trame_copie2 == 0B0 && index_ecriture_message_recu >= 1){
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d108      	bne.n	80015ec <error_check+0x50>
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <error_check+0x64>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	dd04      	ble.n	80015ec <error_check+0x50>
		index_ecriture_message_recu = 0;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <error_check+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
		return 1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <error_check+0x52>
	}

	return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200004ac 	.word	0x200004ac
 8001600:	200000bc 	.word	0x200000bc

08001604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001608:	f000 fd12 	bl	8002030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160c:	f000 f85a 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001610:	f7ff fd02 	bl	8001018 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001614:	f000 fb76 	bl	8001d04 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001618:	f000 fb9e 	bl	8001d58 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800161c:	f000 f8c2 	bl	80017a4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001620:	f000 fa1c 	bl	8001a5c <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8001624:	f000 fbc2 	bl	8001dac <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8001628:	f000 fa9c 	bl	8001b64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer_2, sizeof(&UART2_rxBuffer_2));
 800162c:	2204      	movs	r2, #4
 800162e:	491b      	ldr	r1, [pc, #108]	; (800169c <main+0x98>)
 8001630:	481b      	ldr	r0, [pc, #108]	; (80016a0 <main+0x9c>)
 8001632:	f003 fb5f 	bl	8004cf4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1);
 8001636:	2201      	movs	r2, #1
 8001638:	491a      	ldr	r1, [pc, #104]	; (80016a4 <main+0xa0>)
 800163a:	481b      	ldr	r0, [pc, #108]	; (80016a8 <main+0xa4>)
 800163c:	f003 fb5a 	bl	8004cf4 <HAL_UART_Receive_IT>



  //reset_lidar();
  //demarrer_pwm_lidar();
  lidar_stop();
 8001640:	f7ff fe4a 	bl	80012d8 <lidar_stop>
  HAL_Delay(50);
 8001644:	2032      	movs	r0, #50	; 0x32
 8001646:	f000 fd65 	bl	8002114 <HAL_Delay>

  lidar_scan();
 800164a:	f7ff fe33 	bl	80012b4 <lidar_scan>
  //tests_lidar();

  /*
   * Config FPGA
   */
  fct_vierge();
 800164e:	f7ff fbb5 	bl	8000dbc <fct_vierge>
  config_freq_PWM_p127();
 8001652:	f7ff fb7d 	bl	8000d50 <config_freq_PWM_p127>
  HAL_SPI_Init( &hspi1 );
 8001656:	4815      	ldr	r0, [pc, #84]	; (80016ac <main+0xa8>)
 8001658:	f001 fea2 	bl	80033a0 <HAL_SPI_Init>
  HAL_SPI_Transmit (&hspi1, txData, 2, 100);
 800165c:	2364      	movs	r3, #100	; 0x64
 800165e:	2202      	movs	r2, #2
 8001660:	4913      	ldr	r1, [pc, #76]	; (80016b0 <main+0xac>)
 8001662:	4812      	ldr	r0, [pc, #72]	; (80016ac <main+0xa8>)
 8001664:	f001 ff4d 	bl	8003502 <HAL_SPI_Transmit>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 8001668:	bf00      	nop
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <main+0xa8>)
 800166c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d0f9      	beq.n	800166a <main+0x66>
  HAL_SPI_DeInit( &hspi1 );
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <main+0xa8>)
 8001678:	f001 ff1b 	bl	80034b2 <HAL_SPI_DeInit>

  /*
   * Test rampe
   */
  vitesse_actuelle = 0;
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <main+0xb0>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
  objectif_vitesse = 20;
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <main+0xb4>)
 8001684:	2214      	movs	r2, #20
 8001686:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim2);
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <main+0xb8>)
 800168a:	f002 faaf 	bl	8003bec <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800168e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001692:	480b      	ldr	r0, [pc, #44]	; (80016c0 <main+0xbc>)
 8001694:	f001 f9f5 	bl	8002a82 <HAL_GPIO_TogglePin>
 8001698:	e7f9      	b.n	800168e <main+0x8a>
 800169a:	bf00      	nop
 800169c:	20001614 	.word	0x20001614
 80016a0:	200017d0 	.word	0x200017d0
 80016a4:	200016bc 	.word	0x200016bc
 80016a8:	20001678 	.word	0x20001678
 80016ac:	200014c4 	.word	0x200014c4
 80016b0:	2000002c 	.word	0x2000002c
 80016b4:	2000002f 	.word	0x2000002f
 80016b8:	2000002e 	.word	0x2000002e
 80016bc:	200015c8 	.word	0x200015c8
 80016c0:	40020c00 	.word	0x40020c00

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	; 0x50
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2230      	movs	r2, #48	; 0x30
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 fb10 	bl	8005cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <SystemClock_Config+0xcc>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a27      	ldr	r2, [pc, #156]	; (8001790 <SystemClock_Config+0xcc>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <SystemClock_Config+0xcc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <SystemClock_Config+0xd0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <SystemClock_Config+0xd0>)
 800170e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <SystemClock_Config+0xd0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001720:	2301      	movs	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2302      	movs	r3, #2
 800172c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001734:	2308      	movs	r3, #8
 8001736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001738:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800173e:	2302      	movs	r3, #2
 8001740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001742:	2307      	movs	r3, #7
 8001744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	4618      	mov	r0, r3
 800174c:	f001 f9b4 	bl	8002ab8 <HAL_RCC_OscConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001756:	f000 f81f 	bl	8001798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175a:	230f      	movs	r3, #15
 800175c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175e:	2302      	movs	r3, #2
 8001760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001766:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800176a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2105      	movs	r1, #5
 8001778:	4618      	mov	r0, r3
 800177a:	f001 fc15 	bl	8002fa8 <HAL_RCC_ClockConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001784:	f000 f808 	bl	8001798 <Error_Handler>
  }
}
 8001788:	bf00      	nop
 800178a:	3750      	adds	r7, #80	; 0x50
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <Error_Handler+0x8>
	...

080017a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_SPI1_Init+0x64>)
 80017aa:	4a18      	ldr	r2, [pc, #96]	; (800180c <MX_SPI1_Init+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_SPI1_Init+0x64>)
 80017b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_SPI1_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_SPI1_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_SPI1_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_SPI1_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_SPI1_Init+0x64>)
 80017d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_SPI1_Init+0x64>)
 80017d8:	2230      	movs	r2, #48	; 0x30
 80017da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <MX_SPI1_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_SPI1_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <MX_SPI1_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_SPI1_Init+0x64>)
 80017f0:	220a      	movs	r2, #10
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_SPI1_Init+0x64>)
 80017f6:	f001 fdd3 	bl	80033a0 <HAL_SPI_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001800:	f7ff ffca 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200014c4 	.word	0x200014c4
 800180c:	40013000 	.word	0x40013000

08001810 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <HAL_SPI_MspInit+0xb4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d144      	bne.n	80018bc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_SPI_MspInit+0xb8>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <HAL_SPI_MspInit+0xb8>)
 800183c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_SPI_MspInit+0xb8>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_SPI_MspInit+0xb8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_SPI_MspInit+0xb8>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_SPI_MspInit+0xb8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800186a:	23e0      	movs	r3, #224	; 0xe0
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800187a:	2305      	movs	r3, #5
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4811      	ldr	r0, [pc, #68]	; (80018cc <HAL_SPI_MspInit+0xbc>)
 8001886:	f000 fe4b 	bl	8002520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800188a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800189c:	2305      	movs	r3, #5
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4809      	ldr	r0, [pc, #36]	; (80018cc <HAL_SPI_MspInit+0xbc>)
 80018a8:	f000 fe3a 	bl	8002520 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	2023      	movs	r0, #35	; 0x23
 80018b2:	f000 fd52 	bl	800235a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80018b6:	2023      	movs	r0, #35	; 0x23
 80018b8:	f000 fd6b 	bl	8002392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40013000 	.word	0x40013000
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020000 	.word	0x40020000

080018d0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <HAL_SPI_MspDeInit+0x38>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10d      	bne.n	80018fe <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_SPI_MspDeInit+0x3c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a09      	ldr	r2, [pc, #36]	; (800190c <HAL_SPI_MspDeInit+0x3c>)
 80018e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin|GPIO_PIN_15);
 80018ee:	f248 01e0 	movw	r1, #32992	; 0x80e0
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <HAL_SPI_MspDeInit+0x40>)
 80018f4:	f000 ffb0 	bl	8002858 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80018f8:	2023      	movs	r0, #35	; 0x23
 80018fa:	f000 fd58 	bl	80023ae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40013000 	.word	0x40013000
 800190c:	40023800 	.word	0x40023800
 8001910:	40020000 	.word	0x40020000

08001914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_MspInit+0x4c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <HAL_MspInit+0x4c>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_MspInit+0x4c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_MspInit+0x4c>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001952:	2007      	movs	r0, #7
 8001954:	f000 fcf6 	bl	8002344 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 fb90 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <TIM2_IRQHandler+0x14>)
 80019be:	f002 f9d4 	bl	8003d6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  callback_adoucissement_vitesse();
 80019c2:	f7ff fa27 	bl	8000e14 <callback_adoucissement_vitesse>



  /* USER CODE END TIM2_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200015c8 	.word	0x200015c8

080019d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <SPI1_IRQHandler+0x10>)
 80019d6:	f001 fed1 	bl	800377c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200014c4 	.word	0x200014c4

080019e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019e8:	4803      	ldr	r0, [pc, #12]	; (80019f8 <USART2_IRQHandler+0x14>)
 80019ea:	f003 fa9f 	bl	8004f2c <HAL_UART_IRQHandler>

  */

  //uart_pc_recieve();

  recevoir_message_pc2();
 80019ee:	f7ff fa8f 	bl	8000f10 <recevoir_message_pc2>


  /* USER CODE END USART2_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200017d0 	.word	0x200017d0

080019fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <USART3_IRQHandler+0x1c>)
 8001a02:	f003 fa93 	bl	8004f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  uart_lidar_recieve();
 8001a06:	f7ff fc7b 	bl	8001300 <uart_lidar_recieve>

  HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4903      	ldr	r1, [pc, #12]	; (8001a1c <USART3_IRQHandler+0x20>)
 8001a0e:	4802      	ldr	r0, [pc, #8]	; (8001a18 <USART3_IRQHandler+0x1c>)
 8001a10:	f003 f970 	bl	8004cf4 <HAL_UART_Receive_IT>




  /* USER CODE END USART3_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20001678 	.word	0x20001678
 8001a1c:	200016bc 	.word	0x200016bc

08001a20 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <USART6_IRQHandler+0x14>)
 8001a26:	f003 fa81 	bl	8004f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  reception_M0();
 8001a2a:	f7ff fa63 	bl	8000ef4 <reception_M0>


  /* USER CODE END USART6_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200016c0 	.word	0x200016c0

08001a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <SystemInit+0x20>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <SystemInit+0x20>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b092      	sub	sp, #72	; 0x48
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
 8001a7c:	615a      	str	r2, [r3, #20]
 8001a7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2220      	movs	r2, #32
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 f936 	bl	8005cf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a8c:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <MX_TIM1_Init+0x100>)
 8001a8e:	4a34      	ldr	r2, [pc, #208]	; (8001b60 <MX_TIM1_Init+0x104>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a92:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <MX_TIM1_Init+0x100>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b30      	ldr	r3, [pc, #192]	; (8001b5c <MX_TIM1_Init+0x100>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <MX_TIM1_Init+0x100>)
 8001aa0:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001aa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <MX_TIM1_Init+0x100>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <MX_TIM1_Init+0x100>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <MX_TIM1_Init+0x100>)
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ab8:	4828      	ldr	r0, [pc, #160]	; (8001b5c <MX_TIM1_Init+0x100>)
 8001aba:	f002 f907 	bl	8003ccc <HAL_TIM_PWM_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001ac4:	f7ff fe68 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ad0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4821      	ldr	r0, [pc, #132]	; (8001b5c <MX_TIM1_Init+0x100>)
 8001ad8:	f002 fef6 	bl	80048c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ae2:	f7ff fe59 	bl	8001798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae6:	2360      	movs	r3, #96	; 0x60
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001af4:	2300      	movs	r3, #0
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4813      	ldr	r0, [pc, #76]	; (8001b5c <MX_TIM1_Init+0x100>)
 8001b0e:	f002 fa35 	bl	8003f7c <HAL_TIM_PWM_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001b18:	f7ff fe3e 	bl	8001798 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4807      	ldr	r0, [pc, #28]	; (8001b5c <MX_TIM1_Init+0x100>)
 8001b40:	f002 ff3e 	bl	80049c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001b4a:	f7ff fe25 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b4e:	4803      	ldr	r0, [pc, #12]	; (8001b5c <MX_TIM1_Init+0x100>)
 8001b50:	f000 f89e 	bl	8001c90 <HAL_TIM_MspPostInit>

}
 8001b54:	bf00      	nop
 8001b56:	3748      	adds	r7, #72	; 0x48
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20001580 	.word	0x20001580
 8001b60:	40010000 	.word	0x40010000

08001b64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001b8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001b92:	2210      	movs	r2, #16
 8001b94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001b98:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001baa:	4814      	ldr	r0, [pc, #80]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001bac:	f001 ffce 	bl	8003b4c <HAL_TIM_Base_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001bb6:	f7ff fdef 	bl	8001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480d      	ldr	r0, [pc, #52]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001bc8:	f002 fa9a 	bl	8004100 <HAL_TIM_ConfigClockSource>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bd2:	f7ff fde1 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bde:	463b      	mov	r3, r7
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001be4:	f002 fe70 	bl	80048c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bee:	f7ff fdd3 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200015c8 	.word	0x200015c8

08001c00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d10d      	bne.n	8001c2e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_TIM_PWM_MspInit+0x40>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_TIM_PWM_MspInit+0x40>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <HAL_TIM_PWM_MspInit+0x40>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c54:	d115      	bne.n	8001c82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <HAL_TIM_Base_MspInit+0x48>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <HAL_TIM_Base_MspInit+0x48>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_TIM_Base_MspInit+0x48>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	201c      	movs	r0, #28
 8001c78:	f000 fb6f 	bl	800235a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c7c:	201c      	movs	r0, #28
 8001c7e:	f000 fb88 	bl	8002392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800

08001c90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <HAL_TIM_MspPostInit+0x68>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d11e      	bne.n	8001cf0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_TIM_MspPostInit+0x6c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_TIM_MspPostInit+0x6c>)
 8001cbc:	f043 0310 	orr.w	r3, r3, #16
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_TIM_MspPostInit+0x6c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <HAL_TIM_MspPostInit+0x70>)
 8001cec:	f000 fc18 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cf0:	bf00      	nop
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40021000 	.word	0x40021000

08001d04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <MX_USART2_UART_Init+0x50>)
 8001d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d3c:	f002 fea6 	bl	8004a8c <HAL_UART_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d46:	f7ff fd27 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200017d0 	.word	0x200017d0
 8001d54:	40004400 	.word	0x40004400

08001d58 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <MX_USART3_UART_Init+0x4c>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <MX_USART3_UART_Init+0x50>)
 8001d60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <MX_USART3_UART_Init+0x4c>)
 8001d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <MX_USART3_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MX_USART3_UART_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <MX_USART3_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_USART3_UART_Init+0x4c>)
 8001d7e:	220c      	movs	r2, #12
 8001d80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <MX_USART3_UART_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_USART3_UART_Init+0x4c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_USART3_UART_Init+0x4c>)
 8001d90:	f002 fe7c 	bl	8004a8c <HAL_UART_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d9a:	f7ff fcfd 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20001678 	.word	0x20001678
 8001da8:	40004800 	.word	0x40004800

08001dac <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_USART6_UART_Init+0x4c>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <MX_USART6_UART_Init+0x50>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <MX_USART6_UART_Init+0x4c>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_USART6_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_USART6_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <MX_USART6_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_USART6_UART_Init+0x4c>)
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <MX_USART6_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_USART6_UART_Init+0x4c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <MX_USART6_UART_Init+0x4c>)
 8001de4:	f002 fe9f 	bl	8004b26 <HAL_HalfDuplex_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001dee:	f7ff fcd3 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200016c0 	.word	0x200016c0
 8001dfc:	40011400 	.word	0x40011400

08001e00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08e      	sub	sp, #56	; 0x38
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a67      	ldr	r2, [pc, #412]	; (8001fbc <HAL_UART_MspInit+0x1bc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d134      	bne.n	8001e8c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
 8001e26:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a65      	ldr	r2, [pc, #404]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	623b      	str	r3, [r7, #32]
 8001e3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	4b5f      	ldr	r3, [pc, #380]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a5e      	ldr	r2, [pc, #376]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b5c      	ldr	r3, [pc, #368]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e72:	4619      	mov	r1, r3
 8001e74:	4853      	ldr	r0, [pc, #332]	; (8001fc4 <HAL_UART_MspInit+0x1c4>)
 8001e76:	f000 fb53 	bl	8002520 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2026      	movs	r0, #38	; 0x26
 8001e80:	f000 fa6b 	bl	800235a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e84:	2026      	movs	r0, #38	; 0x26
 8001e86:	f000 fa84 	bl	8002392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001e8a:	e092      	b.n	8001fb2 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART3)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a4d      	ldr	r2, [pc, #308]	; (8001fc8 <HAL_UART_MspInit+0x1c8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d154      	bne.n	8001f40 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a48      	ldr	r2, [pc, #288]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a41      	ldr	r2, [pc, #260]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a3a      	ldr	r2, [pc, #232]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001ed8:	f043 0308 	orr.w	r3, r3, #8
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001efc:	2307      	movs	r3, #7
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f04:	4619      	mov	r1, r3
 8001f06:	4831      	ldr	r0, [pc, #196]	; (8001fcc <HAL_UART_MspInit+0x1cc>)
 8001f08:	f000 fb0a 	bl	8002520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f1e:	2307      	movs	r3, #7
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	4829      	ldr	r0, [pc, #164]	; (8001fd0 <HAL_UART_MspInit+0x1d0>)
 8001f2a:	f000 faf9 	bl	8002520 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	2027      	movs	r0, #39	; 0x27
 8001f34:	f000 fa11 	bl	800235a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f38:	2027      	movs	r0, #39	; 0x27
 8001f3a:	f000 fa2a 	bl	8002392 <HAL_NVIC_EnableIRQ>
}
 8001f3e:	e038      	b.n	8001fb2 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART6)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <HAL_UART_MspInit+0x1d4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d133      	bne.n	8001fb2 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001f54:	f043 0320 	orr.w	r3, r3, #32
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_UART_MspInit+0x1c0>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f82:	2340      	movs	r3, #64	; 0x40
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f86:	2312      	movs	r3, #18
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f92:	2308      	movs	r3, #8
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480e      	ldr	r0, [pc, #56]	; (8001fd8 <HAL_UART_MspInit+0x1d8>)
 8001f9e:	f000 fabf 	bl	8002520 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2047      	movs	r0, #71	; 0x47
 8001fa8:	f000 f9d7 	bl	800235a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001fac:	2047      	movs	r0, #71	; 0x47
 8001fae:	f000 f9f0 	bl	8002392 <HAL_NVIC_EnableIRQ>
}
 8001fb2:	bf00      	nop
 8001fb4:	3738      	adds	r7, #56	; 0x38
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40004400 	.word	0x40004400
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40004800 	.word	0x40004800
 8001fcc:	40020400 	.word	0x40020400
 8001fd0:	40020c00 	.word	0x40020c00
 8001fd4:	40011400 	.word	0x40011400
 8001fd8:	40020800 	.word	0x40020800

08001fdc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 8001fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002014 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fe2:	490e      	ldr	r1, [pc, #56]	; (800201c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe8:	e002      	b.n	8001ff0 <LoopCopyDataInit>

08001fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fee:	3304      	adds	r3, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff4:	d3f9      	bcc.n	8001fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ff8:	4c0b      	ldr	r4, [pc, #44]	; (8002028 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ffc:	e001      	b.n	8002002 <LoopFillZerobss>

08001ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002000:	3204      	adds	r2, #4

08002002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002004:	d3fb      	bcc.n	8001ffe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002006:	f7ff fd17 	bl	8001a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200a:	f003 fe51 	bl	8005cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200e:	f7ff faf9 	bl	8001604 <main>
  bx  lr    
 8002012:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002014:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002020:	08005d58 	.word	0x08005d58
  ldr r2, =_sbss
 8002024:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002028:	20001818 	.word	0x20001818

0800202c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC_IRQHandler>
	...

08002030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <HAL_Init+0x40>)
 800203a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <HAL_Init+0x40>)
 8002046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_Init+0x40>)
 8002052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002058:	2003      	movs	r0, #3
 800205a:	f000 f973 	bl	8002344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205e:	2000      	movs	r0, #0
 8002060:	f000 f808 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002064:	f7ff fc56 	bl	8001914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023c00 	.word	0x40023c00

08002074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_InitTick+0x54>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x58>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f999 	bl	80023ca <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00e      	b.n	80020c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d80a      	bhi.n	80020be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f000 f953 	bl	800235a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b4:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <HAL_InitTick+0x5c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000004 	.word	0x20000004
 80020cc:	2000000c 	.word	0x2000000c
 80020d0:	20000008 	.word	0x20000008

080020d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x20>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x24>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_IncTick+0x24>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	2000000c 	.word	0x2000000c
 80020f8:	20001814 	.word	0x20001814

080020fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_GetTick+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20001814 	.word	0x20001814

08002114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff ffee 	bl	80020fc <HAL_GetTick>
 8002120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d005      	beq.n	800213a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_Delay+0x44>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800213a:	bf00      	nop
 800213c:	f7ff ffde 	bl	80020fc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	429a      	cmp	r2, r3
 800214a:	d8f7      	bhi.n	800213c <HAL_Delay+0x28>
  {
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000000c 	.word	0x2000000c

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60d3      	str	r3, [r2, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	db0b      	blt.n	80021ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <__NVIC_EnableIRQ+0x38>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2001      	movs	r0, #1
 80021e2:	fa00 f202 	lsl.w	r2, r0, r2
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100

080021fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	2b00      	cmp	r3, #0
 800220c:	db12      	blt.n	8002234 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	f003 021f 	and.w	r2, r3, #31
 8002214:	490a      	ldr	r1, [pc, #40]	; (8002240 <__NVIC_DisableIRQ+0x44>)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	2001      	movs	r0, #1
 800221e:	fa00 f202 	lsl.w	r2, r0, r2
 8002222:	3320      	adds	r3, #32
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002228:	f3bf 8f4f 	dsb	sy
}
 800222c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800222e:	f3bf 8f6f 	isb	sy
}
 8002232:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100

08002244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	db0a      	blt.n	800226e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2da      	uxtb	r2, r3
 800225c:	490c      	ldr	r1, [pc, #48]	; (8002290 <__NVIC_SetPriority+0x4c>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	440b      	add	r3, r1
 8002268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800226c:	e00a      	b.n	8002284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4908      	ldr	r1, [pc, #32]	; (8002294 <__NVIC_SetPriority+0x50>)
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	3b04      	subs	r3, #4
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	440b      	add	r3, r1
 8002282:	761a      	strb	r2, [r3, #24]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f1c3 0307 	rsb	r3, r3, #7
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	bf28      	it	cs
 80022b6:	2304      	movcs	r3, #4
 80022b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3304      	adds	r3, #4
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d902      	bls.n	80022c8 <NVIC_EncodePriority+0x30>
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3b03      	subs	r3, #3
 80022c6:	e000      	b.n	80022ca <NVIC_EncodePriority+0x32>
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	f04f 32ff 	mov.w	r2, #4294967295
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	401a      	ands	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	43d9      	mvns	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	4313      	orrs	r3, r2
         );
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002310:	d301      	bcc.n	8002316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002312:	2301      	movs	r3, #1
 8002314:	e00f      	b.n	8002336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <SysTick_Config+0x40>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231e:	210f      	movs	r1, #15
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	f7ff ff8e 	bl	8002244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <SysTick_Config+0x40>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <SysTick_Config+0x40>)
 8002330:	2207      	movs	r2, #7
 8002332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	e000e010 	.word	0xe000e010

08002344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff05 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235a:	b580      	push	{r7, lr}
 800235c:	b086      	sub	sp, #24
 800235e:	af00      	add	r7, sp, #0
 8002360:	4603      	mov	r3, r0
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800236c:	f7ff ff1a 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 8002370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	6978      	ldr	r0, [r7, #20]
 8002378:	f7ff ff8e 	bl	8002298 <NVIC_EncodePriority>
 800237c:	4602      	mov	r2, r0
 800237e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff5d 	bl	8002244 <__NVIC_SetPriority>
}
 800238a:	bf00      	nop
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff0d 	bl	80021c0 <__NVIC_EnableIRQ>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff1d 	bl	80021fc <__NVIC_DisableIRQ>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ff94 	bl	8002300 <SysTick_Config>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff fe84 	bl	80020fc <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d008      	beq.n	8002414 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e052      	b.n	80024ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0216 	bic.w	r2, r2, #22
 8002422:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002432:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <HAL_DMA_Abort+0x62>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0208 	bic.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002464:	e013      	b.n	800248e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002466:	f7ff fe49 	bl	80020fc <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b05      	cmp	r3, #5
 8002472:	d90c      	bls.n	800248e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2203      	movs	r2, #3
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e015      	b.n	80024ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e4      	bne.n	8002466 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	223f      	movs	r2, #63	; 0x3f
 80024a2:	409a      	lsls	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e00c      	b.n	80024fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2205      	movs	r2, #5
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e16b      	b.n	8002814 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	f040 815a 	bne.w	800280e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d005      	beq.n	8002572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256e:	2b02      	cmp	r3, #2
 8002570:	d130      	bne.n	80025d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 0201 	and.w	r2, r3, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d017      	beq.n	8002610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d123      	bne.n	8002664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0203 	and.w	r2, r3, #3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80b4 	beq.w	800280e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b60      	ldr	r3, [pc, #384]	; (800282c <HAL_GPIO_Init+0x30c>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a5f      	ldr	r2, [pc, #380]	; (800282c <HAL_GPIO_Init+0x30c>)
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b5d      	ldr	r3, [pc, #372]	; (800282c <HAL_GPIO_Init+0x30c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026c2:	4a5b      	ldr	r2, [pc, #364]	; (8002830 <HAL_GPIO_Init+0x310>)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	3302      	adds	r3, #2
 80026ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	220f      	movs	r2, #15
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a52      	ldr	r2, [pc, #328]	; (8002834 <HAL_GPIO_Init+0x314>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d02b      	beq.n	8002746 <HAL_GPIO_Init+0x226>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a51      	ldr	r2, [pc, #324]	; (8002838 <HAL_GPIO_Init+0x318>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d025      	beq.n	8002742 <HAL_GPIO_Init+0x222>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a50      	ldr	r2, [pc, #320]	; (800283c <HAL_GPIO_Init+0x31c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01f      	beq.n	800273e <HAL_GPIO_Init+0x21e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4f      	ldr	r2, [pc, #316]	; (8002840 <HAL_GPIO_Init+0x320>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d019      	beq.n	800273a <HAL_GPIO_Init+0x21a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4e      	ldr	r2, [pc, #312]	; (8002844 <HAL_GPIO_Init+0x324>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_GPIO_Init+0x216>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4d      	ldr	r2, [pc, #308]	; (8002848 <HAL_GPIO_Init+0x328>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00d      	beq.n	8002732 <HAL_GPIO_Init+0x212>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4c      	ldr	r2, [pc, #304]	; (800284c <HAL_GPIO_Init+0x32c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <HAL_GPIO_Init+0x20e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4b      	ldr	r2, [pc, #300]	; (8002850 <HAL_GPIO_Init+0x330>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d101      	bne.n	800272a <HAL_GPIO_Init+0x20a>
 8002726:	2307      	movs	r3, #7
 8002728:	e00e      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800272a:	2308      	movs	r3, #8
 800272c:	e00c      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800272e:	2306      	movs	r3, #6
 8002730:	e00a      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002732:	2305      	movs	r3, #5
 8002734:	e008      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002736:	2304      	movs	r3, #4
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800273a:	2303      	movs	r3, #3
 800273c:	e004      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800273e:	2302      	movs	r3, #2
 8002740:	e002      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002746:	2300      	movs	r3, #0
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f002 0203 	and.w	r2, r2, #3
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	4093      	lsls	r3, r2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002758:	4935      	ldr	r1, [pc, #212]	; (8002830 <HAL_GPIO_Init+0x310>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002766:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <HAL_GPIO_Init+0x334>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800278a:	4a32      	ldr	r2, [pc, #200]	; (8002854 <HAL_GPIO_Init+0x334>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002790:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_GPIO_Init+0x334>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b4:	4a27      	ldr	r2, [pc, #156]	; (8002854 <HAL_GPIO_Init+0x334>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ba:	4b26      	ldr	r3, [pc, #152]	; (8002854 <HAL_GPIO_Init+0x334>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <HAL_GPIO_Init+0x334>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_GPIO_Init+0x334>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002808:	4a12      	ldr	r2, [pc, #72]	; (8002854 <HAL_GPIO_Init+0x334>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	f67f ae90 	bls.w	800253c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40013800 	.word	0x40013800
 8002834:	40020000 	.word	0x40020000
 8002838:	40020400 	.word	0x40020400
 800283c:	40020800 	.word	0x40020800
 8002840:	40020c00 	.word	0x40020c00
 8002844:	40021000 	.word	0x40021000
 8002848:	40021400 	.word	0x40021400
 800284c:	40021800 	.word	0x40021800
 8002850:	40021c00 	.word	0x40021c00
 8002854:	40013c00 	.word	0x40013c00

08002858 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e0cd      	b.n	8002a10 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002874:	2201      	movs	r2, #1
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	429a      	cmp	r2, r3
 800288c:	f040 80bd 	bne.w	8002a0a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002890:	4a65      	ldr	r2, [pc, #404]	; (8002a28 <HAL_GPIO_DeInit+0x1d0>)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	4013      	ands	r3, r2
 80028b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a5d      	ldr	r2, [pc, #372]	; (8002a2c <HAL_GPIO_DeInit+0x1d4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d02b      	beq.n	8002912 <HAL_GPIO_DeInit+0xba>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a5c      	ldr	r2, [pc, #368]	; (8002a30 <HAL_GPIO_DeInit+0x1d8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d025      	beq.n	800290e <HAL_GPIO_DeInit+0xb6>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a5b      	ldr	r2, [pc, #364]	; (8002a34 <HAL_GPIO_DeInit+0x1dc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01f      	beq.n	800290a <HAL_GPIO_DeInit+0xb2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a5a      	ldr	r2, [pc, #360]	; (8002a38 <HAL_GPIO_DeInit+0x1e0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d019      	beq.n	8002906 <HAL_GPIO_DeInit+0xae>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a59      	ldr	r2, [pc, #356]	; (8002a3c <HAL_GPIO_DeInit+0x1e4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_GPIO_DeInit+0xaa>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a58      	ldr	r2, [pc, #352]	; (8002a40 <HAL_GPIO_DeInit+0x1e8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00d      	beq.n	80028fe <HAL_GPIO_DeInit+0xa6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a57      	ldr	r2, [pc, #348]	; (8002a44 <HAL_GPIO_DeInit+0x1ec>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_DeInit+0xa2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a56      	ldr	r2, [pc, #344]	; (8002a48 <HAL_GPIO_DeInit+0x1f0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_GPIO_DeInit+0x9e>
 80028f2:	2307      	movs	r3, #7
 80028f4:	e00e      	b.n	8002914 <HAL_GPIO_DeInit+0xbc>
 80028f6:	2308      	movs	r3, #8
 80028f8:	e00c      	b.n	8002914 <HAL_GPIO_DeInit+0xbc>
 80028fa:	2306      	movs	r3, #6
 80028fc:	e00a      	b.n	8002914 <HAL_GPIO_DeInit+0xbc>
 80028fe:	2305      	movs	r3, #5
 8002900:	e008      	b.n	8002914 <HAL_GPIO_DeInit+0xbc>
 8002902:	2304      	movs	r3, #4
 8002904:	e006      	b.n	8002914 <HAL_GPIO_DeInit+0xbc>
 8002906:	2303      	movs	r3, #3
 8002908:	e004      	b.n	8002914 <HAL_GPIO_DeInit+0xbc>
 800290a:	2302      	movs	r3, #2
 800290c:	e002      	b.n	8002914 <HAL_GPIO_DeInit+0xbc>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <HAL_GPIO_DeInit+0xbc>
 8002912:	2300      	movs	r3, #0
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	f002 0203 	and.w	r2, r2, #3
 800291a:	0092      	lsls	r2, r2, #2
 800291c:	4093      	lsls	r3, r2
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	429a      	cmp	r2, r3
 8002922:	d132      	bne.n	800298a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002924:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <HAL_GPIO_DeInit+0x1f4>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	43db      	mvns	r3, r3
 800292c:	4947      	ldr	r1, [pc, #284]	; (8002a4c <HAL_GPIO_DeInit+0x1f4>)
 800292e:	4013      	ands	r3, r2
 8002930:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002932:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <HAL_GPIO_DeInit+0x1f4>)
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	43db      	mvns	r3, r3
 800293a:	4944      	ldr	r1, [pc, #272]	; (8002a4c <HAL_GPIO_DeInit+0x1f4>)
 800293c:	4013      	ands	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002940:	4b42      	ldr	r3, [pc, #264]	; (8002a4c <HAL_GPIO_DeInit+0x1f4>)
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	4940      	ldr	r1, [pc, #256]	; (8002a4c <HAL_GPIO_DeInit+0x1f4>)
 800294a:	4013      	ands	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800294e:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <HAL_GPIO_DeInit+0x1f4>)
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	43db      	mvns	r3, r3
 8002956:	493d      	ldr	r1, [pc, #244]	; (8002a4c <HAL_GPIO_DeInit+0x1f4>)
 8002958:	4013      	ands	r3, r2
 800295a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800296c:	4a2e      	ldr	r2, [pc, #184]	; (8002a28 <HAL_GPIO_DeInit+0x1d0>)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	43da      	mvns	r2, r3
 800297c:	482a      	ldr	r0, [pc, #168]	; (8002a28 <HAL_GPIO_DeInit+0x1d0>)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	400a      	ands	r2, r1
 8002984:	3302      	adds	r3, #2
 8002986:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2103      	movs	r1, #3
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	08da      	lsrs	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3208      	adds	r2, #8
 80029a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	08d2      	lsrs	r2, r2, #3
 80029c0:	4019      	ands	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2103      	movs	r1, #3
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	2101      	movs	r1, #1
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2103      	movs	r1, #3
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	401a      	ands	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b0f      	cmp	r3, #15
 8002a14:	f67f af2e 	bls.w	8002874 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	40020400 	.word	0x40020400
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40020c00 	.word	0x40020c00
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40021400 	.word	0x40021400
 8002a44:	40021800 	.word	0x40021800
 8002a48:	40021c00 	.word	0x40021c00
 8002a4c:	40013c00 	.word	0x40013c00

08002a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a60:	787b      	ldrb	r3, [r7, #1]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a6c:	e003      	b.n	8002a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	041a      	lsls	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	619a      	str	r2, [r3, #24]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a94:	887a      	ldrh	r2, [r7, #2]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	041a      	lsls	r2, r3, #16
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	43d9      	mvns	r1, r3
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	400b      	ands	r3, r1
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	619a      	str	r2, [r3, #24]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e264      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d075      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ad6:	4ba3      	ldr	r3, [pc, #652]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d00c      	beq.n	8002afc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae2:	4ba0      	ldr	r3, [pc, #640]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d112      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aee:	4b9d      	ldr	r3, [pc, #628]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afa:	d10b      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	4b99      	ldr	r3, [pc, #612]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d05b      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x108>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d157      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e23f      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1c:	d106      	bne.n	8002b2c <HAL_RCC_OscConfig+0x74>
 8002b1e:	4b91      	ldr	r3, [pc, #580]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a90      	ldr	r2, [pc, #576]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e01d      	b.n	8002b68 <HAL_RCC_OscConfig+0xb0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x98>
 8002b36:	4b8b      	ldr	r3, [pc, #556]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a8a      	ldr	r2, [pc, #552]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b88      	ldr	r3, [pc, #544]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a87      	ldr	r2, [pc, #540]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0xb0>
 8002b50:	4b84      	ldr	r3, [pc, #528]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a83      	ldr	r2, [pc, #524]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b81      	ldr	r3, [pc, #516]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a80      	ldr	r2, [pc, #512]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7ff fac4 	bl	80020fc <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b78:	f7ff fac0 	bl	80020fc <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e204      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b76      	ldr	r3, [pc, #472]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0xc0>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7ff fab0 	bl	80020fc <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7ff faac 	bl	80020fc <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e1f0      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	4b6c      	ldr	r3, [pc, #432]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0xe8>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d063      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bce:	4b65      	ldr	r3, [pc, #404]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bda:	4b62      	ldr	r3, [pc, #392]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d11c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be6:	4b5f      	ldr	r3, [pc, #380]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d116      	bne.n	8002c20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf2:	4b5c      	ldr	r3, [pc, #368]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_RCC_OscConfig+0x152>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e1c4      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0a:	4b56      	ldr	r3, [pc, #344]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4952      	ldr	r1, [pc, #328]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	e03a      	b.n	8002c96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d020      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c28:	4b4f      	ldr	r3, [pc, #316]	; (8002d68 <HAL_RCC_OscConfig+0x2b0>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2e:	f7ff fa65 	bl	80020fc <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c36:	f7ff fa61 	bl	80020fc <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e1a5      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c48:	4b46      	ldr	r3, [pc, #280]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c54:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4940      	ldr	r1, [pc, #256]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]
 8002c68:	e015      	b.n	8002c96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6a:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <HAL_RCC_OscConfig+0x2b0>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7ff fa44 	bl	80020fc <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c78:	f7ff fa40 	bl	80020fc <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e184      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8a:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d030      	beq.n	8002d04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002caa:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <HAL_RCC_OscConfig+0x2b4>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7ff fa24 	bl	80020fc <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7ff fa20 	bl	80020fc <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e164      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x200>
 8002cd6:	e015      	b.n	8002d04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_RCC_OscConfig+0x2b4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7ff fa0d 	bl	80020fc <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce6:	f7ff fa09 	bl	80020fc <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e14d      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80a0 	beq.w	8002e52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d12:	2300      	movs	r3, #0
 8002d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d16:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10f      	bne.n	8002d42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	6413      	str	r3, [r2, #64]	; 0x40
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_OscConfig+0x2b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d121      	bne.n	8002d92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <HAL_RCC_OscConfig+0x2b8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <HAL_RCC_OscConfig+0x2b8>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5a:	f7ff f9cf 	bl	80020fc <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	e011      	b.n	8002d86 <HAL_RCC_OscConfig+0x2ce>
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	42470000 	.word	0x42470000
 8002d6c:	42470e80 	.word	0x42470e80
 8002d70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d74:	f7ff f9c2 	bl	80020fc <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e106      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d86:	4b85      	ldr	r3, [pc, #532]	; (8002f9c <HAL_RCC_OscConfig+0x4e4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d106      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2f0>
 8002d9a:	4b81      	ldr	r3, [pc, #516]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	4a80      	ldr	r2, [pc, #512]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6713      	str	r3, [r2, #112]	; 0x70
 8002da6:	e01c      	b.n	8002de2 <HAL_RCC_OscConfig+0x32a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d10c      	bne.n	8002dca <HAL_RCC_OscConfig+0x312>
 8002db0:	4b7b      	ldr	r3, [pc, #492]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	4a7a      	ldr	r2, [pc, #488]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbc:	4b78      	ldr	r3, [pc, #480]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	4a77      	ldr	r2, [pc, #476]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc8:	e00b      	b.n	8002de2 <HAL_RCC_OscConfig+0x32a>
 8002dca:	4b75      	ldr	r3, [pc, #468]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a74      	ldr	r2, [pc, #464]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd6:	4b72      	ldr	r3, [pc, #456]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	4a71      	ldr	r2, [pc, #452]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d015      	beq.n	8002e16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7ff f987 	bl	80020fc <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7ff f983 	bl	80020fc <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e0c5      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e08:	4b65      	ldr	r3, [pc, #404]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0ee      	beq.n	8002df2 <HAL_RCC_OscConfig+0x33a>
 8002e14:	e014      	b.n	8002e40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e16:	f7ff f971 	bl	80020fc <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7ff f96d 	bl	80020fc <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0af      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e34:	4b5a      	ldr	r3, [pc, #360]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ee      	bne.n	8002e1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d105      	bne.n	8002e52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e46:	4b56      	ldr	r3, [pc, #344]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a55      	ldr	r2, [pc, #340]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 809b 	beq.w	8002f92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e5c:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d05c      	beq.n	8002f22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d141      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e70:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <HAL_RCC_OscConfig+0x4ec>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7ff f941 	bl	80020fc <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7ff f93d 	bl	80020fc <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e081      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e90:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	019b      	lsls	r3, r3, #6
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	085b      	lsrs	r3, r3, #1
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	061b      	lsls	r3, r3, #24
 8002ec0:	4937      	ldr	r1, [pc, #220]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_RCC_OscConfig+0x4ec>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7ff f916 	bl	80020fc <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7ff f912 	bl	80020fc <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e056      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x41c>
 8002ef2:	e04e      	b.n	8002f92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef4:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_RCC_OscConfig+0x4ec>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7ff f8ff 	bl	80020fc <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f02:	f7ff f8fb 	bl	80020fc <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e03f      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f14:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x44a>
 8002f20:	e037      	b.n	8002f92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e032      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d028      	beq.n	8002f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d121      	bne.n	8002f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d11a      	bne.n	8002f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f5e:	4013      	ands	r3, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d111      	bne.n	8002f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	42470060 	.word	0x42470060

08002fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0cc      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b68      	ldr	r3, [pc, #416]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d90c      	bls.n	8002fe4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b65      	ldr	r3, [pc, #404]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b63      	ldr	r3, [pc, #396]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0b8      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ffc:	4b59      	ldr	r3, [pc, #356]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a58      	ldr	r2, [pc, #352]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003006:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003014:	4b53      	ldr	r3, [pc, #332]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4a52      	ldr	r2, [pc, #328]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800301e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003020:	4b50      	ldr	r3, [pc, #320]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	494d      	ldr	r1, [pc, #308]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d044      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d119      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e07f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d003      	beq.n	8003066 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003062:	2b03      	cmp	r3, #3
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e06f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003076:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e067      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003086:	4b37      	ldr	r3, [pc, #220]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f023 0203 	bic.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4934      	ldr	r1, [pc, #208]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003098:	f7ff f830 	bl	80020fc <HAL_GetTick>
 800309c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a0:	f7ff f82c 	bl	80020fc <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e04f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 020c 	and.w	r2, r3, #12
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d1eb      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c8:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d20c      	bcs.n	80030f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e032      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4916      	ldr	r1, [pc, #88]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	490e      	ldr	r1, [pc, #56]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800312e:	f000 f821 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8003132:	4602      	mov	r2, r0
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	490a      	ldr	r1, [pc, #40]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	5ccb      	ldrb	r3, [r1, r3]
 8003142:	fa22 f303 	lsr.w	r3, r2, r3
 8003146:	4a09      	ldr	r2, [pc, #36]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_ClockConfig+0x1c8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe ff90 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023c00 	.word	0x40023c00
 8003164:	40023800 	.word	0x40023800
 8003168:	08005d30 	.word	0x08005d30
 800316c:	20000004 	.word	0x20000004
 8003170:	20000008 	.word	0x20000008

08003174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003174:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	2300      	movs	r3, #0
 8003186:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800318c:	4b67      	ldr	r3, [pc, #412]	; (800332c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b08      	cmp	r3, #8
 8003196:	d00d      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003198:	2b08      	cmp	r3, #8
 800319a:	f200 80bd 	bhi.w	8003318 <HAL_RCC_GetSysClockFreq+0x1a4>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x34>
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_GetSysClockFreq+0x3a>
 80031a6:	e0b7      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a8:	4b61      	ldr	r3, [pc, #388]	; (8003330 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031aa:	60bb      	str	r3, [r7, #8]
       break;
 80031ac:	e0b7      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ae:	4b61      	ldr	r3, [pc, #388]	; (8003334 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80031b0:	60bb      	str	r3, [r7, #8]
      break;
 80031b2:	e0b4      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b4:	4b5d      	ldr	r3, [pc, #372]	; (800332c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031be:	4b5b      	ldr	r3, [pc, #364]	; (800332c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d04d      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ca:	4b58      	ldr	r3, [pc, #352]	; (800332c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	099b      	lsrs	r3, r3, #6
 80031d0:	461a      	mov	r2, r3
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031da:	f04f 0100 	mov.w	r1, #0
 80031de:	ea02 0800 	and.w	r8, r2, r0
 80031e2:	ea03 0901 	and.w	r9, r3, r1
 80031e6:	4640      	mov	r0, r8
 80031e8:	4649      	mov	r1, r9
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	014b      	lsls	r3, r1, #5
 80031f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031f8:	0142      	lsls	r2, r0, #5
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	ebb0 0008 	subs.w	r0, r0, r8
 8003202:	eb61 0109 	sbc.w	r1, r1, r9
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	018b      	lsls	r3, r1, #6
 8003210:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003214:	0182      	lsls	r2, r0, #6
 8003216:	1a12      	subs	r2, r2, r0
 8003218:	eb63 0301 	sbc.w	r3, r3, r1
 800321c:	f04f 0000 	mov.w	r0, #0
 8003220:	f04f 0100 	mov.w	r1, #0
 8003224:	00d9      	lsls	r1, r3, #3
 8003226:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800322a:	00d0      	lsls	r0, r2, #3
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	eb12 0208 	adds.w	r2, r2, r8
 8003234:	eb43 0309 	adc.w	r3, r3, r9
 8003238:	f04f 0000 	mov.w	r0, #0
 800323c:	f04f 0100 	mov.w	r1, #0
 8003240:	0259      	lsls	r1, r3, #9
 8003242:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003246:	0250      	lsls	r0, r2, #9
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	461a      	mov	r2, r3
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	f7fd fbac 	bl	80009b4 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4613      	mov	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e04a      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003266:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	099b      	lsrs	r3, r3, #6
 800326c:	461a      	mov	r2, r3
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003276:	f04f 0100 	mov.w	r1, #0
 800327a:	ea02 0400 	and.w	r4, r2, r0
 800327e:	ea03 0501 	and.w	r5, r3, r1
 8003282:	4620      	mov	r0, r4
 8003284:	4629      	mov	r1, r5
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	014b      	lsls	r3, r1, #5
 8003290:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003294:	0142      	lsls	r2, r0, #5
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	1b00      	subs	r0, r0, r4
 800329c:	eb61 0105 	sbc.w	r1, r1, r5
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	018b      	lsls	r3, r1, #6
 80032aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032ae:	0182      	lsls	r2, r0, #6
 80032b0:	1a12      	subs	r2, r2, r0
 80032b2:	eb63 0301 	sbc.w	r3, r3, r1
 80032b6:	f04f 0000 	mov.w	r0, #0
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	00d9      	lsls	r1, r3, #3
 80032c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032c4:	00d0      	lsls	r0, r2, #3
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	1912      	adds	r2, r2, r4
 80032cc:	eb45 0303 	adc.w	r3, r5, r3
 80032d0:	f04f 0000 	mov.w	r0, #0
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	0299      	lsls	r1, r3, #10
 80032da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032de:	0290      	lsls	r0, r2, #10
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	f7fd fb60 	bl	80009b4 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4613      	mov	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	0c1b      	lsrs	r3, r3, #16
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	3301      	adds	r3, #1
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	60bb      	str	r3, [r7, #8]
      break;
 8003316:	e002      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800331a:	60bb      	str	r3, [r7, #8]
      break;
 800331c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331e:	68bb      	ldr	r3, [r7, #8]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	00f42400 	.word	0x00f42400
 8003334:	007a1200 	.word	0x007a1200

08003338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <HAL_RCC_GetHCLKFreq+0x14>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20000004 	.word	0x20000004

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003354:	f7ff fff0 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	0a9b      	lsrs	r3, r3, #10
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4903      	ldr	r1, [pc, #12]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40023800 	.word	0x40023800
 8003374:	08005d40 	.word	0x08005d40

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800337c:	f7ff ffdc 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0b5b      	lsrs	r3, r3, #13
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	; (800339c <HAL_RCC_GetPCLK2Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	08005d40 	.word	0x08005d40

080033a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e07b      	b.n	80034aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d108      	bne.n	80033cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033c2:	d009      	beq.n	80033d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	61da      	str	r2, [r3, #28]
 80033ca:	e005      	b.n	80033d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe fa0c 	bl	8001810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345c:	ea42 0103 	orr.w	r1, r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	f003 0104 	and.w	r1, r3, #4
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0210 	and.w	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003498:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e01a      	b.n	80034fa <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034da:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7fe f9f7 	bl	80018d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b088      	sub	sp, #32
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_SPI_Transmit+0x22>
 8003520:	2302      	movs	r3, #2
 8003522:	e126      	b.n	8003772 <HAL_SPI_Transmit+0x270>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800352c:	f7fe fde6 	bl	80020fc <HAL_GetTick>
 8003530:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d002      	beq.n	8003548 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003542:	2302      	movs	r3, #2
 8003544:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003546:	e10b      	b.n	8003760 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_Transmit+0x52>
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003558:	e102      	b.n	8003760 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2203      	movs	r2, #3
 800355e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	88fa      	ldrh	r2, [r7, #6]
 8003572:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	88fa      	ldrh	r2, [r7, #6]
 8003578:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a0:	d10f      	bne.n	80035c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d007      	beq.n	80035e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e8:	d14b      	bne.n	8003682 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_SPI_Transmit+0xf6>
 80035f2:	8afb      	ldrh	r3, [r7, #22]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d13e      	bne.n	8003676 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	881a      	ldrh	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	1c9a      	adds	r2, r3, #2
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800361c:	e02b      	b.n	8003676 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b02      	cmp	r3, #2
 800362a:	d112      	bne.n	8003652 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	881a      	ldrh	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	1c9a      	adds	r2, r3, #2
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003650:	e011      	b.n	8003676 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003652:	f7fe fd53 	bl	80020fc <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d803      	bhi.n	800366a <HAL_SPI_Transmit+0x168>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d102      	bne.n	8003670 <HAL_SPI_Transmit+0x16e>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003674:	e074      	b.n	8003760 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ce      	bne.n	800361e <HAL_SPI_Transmit+0x11c>
 8003680:	e04c      	b.n	800371c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_SPI_Transmit+0x18e>
 800368a:	8afb      	ldrh	r3, [r7, #22]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d140      	bne.n	8003712 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	330c      	adds	r3, #12
 800369a:	7812      	ldrb	r2, [r2, #0]
 800369c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036b6:	e02c      	b.n	8003712 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d113      	bne.n	80036ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	330c      	adds	r3, #12
 80036d0:	7812      	ldrb	r2, [r2, #0]
 80036d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80036ec:	e011      	b.n	8003712 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ee:	f7fe fd05 	bl	80020fc <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d803      	bhi.n	8003706 <HAL_SPI_Transmit+0x204>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d102      	bne.n	800370c <HAL_SPI_Transmit+0x20a>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003710:	e026      	b.n	8003760 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1cd      	bne.n	80036b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	6839      	ldr	r1, [r7, #0]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f9d1 	bl	8003ac8 <SPI_EndRxTxTransaction>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e000      	b.n	8003760 <HAL_SPI_Transmit+0x25e>
  }

error:
 800375e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003770:	7ffb      	ldrb	r3, [r7, #31]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10f      	bne.n	80037c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	099b      	lsrs	r3, r3, #6
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d004      	beq.n	80037c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	4798      	blx	r3
    return;
 80037be:	e0d7      	b.n	8003970 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_SPI_IRQHandler+0x66>
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	09db      	lsrs	r3, r3, #7
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
    return;
 80037e0:	e0c6      	b.n	8003970 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10c      	bne.n	8003808 <HAL_SPI_IRQHandler+0x8c>
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80b4 	beq.w	8003970 <HAL_SPI_IRQHandler+0x1f4>
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80ad 	beq.w	8003970 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d023      	beq.n	800386a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b03      	cmp	r3, #3
 800382c:	d011      	beq.n	8003852 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003832:	f043 0204 	orr.w	r2, r3, #4
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	e00b      	b.n	800386a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	693b      	ldr	r3, [r7, #16]
        return;
 8003868:	e082      	b.n	8003970 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d014      	beq.n	80038a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00c      	beq.n	80038c6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	f043 0208 	orr.w	r2, r3, #8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80038b8:	2300      	movs	r3, #0
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d04f      	beq.n	800396e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038dc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <HAL_SPI_IRQHandler+0x17e>
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d034      	beq.n	8003964 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0203 	bic.w	r2, r2, #3
 8003908:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d011      	beq.n	8003936 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003916:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_SPI_IRQHandler+0x1fc>)
 8003918:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fdcf 	bl	80024c2 <HAL_DMA_Abort_IT>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393a:	2b00      	cmp	r3, #0
 800393c:	d016      	beq.n	800396c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003942:	4a0d      	ldr	r2, [pc, #52]	; (8003978 <HAL_SPI_IRQHandler+0x1fc>)
 8003944:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe fdb9 	bl	80024c2 <HAL_DMA_Abort_IT>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003962:	e003      	b.n	800396c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f809 	bl	800397c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800396a:	e000      	b.n	800396e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800396c:	bf00      	nop
    return;
 800396e:	bf00      	nop
  }
}
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	08003991 	.word	0x08003991

0800397c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff ffe6 	bl	800397c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039c8:	f7fe fb98 	bl	80020fc <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039d8:	f7fe fb90 	bl	80020fc <HAL_GetTick>
 80039dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039de:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	015b      	lsls	r3, r3, #5
 80039e4:	0d1b      	lsrs	r3, r3, #20
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ee:	e054      	b.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d050      	beq.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039f8:	f7fe fb80 	bl	80020fc <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d902      	bls.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d13d      	bne.n	8003a8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a26:	d111      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a30:	d004      	beq.n	8003a3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3a:	d107      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a54:	d10f      	bne.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e017      	b.n	8003aba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d19b      	bne.n	80039f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3720      	adds	r7, #32
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000004 	.word	0x20000004

08003ac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <SPI_EndRxTxTransaction+0x7c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <SPI_EndRxTxTransaction+0x80>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	0d5b      	lsrs	r3, r3, #21
 8003ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af2:	d112      	bne.n	8003b1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2200      	movs	r2, #0
 8003afc:	2180      	movs	r1, #128	; 0x80
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f7ff ff5a 	bl	80039b8 <SPI_WaitFlagStateUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f043 0220 	orr.w	r2, r3, #32
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e00f      	b.n	8003b3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b30:	2b80      	cmp	r3, #128	; 0x80
 8003b32:	d0f2      	beq.n	8003b1a <SPI_EndRxTxTransaction+0x52>
 8003b34:	e000      	b.n	8003b38 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b36:	bf00      	nop
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000004 	.word	0x20000004
 8003b48:	165e9f81 	.word	0x165e9f81

08003b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e041      	b.n	8003be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fe f866 	bl	8001c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f000 fbb2 	bl	80042f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d001      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e04e      	b.n	8003ca2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d022      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2e:	d01d      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1f      	ldr	r2, [pc, #124]	; (8003cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d018      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	; (8003cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00e      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1b      	ldr	r2, [pc, #108]	; (8003cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d009      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x80>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d111      	bne.n	8003c90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d010      	beq.n	8003ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8e:	e007      	b.n	8003ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	40000800 	.word	0x40000800
 8003cbc:	40000c00 	.word	0x40000c00
 8003cc0:	40010400 	.word	0x40010400
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	40001800 	.word	0x40001800

08003ccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e041      	b.n	8003d62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fd ff84 	bl	8001c00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f000 faf2 	bl	80042f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d122      	bne.n	8003dc6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d11b      	bne.n	8003dc6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f06f 0202 	mvn.w	r2, #2
 8003d96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fa82 	bl	80042b6 <HAL_TIM_IC_CaptureCallback>
 8003db2:	e005      	b.n	8003dc0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fa74 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fa85 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d122      	bne.n	8003e1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d11b      	bne.n	8003e1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f06f 0204 	mvn.w	r2, #4
 8003dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fa58 	bl	80042b6 <HAL_TIM_IC_CaptureCallback>
 8003e06:	e005      	b.n	8003e14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fa4a 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fa5b 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d122      	bne.n	8003e6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d11b      	bne.n	8003e6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f06f 0208 	mvn.w	r2, #8
 8003e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2204      	movs	r2, #4
 8003e44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fa2e 	bl	80042b6 <HAL_TIM_IC_CaptureCallback>
 8003e5a:	e005      	b.n	8003e68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fa20 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa31 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b10      	cmp	r3, #16
 8003e7a:	d122      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d11b      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f06f 0210 	mvn.w	r2, #16
 8003e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2208      	movs	r2, #8
 8003e98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fa04 	bl	80042b6 <HAL_TIM_IC_CaptureCallback>
 8003eae:	e005      	b.n	8003ebc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f9f6 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fa07 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d10e      	bne.n	8003eee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d107      	bne.n	8003eee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f06f 0201 	mvn.w	r2, #1
 8003ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f9d0 	bl	800428e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b80      	cmp	r3, #128	; 0x80
 8003efa:	d10e      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	d107      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fdaf 	bl	8004a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d10e      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d107      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f9cc 	bl	80042de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d10e      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d107      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f06f 0220 	mvn.w	r2, #32
 8003f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fd79 	bl	8004a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0ae      	b.n	80040f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	f200 809f 	bhi.w	80040e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003faa:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fe5 	.word	0x08003fe5
 8003fb4:	080040e9 	.word	0x080040e9
 8003fb8:	080040e9 	.word	0x080040e9
 8003fbc:	080040e9 	.word	0x080040e9
 8003fc0:	08004025 	.word	0x08004025
 8003fc4:	080040e9 	.word	0x080040e9
 8003fc8:	080040e9 	.word	0x080040e9
 8003fcc:	080040e9 	.word	0x080040e9
 8003fd0:	08004067 	.word	0x08004067
 8003fd4:	080040e9 	.word	0x080040e9
 8003fd8:	080040e9 	.word	0x080040e9
 8003fdc:	080040e9 	.word	0x080040e9
 8003fe0:	080040a7 	.word	0x080040a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fa22 	bl	8004434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0208 	orr.w	r2, r2, #8
 8003ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0204 	bic.w	r2, r2, #4
 800400e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6999      	ldr	r1, [r3, #24]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	619a      	str	r2, [r3, #24]
      break;
 8004022:	e064      	b.n	80040ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fa72 	bl	8004514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800403e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6999      	ldr	r1, [r3, #24]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	021a      	lsls	r2, r3, #8
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	619a      	str	r2, [r3, #24]
      break;
 8004064:	e043      	b.n	80040ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fac7 	bl	8004600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0208 	orr.w	r2, r2, #8
 8004080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0204 	bic.w	r2, r2, #4
 8004090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69d9      	ldr	r1, [r3, #28]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	61da      	str	r2, [r3, #28]
      break;
 80040a4:	e023      	b.n	80040ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fb1b 	bl	80046e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69d9      	ldr	r1, [r3, #28]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	021a      	lsls	r2, r3, #8
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	61da      	str	r2, [r3, #28]
      break;
 80040e6:	e002      	b.n	80040ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	75fb      	strb	r3, [r7, #23]
      break;
 80040ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_TIM_ConfigClockSource+0x1c>
 8004118:	2302      	movs	r3, #2
 800411a:	e0b4      	b.n	8004286 <HAL_TIM_ConfigClockSource+0x186>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800413a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004154:	d03e      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415a:	f200 8087 	bhi.w	800426c <HAL_TIM_ConfigClockSource+0x16c>
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004162:	f000 8086 	beq.w	8004272 <HAL_TIM_ConfigClockSource+0x172>
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416a:	d87f      	bhi.n	800426c <HAL_TIM_ConfigClockSource+0x16c>
 800416c:	2b70      	cmp	r3, #112	; 0x70
 800416e:	d01a      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004170:	2b70      	cmp	r3, #112	; 0x70
 8004172:	d87b      	bhi.n	800426c <HAL_TIM_ConfigClockSource+0x16c>
 8004174:	2b60      	cmp	r3, #96	; 0x60
 8004176:	d050      	beq.n	800421a <HAL_TIM_ConfigClockSource+0x11a>
 8004178:	2b60      	cmp	r3, #96	; 0x60
 800417a:	d877      	bhi.n	800426c <HAL_TIM_ConfigClockSource+0x16c>
 800417c:	2b50      	cmp	r3, #80	; 0x50
 800417e:	d03c      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0xfa>
 8004180:	2b50      	cmp	r3, #80	; 0x50
 8004182:	d873      	bhi.n	800426c <HAL_TIM_ConfigClockSource+0x16c>
 8004184:	2b40      	cmp	r3, #64	; 0x40
 8004186:	d058      	beq.n	800423a <HAL_TIM_ConfigClockSource+0x13a>
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	d86f      	bhi.n	800426c <HAL_TIM_ConfigClockSource+0x16c>
 800418c:	2b30      	cmp	r3, #48	; 0x30
 800418e:	d064      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x15a>
 8004190:	2b30      	cmp	r3, #48	; 0x30
 8004192:	d86b      	bhi.n	800426c <HAL_TIM_ConfigClockSource+0x16c>
 8004194:	2b20      	cmp	r3, #32
 8004196:	d060      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x15a>
 8004198:	2b20      	cmp	r3, #32
 800419a:	d867      	bhi.n	800426c <HAL_TIM_ConfigClockSource+0x16c>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d05c      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x15a>
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d05a      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x15a>
 80041a4:	e062      	b.n	800426c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6899      	ldr	r1, [r3, #8]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f000 fb67 	bl	8004888 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	609a      	str	r2, [r3, #8]
      break;
 80041d2:	e04f      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	6899      	ldr	r1, [r3, #8]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f000 fb50 	bl	8004888 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f6:	609a      	str	r2, [r3, #8]
      break;
 80041f8:	e03c      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6859      	ldr	r1, [r3, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	461a      	mov	r2, r3
 8004208:	f000 fac4 	bl	8004794 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2150      	movs	r1, #80	; 0x50
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fb1d 	bl	8004852 <TIM_ITRx_SetConfig>
      break;
 8004218:	e02c      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6859      	ldr	r1, [r3, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	461a      	mov	r2, r3
 8004228:	f000 fae3 	bl	80047f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2160      	movs	r1, #96	; 0x60
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fb0d 	bl	8004852 <TIM_ITRx_SetConfig>
      break;
 8004238:	e01c      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	461a      	mov	r2, r3
 8004248:	f000 faa4 	bl	8004794 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2140      	movs	r1, #64	; 0x40
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fafd 	bl	8004852 <TIM_ITRx_SetConfig>
      break;
 8004258:	e00c      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4619      	mov	r1, r3
 8004264:	4610      	mov	r0, r2
 8004266:	f000 faf4 	bl	8004852 <TIM_ITRx_SetConfig>
      break;
 800426a:	e003      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
      break;
 8004270:	e000      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004284:	7bfb      	ldrb	r3, [r7, #15]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a40      	ldr	r2, [pc, #256]	; (8004408 <TIM_Base_SetConfig+0x114>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d00f      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a3d      	ldr	r2, [pc, #244]	; (800440c <TIM_Base_SetConfig+0x118>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00b      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a3c      	ldr	r2, [pc, #240]	; (8004410 <TIM_Base_SetConfig+0x11c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d007      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a3b      	ldr	r2, [pc, #236]	; (8004414 <TIM_Base_SetConfig+0x120>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d003      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a3a      	ldr	r2, [pc, #232]	; (8004418 <TIM_Base_SetConfig+0x124>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d108      	bne.n	8004346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a2f      	ldr	r2, [pc, #188]	; (8004408 <TIM_Base_SetConfig+0x114>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d02b      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004354:	d027      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2c      	ldr	r2, [pc, #176]	; (800440c <TIM_Base_SetConfig+0x118>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d023      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2b      	ldr	r2, [pc, #172]	; (8004410 <TIM_Base_SetConfig+0x11c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01f      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <TIM_Base_SetConfig+0x120>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01b      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a29      	ldr	r2, [pc, #164]	; (8004418 <TIM_Base_SetConfig+0x124>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d017      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a28      	ldr	r2, [pc, #160]	; (800441c <TIM_Base_SetConfig+0x128>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a27      	ldr	r2, [pc, #156]	; (8004420 <TIM_Base_SetConfig+0x12c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00f      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a26      	ldr	r2, [pc, #152]	; (8004424 <TIM_Base_SetConfig+0x130>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00b      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a25      	ldr	r2, [pc, #148]	; (8004428 <TIM_Base_SetConfig+0x134>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a24      	ldr	r2, [pc, #144]	; (800442c <TIM_Base_SetConfig+0x138>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a23      	ldr	r2, [pc, #140]	; (8004430 <TIM_Base_SetConfig+0x13c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d108      	bne.n	80043b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <TIM_Base_SetConfig+0x114>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_Base_SetConfig+0xf8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a0c      	ldr	r2, [pc, #48]	; (8004418 <TIM_Base_SetConfig+0x124>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d103      	bne.n	80043f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	615a      	str	r2, [r3, #20]
}
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40010000 	.word	0x40010000
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800
 8004414:	40000c00 	.word	0x40000c00
 8004418:	40010400 	.word	0x40010400
 800441c:	40014000 	.word	0x40014000
 8004420:	40014400 	.word	0x40014400
 8004424:	40014800 	.word	0x40014800
 8004428:	40001800 	.word	0x40001800
 800442c:	40001c00 	.word	0x40001c00
 8004430:	40002000 	.word	0x40002000

08004434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f023 0302 	bic.w	r3, r3, #2
 800447c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a20      	ldr	r2, [pc, #128]	; (800450c <TIM_OC1_SetConfig+0xd8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_OC1_SetConfig+0x64>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <TIM_OC1_SetConfig+0xdc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d10c      	bne.n	80044b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0308 	bic.w	r3, r3, #8
 800449e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 0304 	bic.w	r3, r3, #4
 80044b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a15      	ldr	r2, [pc, #84]	; (800450c <TIM_OC1_SetConfig+0xd8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_OC1_SetConfig+0x8e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a14      	ldr	r2, [pc, #80]	; (8004510 <TIM_OC1_SetConfig+0xdc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d111      	bne.n	80044e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	621a      	str	r2, [r3, #32]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	40010000 	.word	0x40010000
 8004510:	40010400 	.word	0x40010400

08004514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0210 	bic.w	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0320 	bic.w	r3, r3, #32
 800455e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <TIM_OC2_SetConfig+0xe4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_OC2_SetConfig+0x68>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a21      	ldr	r2, [pc, #132]	; (80045fc <TIM_OC2_SetConfig+0xe8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d10d      	bne.n	8004598 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <TIM_OC2_SetConfig+0xe4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_OC2_SetConfig+0x94>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <TIM_OC2_SetConfig+0xe8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d113      	bne.n	80045d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40010000 	.word	0x40010000
 80045fc:	40010400 	.word	0x40010400

08004600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0303 	bic.w	r3, r3, #3
 8004636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a21      	ldr	r2, [pc, #132]	; (80046e0 <TIM_OC3_SetConfig+0xe0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_OC3_SetConfig+0x66>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a20      	ldr	r2, [pc, #128]	; (80046e4 <TIM_OC3_SetConfig+0xe4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d10d      	bne.n	8004682 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800466c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <TIM_OC3_SetConfig+0xe0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d003      	beq.n	8004692 <TIM_OC3_SetConfig+0x92>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a15      	ldr	r2, [pc, #84]	; (80046e4 <TIM_OC3_SetConfig+0xe4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d113      	bne.n	80046ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	621a      	str	r2, [r3, #32]
}
 80046d4:	bf00      	nop
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40010400 	.word	0x40010400

080046e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	021b      	lsls	r3, r3, #8
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	031b      	lsls	r3, r3, #12
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a12      	ldr	r2, [pc, #72]	; (800478c <TIM_OC4_SetConfig+0xa4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d003      	beq.n	8004750 <TIM_OC4_SetConfig+0x68>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a11      	ldr	r2, [pc, #68]	; (8004790 <TIM_OC4_SetConfig+0xa8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d109      	bne.n	8004764 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	019b      	lsls	r3, r3, #6
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40010000 	.word	0x40010000
 8004790:	40010400 	.word	0x40010400

08004794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f023 0201 	bic.w	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 030a 	bic.w	r3, r3, #10
 80047d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b087      	sub	sp, #28
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f023 0210 	bic.w	r2, r3, #16
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800481c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	031b      	lsls	r3, r3, #12
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800482e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	621a      	str	r2, [r3, #32]
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	f043 0307 	orr.w	r3, r3, #7
 8004874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	609a      	str	r2, [r3, #8]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	021a      	lsls	r2, r3, #8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	609a      	str	r2, [r3, #8]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048dc:	2302      	movs	r3, #2
 80048de:	e05a      	b.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a21      	ldr	r2, [pc, #132]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d022      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492c:	d01d      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d018      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1a      	ldr	r2, [pc, #104]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a18      	ldr	r2, [pc, #96]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a15      	ldr	r2, [pc, #84]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d10c      	bne.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	40000c00 	.word	0x40000c00
 80049b4:	40010400 	.word	0x40010400
 80049b8:	40014000 	.word	0x40014000
 80049bc:	40001800 	.word	0x40001800

080049c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049d8:	2302      	movs	r3, #2
 80049da:	e03d      	b.n	8004a58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e03f      	b.n	8004b1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fd f9a4 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2224      	movs	r2, #36	; 0x24
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 ff25 	bl	8005920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e047      	b.n	8004bc8 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fd f957 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2224      	movs	r2, #36	; 0x24
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b68:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fed8 	bl	8005920 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004b8e:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0208 	orr.w	r2, r2, #8
 8004b9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d17c      	bne.n	8004cea <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_UART_Transmit+0x2c>
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e075      	b.n	8004cec <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_UART_Transmit+0x3e>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e06e      	b.n	8004cec <HAL_UART_Transmit+0x11c>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2221      	movs	r2, #33	; 0x21
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c24:	f7fd fa6a 	bl	80020fc <HAL_GetTick>
 8004c28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	88fa      	ldrh	r2, [r7, #6]
 8004c34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3e:	d108      	bne.n	8004c52 <HAL_UART_Transmit+0x82>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	e003      	b.n	8004c5a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c62:	e02a      	b.n	8004cba <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2180      	movs	r1, #128	; 0x80
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fc14 	bl	800549c <UART_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e036      	b.n	8004cec <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10b      	bne.n	8004c9c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c92:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	3302      	adds	r3, #2
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	e007      	b.n	8004cac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	781a      	ldrb	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1cf      	bne.n	8004c64 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2140      	movs	r1, #64	; 0x40
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fbe4 	bl	800549c <UART_WaitOnFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e006      	b.n	8004cec <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e000      	b.n	8004cec <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cea:	2302      	movs	r3, #2
  }
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d11d      	bne.n	8004d4a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <HAL_UART_Receive_IT+0x26>
 8004d14:	88fb      	ldrh	r3, [r7, #6]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e016      	b.n	8004d4c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_UART_Receive_IT+0x38>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e00f      	b.n	8004d4c <HAL_UART_Receive_IT+0x58>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fc19 	bl	8005578 <UART_Start_Receive_IT>
 8004d46:	4603      	mov	r3, r0
 8004d48:	e000      	b.n	8004d4c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
  }
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b0a0      	sub	sp, #128	; 0x80
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d6e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8004d72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d7c:	66ba      	str	r2, [r7, #104]	; 0x68
 8004d7e:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004d82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e5      	bne.n	8004d5c <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3314      	adds	r3, #20
 8004d96:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da2:	f023 0301 	bic.w	r3, r3, #1
 8004da6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3314      	adds	r3, #20
 8004dae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004db0:	657a      	str	r2, [r7, #84]	; 0x54
 8004db2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004db6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e5      	bne.n	8004d90 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d119      	bne.n	8004e00 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	f023 0310 	bic.w	r3, r3, #16
 8004de2:	677b      	str	r3, [r7, #116]	; 0x74
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004dec:	643a      	str	r2, [r7, #64]	; 0x40
 8004dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e5      	bne.n	8004dcc <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0a:	2b80      	cmp	r3, #128	; 0x80
 8004e0c:	d136      	bne.n	8004e7c <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3314      	adds	r3, #20
 8004e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e24:	673b      	str	r3, [r7, #112]	; 0x70
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3314      	adds	r3, #20
 8004e2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e5      	bne.n	8004e0e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d018      	beq.n	8004e7c <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4e:	2200      	movs	r2, #0
 8004e50:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fd fac3 	bl	80023e2 <HAL_DMA_Abort>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fd fb4d 	bl	8002506 <HAL_DMA_GetError>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	d104      	bne.n	8004e7c <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2210      	movs	r2, #16
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e052      	b.n	8004f22 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d136      	bne.n	8004ef8 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3314      	adds	r3, #20
 8004e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004eaa:	61ba      	str	r2, [r7, #24]
 8004eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6979      	ldr	r1, [r7, #20]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d018      	beq.n	8004ef8 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	2200      	movs	r2, #0
 8004ecc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fd fa85 	bl	80023e2 <HAL_DMA_Abort>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00c      	beq.n	8004ef8 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fd fb0f 	bl	8002506 <HAL_DMA_GetError>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d104      	bne.n	8004ef8 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e014      	b.n	8004f22 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3780      	adds	r7, #128	; 0x80
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b0ba      	sub	sp, #232	; 0xe8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10f      	bne.n	8004f92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d009      	beq.n	8004f92 <HAL_UART_IRQHandler+0x66>
 8004f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fc0d 	bl	80057aa <UART_Receive_IT>
      return;
 8004f90:	e256      	b.n	8005440 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80de 	beq.w	8005158 <HAL_UART_IRQHandler+0x22c>
 8004f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80d1 	beq.w	8005158 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <HAL_UART_IRQHandler+0xae>
 8004fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f043 0201 	orr.w	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_UART_IRQHandler+0xd2>
 8004fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f043 0202 	orr.w	r2, r3, #2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <HAL_UART_IRQHandler+0xf6>
 800500a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f043 0204 	orr.w	r2, r3, #4
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d011      	beq.n	8005052 <HAL_UART_IRQHandler+0x126>
 800502e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d105      	bne.n	8005046 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800503a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f043 0208 	orr.w	r2, r3, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 81ed 	beq.w	8005436 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <HAL_UART_IRQHandler+0x14e>
 8005068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fb98 	bl	80057aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	bf0c      	ite	eq
 8005088:	2301      	moveq	r3, #1
 800508a:	2300      	movne	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <HAL_UART_IRQHandler+0x17a>
 800509e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d04f      	beq.n	8005146 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 faa0 	bl	80055ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b6:	2b40      	cmp	r3, #64	; 0x40
 80050b8:	d141      	bne.n	800513e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3314      	adds	r3, #20
 80050e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1d9      	bne.n	80050ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	2b00      	cmp	r3, #0
 800510c:	d013      	beq.n	8005136 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	4a7d      	ldr	r2, [pc, #500]	; (8005308 <HAL_UART_IRQHandler+0x3dc>)
 8005114:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	4618      	mov	r0, r3
 800511c:	f7fd f9d1 	bl	80024c2 <HAL_DMA_Abort_IT>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005130:	4610      	mov	r0, r2
 8005132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005134:	e00e      	b.n	8005154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f99a 	bl	8005470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	e00a      	b.n	8005154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f996 	bl	8005470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	e006      	b.n	8005154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f992 	bl	8005470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005152:	e170      	b.n	8005436 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005154:	bf00      	nop
    return;
 8005156:	e16e      	b.n	8005436 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	2b01      	cmp	r3, #1
 800515e:	f040 814a 	bne.w	80053f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 8143 	beq.w	80053f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 813c 	beq.w	80053f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800517e:	2300      	movs	r3, #0
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519e:	2b40      	cmp	r3, #64	; 0x40
 80051a0:	f040 80b4 	bne.w	800530c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8140 	beq.w	800543a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051c2:	429a      	cmp	r2, r3
 80051c4:	f080 8139 	bcs.w	800543a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051da:	f000 8088 	beq.w	80052ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	330c      	adds	r3, #12
 80051e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800520a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800520e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1d9      	bne.n	80051de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3314      	adds	r3, #20
 8005230:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800523a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800523c:	f023 0301 	bic.w	r3, r3, #1
 8005240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3314      	adds	r3, #20
 800524a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800524e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005252:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005256:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e1      	bne.n	800522a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3314      	adds	r3, #20
 800526c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800527c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3314      	adds	r3, #20
 8005286:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800528a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800528c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e3      	bne.n	8005266 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052be:	f023 0310 	bic.w	r3, r3, #16
 80052c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	330c      	adds	r3, #12
 80052cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80052d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e3      	bne.n	80052ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fd f87a 	bl	80023e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	4619      	mov	r1, r3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f8c0 	bl	8005484 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005304:	e099      	b.n	800543a <HAL_UART_IRQHandler+0x50e>
 8005306:	bf00      	nop
 8005308:	080056b3 	.word	0x080056b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005314:	b29b      	uxth	r3, r3
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 808b 	beq.w	800543e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8086 	beq.w	800543e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005356:	647a      	str	r2, [r7, #68]	; 0x44
 8005358:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800535c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e3      	bne.n	8005332 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3314      	adds	r3, #20
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	623b      	str	r3, [r7, #32]
   return(result);
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3314      	adds	r3, #20
 800538a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800538e:	633a      	str	r2, [r7, #48]	; 0x30
 8005390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e3      	bne.n	800536a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	330c      	adds	r3, #12
 80053b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0310 	bic.w	r3, r3, #16
 80053c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053d4:	61fa      	str	r2, [r7, #28]
 80053d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	69b9      	ldr	r1, [r7, #24]
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	617b      	str	r3, [r7, #20]
   return(result);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e3      	bne.n	80053b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f848 	bl	8005484 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053f4:	e023      	b.n	800543e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_UART_IRQHandler+0x4ea>
 8005402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f963 	bl	80056da <UART_Transmit_IT>
    return;
 8005414:	e014      	b.n	8005440 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00e      	beq.n	8005440 <HAL_UART_IRQHandler+0x514>
 8005422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	d008      	beq.n	8005440 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f9a3 	bl	800577a <UART_EndTransmit_IT>
    return;
 8005434:	e004      	b.n	8005440 <HAL_UART_IRQHandler+0x514>
    return;
 8005436:	bf00      	nop
 8005438:	e002      	b.n	8005440 <HAL_UART_IRQHandler+0x514>
      return;
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <HAL_UART_IRQHandler+0x514>
      return;
 800543e:	bf00      	nop
  }
}
 8005440:	37e8      	adds	r7, #232	; 0xe8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop

08005448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b090      	sub	sp, #64	; 0x40
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	4613      	mov	r3, r2
 80054aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ac:	e050      	b.n	8005550 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d04c      	beq.n	8005550 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <UART_WaitOnFlagUntilTimeout+0x30>
 80054bc:	f7fc fe1e 	bl	80020fc <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d241      	bcs.n	8005550 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054ec:	637a      	str	r2, [r7, #52]	; 0x34
 80054ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e5      	bne.n	80054cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3314      	adds	r3, #20
 8005506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	613b      	str	r3, [r7, #16]
   return(result);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	63bb      	str	r3, [r7, #56]	; 0x38
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3314      	adds	r3, #20
 800551e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005520:	623a      	str	r2, [r7, #32]
 8005522:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	69f9      	ldr	r1, [r7, #28]
 8005526:	6a3a      	ldr	r2, [r7, #32]
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	61bb      	str	r3, [r7, #24]
   return(result);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e5      	bne.n	8005500 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e00f      	b.n	8005570 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4013      	ands	r3, r2
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	429a      	cmp	r2, r3
 800555e:	bf0c      	ite	eq
 8005560:	2301      	moveq	r3, #1
 8005562:	2300      	movne	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	429a      	cmp	r2, r3
 800556c:	d09f      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3740      	adds	r7, #64	; 0x40
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	4613      	mov	r3, r2
 8005584:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	88fa      	ldrh	r2, [r7, #6]
 8005590:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	88fa      	ldrh	r2, [r7, #6]
 8005596:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2222      	movs	r2, #34	; 0x22
 80055a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055bc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0201 	orr.w	r2, r2, #1
 80055cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0220 	orr.w	r2, r2, #32
 80055dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b095      	sub	sp, #84	; 0x54
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fe:	e853 3f00 	ldrex	r3, [r3]
 8005602:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800560a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	330c      	adds	r3, #12
 8005612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005614:	643a      	str	r2, [r7, #64]	; 0x40
 8005616:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800561a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e5      	bne.n	80055f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3314      	adds	r3, #20
 800562e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	61fb      	str	r3, [r7, #28]
   return(result);
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3314      	adds	r3, #20
 8005646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005648:	62fa      	str	r2, [r7, #44]	; 0x2c
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800564e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e5      	bne.n	8005628 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	2b01      	cmp	r3, #1
 8005662:	d119      	bne.n	8005698 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	60bb      	str	r3, [r7, #8]
   return(result);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f023 0310 	bic.w	r3, r3, #16
 800567a:	647b      	str	r3, [r7, #68]	; 0x44
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005684:	61ba      	str	r2, [r7, #24]
 8005686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6979      	ldr	r1, [r7, #20]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	613b      	str	r3, [r7, #16]
   return(result);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e5      	bne.n	8005664 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056a6:	bf00      	nop
 80056a8:	3754      	adds	r7, #84	; 0x54
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7ff fecf 	bl	8005470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056da:	b480      	push	{r7}
 80056dc:	b085      	sub	sp, #20
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b21      	cmp	r3, #33	; 0x21
 80056ec:	d13e      	bne.n	800576c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f6:	d114      	bne.n	8005722 <UART_Transmit_IT+0x48>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d110      	bne.n	8005722 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005714:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	1c9a      	adds	r2, r3, #2
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	621a      	str	r2, [r3, #32]
 8005720:	e008      	b.n	8005734 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	1c59      	adds	r1, r3, #1
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6211      	str	r1, [r2, #32]
 800572c:	781a      	ldrb	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29b      	uxth	r3, r3
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	4619      	mov	r1, r3
 8005742:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10f      	bne.n	8005768 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005756:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005766:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005790:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff fe54 	bl	8005448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b08c      	sub	sp, #48	; 0x30
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b22      	cmp	r3, #34	; 0x22
 80057bc:	f040 80ab 	bne.w	8005916 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c8:	d117      	bne.n	80057fa <UART_Receive_IT+0x50>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d113      	bne.n	80057fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	1c9a      	adds	r2, r3, #2
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	629a      	str	r2, [r3, #40]	; 0x28
 80057f8:	e026      	b.n	8005848 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005800:	2300      	movs	r3, #0
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580c:	d007      	beq.n	800581e <UART_Receive_IT+0x74>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10a      	bne.n	800582c <UART_Receive_IT+0x82>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	b2da      	uxtb	r2, r3
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	e008      	b.n	800583e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005838:	b2da      	uxtb	r2, r3
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29b      	uxth	r3, r3
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	4619      	mov	r1, r3
 8005856:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005858:	2b00      	cmp	r3, #0
 800585a:	d15a      	bne.n	8005912 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0220 	bic.w	r2, r2, #32
 800586a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800587a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0201 	bic.w	r2, r2, #1
 800588a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	2b01      	cmp	r3, #1
 800589a:	d135      	bne.n	8005908 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	330c      	adds	r3, #12
 80058a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	613b      	str	r3, [r7, #16]
   return(result);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f023 0310 	bic.w	r3, r3, #16
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c2:	623a      	str	r2, [r7, #32]
 80058c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	69f9      	ldr	r1, [r7, #28]
 80058c8:	6a3a      	ldr	r2, [r7, #32]
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e5      	bne.n	80058a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d10a      	bne.n	80058fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff fdbf 	bl	8005484 <HAL_UARTEx_RxEventCallback>
 8005906:	e002      	b.n	800590e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff fda7 	bl	800545c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	e002      	b.n	8005918 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	e000      	b.n	8005918 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005916:	2302      	movs	r3, #2
  }
}
 8005918:	4618      	mov	r0, r3
 800591a:	3730      	adds	r7, #48	; 0x30
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005924:	b09f      	sub	sp, #124	; 0x7c
 8005926:	af00      	add	r7, sp, #0
 8005928:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800592a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005936:	68d9      	ldr	r1, [r3, #12]
 8005938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	ea40 0301 	orr.w	r3, r0, r1
 8005940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	431a      	orrs	r2, r3
 800594c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	431a      	orrs	r2, r3
 8005952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	4313      	orrs	r3, r2
 8005958:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800595a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005964:	f021 010c 	bic.w	r1, r1, #12
 8005968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800596e:	430b      	orrs	r3, r1
 8005970:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800597c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597e:	6999      	ldr	r1, [r3, #24]
 8005980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	ea40 0301 	orr.w	r3, r0, r1
 8005988:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800598a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	4bc5      	ldr	r3, [pc, #788]	; (8005ca4 <UART_SetConfig+0x384>)
 8005990:	429a      	cmp	r2, r3
 8005992:	d004      	beq.n	800599e <UART_SetConfig+0x7e>
 8005994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4bc3      	ldr	r3, [pc, #780]	; (8005ca8 <UART_SetConfig+0x388>)
 800599a:	429a      	cmp	r2, r3
 800599c:	d103      	bne.n	80059a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800599e:	f7fd fceb 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 80059a2:	6778      	str	r0, [r7, #116]	; 0x74
 80059a4:	e002      	b.n	80059ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059a6:	f7fd fcd3 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 80059aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b4:	f040 80b6 	bne.w	8005b24 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ba:	461c      	mov	r4, r3
 80059bc:	f04f 0500 	mov.w	r5, #0
 80059c0:	4622      	mov	r2, r4
 80059c2:	462b      	mov	r3, r5
 80059c4:	1891      	adds	r1, r2, r2
 80059c6:	6439      	str	r1, [r7, #64]	; 0x40
 80059c8:	415b      	adcs	r3, r3
 80059ca:	647b      	str	r3, [r7, #68]	; 0x44
 80059cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059d0:	1912      	adds	r2, r2, r4
 80059d2:	eb45 0303 	adc.w	r3, r5, r3
 80059d6:	f04f 0000 	mov.w	r0, #0
 80059da:	f04f 0100 	mov.w	r1, #0
 80059de:	00d9      	lsls	r1, r3, #3
 80059e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059e4:	00d0      	lsls	r0, r2, #3
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	1911      	adds	r1, r2, r4
 80059ec:	6639      	str	r1, [r7, #96]	; 0x60
 80059ee:	416b      	adcs	r3, r5
 80059f0:	667b      	str	r3, [r7, #100]	; 0x64
 80059f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	1891      	adds	r1, r2, r2
 80059fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a00:	415b      	adcs	r3, r3
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a0c:	f7fa ffd2 	bl	80009b4 <__aeabi_uldivmod>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4ba5      	ldr	r3, [pc, #660]	; (8005cac <UART_SetConfig+0x38c>)
 8005a16:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	011e      	lsls	r6, r3, #4
 8005a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a20:	461c      	mov	r4, r3
 8005a22:	f04f 0500 	mov.w	r5, #0
 8005a26:	4622      	mov	r2, r4
 8005a28:	462b      	mov	r3, r5
 8005a2a:	1891      	adds	r1, r2, r2
 8005a2c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a2e:	415b      	adcs	r3, r3
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
 8005a32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a36:	1912      	adds	r2, r2, r4
 8005a38:	eb45 0303 	adc.w	r3, r5, r3
 8005a3c:	f04f 0000 	mov.w	r0, #0
 8005a40:	f04f 0100 	mov.w	r1, #0
 8005a44:	00d9      	lsls	r1, r3, #3
 8005a46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a4a:	00d0      	lsls	r0, r2, #3
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	1911      	adds	r1, r2, r4
 8005a52:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a54:	416b      	adcs	r3, r5
 8005a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	1891      	adds	r1, r2, r2
 8005a64:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a66:	415b      	adcs	r3, r3
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a6e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a72:	f7fa ff9f 	bl	80009b4 <__aeabi_uldivmod>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4b8c      	ldr	r3, [pc, #560]	; (8005cac <UART_SetConfig+0x38c>)
 8005a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a80:	095b      	lsrs	r3, r3, #5
 8005a82:	2164      	movs	r1, #100	; 0x64
 8005a84:	fb01 f303 	mul.w	r3, r1, r3
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	3332      	adds	r3, #50	; 0x32
 8005a8e:	4a87      	ldr	r2, [pc, #540]	; (8005cac <UART_SetConfig+0x38c>)
 8005a90:	fba2 2303 	umull	r2, r3, r2, r3
 8005a94:	095b      	lsrs	r3, r3, #5
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a9c:	441e      	add	r6, r3
 8005a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f04f 0100 	mov.w	r1, #0
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	1894      	adds	r4, r2, r2
 8005aac:	623c      	str	r4, [r7, #32]
 8005aae:	415b      	adcs	r3, r3
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ab6:	1812      	adds	r2, r2, r0
 8005ab8:	eb41 0303 	adc.w	r3, r1, r3
 8005abc:	f04f 0400 	mov.w	r4, #0
 8005ac0:	f04f 0500 	mov.w	r5, #0
 8005ac4:	00dd      	lsls	r5, r3, #3
 8005ac6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005aca:	00d4      	lsls	r4, r2, #3
 8005acc:	4622      	mov	r2, r4
 8005ace:	462b      	mov	r3, r5
 8005ad0:	1814      	adds	r4, r2, r0
 8005ad2:	653c      	str	r4, [r7, #80]	; 0x50
 8005ad4:	414b      	adcs	r3, r1
 8005ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	461a      	mov	r2, r3
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	1891      	adds	r1, r2, r2
 8005ae4:	61b9      	str	r1, [r7, #24]
 8005ae6:	415b      	adcs	r3, r3
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005af2:	f7fa ff5f 	bl	80009b4 <__aeabi_uldivmod>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4b6c      	ldr	r3, [pc, #432]	; (8005cac <UART_SetConfig+0x38c>)
 8005afc:	fba3 1302 	umull	r1, r3, r3, r2
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	2164      	movs	r1, #100	; 0x64
 8005b04:	fb01 f303 	mul.w	r3, r1, r3
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	3332      	adds	r3, #50	; 0x32
 8005b0e:	4a67      	ldr	r2, [pc, #412]	; (8005cac <UART_SetConfig+0x38c>)
 8005b10:	fba2 2303 	umull	r2, r3, r2, r3
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	f003 0207 	and.w	r2, r3, #7
 8005b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4432      	add	r2, r6
 8005b20:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b22:	e0b9      	b.n	8005c98 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b26:	461c      	mov	r4, r3
 8005b28:	f04f 0500 	mov.w	r5, #0
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	462b      	mov	r3, r5
 8005b30:	1891      	adds	r1, r2, r2
 8005b32:	6139      	str	r1, [r7, #16]
 8005b34:	415b      	adcs	r3, r3
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b3c:	1912      	adds	r2, r2, r4
 8005b3e:	eb45 0303 	adc.w	r3, r5, r3
 8005b42:	f04f 0000 	mov.w	r0, #0
 8005b46:	f04f 0100 	mov.w	r1, #0
 8005b4a:	00d9      	lsls	r1, r3, #3
 8005b4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b50:	00d0      	lsls	r0, r2, #3
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	eb12 0804 	adds.w	r8, r2, r4
 8005b5a:	eb43 0905 	adc.w	r9, r3, r5
 8005b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f04f 0100 	mov.w	r1, #0
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	008b      	lsls	r3, r1, #2
 8005b72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b76:	0082      	lsls	r2, r0, #2
 8005b78:	4640      	mov	r0, r8
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	f7fa ff1a 	bl	80009b4 <__aeabi_uldivmod>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4b49      	ldr	r3, [pc, #292]	; (8005cac <UART_SetConfig+0x38c>)
 8005b86:	fba3 2302 	umull	r2, r3, r3, r2
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	011e      	lsls	r6, r3, #4
 8005b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b90:	4618      	mov	r0, r3
 8005b92:	f04f 0100 	mov.w	r1, #0
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	1894      	adds	r4, r2, r2
 8005b9c:	60bc      	str	r4, [r7, #8]
 8005b9e:	415b      	adcs	r3, r3
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ba6:	1812      	adds	r2, r2, r0
 8005ba8:	eb41 0303 	adc.w	r3, r1, r3
 8005bac:	f04f 0400 	mov.w	r4, #0
 8005bb0:	f04f 0500 	mov.w	r5, #0
 8005bb4:	00dd      	lsls	r5, r3, #3
 8005bb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bba:	00d4      	lsls	r4, r2, #3
 8005bbc:	4622      	mov	r2, r4
 8005bbe:	462b      	mov	r3, r5
 8005bc0:	1814      	adds	r4, r2, r0
 8005bc2:	64bc      	str	r4, [r7, #72]	; 0x48
 8005bc4:	414b      	adcs	r3, r1
 8005bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f04f 0100 	mov.w	r1, #0
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	008b      	lsls	r3, r1, #2
 8005bdc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005be0:	0082      	lsls	r2, r0, #2
 8005be2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005be6:	f7fa fee5 	bl	80009b4 <__aeabi_uldivmod>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4b2f      	ldr	r3, [pc, #188]	; (8005cac <UART_SetConfig+0x38c>)
 8005bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	2164      	movs	r1, #100	; 0x64
 8005bf8:	fb01 f303 	mul.w	r3, r1, r3
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	3332      	adds	r3, #50	; 0x32
 8005c02:	4a2a      	ldr	r2, [pc, #168]	; (8005cac <UART_SetConfig+0x38c>)
 8005c04:	fba2 2303 	umull	r2, r3, r2, r3
 8005c08:	095b      	lsrs	r3, r3, #5
 8005c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c0e:	441e      	add	r6, r3
 8005c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c12:	4618      	mov	r0, r3
 8005c14:	f04f 0100 	mov.w	r1, #0
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	1894      	adds	r4, r2, r2
 8005c1e:	603c      	str	r4, [r7, #0]
 8005c20:	415b      	adcs	r3, r3
 8005c22:	607b      	str	r3, [r7, #4]
 8005c24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c28:	1812      	adds	r2, r2, r0
 8005c2a:	eb41 0303 	adc.w	r3, r1, r3
 8005c2e:	f04f 0400 	mov.w	r4, #0
 8005c32:	f04f 0500 	mov.w	r5, #0
 8005c36:	00dd      	lsls	r5, r3, #3
 8005c38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c3c:	00d4      	lsls	r4, r2, #3
 8005c3e:	4622      	mov	r2, r4
 8005c40:	462b      	mov	r3, r5
 8005c42:	eb12 0a00 	adds.w	sl, r2, r0
 8005c46:	eb43 0b01 	adc.w	fp, r3, r1
 8005c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f04f 0100 	mov.w	r1, #0
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	008b      	lsls	r3, r1, #2
 8005c5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c62:	0082      	lsls	r2, r0, #2
 8005c64:	4650      	mov	r0, sl
 8005c66:	4659      	mov	r1, fp
 8005c68:	f7fa fea4 	bl	80009b4 <__aeabi_uldivmod>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <UART_SetConfig+0x38c>)
 8005c72:	fba3 1302 	umull	r1, r3, r3, r2
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	2164      	movs	r1, #100	; 0x64
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	3332      	adds	r3, #50	; 0x32
 8005c84:	4a09      	ldr	r2, [pc, #36]	; (8005cac <UART_SetConfig+0x38c>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	f003 020f 	and.w	r2, r3, #15
 8005c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4432      	add	r2, r6
 8005c96:	609a      	str	r2, [r3, #8]
}
 8005c98:	bf00      	nop
 8005c9a:	377c      	adds	r7, #124	; 0x7c
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40011000 	.word	0x40011000
 8005ca8:	40011400 	.word	0x40011400
 8005cac:	51eb851f 	.word	0x51eb851f

08005cb0 <__libc_init_array>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	4d0d      	ldr	r5, [pc, #52]	; (8005ce8 <__libc_init_array+0x38>)
 8005cb4:	4c0d      	ldr	r4, [pc, #52]	; (8005cec <__libc_init_array+0x3c>)
 8005cb6:	1b64      	subs	r4, r4, r5
 8005cb8:	10a4      	asrs	r4, r4, #2
 8005cba:	2600      	movs	r6, #0
 8005cbc:	42a6      	cmp	r6, r4
 8005cbe:	d109      	bne.n	8005cd4 <__libc_init_array+0x24>
 8005cc0:	4d0b      	ldr	r5, [pc, #44]	; (8005cf0 <__libc_init_array+0x40>)
 8005cc2:	4c0c      	ldr	r4, [pc, #48]	; (8005cf4 <__libc_init_array+0x44>)
 8005cc4:	f000 f828 	bl	8005d18 <_init>
 8005cc8:	1b64      	subs	r4, r4, r5
 8005cca:	10a4      	asrs	r4, r4, #2
 8005ccc:	2600      	movs	r6, #0
 8005cce:	42a6      	cmp	r6, r4
 8005cd0:	d105      	bne.n	8005cde <__libc_init_array+0x2e>
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
 8005cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd8:	4798      	blx	r3
 8005cda:	3601      	adds	r6, #1
 8005cdc:	e7ee      	b.n	8005cbc <__libc_init_array+0xc>
 8005cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce2:	4798      	blx	r3
 8005ce4:	3601      	adds	r6, #1
 8005ce6:	e7f2      	b.n	8005cce <__libc_init_array+0x1e>
 8005ce8:	08005d50 	.word	0x08005d50
 8005cec:	08005d50 	.word	0x08005d50
 8005cf0:	08005d50 	.word	0x08005d50
 8005cf4:	08005d54 	.word	0x08005d54

08005cf8 <memset>:
 8005cf8:	4402      	add	r2, r0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d100      	bne.n	8005d02 <memset+0xa>
 8005d00:	4770      	bx	lr
 8005d02:	f803 1b01 	strb.w	r1, [r3], #1
 8005d06:	e7f9      	b.n	8005cfc <memset+0x4>

08005d08 <strcpy>:
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d0e:	f803 2b01 	strb.w	r2, [r3], #1
 8005d12:	2a00      	cmp	r2, #0
 8005d14:	d1f9      	bne.n	8005d0a <strcpy+0x2>
 8005d16:	4770      	bx	lr

08005d18 <_init>:
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	bf00      	nop
 8005d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1e:	bc08      	pop	{r3}
 8005d20:	469e      	mov	lr, r3
 8005d22:	4770      	bx	lr

08005d24 <_fini>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	bf00      	nop
 8005d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2a:	bc08      	pop	{r3}
 8005d2c:	469e      	mov	lr, r3
 8005d2e:	4770      	bx	lr
