
Projet_Robot_Infirmier_F407G.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002918  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab8  08002ab8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ac0  08002ac0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009521  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000188d  00000000  00000000  0002955d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  0002adf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000658  00000000  00000000  0002b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001facd  00000000  00000000  0002bb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000098ea  00000000  00000000  0004b615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bef53  00000000  00000000  00054eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00113e52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001aa8  00000000  00000000  00113ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a88 	.word	0x08002a88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002a88 	.word	0x08002a88

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
 80004da:	4ba2      	ldr	r3, [pc, #648]	; (8000764 <MX_GPIO_Init+0x2a4>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4aa1      	ldr	r2, [pc, #644]	; (8000764 <MX_GPIO_Init+0x2a4>)
 80004e0:	f043 0310 	orr.w	r3, r3, #16
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b9f      	ldr	r3, [pc, #636]	; (8000764 <MX_GPIO_Init+0x2a4>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0310 	and.w	r3, r3, #16
 80004ee:	61bb      	str	r3, [r7, #24]
 80004f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	4b9b      	ldr	r3, [pc, #620]	; (8000764 <MX_GPIO_Init+0x2a4>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a9a      	ldr	r2, [pc, #616]	; (8000764 <MX_GPIO_Init+0x2a4>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b98      	ldr	r3, [pc, #608]	; (8000764 <MX_GPIO_Init+0x2a4>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	4b94      	ldr	r3, [pc, #592]	; (8000764 <MX_GPIO_Init+0x2a4>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a93      	ldr	r2, [pc, #588]	; (8000764 <MX_GPIO_Init+0x2a4>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b91      	ldr	r3, [pc, #580]	; (8000764 <MX_GPIO_Init+0x2a4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	4b8d      	ldr	r3, [pc, #564]	; (8000764 <MX_GPIO_Init+0x2a4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a8c      	ldr	r2, [pc, #560]	; (8000764 <MX_GPIO_Init+0x2a4>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b8a      	ldr	r3, [pc, #552]	; (8000764 <MX_GPIO_Init+0x2a4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	4b86      	ldr	r3, [pc, #536]	; (8000764 <MX_GPIO_Init+0x2a4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a85      	ldr	r2, [pc, #532]	; (8000764 <MX_GPIO_Init+0x2a4>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b83      	ldr	r3, [pc, #524]	; (8000764 <MX_GPIO_Init+0x2a4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b7f      	ldr	r3, [pc, #508]	; (8000764 <MX_GPIO_Init+0x2a4>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a7e      	ldr	r2, [pc, #504]	; (8000764 <MX_GPIO_Init+0x2a4>)
 800056c:	f043 0308 	orr.w	r3, r3, #8
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b7c      	ldr	r3, [pc, #496]	; (8000764 <MX_GPIO_Init+0x2a4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	4879      	ldr	r0, [pc, #484]	; (8000768 <MX_GPIO_Init+0x2a8>)
 8000584:	f000 fef4 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2101      	movs	r1, #1
 800058c:	4877      	ldr	r0, [pc, #476]	; (800076c <MX_GPIO_Init+0x2ac>)
 800058e:	f000 feef 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000592:	2200      	movs	r2, #0
 8000594:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000598:	4875      	ldr	r0, [pc, #468]	; (8000770 <MX_GPIO_Init+0x2b0>)
 800059a:	f000 fee9 	bl	8001370 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800059e:	2308      	movs	r3, #8
 80005a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	4619      	mov	r1, r3
 80005b4:	486c      	ldr	r0, [pc, #432]	; (8000768 <MX_GPIO_Init+0x2a8>)
 80005b6:	f000 fd3f 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005ba:	2301      	movs	r3, #1
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2300      	movs	r3, #0
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	4619      	mov	r1, r3
 80005d0:	4866      	ldr	r0, [pc, #408]	; (800076c <MX_GPIO_Init+0x2ac>)
 80005d2:	f000 fd31 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005d6:	2308      	movs	r3, #8
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	2302      	movs	r3, #2
 80005dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005e6:	2305      	movs	r3, #5
 80005e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4619      	mov	r1, r3
 80005f0:	485e      	ldr	r0, [pc, #376]	; (800076c <MX_GPIO_Init+0x2ac>)
 80005f2:	f000 fd21 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4619      	mov	r1, r3
 800060a:	485a      	ldr	r0, [pc, #360]	; (8000774 <MX_GPIO_Init+0x2b4>)
 800060c:	f000 fd14 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000610:	2310      	movs	r3, #16
 8000612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000620:	2306      	movs	r3, #6
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4619      	mov	r1, r3
 800062a:	4852      	ldr	r0, [pc, #328]	; (8000774 <MX_GPIO_Init+0x2b4>)
 800062c:	f000 fd04 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000630:	23e0      	movs	r3, #224	; 0xe0
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000640:	2305      	movs	r3, #5
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	484a      	ldr	r0, [pc, #296]	; (8000774 <MX_GPIO_Init+0x2b4>)
 800064c:	f000 fcf4 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000650:	2304      	movs	r3, #4
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	4845      	ldr	r0, [pc, #276]	; (8000778 <MX_GPIO_Init+0x2b8>)
 8000664:	f000 fce8 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800067a:	2305      	movs	r3, #5
 800067c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4619      	mov	r1, r3
 8000684:	483c      	ldr	r0, [pc, #240]	; (8000778 <MX_GPIO_Init+0x2b8>)
 8000686:	f000 fcd7 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800068a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800068e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	4833      	ldr	r0, [pc, #204]	; (8000770 <MX_GPIO_Init+0x2b0>)
 80006a4:	f000 fcc8 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80006a8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006ba:	2306      	movs	r3, #6
 80006bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	4829      	ldr	r0, [pc, #164]	; (800076c <MX_GPIO_Init+0x2ac>)
 80006c6:	f000 fcb7 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80006ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4825      	ldr	r0, [pc, #148]	; (8000774 <MX_GPIO_Init+0x2b4>)
 80006e0:	f000 fcaa 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80006e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006f6:	230a      	movs	r3, #10
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	481c      	ldr	r0, [pc, #112]	; (8000774 <MX_GPIO_Init+0x2b4>)
 8000702:	f000 fc99 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000706:	2320      	movs	r3, #32
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4815      	ldr	r0, [pc, #84]	; (8000770 <MX_GPIO_Init+0x2b0>)
 800071a:	f000 fc8d 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800071e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000724:	2312      	movs	r3, #18
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000730:	2304      	movs	r3, #4
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <MX_GPIO_Init+0x2b8>)
 800073c:	f000 fc7c 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000740:	2302      	movs	r3, #2
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000744:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_GPIO_Init+0x2a8>)
 8000756:	f000 fc6f 	bl	8001038 <HAL_GPIO_Init>

}
 800075a:	bf00      	nop
 800075c:	3730      	adds	r7, #48	; 0x30
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40021000 	.word	0x40021000
 800076c:	40020800 	.word	0x40020800
 8000770:	40020c00 	.word	0x40020c00
 8000774:	40020000 	.word	0x40020000
 8000778:	40020400 	.word	0x40020400

0800077c <lidar_setup>:





void lidar_setup(){
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0



	return;
 8000780:	bf00      	nop
}
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 fa3c 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f81c 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f7ff fe92 	bl	80004c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800079c:	f000 f908 	bl	80009b0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80007a0:	f000 f930 	bl	8000a04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, sizeof(UART2_rxBuffer)); // initialisation des liaisons UART en mode non bloquantes
 80007a4:	2214      	movs	r2, #20
 80007a6:	4906      	ldr	r1, [pc, #24]	; (80007c0 <main+0x34>)
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <main+0x38>)
 80007aa:	f001 fabc 	bl	8001d26 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, sizeof(UART3_rxBuffer));
 80007ae:	2214      	movs	r2, #20
 80007b0:	4905      	ldr	r1, [pc, #20]	; (80007c8 <main+0x3c>)
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <main+0x40>)
 80007b4:	f001 fab7 	bl	8001d26 <HAL_UART_Receive_IT>


  lidar_setup();
 80007b8:	f7ff ffe0 	bl	800077c <lidar_setup>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <main+0x30>
 80007be:	bf00      	nop
 80007c0:	20000028 	.word	0x20000028
 80007c4:	200000bc 	.word	0x200000bc
 80007c8:	2000003c 	.word	0x2000003c
 80007cc:	20000078 	.word	0x20000078

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2230      	movs	r2, #48	; 0x30
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 f94a 	bl	8002a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <SystemClock_Config+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a27      	ldr	r2, [pc, #156]	; (800089c <SystemClock_Config+0xcc>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <SystemClock_Config+0xcc>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <SystemClock_Config+0xd0>)
 800081a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <SystemClock_Config+0xd0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082c:	2302      	movs	r3, #2
 800082e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000834:	2310      	movs	r3, #16
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000838:	2302      	movs	r3, #2
 800083a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083c:	2300      	movs	r3, #0
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000840:	2308      	movs	r3, #8
 8000842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000844:	2332      	movs	r3, #50	; 0x32
 8000846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000848:	2304      	movs	r3, #4
 800084a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800084c:	2307      	movs	r3, #7
 800084e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fda5 	bl	80013a4 <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000860:	f000 f820 	bl	80008a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000868:	2302      	movs	r3, #2
 800086a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000870:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f806 	bl	8001894 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800088e:	f000 f809 	bl	80008a4 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	; 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f000 face 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f9b0 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	int a = 3;
 800095a:	2303      	movs	r3, #3
 800095c:	607b      	str	r3, [r7, #4]

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <USART2_IRQHandler+0x18>)
 8000960:	f001 fa12 	bl	8001d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000bc 	.word	0x200000bc

08000970 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */


  int b = 3;
 8000976:	2303      	movs	r3, #3
 8000978:	607b      	str	r3, [r7, #4]

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800097a:	4803      	ldr	r0, [pc, #12]	; (8000988 <USART3_IRQHandler+0x18>)
 800097c:	f001 fa04 	bl	8001d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000078 	.word	0x20000078

0800098c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <SystemInit+0x20>)
 8000992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000996:	4a05      	ldr	r2, [pc, #20]	; (80009ac <SystemInit+0x20>)
 8000998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800099c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <MX_USART2_UART_Init+0x50>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009e8:	f001 f950 	bl	8001c8c <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009f2:	f7ff ff57 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000bc 	.word	0x200000bc
 8000a00:	40004400 	.word	0x40004400

08000a04 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_USART3_UART_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a3c:	f001 f926 	bl	8001c8c <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a46:	f7ff ff2d 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000078 	.word	0x20000078
 8000a54:	40004800 	.word	0x40004800

08000a58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	; 0x30
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a4a      	ldr	r2, [pc, #296]	; (8000ba0 <HAL_UART_MspInit+0x148>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d134      	bne.n	8000ae4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
 8000a7e:	4b49      	ldr	r3, [pc, #292]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a48      	ldr	r2, [pc, #288]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b46      	ldr	r3, [pc, #280]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	61bb      	str	r3, [r7, #24]
 8000a94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	4b42      	ldr	r3, [pc, #264]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a41      	ldr	r2, [pc, #260]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4836      	ldr	r0, [pc, #216]	; (8000ba8 <HAL_UART_MspInit+0x150>)
 8000ace:	f000 fab3 	bl	8001038 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2026      	movs	r0, #38	; 0x26
 8000ad8:	f000 f9e5 	bl	8000ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000adc:	2026      	movs	r0, #38	; 0x26
 8000ade:	f000 f9fe 	bl	8000ede <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ae2:	e058      	b.n	8000b96 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART3)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a30      	ldr	r2, [pc, #192]	; (8000bac <HAL_UART_MspInit+0x154>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d153      	bne.n	8000b96 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a2b      	ldr	r2, [pc, #172]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a24      	ldr	r2, [pc, #144]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_UART_MspInit+0x14c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b54:	2307      	movs	r3, #7
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <HAL_UART_MspInit+0x158>)
 8000b60:	f000 fa6a 	bl	8001038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b76:	2307      	movs	r3, #7
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <HAL_UART_MspInit+0x15c>)
 8000b82:	f000 fa59 	bl	8001038 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2027      	movs	r0, #39	; 0x27
 8000b8c:	f000 f98b 	bl	8000ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b90:	2027      	movs	r0, #39	; 0x27
 8000b92:	f000 f9a4 	bl	8000ede <HAL_NVIC_EnableIRQ>
}
 8000b96:	bf00      	nop
 8000b98:	3730      	adds	r7, #48	; 0x30
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40004800 	.word	0x40004800
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	40020c00 	.word	0x40020c00

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bbe:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	; (8000c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000be2:	f7ff fed3 	bl	800098c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f001 ff23 	bl	8002a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fdcf 	bl	800078c <main>
  bx  lr    
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bfc:	08002ac8 	.word	0x08002ac8
  ldr r2, =_sbss
 8000c00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c04:	20000104 	.word	0x20000104

08000c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_Init+0x40>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_Init+0x40>)
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x40>)
 8000c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f92b 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f808 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fe36 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023c00 	.word	0x40023c00

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f943 	bl	8000efa <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f90b 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000100 	.word	0x20000100

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000100 	.word	0x20000100

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff29 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff3e 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff31 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffa2 	bl	8000e4c <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff feda 	bl	8000cd8 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d008      	beq.n	8000f44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e052      	b.n	8000fea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0216 	bic.w	r2, r2, #22
 8000f52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d103      	bne.n	8000f74 <HAL_DMA_Abort+0x62>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d007      	beq.n	8000f84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0208 	bic.w	r2, r2, #8
 8000f82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0201 	bic.w	r2, r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f94:	e013      	b.n	8000fbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f96:	f7ff fe9f 	bl	8000cd8 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d90c      	bls.n	8000fbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2203      	movs	r2, #3
 8000fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e015      	b.n	8000fea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1e4      	bne.n	8000f96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd0:	223f      	movs	r2, #63	; 0x3f
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d004      	beq.n	8001010 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e00c      	b.n	800102a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2205      	movs	r2, #5
 8001014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	e16b      	b.n	800132c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	429a      	cmp	r2, r3
 800106e:	f040 815a 	bne.w	8001326 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d005      	beq.n	800108a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001086:	2b02      	cmp	r3, #2
 8001088:	d130      	bne.n	80010ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	68da      	ldr	r2, [r3, #12]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	f003 0201 	and.w	r2, r3, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d017      	beq.n	8001128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d123      	bne.n	800117c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	08da      	lsrs	r2, r3, #3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3208      	adds	r2, #8
 800113c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	69b9      	ldr	r1, [r7, #24]
 8001178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0203 	and.w	r2, r3, #3
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 80b4 	beq.w	8001326 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b60      	ldr	r3, [pc, #384]	; (8001344 <HAL_GPIO_Init+0x30c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a5f      	ldr	r2, [pc, #380]	; (8001344 <HAL_GPIO_Init+0x30c>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <HAL_GPIO_Init+0x30c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011da:	4a5b      	ldr	r2, [pc, #364]	; (8001348 <HAL_GPIO_Init+0x310>)
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_GPIO_Init+0x314>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d02b      	beq.n	800125e <HAL_GPIO_Init+0x226>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a51      	ldr	r2, [pc, #324]	; (8001350 <HAL_GPIO_Init+0x318>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d025      	beq.n	800125a <HAL_GPIO_Init+0x222>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a50      	ldr	r2, [pc, #320]	; (8001354 <HAL_GPIO_Init+0x31c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d01f      	beq.n	8001256 <HAL_GPIO_Init+0x21e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4f      	ldr	r2, [pc, #316]	; (8001358 <HAL_GPIO_Init+0x320>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d019      	beq.n	8001252 <HAL_GPIO_Init+0x21a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4e      	ldr	r2, [pc, #312]	; (800135c <HAL_GPIO_Init+0x324>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x216>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4d      	ldr	r2, [pc, #308]	; (8001360 <HAL_GPIO_Init+0x328>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x212>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_GPIO_Init+0x32c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x20e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <HAL_GPIO_Init+0x330>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x20a>
 800123e:	2307      	movs	r3, #7
 8001240:	e00e      	b.n	8001260 <HAL_GPIO_Init+0x228>
 8001242:	2308      	movs	r3, #8
 8001244:	e00c      	b.n	8001260 <HAL_GPIO_Init+0x228>
 8001246:	2306      	movs	r3, #6
 8001248:	e00a      	b.n	8001260 <HAL_GPIO_Init+0x228>
 800124a:	2305      	movs	r3, #5
 800124c:	e008      	b.n	8001260 <HAL_GPIO_Init+0x228>
 800124e:	2304      	movs	r3, #4
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x228>
 8001252:	2303      	movs	r3, #3
 8001254:	e004      	b.n	8001260 <HAL_GPIO_Init+0x228>
 8001256:	2302      	movs	r3, #2
 8001258:	e002      	b.n	8001260 <HAL_GPIO_Init+0x228>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x228>
 800125e:	2300      	movs	r3, #0
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	f002 0203 	and.w	r2, r2, #3
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	4093      	lsls	r3, r2
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001270:	4935      	ldr	r1, [pc, #212]	; (8001348 <HAL_GPIO_Init+0x310>)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127e:	4b3b      	ldr	r3, [pc, #236]	; (800136c <HAL_GPIO_Init+0x334>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a2:	4a32      	ldr	r2, [pc, #200]	; (800136c <HAL_GPIO_Init+0x334>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <HAL_GPIO_Init+0x334>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012cc:	4a27      	ldr	r2, [pc, #156]	; (800136c <HAL_GPIO_Init+0x334>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_GPIO_Init+0x334>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f6:	4a1d      	ldr	r2, [pc, #116]	; (800136c <HAL_GPIO_Init+0x334>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_GPIO_Init+0x334>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <HAL_GPIO_Init+0x334>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3301      	adds	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	f67f ae90 	bls.w	8001054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40021400 	.word	0x40021400
 8001364:	40021800 	.word	0x40021800
 8001368:	40021c00 	.word	0x40021c00
 800136c:	40013c00 	.word	0x40013c00

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800138c:	e003      	b.n	8001396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	619a      	str	r2, [r3, #24]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e264      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d075      	beq.n	80014ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013c2:	4ba3      	ldr	r3, [pc, #652]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d00c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ce:	4ba0      	ldr	r3, [pc, #640]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d112      	bne.n	8001400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013da:	4b9d      	ldr	r3, [pc, #628]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013e6:	d10b      	bne.n	8001400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	4b99      	ldr	r3, [pc, #612]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d05b      	beq.n	80014ac <HAL_RCC_OscConfig+0x108>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d157      	bne.n	80014ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e23f      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001408:	d106      	bne.n	8001418 <HAL_RCC_OscConfig+0x74>
 800140a:	4b91      	ldr	r3, [pc, #580]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a90      	ldr	r2, [pc, #576]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e01d      	b.n	8001454 <HAL_RCC_OscConfig+0xb0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0x98>
 8001422:	4b8b      	ldr	r3, [pc, #556]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a8a      	ldr	r2, [pc, #552]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b88      	ldr	r3, [pc, #544]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a87      	ldr	r2, [pc, #540]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0xb0>
 800143c:	4b84      	ldr	r3, [pc, #528]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a83      	ldr	r2, [pc, #524]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b81      	ldr	r3, [pc, #516]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a80      	ldr	r2, [pc, #512]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fc3c 	bl	8000cd8 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fc38 	bl	8000cd8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e204      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b76      	ldr	r3, [pc, #472]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0xc0>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fc28 	bl	8000cd8 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fc24 	bl	8000cd8 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1f0      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	4b6c      	ldr	r3, [pc, #432]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0xe8>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d063      	beq.n	8001582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ba:	4b65      	ldr	r3, [pc, #404]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c6:	4b62      	ldr	r3, [pc, #392]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d11c      	bne.n	800150c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d2:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d116      	bne.n	800150c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	4b5c      	ldr	r3, [pc, #368]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x152>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e1c4      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	4b56      	ldr	r3, [pc, #344]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4952      	ldr	r1, [pc, #328]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	e03a      	b.n	8001582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001514:	4b4f      	ldr	r3, [pc, #316]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fbdd 	bl	8000cd8 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fbd9 	bl	8000cd8 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1a5      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	4b46      	ldr	r3, [pc, #280]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b43      	ldr	r3, [pc, #268]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4940      	ldr	r1, [pc, #256]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e015      	b.n	8001582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001556:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fbbc 	bl	8000cd8 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fbb8 	bl	8000cd8 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e184      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	4b36      	ldr	r3, [pc, #216]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d030      	beq.n	80015f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d016      	beq.n	80015c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_RCC_OscConfig+0x2b4>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff fb9c 	bl	8000cd8 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fb98 	bl	8000cd8 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e164      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x200>
 80015c2:	e015      	b.n	80015f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_RCC_OscConfig+0x2b4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fb85 	bl	8000cd8 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d2:	f7ff fb81 	bl	8000cd8 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e14d      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 80015e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80a0 	beq.w	800173e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162a:	2301      	movs	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_OscConfig+0x2b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d121      	bne.n	800167e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_RCC_OscConfig+0x2b8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_RCC_OscConfig+0x2b8>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001646:	f7ff fb47 	bl	8000cd8 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	e011      	b.n	8001672 <HAL_RCC_OscConfig+0x2ce>
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	42470000 	.word	0x42470000
 8001658:	42470e80 	.word	0x42470e80
 800165c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001660:	f7ff fb3a 	bl	8000cd8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e106      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	4b85      	ldr	r3, [pc, #532]	; (8001888 <HAL_RCC_OscConfig+0x4e4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d106      	bne.n	8001694 <HAL_RCC_OscConfig+0x2f0>
 8001686:	4b81      	ldr	r3, [pc, #516]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	4a80      	ldr	r2, [pc, #512]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6713      	str	r3, [r2, #112]	; 0x70
 8001692:	e01c      	b.n	80016ce <HAL_RCC_OscConfig+0x32a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x312>
 800169c:	4b7b      	ldr	r3, [pc, #492]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a0:	4a7a      	ldr	r2, [pc, #488]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6713      	str	r3, [r2, #112]	; 0x70
 80016a8:	4b78      	ldr	r3, [pc, #480]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a77      	ldr	r2, [pc, #476]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0x32a>
 80016b6:	4b75      	ldr	r3, [pc, #468]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ba:	4a74      	ldr	r2, [pc, #464]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6713      	str	r3, [r2, #112]	; 0x70
 80016c2:	4b72      	ldr	r3, [pc, #456]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	4a71      	ldr	r2, [pc, #452]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d015      	beq.n	8001702 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff faff 	bl	8000cd8 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fafb 	bl	8000cd8 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0c5      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	4b65      	ldr	r3, [pc, #404]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ee      	beq.n	80016de <HAL_RCC_OscConfig+0x33a>
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff fae9 	bl	8000cd8 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fae5 	bl	8000cd8 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e0af      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	4b5a      	ldr	r3, [pc, #360]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ee      	bne.n	800170a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d105      	bne.n	800173e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001732:	4b56      	ldr	r3, [pc, #344]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a55      	ldr	r2, [pc, #340]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 8001738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 809b 	beq.w	800187e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001748:	4b50      	ldr	r3, [pc, #320]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d05c      	beq.n	800180e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d141      	bne.n	80017e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175c:	4b4c      	ldr	r3, [pc, #304]	; (8001890 <HAL_RCC_OscConfig+0x4ec>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff fab9 	bl	8000cd8 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff fab5 	bl	8000cd8 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e081      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177c:	4b43      	ldr	r3, [pc, #268]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	019b      	lsls	r3, r3, #6
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	085b      	lsrs	r3, r3, #1
 80017a0:	3b01      	subs	r3, #1
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	061b      	lsls	r3, r3, #24
 80017ac:	4937      	ldr	r1, [pc, #220]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b2:	4b37      	ldr	r3, [pc, #220]	; (8001890 <HAL_RCC_OscConfig+0x4ec>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fa8e 	bl	8000cd8 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff fa8a 	bl	8000cd8 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e056      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x41c>
 80017de:	e04e      	b.n	800187e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <HAL_RCC_OscConfig+0x4ec>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff fa77 	bl	8000cd8 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff fa73 	bl	8000cd8 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e03f      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f0      	bne.n	80017ee <HAL_RCC_OscConfig+0x44a>
 800180c:	e037      	b.n	800187e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e032      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_RCC_OscConfig+0x4e8>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d028      	beq.n	800187a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001832:	429a      	cmp	r2, r3
 8001834:	d121      	bne.n	800187a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d11a      	bne.n	800187a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800184a:	4013      	ands	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001850:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001852:	4293      	cmp	r3, r2
 8001854:	d111      	bne.n	800187a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	3b01      	subs	r3, #1
 8001864:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d107      	bne.n	800187a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40007000 	.word	0x40007000
 800188c:	40023800 	.word	0x40023800
 8001890:	42470060 	.word	0x42470060

08001894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0cc      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b68      	ldr	r3, [pc, #416]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d90c      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b65      	ldr	r3, [pc, #404]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b63      	ldr	r3, [pc, #396]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0b8      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e8:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001900:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800190a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190c:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	494d      	ldr	r1, [pc, #308]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d044      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d119      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e07f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d003      	beq.n	8001952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194e:	2b03      	cmp	r3, #3
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e06f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e067      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f023 0203 	bic.w	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4934      	ldr	r1, [pc, #208]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001984:	f7ff f9a8 	bl	8000cd8 <HAL_GetTick>
 8001988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198c:	f7ff f9a4 	bl	8000cd8 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e04f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 020c 	and.w	r2, r3, #12
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1eb      	bne.n	800198c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d20c      	bcs.n	80019dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e032      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4916      	ldr	r1, [pc, #88]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	490e      	ldr	r1, [pc, #56]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a1a:	f000 f821 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	490a      	ldr	r1, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	5ccb      	ldrb	r3, [r1, r3]
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f908 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023c00 	.word	0x40023c00
 8001a50:	40023800 	.word	0x40023800
 8001a54:	08002aa0 	.word	0x08002aa0
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	2300      	movs	r3, #0
 8001a72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a78:	4b67      	ldr	r3, [pc, #412]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d00d      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	f200 80bd 	bhi.w	8001c04 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x34>
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a92:	e0b7      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b61      	ldr	r3, [pc, #388]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a96:	60bb      	str	r3, [r7, #8]
       break;
 8001a98:	e0b7      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a9a:	4b61      	ldr	r3, [pc, #388]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a9c:	60bb      	str	r3, [r7, #8]
      break;
 8001a9e:	e0b4      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa0:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d04d      	beq.n	8001b52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab6:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	099b      	lsrs	r3, r3, #6
 8001abc:	461a      	mov	r2, r3
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ac6:	f04f 0100 	mov.w	r1, #0
 8001aca:	ea02 0800 	and.w	r8, r2, r0
 8001ace:	ea03 0901 	and.w	r9, r3, r1
 8001ad2:	4640      	mov	r0, r8
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	014b      	lsls	r3, r1, #5
 8001ae0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ae4:	0142      	lsls	r2, r0, #5
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	ebb0 0008 	subs.w	r0, r0, r8
 8001aee:	eb61 0109 	sbc.w	r1, r1, r9
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	018b      	lsls	r3, r1, #6
 8001afc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b00:	0182      	lsls	r2, r0, #6
 8001b02:	1a12      	subs	r2, r2, r0
 8001b04:	eb63 0301 	sbc.w	r3, r3, r1
 8001b08:	f04f 0000 	mov.w	r0, #0
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	00d9      	lsls	r1, r3, #3
 8001b12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b16:	00d0      	lsls	r0, r2, #3
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	eb12 0208 	adds.w	r2, r2, r8
 8001b20:	eb43 0309 	adc.w	r3, r3, r9
 8001b24:	f04f 0000 	mov.w	r0, #0
 8001b28:	f04f 0100 	mov.w	r1, #0
 8001b2c:	0259      	lsls	r1, r3, #9
 8001b2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b32:	0250      	lsls	r0, r2, #9
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	f7fe fb40 	bl	80001c8 <__aeabi_uldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e04a      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b52:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	ea02 0400 	and.w	r4, r2, r0
 8001b6a:	ea03 0501 	and.w	r5, r3, r1
 8001b6e:	4620      	mov	r0, r4
 8001b70:	4629      	mov	r1, r5
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	014b      	lsls	r3, r1, #5
 8001b7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b80:	0142      	lsls	r2, r0, #5
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	1b00      	subs	r0, r0, r4
 8001b88:	eb61 0105 	sbc.w	r1, r1, r5
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	018b      	lsls	r3, r1, #6
 8001b96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b9a:	0182      	lsls	r2, r0, #6
 8001b9c:	1a12      	subs	r2, r2, r0
 8001b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001ba2:	f04f 0000 	mov.w	r0, #0
 8001ba6:	f04f 0100 	mov.w	r1, #0
 8001baa:	00d9      	lsls	r1, r3, #3
 8001bac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bb0:	00d0      	lsls	r0, r2, #3
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	1912      	adds	r2, r2, r4
 8001bb8:	eb45 0303 	adc.w	r3, r5, r3
 8001bbc:	f04f 0000 	mov.w	r0, #0
 8001bc0:	f04f 0100 	mov.w	r1, #0
 8001bc4:	0299      	lsls	r1, r3, #10
 8001bc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bca:	0290      	lsls	r0, r2, #10
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	f7fe faf4 	bl	80001c8 <__aeabi_uldivmod>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4613      	mov	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c00:	60bb      	str	r3, [r7, #8]
      break;
 8001c02:	e002      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c06:	60bb      	str	r3, [r7, #8]
      break;
 8001c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	00f42400 	.word	0x00f42400
 8001c20:	007a1200 	.word	0x007a1200

08001c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000000 	.word	0x20000000

08001c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c40:	f7ff fff0 	bl	8001c24 <HAL_RCC_GetHCLKFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	0a9b      	lsrs	r3, r3, #10
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	4903      	ldr	r1, [pc, #12]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	08002ab0 	.word	0x08002ab0

08001c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c68:	f7ff ffdc 	bl	8001c24 <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0b5b      	lsrs	r3, r3, #13
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	; (8001c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08002ab0 	.word	0x08002ab0

08001c8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e03f      	b.n	8001d1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7fe fed0 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2224      	movs	r2, #36	; 0x24
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fce5 	bl	80026a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	4613      	mov	r3, r2
 8001d32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d11d      	bne.n	8001d7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <HAL_UART_Receive_IT+0x26>
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e016      	b.n	8001d7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_UART_Receive_IT+0x38>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e00f      	b.n	8001d7e <HAL_UART_Receive_IT+0x58>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fac0 	bl	80022f8 <UART_Start_Receive_IT>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	e000      	b.n	8001d7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001d7c:	2302      	movs	r3, #2
  }
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0ba      	sub	sp, #232	; 0xe8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d009      	beq.n	8001dee <HAL_UART_IRQHandler+0x66>
 8001dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fb9f 	bl	800252a <UART_Receive_IT>
      return;
 8001dec:	e256      	b.n	800229c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80de 	beq.w	8001fb4 <HAL_UART_IRQHandler+0x22c>
 8001df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d106      	bne.n	8001e12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80d1 	beq.w	8001fb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00b      	beq.n	8001e36 <HAL_UART_IRQHandler+0xae>
 8001e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_UART_IRQHandler+0xd2>
 8001e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f043 0202 	orr.w	r2, r3, #2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_UART_IRQHandler+0xf6>
 8001e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f043 0204 	orr.w	r2, r3, #4
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d011      	beq.n	8001eae <HAL_UART_IRQHandler+0x126>
 8001e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f043 0208 	orr.w	r2, r3, #8
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 81ed 	beq.w	8002292 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_UART_IRQHandler+0x14e>
 8001ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fb2a 	bl	800252a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee0:	2b40      	cmp	r3, #64	; 0x40
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <HAL_UART_IRQHandler+0x17a>
 8001efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d04f      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fa32 	bl	800236c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d141      	bne.n	8001f9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3314      	adds	r3, #20
 8001f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f24:	e853 3f00 	ldrex	r3, [r3]
 8001f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3314      	adds	r3, #20
 8001f3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f52:	e841 2300 	strex	r3, r2, [r1]
 8001f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1d9      	bne.n	8001f16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d013      	beq.n	8001f92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	4a7d      	ldr	r2, [pc, #500]	; (8002164 <HAL_UART_IRQHandler+0x3dc>)
 8001f70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff f83b 	bl	8000ff2 <HAL_DMA_Abort_IT>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d016      	beq.n	8001fb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f90:	e00e      	b.n	8001fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f99a 	bl	80022cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f98:	e00a      	b.n	8001fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f996 	bl	80022cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa0:	e006      	b.n	8001fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f992 	bl	80022cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001fae:	e170      	b.n	8002292 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb0:	bf00      	nop
    return;
 8001fb2:	e16e      	b.n	8002292 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	f040 814a 	bne.w	8002252 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8143 	beq.w	8002252 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 813c 	beq.w	8002252 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	2b40      	cmp	r3, #64	; 0x40
 8001ffc:	f040 80b4 	bne.w	8002168 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800200c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8140 	beq.w	8002296 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800201a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800201e:	429a      	cmp	r2, r3
 8002020:	f080 8139 	bcs.w	8002296 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800202a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002036:	f000 8088 	beq.w	800214a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	330c      	adds	r3, #12
 8002040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002044:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002048:	e853 3f00 	ldrex	r3, [r3]
 800204c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	330c      	adds	r3, #12
 8002062:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002066:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800206a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002072:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002076:	e841 2300 	strex	r3, r2, [r1]
 800207a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800207e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1d9      	bne.n	800203a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3314      	adds	r3, #20
 800208c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002090:	e853 3f00 	ldrex	r3, [r3]
 8002094:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3314      	adds	r3, #20
 80020a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80020ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80020b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80020b6:	e841 2300 	strex	r3, r2, [r1]
 80020ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80020bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1e1      	bne.n	8002086 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3314      	adds	r3, #20
 80020c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020cc:	e853 3f00 	ldrex	r3, [r3]
 80020d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80020d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3314      	adds	r3, #20
 80020e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80020e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80020ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020ee:	e841 2300 	strex	r3, r2, [r1]
 80020f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80020f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1e3      	bne.n	80020c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	330c      	adds	r3, #12
 800210e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002112:	e853 3f00 	ldrex	r3, [r3]
 8002116:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800211a:	f023 0310 	bic.w	r3, r3, #16
 800211e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	330c      	adds	r3, #12
 8002128:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800212c:	65ba      	str	r2, [r7, #88]	; 0x58
 800212e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002130:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002134:	e841 2300 	strex	r3, r2, [r1]
 8002138:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800213a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1e3      	bne.n	8002108 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fee4 	bl	8000f12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002152:	b29b      	uxth	r3, r3
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	b29b      	uxth	r3, r3
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8c0 	bl	80022e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002160:	e099      	b.n	8002296 <HAL_UART_IRQHandler+0x50e>
 8002162:	bf00      	nop
 8002164:	08002433 	.word	0x08002433
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002170:	b29b      	uxth	r3, r3
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 808b 	beq.w	800229a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 8086 	beq.w	800229a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	330c      	adds	r3, #12
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	e853 3f00 	ldrex	r3, [r3]
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800219e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	330c      	adds	r3, #12
 80021ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80021b2:	647a      	str	r2, [r7, #68]	; 0x44
 80021b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021ba:	e841 2300 	strex	r3, r2, [r1]
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80021c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1e3      	bne.n	800218e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3314      	adds	r3, #20
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	e853 3f00 	ldrex	r3, [r3]
 80021d4:	623b      	str	r3, [r7, #32]
   return(result);
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3314      	adds	r3, #20
 80021e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80021ea:	633a      	str	r2, [r7, #48]	; 0x30
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f2:	e841 2300 	strex	r3, r2, [r1]
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1e3      	bne.n	80021c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	330c      	adds	r3, #12
 8002212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	e853 3f00 	ldrex	r3, [r3]
 800221a:	60fb      	str	r3, [r7, #12]
   return(result);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0310 	bic.w	r3, r3, #16
 8002222:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	330c      	adds	r3, #12
 800222c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002230:	61fa      	str	r2, [r7, #28]
 8002232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002234:	69b9      	ldr	r1, [r7, #24]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	e841 2300 	strex	r3, r2, [r1]
 800223c:	617b      	str	r3, [r7, #20]
   return(result);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1e3      	bne.n	800220c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f848 	bl	80022e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002250:	e023      	b.n	800229a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_UART_IRQHandler+0x4ea>
 800225e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f8f5 	bl	800245a <UART_Transmit_IT>
    return;
 8002270:	e014      	b.n	800229c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00e      	beq.n	800229c <HAL_UART_IRQHandler+0x514>
 800227e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f935 	bl	80024fa <UART_EndTransmit_IT>
    return;
 8002290:	e004      	b.n	800229c <HAL_UART_IRQHandler+0x514>
    return;
 8002292:	bf00      	nop
 8002294:	e002      	b.n	800229c <HAL_UART_IRQHandler+0x514>
      return;
 8002296:	bf00      	nop
 8002298:	e000      	b.n	800229c <HAL_UART_IRQHandler+0x514>
      return;
 800229a:	bf00      	nop
  }
}
 800229c:	37e8      	adds	r7, #232	; 0xe8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop

080022a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	88fa      	ldrh	r2, [r7, #6]
 8002310:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	88fa      	ldrh	r2, [r7, #6]
 8002316:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2222      	movs	r2, #34	; 0x22
 8002322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0220 	orr.w	r2, r2, #32
 800235c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800236c:	b480      	push	{r7}
 800236e:	b095      	sub	sp, #84	; 0x54
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	330c      	adds	r3, #12
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237e:	e853 3f00 	ldrex	r3, [r3]
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800238a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	330c      	adds	r3, #12
 8002392:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002394:	643a      	str	r2, [r7, #64]	; 0x40
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800239a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800239c:	e841 2300 	strex	r3, r2, [r1]
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e5      	bne.n	8002374 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3314      	adds	r3, #20
 80023ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	e853 3f00 	ldrex	r3, [r3]
 80023b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f023 0301 	bic.w	r3, r3, #1
 80023be:	64bb      	str	r3, [r7, #72]	; 0x48
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3314      	adds	r3, #20
 80023c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d0:	e841 2300 	strex	r3, r2, [r1]
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e5      	bne.n	80023a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d119      	bne.n	8002418 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	e853 3f00 	ldrex	r3, [r3]
 80023f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f023 0310 	bic.w	r3, r3, #16
 80023fa:	647b      	str	r3, [r7, #68]	; 0x44
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	330c      	adds	r3, #12
 8002402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002404:	61ba      	str	r2, [r7, #24]
 8002406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002408:	6979      	ldr	r1, [r7, #20]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	e841 2300 	strex	r3, r2, [r1]
 8002410:	613b      	str	r3, [r7, #16]
   return(result);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e5      	bne.n	80023e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002426:	bf00      	nop
 8002428:	3754      	adds	r7, #84	; 0x54
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f7ff ff3d 	bl	80022cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800245a:	b480      	push	{r7}
 800245c:	b085      	sub	sp, #20
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b21      	cmp	r3, #33	; 0x21
 800246c:	d13e      	bne.n	80024ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002476:	d114      	bne.n	80024a2 <UART_Transmit_IT+0x48>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d110      	bne.n	80024a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002494:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	1c9a      	adds	r2, r3, #2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	621a      	str	r2, [r3, #32]
 80024a0:	e008      	b.n	80024b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	1c59      	adds	r1, r3, #1
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6211      	str	r1, [r2, #32]
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29b      	uxth	r3, r3
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4619      	mov	r1, r3
 80024c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10f      	bne.n	80024e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e000      	b.n	80024ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002510:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff fec2 	bl	80022a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b08c      	sub	sp, #48	; 0x30
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b22      	cmp	r3, #34	; 0x22
 800253c:	f040 80ab 	bne.w	8002696 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002548:	d117      	bne.n	800257a <UART_Receive_IT+0x50>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d113      	bne.n	800257a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002552:	2300      	movs	r3, #0
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	b29b      	uxth	r3, r3
 8002564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002568:	b29a      	uxth	r2, r3
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	1c9a      	adds	r2, r3, #2
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
 8002578:	e026      	b.n	80025c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258c:	d007      	beq.n	800259e <UART_Receive_IT+0x74>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10a      	bne.n	80025ac <UART_Receive_IT+0x82>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	e008      	b.n	80025be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4619      	mov	r1, r3
 80025d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d15a      	bne.n	8002692 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0220 	bic.w	r2, r2, #32
 80025ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	2b01      	cmp	r3, #1
 800261a:	d135      	bne.n	8002688 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	330c      	adds	r3, #12
 8002628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	e853 3f00 	ldrex	r3, [r3]
 8002630:	613b      	str	r3, [r7, #16]
   return(result);
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f023 0310 	bic.w	r3, r3, #16
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	330c      	adds	r3, #12
 8002640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002642:	623a      	str	r2, [r7, #32]
 8002644:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002646:	69f9      	ldr	r1, [r7, #28]
 8002648:	6a3a      	ldr	r2, [r7, #32]
 800264a:	e841 2300 	strex	r3, r2, [r1]
 800264e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e5      	bne.n	8002622 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b10      	cmp	r3, #16
 8002662:	d10a      	bne.n	800267a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff fe2d 	bl	80022e0 <HAL_UARTEx_RxEventCallback>
 8002686:	e002      	b.n	800268e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fe15 	bl	80022b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e002      	b.n	8002698 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002696:	2302      	movs	r3, #2
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	3730      	adds	r7, #48	; 0x30
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026a4:	b09f      	sub	sp, #124	; 0x7c
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b6:	68d9      	ldr	r1, [r3, #12]
 80026b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	ea40 0301 	orr.w	r3, r0, r1
 80026c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80026da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026e4:	f021 010c 	bic.w	r1, r1, #12
 80026e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026ee:	430b      	orrs	r3, r1
 80026f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fe:	6999      	ldr	r1, [r3, #24]
 8002700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	ea40 0301 	orr.w	r3, r0, r1
 8002708:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800270a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4bc5      	ldr	r3, [pc, #788]	; (8002a24 <UART_SetConfig+0x384>)
 8002710:	429a      	cmp	r2, r3
 8002712:	d004      	beq.n	800271e <UART_SetConfig+0x7e>
 8002714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4bc3      	ldr	r3, [pc, #780]	; (8002a28 <UART_SetConfig+0x388>)
 800271a:	429a      	cmp	r2, r3
 800271c:	d103      	bne.n	8002726 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800271e:	f7ff faa1 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 8002722:	6778      	str	r0, [r7, #116]	; 0x74
 8002724:	e002      	b.n	800272c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002726:	f7ff fa89 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 800272a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800272c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002734:	f040 80b6 	bne.w	80028a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800273a:	461c      	mov	r4, r3
 800273c:	f04f 0500 	mov.w	r5, #0
 8002740:	4622      	mov	r2, r4
 8002742:	462b      	mov	r3, r5
 8002744:	1891      	adds	r1, r2, r2
 8002746:	6439      	str	r1, [r7, #64]	; 0x40
 8002748:	415b      	adcs	r3, r3
 800274a:	647b      	str	r3, [r7, #68]	; 0x44
 800274c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002750:	1912      	adds	r2, r2, r4
 8002752:	eb45 0303 	adc.w	r3, r5, r3
 8002756:	f04f 0000 	mov.w	r0, #0
 800275a:	f04f 0100 	mov.w	r1, #0
 800275e:	00d9      	lsls	r1, r3, #3
 8002760:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002764:	00d0      	lsls	r0, r2, #3
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	1911      	adds	r1, r2, r4
 800276c:	6639      	str	r1, [r7, #96]	; 0x60
 800276e:	416b      	adcs	r3, r5
 8002770:	667b      	str	r3, [r7, #100]	; 0x64
 8002772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	461a      	mov	r2, r3
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	1891      	adds	r1, r2, r2
 800277e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002780:	415b      	adcs	r3, r3
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002788:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800278c:	f7fd fd1c 	bl	80001c8 <__aeabi_uldivmod>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4ba5      	ldr	r3, [pc, #660]	; (8002a2c <UART_SetConfig+0x38c>)
 8002796:	fba3 2302 	umull	r2, r3, r3, r2
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	011e      	lsls	r6, r3, #4
 800279e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a0:	461c      	mov	r4, r3
 80027a2:	f04f 0500 	mov.w	r5, #0
 80027a6:	4622      	mov	r2, r4
 80027a8:	462b      	mov	r3, r5
 80027aa:	1891      	adds	r1, r2, r2
 80027ac:	6339      	str	r1, [r7, #48]	; 0x30
 80027ae:	415b      	adcs	r3, r3
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
 80027b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80027b6:	1912      	adds	r2, r2, r4
 80027b8:	eb45 0303 	adc.w	r3, r5, r3
 80027bc:	f04f 0000 	mov.w	r0, #0
 80027c0:	f04f 0100 	mov.w	r1, #0
 80027c4:	00d9      	lsls	r1, r3, #3
 80027c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027ca:	00d0      	lsls	r0, r2, #3
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	1911      	adds	r1, r2, r4
 80027d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80027d4:	416b      	adcs	r3, r5
 80027d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	461a      	mov	r2, r3
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	1891      	adds	r1, r2, r2
 80027e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80027e6:	415b      	adcs	r3, r3
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80027f2:	f7fd fce9 	bl	80001c8 <__aeabi_uldivmod>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4b8c      	ldr	r3, [pc, #560]	; (8002a2c <UART_SetConfig+0x38c>)
 80027fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	2164      	movs	r1, #100	; 0x64
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	3332      	adds	r3, #50	; 0x32
 800280e:	4a87      	ldr	r2, [pc, #540]	; (8002a2c <UART_SetConfig+0x38c>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800281c:	441e      	add	r6, r3
 800281e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002820:	4618      	mov	r0, r3
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	1894      	adds	r4, r2, r2
 800282c:	623c      	str	r4, [r7, #32]
 800282e:	415b      	adcs	r3, r3
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002836:	1812      	adds	r2, r2, r0
 8002838:	eb41 0303 	adc.w	r3, r1, r3
 800283c:	f04f 0400 	mov.w	r4, #0
 8002840:	f04f 0500 	mov.w	r5, #0
 8002844:	00dd      	lsls	r5, r3, #3
 8002846:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800284a:	00d4      	lsls	r4, r2, #3
 800284c:	4622      	mov	r2, r4
 800284e:	462b      	mov	r3, r5
 8002850:	1814      	adds	r4, r2, r0
 8002852:	653c      	str	r4, [r7, #80]	; 0x50
 8002854:	414b      	adcs	r3, r1
 8002856:	657b      	str	r3, [r7, #84]	; 0x54
 8002858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	461a      	mov	r2, r3
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	1891      	adds	r1, r2, r2
 8002864:	61b9      	str	r1, [r7, #24]
 8002866:	415b      	adcs	r3, r3
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800286e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002872:	f7fd fca9 	bl	80001c8 <__aeabi_uldivmod>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4b6c      	ldr	r3, [pc, #432]	; (8002a2c <UART_SetConfig+0x38c>)
 800287c:	fba3 1302 	umull	r1, r3, r3, r2
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	2164      	movs	r1, #100	; 0x64
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	3332      	adds	r3, #50	; 0x32
 800288e:	4a67      	ldr	r2, [pc, #412]	; (8002a2c <UART_SetConfig+0x38c>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	f003 0207 	and.w	r2, r3, #7
 800289a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4432      	add	r2, r6
 80028a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028a2:	e0b9      	b.n	8002a18 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a6:	461c      	mov	r4, r3
 80028a8:	f04f 0500 	mov.w	r5, #0
 80028ac:	4622      	mov	r2, r4
 80028ae:	462b      	mov	r3, r5
 80028b0:	1891      	adds	r1, r2, r2
 80028b2:	6139      	str	r1, [r7, #16]
 80028b4:	415b      	adcs	r3, r3
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028bc:	1912      	adds	r2, r2, r4
 80028be:	eb45 0303 	adc.w	r3, r5, r3
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	f04f 0100 	mov.w	r1, #0
 80028ca:	00d9      	lsls	r1, r3, #3
 80028cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028d0:	00d0      	lsls	r0, r2, #3
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	eb12 0804 	adds.w	r8, r2, r4
 80028da:	eb43 0905 	adc.w	r9, r3, r5
 80028de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	008b      	lsls	r3, r1, #2
 80028f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028f6:	0082      	lsls	r2, r0, #2
 80028f8:	4640      	mov	r0, r8
 80028fa:	4649      	mov	r1, r9
 80028fc:	f7fd fc64 	bl	80001c8 <__aeabi_uldivmod>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4b49      	ldr	r3, [pc, #292]	; (8002a2c <UART_SetConfig+0x38c>)
 8002906:	fba3 2302 	umull	r2, r3, r3, r2
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	011e      	lsls	r6, r3, #4
 800290e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002910:	4618      	mov	r0, r3
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	1894      	adds	r4, r2, r2
 800291c:	60bc      	str	r4, [r7, #8]
 800291e:	415b      	adcs	r3, r3
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002926:	1812      	adds	r2, r2, r0
 8002928:	eb41 0303 	adc.w	r3, r1, r3
 800292c:	f04f 0400 	mov.w	r4, #0
 8002930:	f04f 0500 	mov.w	r5, #0
 8002934:	00dd      	lsls	r5, r3, #3
 8002936:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800293a:	00d4      	lsls	r4, r2, #3
 800293c:	4622      	mov	r2, r4
 800293e:	462b      	mov	r3, r5
 8002940:	1814      	adds	r4, r2, r0
 8002942:	64bc      	str	r4, [r7, #72]	; 0x48
 8002944:	414b      	adcs	r3, r1
 8002946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4618      	mov	r0, r3
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	008b      	lsls	r3, r1, #2
 800295c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002960:	0082      	lsls	r2, r0, #2
 8002962:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002966:	f7fd fc2f 	bl	80001c8 <__aeabi_uldivmod>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <UART_SetConfig+0x38c>)
 8002970:	fba3 1302 	umull	r1, r3, r3, r2
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	2164      	movs	r1, #100	; 0x64
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	3332      	adds	r3, #50	; 0x32
 8002982:	4a2a      	ldr	r2, [pc, #168]	; (8002a2c <UART_SetConfig+0x38c>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800298e:	441e      	add	r6, r3
 8002990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002992:	4618      	mov	r0, r3
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	1894      	adds	r4, r2, r2
 800299e:	603c      	str	r4, [r7, #0]
 80029a0:	415b      	adcs	r3, r3
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029a8:	1812      	adds	r2, r2, r0
 80029aa:	eb41 0303 	adc.w	r3, r1, r3
 80029ae:	f04f 0400 	mov.w	r4, #0
 80029b2:	f04f 0500 	mov.w	r5, #0
 80029b6:	00dd      	lsls	r5, r3, #3
 80029b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029bc:	00d4      	lsls	r4, r2, #3
 80029be:	4622      	mov	r2, r4
 80029c0:	462b      	mov	r3, r5
 80029c2:	eb12 0a00 	adds.w	sl, r2, r0
 80029c6:	eb43 0b01 	adc.w	fp, r3, r1
 80029ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f04f 0100 	mov.w	r1, #0
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	008b      	lsls	r3, r1, #2
 80029de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029e2:	0082      	lsls	r2, r0, #2
 80029e4:	4650      	mov	r0, sl
 80029e6:	4659      	mov	r1, fp
 80029e8:	f7fd fbee 	bl	80001c8 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <UART_SetConfig+0x38c>)
 80029f2:	fba3 1302 	umull	r1, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2164      	movs	r1, #100	; 0x64
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	3332      	adds	r3, #50	; 0x32
 8002a04:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <UART_SetConfig+0x38c>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	f003 020f 	and.w	r2, r3, #15
 8002a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4432      	add	r2, r6
 8002a16:	609a      	str	r2, [r3, #8]
}
 8002a18:	bf00      	nop
 8002a1a:	377c      	adds	r7, #124	; 0x7c
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a22:	bf00      	nop
 8002a24:	40011000 	.word	0x40011000
 8002a28:	40011400 	.word	0x40011400
 8002a2c:	51eb851f 	.word	0x51eb851f

08002a30 <__libc_init_array>:
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	4d0d      	ldr	r5, [pc, #52]	; (8002a68 <__libc_init_array+0x38>)
 8002a34:	4c0d      	ldr	r4, [pc, #52]	; (8002a6c <__libc_init_array+0x3c>)
 8002a36:	1b64      	subs	r4, r4, r5
 8002a38:	10a4      	asrs	r4, r4, #2
 8002a3a:	2600      	movs	r6, #0
 8002a3c:	42a6      	cmp	r6, r4
 8002a3e:	d109      	bne.n	8002a54 <__libc_init_array+0x24>
 8002a40:	4d0b      	ldr	r5, [pc, #44]	; (8002a70 <__libc_init_array+0x40>)
 8002a42:	4c0c      	ldr	r4, [pc, #48]	; (8002a74 <__libc_init_array+0x44>)
 8002a44:	f000 f820 	bl	8002a88 <_init>
 8002a48:	1b64      	subs	r4, r4, r5
 8002a4a:	10a4      	asrs	r4, r4, #2
 8002a4c:	2600      	movs	r6, #0
 8002a4e:	42a6      	cmp	r6, r4
 8002a50:	d105      	bne.n	8002a5e <__libc_init_array+0x2e>
 8002a52:	bd70      	pop	{r4, r5, r6, pc}
 8002a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a58:	4798      	blx	r3
 8002a5a:	3601      	adds	r6, #1
 8002a5c:	e7ee      	b.n	8002a3c <__libc_init_array+0xc>
 8002a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a62:	4798      	blx	r3
 8002a64:	3601      	adds	r6, #1
 8002a66:	e7f2      	b.n	8002a4e <__libc_init_array+0x1e>
 8002a68:	08002ac0 	.word	0x08002ac0
 8002a6c:	08002ac0 	.word	0x08002ac0
 8002a70:	08002ac0 	.word	0x08002ac0
 8002a74:	08002ac4 	.word	0x08002ac4

08002a78 <memset>:
 8002a78:	4402      	add	r2, r0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d100      	bne.n	8002a82 <memset+0xa>
 8002a80:	4770      	bx	lr
 8002a82:	f803 1b01 	strb.w	r1, [r3], #1
 8002a86:	e7f9      	b.n	8002a7c <memset+0x4>

08002a88 <_init>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	bf00      	nop
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr

08002a94 <_fini>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	bf00      	nop
 8002a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9a:	bc08      	pop	{r3}
 8002a9c:	469e      	mov	lr, r3
 8002a9e:	4770      	bx	lr
