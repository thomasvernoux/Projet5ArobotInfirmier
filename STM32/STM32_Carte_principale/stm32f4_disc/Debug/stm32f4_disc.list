
stm32f4_disc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b04  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005c8c  08005c8c  00015c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ca4  08005ca4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ca4  08005ca4  00015ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cac  08005cac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cac  08005cac  00015cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cb0  08005cb0  00015cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000017a4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200017b4  200017b4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f06  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c61  00000000  00000000  00035f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00038ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee8  00000000  00000000  00039bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002256c  00000000  00000000  0003aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145de  00000000  00000000  0005d00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd70a  00000000  00000000  000715ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013ecf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042b4  00000000  00000000  0013ed48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c74 	.word	0x08005c74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005c74 	.word	0x08005c74

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96e 	b.w	8000ca8 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468c      	mov	ip, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8083 	bne.w	8000afa <__udivmoddi4+0x116>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d947      	bls.n	8000a8a <__udivmoddi4+0xa6>
 80009fa:	fab2 f282 	clz	r2, r2
 80009fe:	b142      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	f1c2 0020 	rsb	r0, r2, #32
 8000a04:	fa24 f000 	lsr.w	r0, r4, r0
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	4097      	lsls	r7, r2
 8000a0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbbc f6f8 	udiv	r6, ip, r8
 8000a1c:	fa1f fe87 	uxth.w	lr, r7
 8000a20:	fb08 c116 	mls	r1, r8, r6, ip
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f10e 	mul.w	r1, r6, lr
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 8119 	bcs.w	8000c6c <__udivmoddi4+0x288>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8116 	bls.w	8000c6c <__udivmoddi4+0x288>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	443b      	add	r3, r7
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	45a6      	cmp	lr, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8105 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a66:	45a6      	cmp	lr, r4
 8000a68:	f240 8102 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443c      	add	r4, r7
 8000a70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a74:	eba4 040e 	sub.w	r4, r4, lr
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	b902      	cbnz	r2, 8000a8e <__udivmoddi4+0xaa>
 8000a8c:	deff      	udf	#255	; 0xff
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d150      	bne.n	8000b38 <__udivmoddi4+0x154>
 8000a96:	1bcb      	subs	r3, r1, r7
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	2601      	movs	r6, #1
 8000aa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000aa6:	0c21      	lsrs	r1, r4, #16
 8000aa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d907      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 8000ab8:	1879      	adds	r1, r7, r1
 8000aba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0xe2>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	f200 80e9 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000ac6:	4684      	mov	ip, r0
 8000ac8:	1ac9      	subs	r1, r1, r3
 8000aca:	b2a3      	uxth	r3, r4
 8000acc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad8:	fb08 f800 	mul.w	r8, r8, r0
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x10c>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x10a>
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	f200 80d9 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000aee:	4618      	mov	r0, r3
 8000af0:	eba4 0408 	sub.w	r4, r4, r8
 8000af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af8:	e7bf      	b.n	8000a7a <__udivmoddi4+0x96>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x12e>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <__udivmoddi4+0x282>
 8000b04:	2600      	movs	r6, #0
 8000b06:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f683 	clz	r6, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d14a      	bne.n	8000bb0 <__udivmoddi4+0x1cc>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0x140>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80b8 	bhi.w	8000c94 <__udivmoddi4+0x2b0>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0103 	sbc.w	r1, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d0a8      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000b32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b36:	e7a5      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000b38:	f1c2 0320 	rsb	r3, r2, #32
 8000b3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b40:	4097      	lsls	r7, r2
 8000b42:	fa01 f002 	lsl.w	r0, r1, r2
 8000b46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4a:	40d9      	lsrs	r1, r3
 8000b4c:	4330      	orrs	r0, r6
 8000b4e:	0c03      	lsrs	r3, r0, #16
 8000b50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f108 	mul.w	r1, r6, r8
 8000b64:	4299      	cmp	r1, r3
 8000b66:	fa04 f402 	lsl.w	r4, r4, r2
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x19c>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b72:	f080 808d 	bcs.w	8000c90 <__udivmoddi4+0x2ac>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 808a 	bls.w	8000c90 <__udivmoddi4+0x2ac>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b281      	uxth	r1, r0
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb00 f308 	mul.w	r3, r0, r8
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x1c4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b9e:	d273      	bcs.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d971      	bls.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4439      	add	r1, r7
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bae:	e778      	b.n	8000aa2 <__udivmoddi4+0xbe>
 8000bb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	0c3b      	lsrs	r3, r7, #16
 8000bd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd6:	fa1f f884 	uxth.w	r8, r4
 8000bda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000be2:	fb09 fa08 	mul.w	sl, r9, r8
 8000be6:	458a      	cmp	sl, r1
 8000be8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bec:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x220>
 8000bf2:	1861      	adds	r1, r4, r1
 8000bf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf8:	d248      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfa:	458a      	cmp	sl, r1
 8000bfc:	d946      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4421      	add	r1, r4
 8000c04:	eba1 010a 	sub.w	r1, r1, sl
 8000c08:	b2bf      	uxth	r7, r7
 8000c0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c16:	fb00 f808 	mul.w	r8, r0, r8
 8000c1a:	45b8      	cmp	r8, r7
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x24a>
 8000c1e:	19e7      	adds	r7, r4, r7
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d22e      	bcs.n	8000c84 <__udivmoddi4+0x2a0>
 8000c26:	45b8      	cmp	r8, r7
 8000c28:	d92c      	bls.n	8000c84 <__udivmoddi4+0x2a0>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4427      	add	r7, r4
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	eba7 0708 	sub.w	r7, r7, r8
 8000c36:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3a:	454f      	cmp	r7, r9
 8000c3c:	46c6      	mov	lr, r8
 8000c3e:	4649      	mov	r1, r9
 8000c40:	d31a      	bcc.n	8000c78 <__udivmoddi4+0x294>
 8000c42:	d017      	beq.n	8000c74 <__udivmoddi4+0x290>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x27a>
 8000c46:	ebb3 020e 	subs.w	r2, r3, lr
 8000c4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c52:	40f2      	lsrs	r2, r6
 8000c54:	ea4c 0202 	orr.w	r2, ip, r2
 8000c58:	40f7      	lsrs	r7, r6
 8000c5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e70b      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e9      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6fd      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c74:	4543      	cmp	r3, r8
 8000c76:	d2e5      	bcs.n	8000c44 <__udivmoddi4+0x260>
 8000c78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7df      	b.n	8000c44 <__udivmoddi4+0x260>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e7d2      	b.n	8000c2e <__udivmoddi4+0x24a>
 8000c88:	4660      	mov	r0, ip
 8000c8a:	e78d      	b.n	8000ba8 <__udivmoddi4+0x1c4>
 8000c8c:	4681      	mov	r9, r0
 8000c8e:	e7b9      	b.n	8000c04 <__udivmoddi4+0x220>
 8000c90:	4666      	mov	r6, ip
 8000c92:	e775      	b.n	8000b80 <__udivmoddi4+0x19c>
 8000c94:	4630      	mov	r0, r6
 8000c96:	e74a      	b.n	8000b2e <__udivmoddi4+0x14a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	4439      	add	r1, r7
 8000c9e:	e713      	b.n	8000ac8 <__udivmoddi4+0xe4>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	e724      	b.n	8000af0 <__udivmoddi4+0x10c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <moteur1>:



/// CONGIG COMMANDE

void moteur1(){
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	txData[0] &=  0b11110111;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <moteur1+0x1c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f023 0308 	bic.w	r3, r3, #8
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <moteur1+0x1c>)
 8000cbc:	701a      	strb	r2, [r3, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	2000002c 	.word	0x2000002c

08000ccc <moteur2>:

void moteur2(){
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	txData[0] |=  0b00001000;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <moteur2+0x1c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <moteur2+0x1c>)
 8000cdc:	701a      	strb	r2, [r3, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	2000002c 	.word	0x2000002c

08000cec <cmd_arret>:
	txData[0] |=  0b00000001;

	txData[1] =   0b00000010;
}

void cmd_arret(){
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

	txData[0] &=  0b11111001;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <cmd_arret+0x30>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	f023 0306 	bic.w	r3, r3, #6
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <cmd_arret+0x30>)
 8000cfc:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000001;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <cmd_arret+0x30>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <cmd_arret+0x30>)
 8000d0a:	701a      	strb	r2, [r3, #0]
	txData[1] =   0b00000000;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <cmd_arret+0x30>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	705a      	strb	r2, [r3, #1]
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	2000002c 	.word	0x2000002c

08000d20 <sens_rotation>:

/*
 * Commande sens de rotation
 */
void sens_rotation(){
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	txData[0] &=  0b11111010;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <sens_rotation+0x2c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	f023 0305 	bic.w	r3, r3, #5
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <sens_rotation+0x2c>)
 8000d30:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000010;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <sens_rotation+0x2c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <sens_rotation+0x2c>)
 8000d3e:	701a      	strb	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	2000002c 	.word	0x2000002c

08000d50 <sens_rotation_avant>:

void sens_rotation_avant(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	sens_rotation();
 8000d54:	f7ff ffe4 	bl	8000d20 <sens_rotation>
	txData[1] =  0b00000000;
 8000d58:	4b02      	ldr	r3, [pc, #8]	; (8000d64 <sens_rotation_avant+0x14>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	705a      	strb	r2, [r3, #1]

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000002c 	.word	0x2000002c

08000d68 <sens_rotation_arriere>:

void sens_rotation_arriere(){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	sens_rotation();
 8000d6c:	f7ff ffd8 	bl	8000d20 <sens_rotation>
	txData[1] =  0b00000010;
 8000d70:	4b02      	ldr	r3, [pc, #8]	; (8000d7c <sens_rotation_arriere+0x14>)
 8000d72:	2202      	movs	r2, #2
 8000d74:	705a      	strb	r2, [r3, #1]
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000002c 	.word	0x2000002c

08000d80 <config_freq_PWM>:

/*
 * Configuration de la PWM
 */
void config_freq_PWM(){
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	txData[0] &=  0b11111100;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <config_freq_PWM+0x2c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	f023 0303 	bic.w	r3, r3, #3
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <config_freq_PWM+0x2c>)
 8000d90:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000100;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <config_freq_PWM+0x2c>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <config_freq_PWM+0x2c>)
 8000d9e:	701a      	strb	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	2000002c 	.word	0x2000002c

08000db0 <vit_rap_cyc>:

/*
 * rapport cyclique
 * attention c'est sur 7 bits
 */
void vit_rap_cyc(uint8_t vitesse){
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	txData[0] &=  0b11111000;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <vit_rap_cyc+0x3c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	f023 0307 	bic.w	r3, r3, #7
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <vit_rap_cyc+0x3c>)
 8000dc6:	701a      	strb	r2, [r3, #0]
	txData[0] |=  0b00000111;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <vit_rap_cyc+0x3c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	f043 0307 	orr.w	r3, r3, #7
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <vit_rap_cyc+0x3c>)
 8000dd4:	701a      	strb	r2, [r3, #0]
	txData[1] =  vitesse << 1;
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <vit_rap_cyc+0x3c>)
 8000dde:	705a      	strb	r2, [r3, #1]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	2000002c 	.word	0x2000002c

08000df0 <fct_vierge>:



void fct_vierge(){
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
	txData[0] =  0b00000000;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <fct_vierge+0x1c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
	txData[1] =  0b00000000;
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <fct_vierge+0x1c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	705a      	strb	r2, [r3, #1]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	2000002c 	.word	0x2000002c

08000e10 <spi_transmission>:


void spi_transmission(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	HAL_SPI_Init( &hspi1 );
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <spi_transmission+0x30>)
 8000e16:	f002 fa71 	bl	80032fc <HAL_SPI_Init>
	HAL_SPI_Transmit (&hspi1, txData, 2, 100);
 8000e1a:	2364      	movs	r3, #100	; 0x64
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	4909      	ldr	r1, [pc, #36]	; (8000e44 <spi_transmission+0x34>)
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <spi_transmission+0x30>)
 8000e22:	f002 fb1c 	bl	800345e <HAL_SPI_Transmit>
	while( hspi1.State == HAL_SPI_STATE_BUSY );
 8000e26:	bf00      	nop
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <spi_transmission+0x30>)
 8000e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d0f9      	beq.n	8000e28 <spi_transmission+0x18>
	HAL_SPI_DeInit( &hspi1 );
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <spi_transmission+0x30>)
 8000e36:	f002 faea 	bl	800340e <HAL_SPI_DeInit>
	//HAL_Delay(10);
	return;
 8000e3a:	bf00      	nop
}
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200014c0 	.word	0x200014c0
 8000e44:	2000002c 	.word	0x2000002c

08000e48 <reception_M0>:
void setup_com_M0(){
	HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, sizeof(UART6_rxBuffer));

}

void reception_M0(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, sizeof(UART6_rxBuffer));
 8000e4c:	220a      	movs	r2, #10
 8000e4e:	4903      	ldr	r1, [pc, #12]	; (8000e5c <reception_M0+0x14>)
 8000e50:	4803      	ldr	r0, [pc, #12]	; (8000e60 <reception_M0+0x18>)
 8000e52:	f003 fefd 	bl	8004c50 <HAL_UART_Receive_IT>


}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000048 	.word	0x20000048
 8000e60:	2000165c 	.word	0x2000165c

08000e64 <recevoir_message_pc2>:
	}
	*/
}


void recevoir_message_pc2(){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
		traiter_message_pc();
	}
*/


	if (UART2_rxBuffer_2[pc_message_recu_index] == 101){ // on est a la fin du message
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <recevoir_message_pc2+0x4c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <recevoir_message_pc2+0x50>)
 8000e70:	5c9b      	ldrb	r3, [r3, r2]
 8000e72:	2b65      	cmp	r3, #101	; 0x65
 8000e74:	d113      	bne.n	8000e9e <recevoir_message_pc2+0x3a>
		pc_message_recu_index = 0;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <recevoir_message_pc2+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
		strcpy((char *)message_recu_PC,(char *)UART2_rxBuffer_2);
 8000e7c:	490d      	ldr	r1, [pc, #52]	; (8000eb4 <recevoir_message_pc2+0x50>)
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <recevoir_message_pc2+0x54>)
 8000e80:	f004 fef0 	bl	8005c64 <strcpy>
		pc_message_recu_index = 0;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <recevoir_message_pc2+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
		traiter_message_pc();
 8000e8a:	f000 f819 	bl	8000ec0 <traiter_message_pc>

		HAL_UART_Abort(&huart2);
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <recevoir_message_pc2+0x58>)
 8000e90:	f003 ff0e 	bl	8004cb0 <HAL_UART_Abort>
		HAL_UART_Receive_IT(&huart2, UART2_rxBuffer_2, sizeof(UART2_rxBuffer_2));
 8000e94:	2203      	movs	r2, #3
 8000e96:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <recevoir_message_pc2+0x50>)
 8000e98:	4808      	ldr	r0, [pc, #32]	; (8000ebc <recevoir_message_pc2+0x58>)
 8000e9a:	f003 fed9 	bl	8004c50 <HAL_UART_Receive_IT>
	}

	pc_message_recu_index ++;
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <recevoir_message_pc2+0x4c>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <recevoir_message_pc2+0x4c>)
 8000ea8:	701a      	strb	r2, [r3, #0]


}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000044 	.word	0x20000044
 8000eb4:	20001610 	.word	0x20001610
 8000eb8:	20000054 	.word	0x20000054
 8000ebc:	2000176c 	.word	0x2000176c

08000ec0 <traiter_message_pc>:


void traiter_message_pc(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0

	int a;

	fct_vierge();
 8000ec6:	f7ff ff93 	bl	8000df0 <fct_vierge>

	switch(message_recu_PC[0]){
 8000eca:	4b49      	ldr	r3, [pc, #292]	; (8000ff0 <traiter_message_pc+0x130>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	f200 808a 	bhi.w	8000fe8 <traiter_message_pc+0x128>
 8000ed4:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <traiter_message_pc+0x1c>)
 8000ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eda:	bf00      	nop
 8000edc:	08000ef9 	.word	0x08000ef9
 8000ee0:	08000f1b 	.word	0x08000f1b
 8000ee4:	08000f61 	.word	0x08000f61
 8000ee8:	08000fa7 	.word	0x08000fa7
 8000eec:	08000fad 	.word	0x08000fad
 8000ef0:	08000fb3 	.word	0x08000fb3
 8000ef4:	08000fd1 	.word	0x08000fd1



	case 0:   // stop
		fct_vierge();
 8000ef8:	f7ff ff7a 	bl	8000df0 <fct_vierge>
		moteur1();
 8000efc:	f7ff fed6 	bl	8000cac <moteur1>
		cmd_arret();
 8000f00:	f7ff fef4 	bl	8000cec <cmd_arret>
		spi_transmission();
 8000f04:	f7ff ff84 	bl	8000e10 <spi_transmission>

		fct_vierge();
 8000f08:	f7ff ff72 	bl	8000df0 <fct_vierge>
		moteur2();
 8000f0c:	f7ff fede 	bl	8000ccc <moteur2>
		cmd_arret();
 8000f10:	f7ff feec 	bl	8000cec <cmd_arret>
		spi_transmission();
 8000f14:	f7ff ff7c 	bl	8000e10 <spi_transmission>

		break;
 8000f18:	e066      	b.n	8000fe8 <traiter_message_pc+0x128>

	case 1:   // avancer

		fct_vierge();
 8000f1a:	f7ff ff69 	bl	8000df0 <fct_vierge>
		moteur1();
 8000f1e:	f7ff fec5 	bl	8000cac <moteur1>
		sens_rotation_avant();
 8000f22:	f7ff ff15 	bl	8000d50 <sens_rotation_avant>
		spi_transmission();
 8000f26:	f7ff ff73 	bl	8000e10 <spi_transmission>

		fct_vierge();
 8000f2a:	f7ff ff61 	bl	8000df0 <fct_vierge>
		moteur2();
 8000f2e:	f7ff fecd 	bl	8000ccc <moteur2>
		sens_rotation_avant();
 8000f32:	f7ff ff0d 	bl	8000d50 <sens_rotation_avant>
		spi_transmission();
 8000f36:	f7ff ff6b 	bl	8000e10 <spi_transmission>


		fct_vierge();
 8000f3a:	f7ff ff59 	bl	8000df0 <fct_vierge>
		moteur1();
 8000f3e:	f7ff feb5 	bl	8000cac <moteur1>
		vit_rap_cyc(10); // on va a 10 pourcent
 8000f42:	200a      	movs	r0, #10
 8000f44:	f7ff ff34 	bl	8000db0 <vit_rap_cyc>
		spi_transmission();
 8000f48:	f7ff ff62 	bl	8000e10 <spi_transmission>

		fct_vierge();
 8000f4c:	f7ff ff50 	bl	8000df0 <fct_vierge>
		moteur2();
 8000f50:	f7ff febc 	bl	8000ccc <moteur2>
		vit_rap_cyc(10);
 8000f54:	200a      	movs	r0, #10
 8000f56:	f7ff ff2b 	bl	8000db0 <vit_rap_cyc>
		spi_transmission();
 8000f5a:	f7ff ff59 	bl	8000e10 <spi_transmission>



		break;
 8000f5e:	e043      	b.n	8000fe8 <traiter_message_pc+0x128>

	case 2:   // reculer

		fct_vierge();
 8000f60:	f7ff ff46 	bl	8000df0 <fct_vierge>
		moteur1();
 8000f64:	f7ff fea2 	bl	8000cac <moteur1>
		sens_rotation_arriere();
 8000f68:	f7ff fefe 	bl	8000d68 <sens_rotation_arriere>
		spi_transmission();
 8000f6c:	f7ff ff50 	bl	8000e10 <spi_transmission>

		fct_vierge();
 8000f70:	f7ff ff3e 	bl	8000df0 <fct_vierge>
		moteur2();
 8000f74:	f7ff feaa 	bl	8000ccc <moteur2>
		sens_rotation_arriere();
 8000f78:	f7ff fef6 	bl	8000d68 <sens_rotation_arriere>
		spi_transmission();
 8000f7c:	f7ff ff48 	bl	8000e10 <spi_transmission>


		fct_vierge();
 8000f80:	f7ff ff36 	bl	8000df0 <fct_vierge>
		moteur1();
 8000f84:	f7ff fe92 	bl	8000cac <moteur1>
		vit_rap_cyc(10); // on va a 10 pourcent
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f7ff ff11 	bl	8000db0 <vit_rap_cyc>
		spi_transmission();
 8000f8e:	f7ff ff3f 	bl	8000e10 <spi_transmission>

		fct_vierge();
 8000f92:	f7ff ff2d 	bl	8000df0 <fct_vierge>
		moteur2();
 8000f96:	f7ff fe99 	bl	8000ccc <moteur2>
		vit_rap_cyc(10);
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f7ff ff08 	bl	8000db0 <vit_rap_cyc>
		spi_transmission();
 8000fa0:	f7ff ff36 	bl	8000e10 <spi_transmission>


		break;
 8000fa4:	e020      	b.n	8000fe8 <traiter_message_pc+0x128>

	case 3:   // droite
		a = 3;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	607b      	str	r3, [r7, #4]
		break;
 8000faa:	e01d      	b.n	8000fe8 <traiter_message_pc+0x128>

	case 4:   // gauche
		a = 4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	607b      	str	r3, [r7, #4]

		break;
 8000fb0:	e01a      	b.n	8000fe8 <traiter_message_pc+0x128>

	case 5:   // controle PWM
		fct_vierge();
 8000fb2:	f7ff ff1d 	bl	8000df0 <fct_vierge>
		moteur2();
 8000fb6:	f7ff fe89 	bl	8000ccc <moteur2>
		config_freq_PWM();
 8000fba:	f7ff fee1 	bl	8000d80 <config_freq_PWM>
		txData[1] = message_recu_PC[1] << 1;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <traiter_message_pc+0x130>)
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <traiter_message_pc+0x134>)
 8000fc8:	705a      	strb	r2, [r3, #1]
		spi_transmission();
 8000fca:	f7ff ff21 	bl	8000e10 <spi_transmission>
		break;
 8000fce:	e00b      	b.n	8000fe8 <traiter_message_pc+0x128>

	case 6:  // contrôle du rapport cyclique
		fct_vierge();
 8000fd0:	f7ff ff0e 	bl	8000df0 <fct_vierge>
		moteur2();
 8000fd4:	f7ff fe7a 	bl	8000ccc <moteur2>
		vit_rap_cyc(message_recu_PC[1]);  // modif pour la rampe d'accélération
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <traiter_message_pc+0x130>)
 8000fda:	785b      	ldrb	r3, [r3, #1]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fee7 	bl	8000db0 <vit_rap_cyc>
		//objectif_vitesse = message_recu_PC[1];
		spi_transmission();
 8000fe2:	f7ff ff15 	bl	8000e10 <spi_transmission>

		break;
 8000fe6:	bf00      	nop





}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000054 	.word	0x20000054
 8000ff4:	2000002c 	.word	0x2000002c

08000ff8 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	4b9a      	ldr	r3, [pc, #616]	; (800127c <MX_GPIO_Init+0x284>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a99      	ldr	r2, [pc, #612]	; (800127c <MX_GPIO_Init+0x284>)
 8001018:	f043 0310 	orr.w	r3, r3, #16
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b97      	ldr	r3, [pc, #604]	; (800127c <MX_GPIO_Init+0x284>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	4b93      	ldr	r3, [pc, #588]	; (800127c <MX_GPIO_Init+0x284>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a92      	ldr	r2, [pc, #584]	; (800127c <MX_GPIO_Init+0x284>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b90      	ldr	r3, [pc, #576]	; (800127c <MX_GPIO_Init+0x284>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b8c      	ldr	r3, [pc, #560]	; (800127c <MX_GPIO_Init+0x284>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a8b      	ldr	r2, [pc, #556]	; (800127c <MX_GPIO_Init+0x284>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b89      	ldr	r3, [pc, #548]	; (800127c <MX_GPIO_Init+0x284>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b85      	ldr	r3, [pc, #532]	; (800127c <MX_GPIO_Init+0x284>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a84      	ldr	r2, [pc, #528]	; (800127c <MX_GPIO_Init+0x284>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b82      	ldr	r3, [pc, #520]	; (800127c <MX_GPIO_Init+0x284>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b7e      	ldr	r3, [pc, #504]	; (800127c <MX_GPIO_Init+0x284>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a7d      	ldr	r2, [pc, #500]	; (800127c <MX_GPIO_Init+0x284>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b7b      	ldr	r3, [pc, #492]	; (800127c <MX_GPIO_Init+0x284>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b77      	ldr	r3, [pc, #476]	; (800127c <MX_GPIO_Init+0x284>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a76      	ldr	r2, [pc, #472]	; (800127c <MX_GPIO_Init+0x284>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b74      	ldr	r3, [pc, #464]	; (800127c <MX_GPIO_Init+0x284>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2108      	movs	r1, #8
 80010ba:	4871      	ldr	r0, [pc, #452]	; (8001280 <MX_GPIO_Init+0x288>)
 80010bc:	f001 fc76 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2101      	movs	r1, #1
 80010c4:	486f      	ldr	r0, [pc, #444]	; (8001284 <MX_GPIO_Init+0x28c>)
 80010c6:	f001 fc71 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010ca:	2200      	movs	r2, #0
 80010cc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80010d0:	486d      	ldr	r0, [pc, #436]	; (8001288 <MX_GPIO_Init+0x290>)
 80010d2:	f001 fc6b 	bl	80029ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010d6:	2308      	movs	r3, #8
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4864      	ldr	r0, [pc, #400]	; (8001280 <MX_GPIO_Init+0x288>)
 80010ee:	f001 f9c5 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	485e      	ldr	r0, [pc, #376]	; (8001284 <MX_GPIO_Init+0x28c>)
 800110a:	f001 f9b7 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800110e:	2308      	movs	r3, #8
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800111e:	2305      	movs	r3, #5
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4856      	ldr	r0, [pc, #344]	; (8001284 <MX_GPIO_Init+0x28c>)
 800112a:	f001 f9a7 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800112e:	2301      	movs	r3, #1
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001132:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4852      	ldr	r0, [pc, #328]	; (800128c <MX_GPIO_Init+0x294>)
 8001144:	f001 f99a 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001148:	2310      	movs	r3, #16
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001158:	2306      	movs	r3, #6
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	484a      	ldr	r0, [pc, #296]	; (800128c <MX_GPIO_Init+0x294>)
 8001164:	f001 f98a 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001168:	2304      	movs	r3, #4
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4845      	ldr	r0, [pc, #276]	; (8001290 <MX_GPIO_Init+0x298>)
 800117c:	f001 f97e 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001192:	2305      	movs	r3, #5
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	483c      	ldr	r0, [pc, #240]	; (8001290 <MX_GPIO_Init+0x298>)
 800119e:	f001 f96d 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011a2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011a6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4833      	ldr	r0, [pc, #204]	; (8001288 <MX_GPIO_Init+0x290>)
 80011bc:	f001 f95e 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011c0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011d2:	2306      	movs	r3, #6
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4829      	ldr	r0, [pc, #164]	; (8001284 <MX_GPIO_Init+0x28c>)
 80011de:	f001 f94d 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80011e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4825      	ldr	r0, [pc, #148]	; (800128c <MX_GPIO_Init+0x294>)
 80011f8:	f001 f940 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80011fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800120e:	230a      	movs	r3, #10
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	481c      	ldr	r0, [pc, #112]	; (800128c <MX_GPIO_Init+0x294>)
 800121a:	f001 f92f 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800121e:	2320      	movs	r3, #32
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4815      	ldr	r0, [pc, #84]	; (8001288 <MX_GPIO_Init+0x290>)
 8001232:	f001 f923 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001236:	f44f 7310 	mov.w	r3, #576	; 0x240
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123c:	2312      	movs	r3, #18
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001240:	2301      	movs	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001248:	2304      	movs	r3, #4
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <MX_GPIO_Init+0x298>)
 8001254:	f001 f912 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001258:	2302      	movs	r3, #2
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800125c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_GPIO_Init+0x288>)
 800126e:	f001 f905 	bl	800247c <HAL_GPIO_Init>

}
 8001272:	bf00      	nop
 8001274:	3730      	adds	r7, #48	; 0x30
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40021000 	.word	0x40021000
 8001284:	40020800 	.word	0x40020800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40020000 	.word	0x40020000
 8001290:	40020400 	.word	0x40020400
 8001294:	00000000 	.word	0x00000000

08001298 <uart_lidar_recieve>:
	uint8_t Data[2] = {0xA5, 0x25};
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}

void uart_lidar_recieve(){
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0

	octet_recu = UART3_rxBuffer;
 800129e:	4b72      	ldr	r3, [pc, #456]	; (8001468 <uart_lidar_recieve+0x1d0>)
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	4b72      	ldr	r3, [pc, #456]	; (800146c <uart_lidar_recieve+0x1d4>)
 80012a4:	701a      	strb	r2, [r3, #0]

	historique_reception[indice_historique_reception] = UART3_rxBuffer;
 80012a6:	4b72      	ldr	r3, [pc, #456]	; (8001470 <uart_lidar_recieve+0x1d8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6f      	ldr	r2, [pc, #444]	; (8001468 <uart_lidar_recieve+0x1d0>)
 80012ac:	7811      	ldrb	r1, [r2, #0]
 80012ae:	4a71      	ldr	r2, [pc, #452]	; (8001474 <uart_lidar_recieve+0x1dc>)
 80012b0:	54d1      	strb	r1, [r2, r3]
	//indice_historique_reception ++;



	if (indice_historique_reception == 500){
 80012b2:	4b6f      	ldr	r3, [pc, #444]	; (8001470 <uart_lidar_recieve+0x1d8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012ba:	d102      	bne.n	80012c2 <uart_lidar_recieve+0x2a>
		indice_historique_reception = 0;
 80012bc:	4b6c      	ldr	r3, [pc, #432]	; (8001470 <uart_lidar_recieve+0x1d8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
	}


	switch (lidar_state){
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <uart_lidar_recieve+0x1e0>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <uart_lidar_recieve+0x38>
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d041      	beq.n	8001352 <uart_lidar_recieve+0xba>


			break;

		default:
			break;
 80012ce:	e0c0      	b.n	8001452 <uart_lidar_recieve+0x1ba>
			if ((octet_recu == 0xA5) && (last_bit_state == end) ){  // on recoit l'octet de start
 80012d0:	4b66      	ldr	r3, [pc, #408]	; (800146c <uart_lidar_recieve+0x1d4>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2ba5      	cmp	r3, #165	; 0xa5
 80012d6:	d112      	bne.n	80012fe <uart_lidar_recieve+0x66>
 80012d8:	4b68      	ldr	r3, [pc, #416]	; (800147c <uart_lidar_recieve+0x1e4>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d10e      	bne.n	80012fe <uart_lidar_recieve+0x66>
				bit_state = start1;
 80012e0:	4b67      	ldr	r3, [pc, #412]	; (8001480 <uart_lidar_recieve+0x1e8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
				taille_message_recu = 0; // on remet a zero la taille du message recu
 80012e6:	4b67      	ldr	r3, [pc, #412]	; (8001484 <uart_lidar_recieve+0x1ec>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
				index_ecriture_message_recu = 0;
 80012ec:	4b66      	ldr	r3, [pc, #408]	; (8001488 <uart_lidar_recieve+0x1f0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
				memset(lidar_message_recu,0,sizeof(lidar_message_recu)); // on efface le buffer
 80012f2:	2214      	movs	r2, #20
 80012f4:	2100      	movs	r1, #0
 80012f6:	4865      	ldr	r0, [pc, #404]	; (800148c <uart_lidar_recieve+0x1f4>)
 80012f8:	f004 fcac 	bl	8005c54 <memset>
 80012fc:	e024      	b.n	8001348 <uart_lidar_recieve+0xb0>
			else if ((last_bit_state == start1) && (octet_recu == 0x5A)){ // on recoit le deuxième octet de start
 80012fe:	4b5f      	ldr	r3, [pc, #380]	; (800147c <uart_lidar_recieve+0x1e4>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d107      	bne.n	8001316 <uart_lidar_recieve+0x7e>
 8001306:	4b59      	ldr	r3, [pc, #356]	; (800146c <uart_lidar_recieve+0x1d4>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b5a      	cmp	r3, #90	; 0x5a
 800130c:	d103      	bne.n	8001316 <uart_lidar_recieve+0x7e>
				bit_state = start2;
 800130e:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <uart_lidar_recieve+0x1e8>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
 8001314:	e018      	b.n	8001348 <uart_lidar_recieve+0xb0>
			else if (last_bit_state == start2){   // on a l'octet qui donne la taille de la communication
 8001316:	4b59      	ldr	r3, [pc, #356]	; (800147c <uart_lidar_recieve+0x1e4>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d107      	bne.n	800132e <uart_lidar_recieve+0x96>
				bit_state = size;
 800131e:	4b58      	ldr	r3, [pc, #352]	; (8001480 <uart_lidar_recieve+0x1e8>)
 8001320:	2202      	movs	r2, #2
 8001322:	701a      	strb	r2, [r3, #0]
				taille_message_recu = octet_recu;
 8001324:	4b51      	ldr	r3, [pc, #324]	; (800146c <uart_lidar_recieve+0x1d4>)
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	4b56      	ldr	r3, [pc, #344]	; (8001484 <uart_lidar_recieve+0x1ec>)
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	e00c      	b.n	8001348 <uart_lidar_recieve+0xb0>
			else if ((last_bit_state == size) || (last_bit_state == data)){     // on a une data
 800132e:	4b53      	ldr	r3, [pc, #332]	; (800147c <uart_lidar_recieve+0x1e4>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d003      	beq.n	800133e <uart_lidar_recieve+0xa6>
 8001336:	4b51      	ldr	r3, [pc, #324]	; (800147c <uart_lidar_recieve+0x1e4>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d104      	bne.n	8001348 <uart_lidar_recieve+0xb0>
				bit_state = data;
 800133e:	4b50      	ldr	r3, [pc, #320]	; (8001480 <uart_lidar_recieve+0x1e8>)
 8001340:	2203      	movs	r2, #3
 8001342:	701a      	strb	r2, [r3, #0]
				reception_octet_data();
 8001344:	f000 f8b0 	bl	80014a8 <reception_octet_data>
			last_bit_state = bit_state; // machine d'état
 8001348:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <uart_lidar_recieve+0x1e8>)
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	4b4b      	ldr	r3, [pc, #300]	; (800147c <uart_lidar_recieve+0x1e4>)
 800134e:	701a      	strb	r2, [r3, #0]
			break;
 8001350:	e07f      	b.n	8001452 <uart_lidar_recieve+0x1ba>
			if (compteur == 4){
 8001352:	4b4f      	ldr	r3, [pc, #316]	; (8001490 <uart_lidar_recieve+0x1f8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b04      	cmp	r3, #4
 8001358:	d16f      	bne.n	800143a <uart_lidar_recieve+0x1a2>
				num_frame_scan ++;
 800135a:	4b4e      	ldr	r3, [pc, #312]	; (8001494 <uart_lidar_recieve+0x1fc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	4a4c      	ldr	r2, [pc, #304]	; (8001494 <uart_lidar_recieve+0x1fc>)
 8001362:	6013      	str	r3, [r2, #0]
				compteur = 0;
 8001364:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <uart_lidar_recieve+0x1f8>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
				if (error_check() == 1){
 800136a:	f000 f8e3 	bl	8001534 <error_check>
 800136e:	4603      	mov	r3, r0
 8001370:	2b01      	cmp	r3, #1
 8001372:	d102      	bne.n	800137a <uart_lidar_recieve+0xe2>
					compteur = 0;
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <uart_lidar_recieve+0x1f8>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
				uint8_t a1 = lidar_message_recu[1] >> 1;
 800137a:	4b44      	ldr	r3, [pc, #272]	; (800148c <uart_lidar_recieve+0x1f4>)
 800137c:	785b      	ldrb	r3, [r3, #1]
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
				uint8_t a2 = lidar_message_recu[2];
 8001382:	4b42      	ldr	r3, [pc, #264]	; (800148c <uart_lidar_recieve+0x1f4>)
 8001384:	789b      	ldrb	r3, [r3, #2]
 8001386:	73bb      	strb	r3, [r7, #14]
				uint8_t d1 = lidar_message_recu[3];
 8001388:	4b40      	ldr	r3, [pc, #256]	; (800148c <uart_lidar_recieve+0x1f4>)
 800138a:	78db      	ldrb	r3, [r3, #3]
 800138c:	737b      	strb	r3, [r7, #13]
				uint8_t d2 = lidar_message_recu[4];
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <uart_lidar_recieve+0x1f4>)
 8001390:	791b      	ldrb	r3, [r3, #4]
 8001392:	733b      	strb	r3, [r7, #12]
				indice_historique_angle ++;
 8001394:	4b40      	ldr	r3, [pc, #256]	; (8001498 <uart_lidar_recieve+0x200>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	4a3f      	ldr	r2, [pc, #252]	; (8001498 <uart_lidar_recieve+0x200>)
 800139c:	6013      	str	r3, [r2, #0]
				uint16_t angle_16 = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	817b      	strh	r3, [r7, #10]
				angle_16 = a2 << 8 | a1;
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	817b      	strh	r3, [r7, #10]
				angle_16 = angle_16 >> 1;
 80013b2:	897b      	ldrh	r3, [r7, #10]
 80013b4:	085b      	lsrs	r3, r3, #1
 80013b6:	817b      	strh	r3, [r7, #10]
				historique_angle[indice_historique_angle] = (int)angle_16 / 64;
 80013b8:	897b      	ldrh	r3, [r7, #10]
 80013ba:	099b      	lsrs	r3, r3, #6
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b36      	ldr	r3, [pc, #216]	; (8001498 <uart_lidar_recieve+0x200>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4a35      	ldr	r2, [pc, #212]	; (800149c <uart_lidar_recieve+0x204>)
 80013c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (indice_historique_angle >= 900){
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <uart_lidar_recieve+0x200>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80013d2:	db02      	blt.n	80013da <uart_lidar_recieve+0x142>
					indice_historique_angle  = 0;
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <uart_lidar_recieve+0x200>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
				angle_16 = (int) (angle_16 / 64 / 1.42);
 80013da:	897b      	ldrh	r3, [r7, #10]
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f843 	bl	800046c <__aeabi_i2d>
 80013e6:	a31e      	add	r3, pc, #120	; (adr r3, 8001460 <uart_lidar_recieve+0x1c8>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff f9d2 	bl	8000794 <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fab4 	bl	8000964 <__aeabi_d2iz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	817b      	strh	r3, [r7, #10]
				uint8_t lidar_message_a_transmettre[5] = {1, angle_16, a2, d1, d2};
 8001400:	2301      	movs	r3, #1
 8001402:	713b      	strb	r3, [r7, #4]
 8001404:	897b      	ldrh	r3, [r7, #10]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	717b      	strb	r3, [r7, #5]
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	71bb      	strb	r3, [r7, #6]
 800140e:	7b7b      	ldrb	r3, [r7, #13]
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	7b3b      	ldrb	r3, [r7, #12]
 8001414:	723b      	strb	r3, [r7, #8]
				if (NUMtrame >= 2){
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <uart_lidar_recieve+0x208>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	dd08      	ble.n	8001430 <uart_lidar_recieve+0x198>
					HAL_UART_Transmit(&huart2, lidar_message_a_transmettre, 5, 100);
 800141e:	1d39      	adds	r1, r7, #4
 8001420:	2364      	movs	r3, #100	; 0x64
 8001422:	2205      	movs	r2, #5
 8001424:	481f      	ldr	r0, [pc, #124]	; (80014a4 <uart_lidar_recieve+0x20c>)
 8001426:	f003 fb81 	bl	8004b2c <HAL_UART_Transmit>
					NUMtrame = 0;
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <uart_lidar_recieve+0x208>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
				NUMtrame ++;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <uart_lidar_recieve+0x208>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <uart_lidar_recieve+0x208>)
 8001438:	6013      	str	r3, [r2, #0]
			lidar_message_recu[compteur] = octet_recu;
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <uart_lidar_recieve+0x1f8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <uart_lidar_recieve+0x1d4>)
 8001440:	7811      	ldrb	r1, [r2, #0]
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <uart_lidar_recieve+0x1f4>)
 8001444:	54d1      	strb	r1, [r2, r3]
			compteur ++;
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <uart_lidar_recieve+0x1f8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <uart_lidar_recieve+0x1f8>)
 800144e:	6013      	str	r3, [r2, #0]
			break;
 8001450:	bf00      	nop


		}

	return;
 8001452:	bf00      	nop
}
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	f3af 8000 	nop.w
 8001460:	eb851eb8 	.word	0xeb851eb8
 8001464:	3ff6b851 	.word	0x3ff6b851
 8001468:	20001658 	.word	0x20001658
 800146c:	200000bd 	.word	0x200000bd
 8001470:	2000003c 	.word	0x2000003c
 8001474:	200000c0 	.word	0x200000c0
 8001478:	2000002e 	.word	0x2000002e
 800147c:	20000000 	.word	0x20000000
 8001480:	200000bc 	.word	0x200000bc
 8001484:	200000be 	.word	0x200000be
 8001488:	200000b8 	.word	0x200000b8
 800148c:	200004a8 	.word	0x200004a8
 8001490:	20000034 	.word	0x20000034
 8001494:	20000030 	.word	0x20000030
 8001498:	20000040 	.word	0x20000040
 800149c:	200004bc 	.word	0x200004bc
 80014a0:	20000038 	.word	0x20000038
 80014a4:	2000176c 	.word	0x2000176c

080014a8 <reception_octet_data>:

void reception_octet_data(){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
		lidar_message_recu[index_ecriture_message_recu] = octet_recu;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <reception_octet_data+0x38>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <reception_octet_data+0x3c>)
 80014b2:	7811      	ldrb	r1, [r2, #0]
 80014b4:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <reception_octet_data+0x40>)
 80014b6:	54d1      	strb	r1, [r2, r3]
		index_ecriture_message_recu ++;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <reception_octet_data+0x38>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <reception_octet_data+0x38>)
 80014c0:	6013      	str	r3, [r2, #0]
		if (index_ecriture_message_recu == taille_message_recu){
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <reception_octet_data+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <reception_octet_data+0x38>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d105      	bne.n	80014dc <reception_octet_data+0x34>
			bit_state = end;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <reception_octet_data+0x48>)
 80014d2:	2204      	movs	r2, #4
 80014d4:	701a      	strb	r2, [r3, #0]
			lidar_fin_du_message_recu();
 80014d6:	f000 f80d 	bl	80014f4 <lidar_fin_du_message_recu>
		}


	return;
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
}
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200000b8 	.word	0x200000b8
 80014e4:	200000bd 	.word	0x200000bd
 80014e8:	200004a8 	.word	0x200004a8
 80014ec:	200000be 	.word	0x200000be
 80014f0:	200000bc 	.word	0x200000bc

080014f4 <lidar_fin_du_message_recu>:


void lidar_fin_du_message_recu(){      // on transmet le message au PC
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

	// on est en mode scan
	if((lidar_message_recu[0] == 0x0) && (lidar_message_recu[1] == 0x0) && (lidar_message_recu[2] == 0x40) && (lidar_message_recu[3] == 0x81)){
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <lidar_fin_du_message_recu+0x38>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10f      	bne.n	8001520 <lidar_fin_du_message_recu+0x2c>
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <lidar_fin_du_message_recu+0x38>)
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10b      	bne.n	8001520 <lidar_fin_du_message_recu+0x2c>
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <lidar_fin_du_message_recu+0x38>)
 800150a:	789b      	ldrb	r3, [r3, #2]
 800150c:	2b40      	cmp	r3, #64	; 0x40
 800150e:	d107      	bne.n	8001520 <lidar_fin_du_message_recu+0x2c>
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <lidar_fin_du_message_recu+0x38>)
 8001512:	78db      	ldrb	r3, [r3, #3]
 8001514:	2b81      	cmp	r3, #129	; 0x81
 8001516:	d103      	bne.n	8001520 <lidar_fin_du_message_recu+0x2c>
		lidar_state = scan;
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <lidar_fin_du_message_recu+0x3c>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
	}




	return;
 800151e:	bf00      	nop
 8001520:	bf00      	nop



}
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200004a8 	.word	0x200004a8
 8001530:	2000002e 	.word	0x2000002e

08001534 <error_check>:


int error_check(){
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0

	uint8_t trame_copie = lidar_message_recu[0];
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <error_check+0x60>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
	trame_copie &= 0b11000000;
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001546:	71fb      	strb	r3, [r7, #7]


	if (trame_copie == 0b11000000 || trame_copie == 0b00000000){
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2bc0      	cmp	r3, #192	; 0xc0
 800154c:	d002      	beq.n	8001554 <error_check+0x20>
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d104      	bne.n	800155e <error_check+0x2a>
		index_ecriture_message_recu = 0;
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <error_check+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
		return 1; // erreur sur le bit S et S/
 800155a:	2301      	movs	r3, #1
 800155c:	e013      	b.n	8001586 <error_check+0x52>
	}
	uint8_t trame_copie2 = lidar_message_recu[1];
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <error_check+0x60>)
 8001560:	785b      	ldrb	r3, [r3, #1]
 8001562:	71bb      	strb	r3, [r7, #6]
	trame_copie2 &= 0b10000000;
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800156a:	71bb      	strb	r3, [r7, #6]
	if (trame_copie2 == 0B0 && index_ecriture_message_recu >= 1){
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d108      	bne.n	8001584 <error_check+0x50>
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <error_check+0x64>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	dd04      	ble.n	8001584 <error_check+0x50>
		index_ecriture_message_recu = 0;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <error_check+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
		return 1;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <error_check+0x52>
	}

	return 0;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200004a8 	.word	0x200004a8
 8001598:	200000b8 	.word	0x200000b8

0800159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a0:	f000 fcf4 	bl	8001f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a4:	f000 f83e 	bl	8001624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a8:	f7ff fd26 	bl	8000ff8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015ac:	f000 fb58 	bl	8001c60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80015b0:	f000 fb80 	bl	8001cb4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80015b4:	f000 f8a6 	bl	8001704 <MX_SPI1_Init>
  MX_TIM1_Init();
 80015b8:	f000 f9fe 	bl	80019b8 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 80015bc:	f000 fba4 	bl	8001d08 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80015c0:	f000 fa7e 	bl	8001ac0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer_2, sizeof(&UART2_rxBuffer_2));
 80015c4:	2204      	movs	r2, #4
 80015c6:	490f      	ldr	r1, [pc, #60]	; (8001604 <main+0x68>)
 80015c8:	480f      	ldr	r0, [pc, #60]	; (8001608 <main+0x6c>)
 80015ca:	f003 fb41 	bl	8004c50 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1);
 80015ce:	2201      	movs	r2, #1
 80015d0:	490e      	ldr	r1, [pc, #56]	; (800160c <main+0x70>)
 80015d2:	480f      	ldr	r0, [pc, #60]	; (8001610 <main+0x74>)
 80015d4:	f003 fb3c 	bl	8004c50 <HAL_UART_Receive_IT>



  objectif_vitesse = 0;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <main+0x78>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
  vitesse_actuelle = 0;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <main+0x7c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]


  //reset_lidar();
  //demarrer_pwm_lidar();
  //lidar_stop();
  HAL_Delay(50);
 80015e4:	2032      	movs	r0, #50	; 0x32
 80015e6:	f000 fd43 	bl	8002070 <HAL_Delay>


  /*
   * Test rampe
   */
  vitesse_actuelle = 0;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <main+0x7c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
  //objectif_vitesse = 20;

  HAL_TIM_Base_Start_IT(&htim2);
 80015f0:	480a      	ldr	r0, [pc, #40]	; (800161c <main+0x80>)
 80015f2:	f002 faa9 	bl	8003b48 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80015f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fa:	4809      	ldr	r0, [pc, #36]	; (8001620 <main+0x84>)
 80015fc:	f001 f9ef 	bl	80029de <HAL_GPIO_TogglePin>
 8001600:	e7f9      	b.n	80015f6 <main+0x5a>
 8001602:	bf00      	nop
 8001604:	20001610 	.word	0x20001610
 8001608:	2000176c 	.word	0x2000176c
 800160c:	20001658 	.word	0x20001658
 8001610:	20001614 	.word	0x20001614
 8001614:	20000046 	.word	0x20000046
 8001618:	20000045 	.word	0x20000045
 800161c:	200015c4 	.word	0x200015c4
 8001620:	40020c00 	.word	0x40020c00

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	; 0x50
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	2230      	movs	r2, #48	; 0x30
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fb0e 	bl	8005c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <SystemClock_Config+0xcc>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <SystemClock_Config+0xcc>)
 8001652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <SystemClock_Config+0xcc>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <SystemClock_Config+0xd0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <SystemClock_Config+0xd0>)
 800166e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <SystemClock_Config+0xd0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001680:	2301      	movs	r3, #1
 8001682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168a:	2302      	movs	r3, #2
 800168c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800168e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001694:	2308      	movs	r3, #8
 8001696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001698:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800169c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169e:	2302      	movs	r3, #2
 80016a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016a2:	2307      	movs	r3, #7
 80016a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a6:	f107 0320 	add.w	r3, r7, #32
 80016aa:	4618      	mov	r0, r3
 80016ac:	f001 f9b2 	bl	8002a14 <HAL_RCC_OscConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016b6:	f000 f81f 	bl	80016f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ba:	230f      	movs	r3, #15
 80016bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016be:	2302      	movs	r3, #2
 80016c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2105      	movs	r1, #5
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 fc13 	bl	8002f04 <HAL_RCC_ClockConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016e4:	f000 f808 	bl	80016f8 <Error_Handler>
  }
}
 80016e8:	bf00      	nop
 80016ea:	3750      	adds	r7, #80	; 0x50
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40007000 	.word	0x40007000

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	e7fe      	b.n	8001700 <Error_Handler+0x8>
	...

08001704 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_SPI1_Init+0x64>)
 800170a:	4a18      	ldr	r2, [pc, #96]	; (800176c <MX_SPI1_Init+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_SPI1_Init+0x64>)
 8001710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_SPI1_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_SPI1_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_SPI1_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_SPI1_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_SPI1_Init+0x64>)
 8001730:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_SPI1_Init+0x64>)
 8001738:	2230      	movs	r2, #48	; 0x30
 800173a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <MX_SPI1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_SPI1_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <MX_SPI1_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_SPI1_Init+0x64>)
 8001750:	220a      	movs	r2, #10
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <MX_SPI1_Init+0x64>)
 8001756:	f001 fdd1 	bl	80032fc <HAL_SPI_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001760:	f7ff ffca 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200014c0 	.word	0x200014c0
 800176c:	40013000 	.word	0x40013000

08001770 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a25      	ldr	r2, [pc, #148]	; (8001824 <HAL_SPI_MspInit+0xb4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d144      	bne.n	800181c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_SPI_MspInit+0xb8>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a23      	ldr	r2, [pc, #140]	; (8001828 <HAL_SPI_MspInit+0xb8>)
 800179c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_SPI_MspInit+0xb8>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_SPI_MspInit+0xb8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <HAL_SPI_MspInit+0xb8>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_SPI_MspInit+0xb8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80017ca:	23e0      	movs	r3, #224	; 0xe0
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017da:	2305      	movs	r3, #5
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4811      	ldr	r0, [pc, #68]	; (800182c <HAL_SPI_MspInit+0xbc>)
 80017e6:	f000 fe49 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017fc:	2305      	movs	r3, #5
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4809      	ldr	r0, [pc, #36]	; (800182c <HAL_SPI_MspInit+0xbc>)
 8001808:	f000 fe38 	bl	800247c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	2023      	movs	r0, #35	; 0x23
 8001812:	f000 fd50 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001816:	2023      	movs	r0, #35	; 0x23
 8001818:	f000 fd69 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40013000 	.word	0x40013000
 8001828:	40023800 	.word	0x40023800
 800182c:	40020000 	.word	0x40020000

08001830 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_SPI_MspDeInit+0x38>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10d      	bne.n	800185e <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_SPI_MspDeInit+0x3c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_SPI_MspDeInit+0x3c>)
 8001848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin|GPIO_PIN_15);
 800184e:	f248 01e0 	movw	r1, #32992	; 0x80e0
 8001852:	4807      	ldr	r0, [pc, #28]	; (8001870 <HAL_SPI_MspDeInit+0x40>)
 8001854:	f000 ffae 	bl	80027b4 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001858:	2023      	movs	r0, #35	; 0x23
 800185a:	f000 fd56 	bl	800230a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40013000 	.word	0x40013000
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_MspInit+0x4c>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_MspInit+0x4c>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001888:	6453      	str	r3, [r2, #68]	; 0x44
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_MspInit+0x4c>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <HAL_MspInit+0x4c>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_MspInit+0x4c>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018b2:	2007      	movs	r0, #7
 80018b4:	f000 fcf4 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <NMI_Handler+0x4>

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001910:	f000 fb8e 	bl	8002030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <TIM2_IRQHandler+0x10>)
 800191e:	f002 f9d2 	bl	8003cc6 <HAL_TIM_IRQHandler>
  //callback_adoucissement_vitesse();



  /* USER CODE END TIM2_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200015c4 	.word	0x200015c4

0800192c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <SPI1_IRQHandler+0x10>)
 8001932:	f001 fed1 	bl	80036d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200014c0 	.word	0x200014c0

08001940 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001944:	4803      	ldr	r0, [pc, #12]	; (8001954 <USART2_IRQHandler+0x14>)
 8001946:	f003 fa9f 	bl	8004e88 <HAL_UART_IRQHandler>

  */

  //uart_pc_recieve();

  recevoir_message_pc2();
 800194a:	f7ff fa8b 	bl	8000e64 <recevoir_message_pc2>


  /* USER CODE END USART2_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000176c 	.word	0x2000176c

08001958 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <USART3_IRQHandler+0x1c>)
 800195e:	f003 fa93 	bl	8004e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  uart_lidar_recieve();
 8001962:	f7ff fc99 	bl	8001298 <uart_lidar_recieve>

  HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1);
 8001966:	2201      	movs	r2, #1
 8001968:	4903      	ldr	r1, [pc, #12]	; (8001978 <USART3_IRQHandler+0x20>)
 800196a:	4802      	ldr	r0, [pc, #8]	; (8001974 <USART3_IRQHandler+0x1c>)
 800196c:	f003 f970 	bl	8004c50 <HAL_UART_Receive_IT>




  /* USER CODE END USART3_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20001614 	.word	0x20001614
 8001978:	20001658 	.word	0x20001658

0800197c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <USART6_IRQHandler+0x14>)
 8001982:	f003 fa81 	bl	8004e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  reception_M0();
 8001986:	f7ff fa5f 	bl	8000e48 <reception_M0>


  /* USER CODE END USART6_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000165c 	.word	0x2000165c

08001994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <SystemInit+0x20>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <SystemInit+0x20>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b092      	sub	sp, #72	; 0x48
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
 80019d8:	615a      	str	r2, [r3, #20]
 80019da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2220      	movs	r2, #32
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f004 f936 	bl	8005c54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019e8:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <MX_TIM1_Init+0x100>)
 80019ea:	4a34      	ldr	r2, [pc, #208]	; (8001abc <MX_TIM1_Init+0x104>)
 80019ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019ee:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <MX_TIM1_Init+0x100>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <MX_TIM1_Init+0x100>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 80019fa:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <MX_TIM1_Init+0x100>)
 80019fc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001a00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <MX_TIM1_Init+0x100>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <MX_TIM1_Init+0x100>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <MX_TIM1_Init+0x100>)
 8001a10:	2280      	movs	r2, #128	; 0x80
 8001a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a14:	4828      	ldr	r0, [pc, #160]	; (8001ab8 <MX_TIM1_Init+0x100>)
 8001a16:	f002 f907 	bl	8003c28 <HAL_TIM_PWM_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001a20:	f7ff fe6a 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a30:	4619      	mov	r1, r3
 8001a32:	4821      	ldr	r0, [pc, #132]	; (8001ab8 <MX_TIM1_Init+0x100>)
 8001a34:	f002 fef6 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001a3e:	f7ff fe5b 	bl	80016f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a42:	2360      	movs	r3, #96	; 0x60
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	2200      	movs	r2, #0
 8001a66:	4619      	mov	r1, r3
 8001a68:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <MX_TIM1_Init+0x100>)
 8001a6a:	f002 fa35 	bl	8003ed8 <HAL_TIM_PWM_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001a74:	f7ff fe40 	bl	80016f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <MX_TIM1_Init+0x100>)
 8001a9c:	f002 ff3e 	bl	800491c <HAL_TIMEx_ConfigBreakDeadTime>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001aa6:	f7ff fe27 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aaa:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <MX_TIM1_Init+0x100>)
 8001aac:	f000 f89e 	bl	8001bec <HAL_TIM_MspPostInit>

}
 8001ab0:	bf00      	nop
 8001ab2:	3748      	adds	r7, #72	; 0x48
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000157c 	.word	0x2000157c
 8001abc:	40010000 	.word	0x40010000

08001ac0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <MX_TIM2_Init+0x98>)
 8001ade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <MX_TIM2_Init+0x98>)
 8001ae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_TIM2_Init+0x98>)
 8001aee:	2210      	movs	r2, #16
 8001af0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <MX_TIM2_Init+0x98>)
 8001af4:	f247 5230 	movw	r2, #30000	; 0x7530
 8001af8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_TIM2_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_TIM2_Init+0x98>)
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b06:	4814      	ldr	r0, [pc, #80]	; (8001b58 <MX_TIM2_Init+0x98>)
 8001b08:	f001 ffce 	bl	8003aa8 <HAL_TIM_Base_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b12:	f7ff fdf1 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	4619      	mov	r1, r3
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_TIM2_Init+0x98>)
 8001b24:	f002 fa9a 	bl	800405c <HAL_TIM_ConfigClockSource>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b2e:	f7ff fde3 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_TIM2_Init+0x98>)
 8001b40:	f002 fe70 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b4a:	f7ff fdd5 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200015c4 	.word	0x200015c4

08001b5c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d10d      	bne.n	8001b8a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_TIM_PWM_MspInit+0x40>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <HAL_TIM_PWM_MspInit+0x40>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <HAL_TIM_PWM_MspInit+0x40>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb0:	d115      	bne.n	8001bde <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_TIM_Base_MspInit+0x48>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <HAL_TIM_Base_MspInit+0x48>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_TIM_Base_MspInit+0x48>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	201c      	movs	r0, #28
 8001bd4:	f000 fb6f 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bd8:	201c      	movs	r0, #28
 8001bda:	f000 fb88 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <HAL_TIM_MspPostInit+0x68>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d11e      	bne.n	8001c4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_TIM_MspPostInit+0x6c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <HAL_TIM_MspPostInit+0x6c>)
 8001c18:	f043 0310 	orr.w	r3, r3, #16
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_TIM_MspPostInit+0x6c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	4619      	mov	r1, r3
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <HAL_TIM_MspPostInit+0x70>)
 8001c48:	f000 fc18 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c4c:	bf00      	nop
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40010000 	.word	0x40010000
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40021000 	.word	0x40021000

08001c60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <MX_USART2_UART_Init+0x50>)
 8001c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c86:	220c      	movs	r2, #12
 8001c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c98:	f002 fea6 	bl	80049e8 <HAL_UART_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ca2:	f7ff fd29 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000176c 	.word	0x2000176c
 8001cb0:	40004400 	.word	0x40004400

08001cb4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_USART3_UART_Init+0x4c>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <MX_USART3_UART_Init+0x50>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <MX_USART3_UART_Init+0x4c>)
 8001cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_USART3_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_USART3_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <MX_USART3_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_USART3_UART_Init+0x4c>)
 8001cda:	220c      	movs	r2, #12
 8001cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <MX_USART3_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_USART3_UART_Init+0x4c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_USART3_UART_Init+0x4c>)
 8001cec:	f002 fe7c 	bl	80049e8 <HAL_UART_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cf6:	f7ff fcff 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20001614 	.word	0x20001614
 8001d04:	40004800 	.word	0x40004800

08001d08 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_USART6_UART_Init+0x4c>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <MX_USART6_UART_Init+0x50>)
 8001d10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <MX_USART6_UART_Init+0x4c>)
 8001d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d18:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_USART6_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_USART6_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <MX_USART6_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_USART6_UART_Init+0x4c>)
 8001d2e:	2204      	movs	r2, #4
 8001d30:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <MX_USART6_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_USART6_UART_Init+0x4c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_USART6_UART_Init+0x4c>)
 8001d40:	f002 fe9f 	bl	8004a82 <HAL_HalfDuplex_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001d4a:	f7ff fcd5 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000165c 	.word	0x2000165c
 8001d58:	40011400 	.word	0x40011400

08001d5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08e      	sub	sp, #56	; 0x38
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a67      	ldr	r2, [pc, #412]	; (8001f18 <HAL_UART_MspInit+0x1bc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d134      	bne.n	8001de8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
 8001d82:	4b66      	ldr	r3, [pc, #408]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a65      	ldr	r2, [pc, #404]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	4b5f      	ldr	r3, [pc, #380]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a5e      	ldr	r2, [pc, #376]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b5c      	ldr	r3, [pc, #368]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001db6:	230c      	movs	r3, #12
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4853      	ldr	r0, [pc, #332]	; (8001f20 <HAL_UART_MspInit+0x1c4>)
 8001dd2:	f000 fb53 	bl	800247c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2026      	movs	r0, #38	; 0x26
 8001ddc:	f000 fa6b 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001de0:	2026      	movs	r0, #38	; 0x26
 8001de2:	f000 fa84 	bl	80022ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001de6:	e092      	b.n	8001f0e <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART3)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a4d      	ldr	r2, [pc, #308]	; (8001f24 <HAL_UART_MspInit+0x1c8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d154      	bne.n	8001e9c <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a48      	ldr	r2, [pc, #288]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b46      	ldr	r3, [pc, #280]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a41      	ldr	r2, [pc, #260]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a3a      	ldr	r2, [pc, #232]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001e34:	f043 0308 	orr.w	r3, r3, #8
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e58:	2307      	movs	r3, #7
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	4619      	mov	r1, r3
 8001e62:	4831      	ldr	r0, [pc, #196]	; (8001f28 <HAL_UART_MspInit+0x1cc>)
 8001e64:	f000 fb0a 	bl	800247c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e82:	4619      	mov	r1, r3
 8001e84:	4829      	ldr	r0, [pc, #164]	; (8001f2c <HAL_UART_MspInit+0x1d0>)
 8001e86:	f000 faf9 	bl	800247c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2027      	movs	r0, #39	; 0x27
 8001e90:	f000 fa11 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e94:	2027      	movs	r0, #39	; 0x27
 8001e96:	f000 fa2a 	bl	80022ee <HAL_NVIC_EnableIRQ>
}
 8001e9a:	e038      	b.n	8001f0e <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART6)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <HAL_UART_MspInit+0x1d4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d133      	bne.n	8001f0e <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001eb0:	f043 0320 	orr.w	r3, r3, #32
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_UART_MspInit+0x1c0>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ede:	2340      	movs	r3, #64	; 0x40
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee2:	2312      	movs	r3, #18
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480e      	ldr	r0, [pc, #56]	; (8001f34 <HAL_UART_MspInit+0x1d8>)
 8001efa:	f000 fabf 	bl	800247c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	2047      	movs	r0, #71	; 0x47
 8001f04:	f000 f9d7 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f08:	2047      	movs	r0, #71	; 0x47
 8001f0a:	f000 f9f0 	bl	80022ee <HAL_NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3738      	adds	r7, #56	; 0x38
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40004400 	.word	0x40004400
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40004800 	.word	0x40004800
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40011400 	.word	0x40011400
 8001f34:	40020800 	.word	0x40020800

08001f38 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 8001f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f3c:	480d      	ldr	r0, [pc, #52]	; (8001f74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f3e:	490e      	ldr	r1, [pc, #56]	; (8001f78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f40:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f44:	e002      	b.n	8001f4c <LoopCopyDataInit>

08001f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4a:	3304      	adds	r3, #4

08001f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f50:	d3f9      	bcc.n	8001f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f54:	4c0b      	ldr	r4, [pc, #44]	; (8001f84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f58:	e001      	b.n	8001f5e <LoopFillZerobss>

08001f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f5c:	3204      	adds	r2, #4

08001f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f60:	d3fb      	bcc.n	8001f5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f62:	f7ff fd17 	bl	8001994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f66:	f003 fe51 	bl	8005c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f6a:	f7ff fb17 	bl	800159c <main>
  bx  lr    
 8001f6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f78:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f7c:	08005cb4 	.word	0x08005cb4
  ldr r2, =_sbss
 8001f80:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f84:	200017b4 	.word	0x200017b4

08001f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f88:	e7fe      	b.n	8001f88 <ADC_IRQHandler>
	...

08001f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_Init+0x40>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <HAL_Init+0x40>)
 8001f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_Init+0x40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <HAL_Init+0x40>)
 8001fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <HAL_Init+0x40>)
 8001fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	f000 f973 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f000 f808 	bl	8001fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc0:	f7ff fc58 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023c00 	.word	0x40023c00

08001fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_InitTick+0x54>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_InitTick+0x58>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f999 	bl	8002326 <HAL_SYSTICK_Config>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00e      	b.n	800201c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b0f      	cmp	r3, #15
 8002002:	d80a      	bhi.n	800201a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002004:	2200      	movs	r2, #0
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f000 f953 	bl	80022b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002010:	4a06      	ldr	r2, [pc, #24]	; (800202c <HAL_InitTick+0x5c>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e000      	b.n	800201c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000004 	.word	0x20000004
 8002028:	2000000c 	.word	0x2000000c
 800202c:	20000008 	.word	0x20000008

08002030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_IncTick+0x20>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_IncTick+0x24>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4413      	add	r3, r2
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <HAL_IncTick+0x24>)
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	2000000c 	.word	0x2000000c
 8002054:	200017b0 	.word	0x200017b0

08002058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return uwTick;
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <HAL_GetTick+0x14>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	200017b0 	.word	0x200017b0

08002070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff ffee 	bl	8002058 <HAL_GetTick>
 800207c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d005      	beq.n	8002096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_Delay+0x44>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002096:	bf00      	nop
 8002098:	f7ff ffde 	bl	8002058 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d8f7      	bhi.n	8002098 <HAL_Delay+0x28>
  {
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	2000000c 	.word	0x2000000c

080020b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d4:	4013      	ands	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	60d3      	str	r3, [r2, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <__NVIC_GetPriorityGrouping+0x18>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	f003 0307 	and.w	r3, r3, #7
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	2b00      	cmp	r3, #0
 800212c:	db0b      	blt.n	8002146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	f003 021f 	and.w	r2, r3, #31
 8002134:	4907      	ldr	r1, [pc, #28]	; (8002154 <__NVIC_EnableIRQ+0x38>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2001      	movs	r0, #1
 800213e:	fa00 f202 	lsl.w	r2, r0, r2
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000e100 	.word	0xe000e100

08002158 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db12      	blt.n	8002190 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	490a      	ldr	r1, [pc, #40]	; (800219c <__NVIC_DisableIRQ+0x44>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	3320      	adds	r3, #32
 8002180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002184:	f3bf 8f4f 	dsb	sy
}
 8002188:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800218a:	f3bf 8f6f 	isb	sy
}
 800218e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100

080021a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	db0a      	blt.n	80021ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	490c      	ldr	r1, [pc, #48]	; (80021ec <__NVIC_SetPriority+0x4c>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c8:	e00a      	b.n	80021e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <__NVIC_SetPriority+0x50>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	440b      	add	r3, r1
 80021de:	761a      	strb	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000e100 	.word	0xe000e100
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 32ff 	mov.w	r2, #4294967295
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223c:	f04f 31ff 	mov.w	r1, #4294967295
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43d9      	mvns	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
         );
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800226c:	d301      	bcc.n	8002272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226e:	2301      	movs	r3, #1
 8002270:	e00f      	b.n	8002292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <SysTick_Config+0x40>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227a:	210f      	movs	r1, #15
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f7ff ff8e 	bl	80021a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <SysTick_Config+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <SysTick_Config+0x40>)
 800228c:	2207      	movs	r2, #7
 800228e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	e000e010 	.word	0xe000e010

080022a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff05 	bl	80020b8 <__NVIC_SetPriorityGrouping>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c8:	f7ff ff1a 	bl	8002100 <__NVIC_GetPriorityGrouping>
 80022cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	6978      	ldr	r0, [r7, #20]
 80022d4:	f7ff ff8e 	bl	80021f4 <NVIC_EncodePriority>
 80022d8:	4602      	mov	r2, r0
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff5d 	bl	80021a0 <__NVIC_SetPriority>
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff0d 	bl	800211c <__NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff1d 	bl	8002158 <__NVIC_DisableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ff94 	bl	800225c <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff fe84 	bl	8002058 <HAL_GetTick>
 8002350:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d008      	beq.n	8002370 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2280      	movs	r2, #128	; 0x80
 8002362:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e052      	b.n	8002416 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0216 	bic.w	r2, r2, #22
 800237e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800238e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <HAL_DMA_Abort+0x62>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0208 	bic.w	r2, r2, #8
 80023ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c0:	e013      	b.n	80023ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023c2:	f7ff fe49 	bl	8002058 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d90c      	bls.n	80023ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2203      	movs	r2, #3
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e015      	b.n	8002416 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e4      	bne.n	80023c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	223f      	movs	r2, #63	; 0x3f
 80023fe:	409a      	lsls	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d004      	beq.n	800243c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e00c      	b.n	8002456 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2205      	movs	r2, #5
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e16b      	b.n	8002770 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 815a 	bne.w	800276a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d005      	beq.n	80024ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d130      	bne.n	8002530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b03      	cmp	r3, #3
 800253a:	d017      	beq.n	800256c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d123      	bne.n	80025c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0203 	and.w	r2, r3, #3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80b4 	beq.w	800276a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b60      	ldr	r3, [pc, #384]	; (8002788 <HAL_GPIO_Init+0x30c>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a5f      	ldr	r2, [pc, #380]	; (8002788 <HAL_GPIO_Init+0x30c>)
 800260c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <HAL_GPIO_Init+0x30c>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261e:	4a5b      	ldr	r2, [pc, #364]	; (800278c <HAL_GPIO_Init+0x310>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_GPIO_Init+0x314>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02b      	beq.n	80026a2 <HAL_GPIO_Init+0x226>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a51      	ldr	r2, [pc, #324]	; (8002794 <HAL_GPIO_Init+0x318>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d025      	beq.n	800269e <HAL_GPIO_Init+0x222>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a50      	ldr	r2, [pc, #320]	; (8002798 <HAL_GPIO_Init+0x31c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <HAL_GPIO_Init+0x21e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4f      	ldr	r2, [pc, #316]	; (800279c <HAL_GPIO_Init+0x320>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x21a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4e      	ldr	r2, [pc, #312]	; (80027a0 <HAL_GPIO_Init+0x324>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x216>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4d      	ldr	r2, [pc, #308]	; (80027a4 <HAL_GPIO_Init+0x328>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x212>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4c      	ldr	r2, [pc, #304]	; (80027a8 <HAL_GPIO_Init+0x32c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x20e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4b      	ldr	r2, [pc, #300]	; (80027ac <HAL_GPIO_Init+0x330>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x20a>
 8002682:	2307      	movs	r3, #7
 8002684:	e00e      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 8002686:	2308      	movs	r3, #8
 8002688:	e00c      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800268a:	2306      	movs	r3, #6
 800268c:	e00a      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800268e:	2305      	movs	r3, #5
 8002690:	e008      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 8002692:	2304      	movs	r3, #4
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 8002696:	2303      	movs	r3, #3
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 80026a2:	2300      	movs	r3, #0
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f002 0203 	and.w	r2, r2, #3
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b4:	4935      	ldr	r1, [pc, #212]	; (800278c <HAL_GPIO_Init+0x310>)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_GPIO_Init+0x334>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e6:	4a32      	ldr	r2, [pc, #200]	; (80027b0 <HAL_GPIO_Init+0x334>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <HAL_GPIO_Init+0x334>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002710:	4a27      	ldr	r2, [pc, #156]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_GPIO_Init+0x334>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002764:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3301      	adds	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	f67f ae90 	bls.w	8002498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40013800 	.word	0x40013800
 8002790:	40020000 	.word	0x40020000
 8002794:	40020400 	.word	0x40020400
 8002798:	40020800 	.word	0x40020800
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40021400 	.word	0x40021400
 80027a8:	40021800 	.word	0x40021800
 80027ac:	40021c00 	.word	0x40021c00
 80027b0:	40013c00 	.word	0x40013c00

080027b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e0cd      	b.n	800296c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d0:	2201      	movs	r2, #1
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	f040 80bd 	bne.w	8002966 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80027ec:	4a65      	ldr	r2, [pc, #404]	; (8002984 <HAL_GPIO_DeInit+0x1d0>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	4013      	ands	r3, r2
 800280c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a5d      	ldr	r2, [pc, #372]	; (8002988 <HAL_GPIO_DeInit+0x1d4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d02b      	beq.n	800286e <HAL_GPIO_DeInit+0xba>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a5c      	ldr	r2, [pc, #368]	; (800298c <HAL_GPIO_DeInit+0x1d8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d025      	beq.n	800286a <HAL_GPIO_DeInit+0xb6>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a5b      	ldr	r2, [pc, #364]	; (8002990 <HAL_GPIO_DeInit+0x1dc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01f      	beq.n	8002866 <HAL_GPIO_DeInit+0xb2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_GPIO_DeInit+0x1e0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d019      	beq.n	8002862 <HAL_GPIO_DeInit+0xae>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a59      	ldr	r2, [pc, #356]	; (8002998 <HAL_GPIO_DeInit+0x1e4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_GPIO_DeInit+0xaa>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a58      	ldr	r2, [pc, #352]	; (800299c <HAL_GPIO_DeInit+0x1e8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00d      	beq.n	800285a <HAL_GPIO_DeInit+0xa6>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a57      	ldr	r2, [pc, #348]	; (80029a0 <HAL_GPIO_DeInit+0x1ec>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <HAL_GPIO_DeInit+0xa2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a56      	ldr	r2, [pc, #344]	; (80029a4 <HAL_GPIO_DeInit+0x1f0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d101      	bne.n	8002852 <HAL_GPIO_DeInit+0x9e>
 800284e:	2307      	movs	r3, #7
 8002850:	e00e      	b.n	8002870 <HAL_GPIO_DeInit+0xbc>
 8002852:	2308      	movs	r3, #8
 8002854:	e00c      	b.n	8002870 <HAL_GPIO_DeInit+0xbc>
 8002856:	2306      	movs	r3, #6
 8002858:	e00a      	b.n	8002870 <HAL_GPIO_DeInit+0xbc>
 800285a:	2305      	movs	r3, #5
 800285c:	e008      	b.n	8002870 <HAL_GPIO_DeInit+0xbc>
 800285e:	2304      	movs	r3, #4
 8002860:	e006      	b.n	8002870 <HAL_GPIO_DeInit+0xbc>
 8002862:	2303      	movs	r3, #3
 8002864:	e004      	b.n	8002870 <HAL_GPIO_DeInit+0xbc>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_DeInit+0xbc>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_DeInit+0xbc>
 800286e:	2300      	movs	r3, #0
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	f002 0203 	and.w	r2, r2, #3
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4093      	lsls	r3, r2
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	429a      	cmp	r2, r3
 800287e:	d132      	bne.n	80028e6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002880:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <HAL_GPIO_DeInit+0x1f4>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	4947      	ldr	r1, [pc, #284]	; (80029a8 <HAL_GPIO_DeInit+0x1f4>)
 800288a:	4013      	ands	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800288e:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <HAL_GPIO_DeInit+0x1f4>)
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	43db      	mvns	r3, r3
 8002896:	4944      	ldr	r1, [pc, #272]	; (80029a8 <HAL_GPIO_DeInit+0x1f4>)
 8002898:	4013      	ands	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800289c:	4b42      	ldr	r3, [pc, #264]	; (80029a8 <HAL_GPIO_DeInit+0x1f4>)
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	4940      	ldr	r1, [pc, #256]	; (80029a8 <HAL_GPIO_DeInit+0x1f4>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_GPIO_DeInit+0x1f4>)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	493d      	ldr	r1, [pc, #244]	; (80029a8 <HAL_GPIO_DeInit+0x1f4>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80028c8:	4a2e      	ldr	r2, [pc, #184]	; (8002984 <HAL_GPIO_DeInit+0x1d0>)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	43da      	mvns	r2, r3
 80028d8:	482a      	ldr	r0, [pc, #168]	; (8002984 <HAL_GPIO_DeInit+0x1d0>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	400a      	ands	r2, r1
 80028e0:	3302      	adds	r3, #2
 80028e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2103      	movs	r1, #3
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	08da      	lsrs	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3208      	adds	r2, #8
 8002904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	08d2      	lsrs	r2, r2, #3
 800291c:	4019      	ands	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3208      	adds	r2, #8
 8002922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2103      	movs	r1, #3
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	401a      	ands	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	2101      	movs	r1, #1
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2103      	movs	r1, #3
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	401a      	ands	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b0f      	cmp	r3, #15
 8002970:	f67f af2e 	bls.w	80027d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40013800 	.word	0x40013800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020400 	.word	0x40020400
 8002990:	40020800 	.word	0x40020800
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40021000 	.word	0x40021000
 800299c:	40021400 	.word	0x40021400
 80029a0:	40021800 	.word	0x40021800
 80029a4:	40021c00 	.word	0x40021c00
 80029a8:	40013c00 	.word	0x40013c00

080029ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c8:	e003      	b.n	80029d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	041a      	lsls	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	619a      	str	r2, [r3, #24]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029f0:	887a      	ldrh	r2, [r7, #2]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4013      	ands	r3, r2
 80029f6:	041a      	lsls	r2, r3, #16
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43d9      	mvns	r1, r3
 80029fc:	887b      	ldrh	r3, [r7, #2]
 80029fe:	400b      	ands	r3, r1
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	619a      	str	r2, [r3, #24]
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e264      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d075      	beq.n	8002b1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a32:	4ba3      	ldr	r3, [pc, #652]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d00c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3e:	4ba0      	ldr	r3, [pc, #640]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d112      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4a:	4b9d      	ldr	r3, [pc, #628]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a56:	d10b      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	4b99      	ldr	r3, [pc, #612]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d05b      	beq.n	8002b1c <HAL_RCC_OscConfig+0x108>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d157      	bne.n	8002b1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e23f      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0x74>
 8002a7a:	4b91      	ldr	r3, [pc, #580]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a90      	ldr	r2, [pc, #576]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e01d      	b.n	8002ac4 <HAL_RCC_OscConfig+0xb0>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x98>
 8002a92:	4b8b      	ldr	r3, [pc, #556]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a8a      	ldr	r2, [pc, #552]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b88      	ldr	r3, [pc, #544]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a87      	ldr	r2, [pc, #540]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCC_OscConfig+0xb0>
 8002aac:	4b84      	ldr	r3, [pc, #528]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a83      	ldr	r2, [pc, #524]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b81      	ldr	r3, [pc, #516]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a80      	ldr	r2, [pc, #512]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7ff fac4 	bl	8002058 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7ff fac0 	bl	8002058 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e204      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b76      	ldr	r3, [pc, #472]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xc0>
 8002af2:	e014      	b.n	8002b1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7ff fab0 	bl	8002058 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002afc:	f7ff faac 	bl	8002058 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e1f0      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	4b6c      	ldr	r3, [pc, #432]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0xe8>
 8002b1a:	e000      	b.n	8002b1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d063      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b2a:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b36:	4b62      	ldr	r3, [pc, #392]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d11c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b42:	4b5f      	ldr	r3, [pc, #380]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	4b5c      	ldr	r3, [pc, #368]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_RCC_OscConfig+0x152>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e1c4      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4b56      	ldr	r3, [pc, #344]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4952      	ldr	r1, [pc, #328]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	e03a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d020      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b84:	4b4f      	ldr	r3, [pc, #316]	; (8002cc4 <HAL_RCC_OscConfig+0x2b0>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7ff fa65 	bl	8002058 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b92:	f7ff fa61 	bl	8002058 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1a5      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b43      	ldr	r3, [pc, #268]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4940      	ldr	r1, [pc, #256]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
 8002bc4:	e015      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_RCC_OscConfig+0x2b0>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7ff fa44 	bl	8002058 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd4:	f7ff fa40 	bl	8002058 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e184      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d030      	beq.n	8002c60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c06:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <HAL_RCC_OscConfig+0x2b4>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7ff fa24 	bl	8002058 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c14:	f7ff fa20 	bl	8002058 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e164      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x200>
 8002c32:	e015      	b.n	8002c60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_RCC_OscConfig+0x2b4>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7ff fa0d 	bl	8002058 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c42:	f7ff fa09 	bl	8002058 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e14d      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80a0 	beq.w	8002dae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a0e      	ldr	r2, [pc, #56]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCC_OscConfig+0x2b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d121      	bne.n	8002cee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_RCC_OscConfig+0x2b8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a07      	ldr	r2, [pc, #28]	; (8002ccc <HAL_RCC_OscConfig+0x2b8>)
 8002cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb6:	f7ff f9cf 	bl	8002058 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	e011      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2ce>
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	42470000 	.word	0x42470000
 8002cc8:	42470e80 	.word	0x42470e80
 8002ccc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd0:	f7ff f9c2 	bl	8002058 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e106      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b85      	ldr	r3, [pc, #532]	; (8002ef8 <HAL_RCC_OscConfig+0x4e4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d106      	bne.n	8002d04 <HAL_RCC_OscConfig+0x2f0>
 8002cf6:	4b81      	ldr	r3, [pc, #516]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a80      	ldr	r2, [pc, #512]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
 8002d02:	e01c      	b.n	8002d3e <HAL_RCC_OscConfig+0x32a>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d10c      	bne.n	8002d26 <HAL_RCC_OscConfig+0x312>
 8002d0c:	4b7b      	ldr	r3, [pc, #492]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a7a      	ldr	r2, [pc, #488]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6713      	str	r3, [r2, #112]	; 0x70
 8002d18:	4b78      	ldr	r3, [pc, #480]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	4a77      	ldr	r2, [pc, #476]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70
 8002d24:	e00b      	b.n	8002d3e <HAL_RCC_OscConfig+0x32a>
 8002d26:	4b75      	ldr	r3, [pc, #468]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	4a74      	ldr	r2, [pc, #464]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	; 0x70
 8002d32:	4b72      	ldr	r3, [pc, #456]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a71      	ldr	r2, [pc, #452]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d015      	beq.n	8002d72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d46:	f7ff f987 	bl	8002058 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7ff f983 	bl	8002058 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0c5      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ee      	beq.n	8002d4e <HAL_RCC_OscConfig+0x33a>
 8002d70:	e014      	b.n	8002d9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d72:	f7ff f971 	bl	8002058 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7ff f96d 	bl	8002058 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0af      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d90:	4b5a      	ldr	r3, [pc, #360]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ee      	bne.n	8002d7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d105      	bne.n	8002dae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da2:	4b56      	ldr	r3, [pc, #344]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a55      	ldr	r2, [pc, #340]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 809b 	beq.w	8002eee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002db8:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d05c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d141      	bne.n	8002e50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <HAL_RCC_OscConfig+0x4ec>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7ff f941 	bl	8002058 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dda:	f7ff f93d 	bl	8002058 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e081      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dec:	4b43      	ldr	r3, [pc, #268]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	019b      	lsls	r3, r3, #6
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	3b01      	subs	r3, #1
 8002e12:	041b      	lsls	r3, r3, #16
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	061b      	lsls	r3, r3, #24
 8002e1c:	4937      	ldr	r1, [pc, #220]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e22:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <HAL_RCC_OscConfig+0x4ec>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff f916 	bl	8002058 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e30:	f7ff f912 	bl	8002058 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e056      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x41c>
 8002e4e:	e04e      	b.n	8002eee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e50:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_OscConfig+0x4ec>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7ff f8ff 	bl	8002058 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7ff f8fb 	bl	8002058 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e03f      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e70:	4b22      	ldr	r3, [pc, #136]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f0      	bne.n	8002e5e <HAL_RCC_OscConfig+0x44a>
 8002e7c:	e037      	b.n	8002eee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e032      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e8a:	4b1c      	ldr	r3, [pc, #112]	; (8002efc <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d028      	beq.n	8002eea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d121      	bne.n	8002eea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d11a      	bne.n	8002eea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eba:	4013      	ands	r3, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ec0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d111      	bne.n	8002eea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	40023800 	.word	0x40023800
 8002f00:	42470060 	.word	0x42470060

08002f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0cc      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f18:	4b68      	ldr	r3, [pc, #416]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d90c      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b65      	ldr	r3, [pc, #404]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0b8      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d020      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f58:	4b59      	ldr	r3, [pc, #356]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a58      	ldr	r2, [pc, #352]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f70:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f7c:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	494d      	ldr	r1, [pc, #308]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d044      	beq.n	8003024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d119      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e07f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc2:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e067      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe2:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f023 0203 	bic.w	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4934      	ldr	r1, [pc, #208]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff4:	f7ff f830 	bl	8002058 <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffc:	f7ff f82c 	bl	8002058 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e04f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 020c 	and.w	r2, r3, #12
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	429a      	cmp	r2, r3
 8003022:	d1eb      	bne.n	8002ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003024:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d20c      	bcs.n	800304c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e032      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4916      	ldr	r1, [pc, #88]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003076:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	490e      	ldr	r1, [pc, #56]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800308a:	f000 f821 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 800308e:	4602      	mov	r2, r0
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	490a      	ldr	r1, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	5ccb      	ldrb	r3, [r1, r3]
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe ff90 	bl	8001fd0 <HAL_InitTick>

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023c00 	.word	0x40023c00
 80030c0:	40023800 	.word	0x40023800
 80030c4:	08005c8c 	.word	0x08005c8c
 80030c8:	20000004 	.word	0x20000004
 80030cc:	20000008 	.word	0x20000008

080030d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	2300      	movs	r3, #0
 80030e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e8:	4b67      	ldr	r3, [pc, #412]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d00d      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x40>
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	f200 80bd 	bhi.w	8003274 <HAL_RCC_GetSysClockFreq+0x1a4>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x34>
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d003      	beq.n	800310a <HAL_RCC_GetSysClockFreq+0x3a>
 8003102:	e0b7      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b61      	ldr	r3, [pc, #388]	; (800328c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003106:	60bb      	str	r3, [r7, #8]
       break;
 8003108:	e0b7      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800310a:	4b61      	ldr	r3, [pc, #388]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800310c:	60bb      	str	r3, [r7, #8]
      break;
 800310e:	e0b4      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003110:	4b5d      	ldr	r3, [pc, #372]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003118:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800311a:	4b5b      	ldr	r3, [pc, #364]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d04d      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003126:	4b58      	ldr	r3, [pc, #352]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	461a      	mov	r2, r3
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003136:	f04f 0100 	mov.w	r1, #0
 800313a:	ea02 0800 	and.w	r8, r2, r0
 800313e:	ea03 0901 	and.w	r9, r3, r1
 8003142:	4640      	mov	r0, r8
 8003144:	4649      	mov	r1, r9
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	014b      	lsls	r3, r1, #5
 8003150:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003154:	0142      	lsls	r2, r0, #5
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	ebb0 0008 	subs.w	r0, r0, r8
 800315e:	eb61 0109 	sbc.w	r1, r1, r9
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	018b      	lsls	r3, r1, #6
 800316c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003170:	0182      	lsls	r2, r0, #6
 8003172:	1a12      	subs	r2, r2, r0
 8003174:	eb63 0301 	sbc.w	r3, r3, r1
 8003178:	f04f 0000 	mov.w	r0, #0
 800317c:	f04f 0100 	mov.w	r1, #0
 8003180:	00d9      	lsls	r1, r3, #3
 8003182:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003186:	00d0      	lsls	r0, r2, #3
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	eb12 0208 	adds.w	r2, r2, r8
 8003190:	eb43 0309 	adc.w	r3, r3, r9
 8003194:	f04f 0000 	mov.w	r0, #0
 8003198:	f04f 0100 	mov.w	r1, #0
 800319c:	0259      	lsls	r1, r3, #9
 800319e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031a2:	0250      	lsls	r0, r2, #9
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	f7fd fbfe 	bl	80009b4 <__aeabi_uldivmod>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4613      	mov	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	e04a      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	461a      	mov	r2, r3
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031d2:	f04f 0100 	mov.w	r1, #0
 80031d6:	ea02 0400 	and.w	r4, r2, r0
 80031da:	ea03 0501 	and.w	r5, r3, r1
 80031de:	4620      	mov	r0, r4
 80031e0:	4629      	mov	r1, r5
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	014b      	lsls	r3, r1, #5
 80031ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031f0:	0142      	lsls	r2, r0, #5
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	1b00      	subs	r0, r0, r4
 80031f8:	eb61 0105 	sbc.w	r1, r1, r5
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	018b      	lsls	r3, r1, #6
 8003206:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800320a:	0182      	lsls	r2, r0, #6
 800320c:	1a12      	subs	r2, r2, r0
 800320e:	eb63 0301 	sbc.w	r3, r3, r1
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	00d9      	lsls	r1, r3, #3
 800321c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003220:	00d0      	lsls	r0, r2, #3
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	1912      	adds	r2, r2, r4
 8003228:	eb45 0303 	adc.w	r3, r5, r3
 800322c:	f04f 0000 	mov.w	r0, #0
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	0299      	lsls	r1, r3, #10
 8003236:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800323a:	0290      	lsls	r0, r2, #10
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	461a      	mov	r2, r3
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	f7fd fbb2 	bl	80009b4 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4613      	mov	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0c1b      	lsrs	r3, r3, #16
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	3301      	adds	r3, #1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	60bb      	str	r3, [r7, #8]
      break;
 8003272:	e002      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003276:	60bb      	str	r3, [r7, #8]
      break;
 8003278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327a:	68bb      	ldr	r3, [r7, #8]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	00f42400 	.word	0x00f42400
 8003290:	007a1200 	.word	0x007a1200

08003294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000004 	.word	0x20000004

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b0:	f7ff fff0 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0a9b      	lsrs	r3, r3, #10
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	08005c9c 	.word	0x08005c9c

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032d8:	f7ff ffdc 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0b5b      	lsrs	r3, r3, #13
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08005c9c 	.word	0x08005c9c

080032fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e07b      	b.n	8003406 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2b00      	cmp	r3, #0
 8003314:	d108      	bne.n	8003328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331e:	d009      	beq.n	8003334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	61da      	str	r2, [r3, #28]
 8003326:	e005      	b.n	8003334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fe fa0e 	bl	8001770 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800336a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b8:	ea42 0103 	orr.w	r1, r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	f003 0104 	and.w	r1, r3, #4
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	f003 0210 	and.w	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e01a      	b.n	8003456 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003436:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7fe f9f9 	bl	8001830 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b088      	sub	sp, #32
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_SPI_Transmit+0x22>
 800347c:	2302      	movs	r3, #2
 800347e:	e126      	b.n	80036ce <HAL_SPI_Transmit+0x270>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003488:	f7fe fde6 	bl	8002058 <HAL_GetTick>
 800348c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d002      	beq.n	80034a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800349e:	2302      	movs	r3, #2
 80034a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034a2:	e10b      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_SPI_Transmit+0x52>
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034b4:	e102      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2203      	movs	r2, #3
 80034ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034fc:	d10f      	bne.n	800351e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800351c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d007      	beq.n	800353c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003544:	d14b      	bne.n	80035de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_Transmit+0xf6>
 800354e:	8afb      	ldrh	r3, [r7, #22]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d13e      	bne.n	80035d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	1c9a      	adds	r2, r3, #2
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003578:	e02b      	b.n	80035d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d112      	bne.n	80035ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80035ac:	e011      	b.n	80035d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ae:	f7fe fd53 	bl	8002058 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d803      	bhi.n	80035c6 <HAL_SPI_Transmit+0x168>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d102      	bne.n	80035cc <HAL_SPI_Transmit+0x16e>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035d0:	e074      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ce      	bne.n	800357a <HAL_SPI_Transmit+0x11c>
 80035dc:	e04c      	b.n	8003678 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0x18e>
 80035e6:	8afb      	ldrh	r3, [r7, #22]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d140      	bne.n	800366e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	7812      	ldrb	r2, [r2, #0]
 80035f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003612:	e02c      	b.n	800366e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d113      	bne.n	800364a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	330c      	adds	r3, #12
 800362c:	7812      	ldrb	r2, [r2, #0]
 800362e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	86da      	strh	r2, [r3, #54]	; 0x36
 8003648:	e011      	b.n	800366e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800364a:	f7fe fd05 	bl	8002058 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d803      	bhi.n	8003662 <HAL_SPI_Transmit+0x204>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d102      	bne.n	8003668 <HAL_SPI_Transmit+0x20a>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800366c:	e026      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1cd      	bne.n	8003614 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	6839      	ldr	r1, [r7, #0]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f9d1 	bl	8003a24 <SPI_EndRxTxTransaction>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10a      	bne.n	80036ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e000      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80036ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	099b      	lsrs	r3, r3, #6
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10f      	bne.n	800371c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	099b      	lsrs	r3, r3, #6
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
    return;
 800371a:	e0d7      	b.n	80038cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_SPI_IRQHandler+0x66>
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	09db      	lsrs	r3, r3, #7
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
    return;
 800373c:	e0c6      	b.n	80038cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10c      	bne.n	8003764 <HAL_SPI_IRQHandler+0x8c>
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	099b      	lsrs	r3, r3, #6
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80b4 	beq.w	80038cc <HAL_SPI_IRQHandler+0x1f4>
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80ad 	beq.w	80038cc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d023      	beq.n	80037c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b03      	cmp	r3, #3
 8003788:	d011      	beq.n	80037ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	f043 0204 	orr.w	r2, r3, #4
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	e00b      	b.n	80037c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	693b      	ldr	r3, [r7, #16]
        return;
 80037c4:	e082      	b.n	80038cc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d014      	beq.n	80037fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00c      	beq.n	8003822 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	f043 0208 	orr.w	r2, r3, #8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003814:	2300      	movs	r3, #0
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	2b00      	cmp	r3, #0
 8003828:	d04f      	beq.n	80038ca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003838:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <HAL_SPI_IRQHandler+0x17e>
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d034      	beq.n	80038c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0203 	bic.w	r2, r2, #3
 8003864:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d011      	beq.n	8003892 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_SPI_IRQHandler+0x1fc>)
 8003874:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe fdcf 	bl	800241e <HAL_DMA_Abort_IT>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003896:	2b00      	cmp	r3, #0
 8003898:	d016      	beq.n	80038c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389e:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <HAL_SPI_IRQHandler+0x1fc>)
 80038a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe fdb9 	bl	800241e <HAL_DMA_Abort_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80038be:	e003      	b.n	80038c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f809 	bl	80038d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80038c6:	e000      	b.n	80038ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80038c8:	bf00      	nop
    return;
 80038ca:	bf00      	nop
  }
}
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	080038ed 	.word	0x080038ed

080038d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7ff ffe6 	bl	80038d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003924:	f7fe fb98 	bl	8002058 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	4413      	add	r3, r2
 8003932:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003934:	f7fe fb90 	bl	8002058 <HAL_GetTick>
 8003938:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800393a:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	015b      	lsls	r3, r3, #5
 8003940:	0d1b      	lsrs	r3, r3, #20
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	fb02 f303 	mul.w	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800394a:	e054      	b.n	80039f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003952:	d050      	beq.n	80039f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003954:	f7fe fb80 	bl	8002058 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	429a      	cmp	r2, r3
 8003962:	d902      	bls.n	800396a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d13d      	bne.n	80039e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003978:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003982:	d111      	bne.n	80039a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398c:	d004      	beq.n	8003998 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003996:	d107      	bne.n	80039a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b0:	d10f      	bne.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e017      	b.n	8003a16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d19b      	bne.n	800394c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000004 	.word	0x20000004

08003a24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <SPI_EndRxTxTransaction+0x7c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <SPI_EndRxTxTransaction+0x80>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0d5b      	lsrs	r3, r3, #21
 8003a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a40:	fb02 f303 	mul.w	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4e:	d112      	bne.n	8003a76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2200      	movs	r2, #0
 8003a58:	2180      	movs	r1, #128	; 0x80
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f7ff ff5a 	bl	8003914 <SPI_WaitFlagStateUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e00f      	b.n	8003a96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8c:	2b80      	cmp	r3, #128	; 0x80
 8003a8e:	d0f2      	beq.n	8003a76 <SPI_EndRxTxTransaction+0x52>
 8003a90:	e000      	b.n	8003a94 <SPI_EndRxTxTransaction+0x70>
        break;
 8003a92:	bf00      	nop
  }

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000004 	.word	0x20000004
 8003aa4:	165e9f81 	.word	0x165e9f81

08003aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e041      	b.n	8003b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fe f866 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f000 fbb2 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d001      	beq.n	8003b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e04e      	b.n	8003bfe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a23      	ldr	r2, [pc, #140]	; (8003c0c <HAL_TIM_Base_Start_IT+0xc4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d022      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8a:	d01d      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1f      	ldr	r2, [pc, #124]	; (8003c10 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d018      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1e      	ldr	r2, [pc, #120]	; (8003c14 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1b      	ldr	r2, [pc, #108]	; (8003c1c <HAL_TIM_Base_Start_IT+0xd4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a18      	ldr	r2, [pc, #96]	; (8003c24 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d111      	bne.n	8003bec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d010      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bea:	e007      	b.n	8003bfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40010000 	.word	0x40010000
 8003c10:	40000400 	.word	0x40000400
 8003c14:	40000800 	.word	0x40000800
 8003c18:	40000c00 	.word	0x40000c00
 8003c1c:	40010400 	.word	0x40010400
 8003c20:	40014000 	.word	0x40014000
 8003c24:	40001800 	.word	0x40001800

08003c28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e041      	b.n	8003cbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fd ff84 	bl	8001b5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f000 faf2 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d122      	bne.n	8003d22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d11b      	bne.n	8003d22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f06f 0202 	mvn.w	r2, #2
 8003cf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fa82 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8003d0e:	e005      	b.n	8003d1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fa74 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa85 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d122      	bne.n	8003d76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d11b      	bne.n	8003d76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f06f 0204 	mvn.w	r2, #4
 8003d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fa58 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8003d62:	e005      	b.n	8003d70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fa4a 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa5b 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d122      	bne.n	8003dca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d11b      	bne.n	8003dca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f06f 0208 	mvn.w	r2, #8
 8003d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2204      	movs	r2, #4
 8003da0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fa2e 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8003db6:	e005      	b.n	8003dc4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fa20 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fa31 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d122      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d11b      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f06f 0210 	mvn.w	r2, #16
 8003dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2208      	movs	r2, #8
 8003df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fa04 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8003e0a:	e005      	b.n	8003e18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f9f6 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fa07 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d10e      	bne.n	8003e4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f06f 0201 	mvn.w	r2, #1
 8003e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f9d0 	bl	80041ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e54:	2b80      	cmp	r3, #128	; 0x80
 8003e56:	d10e      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e62:	2b80      	cmp	r3, #128	; 0x80
 8003e64:	d107      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fdaf 	bl	80049d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d10e      	bne.n	8003ea2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b40      	cmp	r3, #64	; 0x40
 8003e90:	d107      	bne.n	8003ea2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f9cc 	bl	800423a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d10e      	bne.n	8003ece <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d107      	bne.n	8003ece <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f06f 0220 	mvn.w	r2, #32
 8003ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fd79 	bl	80049c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e0ae      	b.n	8004054 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b0c      	cmp	r3, #12
 8003f02:	f200 809f 	bhi.w	8004044 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f06:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08003f41 	.word	0x08003f41
 8003f10:	08004045 	.word	0x08004045
 8003f14:	08004045 	.word	0x08004045
 8003f18:	08004045 	.word	0x08004045
 8003f1c:	08003f81 	.word	0x08003f81
 8003f20:	08004045 	.word	0x08004045
 8003f24:	08004045 	.word	0x08004045
 8003f28:	08004045 	.word	0x08004045
 8003f2c:	08003fc3 	.word	0x08003fc3
 8003f30:	08004045 	.word	0x08004045
 8003f34:	08004045 	.word	0x08004045
 8003f38:	08004045 	.word	0x08004045
 8003f3c:	08004003 	.word	0x08004003
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fa22 	bl	8004390 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0208 	orr.w	r2, r2, #8
 8003f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0204 	bic.w	r2, r2, #4
 8003f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6999      	ldr	r1, [r3, #24]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	619a      	str	r2, [r3, #24]
      break;
 8003f7e:	e064      	b.n	800404a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fa72 	bl	8004470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6999      	ldr	r1, [r3, #24]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	021a      	lsls	r2, r3, #8
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	619a      	str	r2, [r3, #24]
      break;
 8003fc0:	e043      	b.n	800404a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fac7 	bl	800455c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0208 	orr.w	r2, r2, #8
 8003fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0204 	bic.w	r2, r2, #4
 8003fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69d9      	ldr	r1, [r3, #28]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	61da      	str	r2, [r3, #28]
      break;
 8004000:	e023      	b.n	800404a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fb1b 	bl	8004644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800401c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69da      	ldr	r2, [r3, #28]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800402c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69d9      	ldr	r1, [r3, #28]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	021a      	lsls	r2, r3, #8
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	61da      	str	r2, [r3, #28]
      break;
 8004042:	e002      	b.n	800404a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	75fb      	strb	r3, [r7, #23]
      break;
 8004048:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004052:	7dfb      	ldrb	r3, [r7, #23]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_TIM_ConfigClockSource+0x1c>
 8004074:	2302      	movs	r3, #2
 8004076:	e0b4      	b.n	80041e2 <HAL_TIM_ConfigClockSource+0x186>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800409e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b0:	d03e      	beq.n	8004130 <HAL_TIM_ConfigClockSource+0xd4>
 80040b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b6:	f200 8087 	bhi.w	80041c8 <HAL_TIM_ConfigClockSource+0x16c>
 80040ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040be:	f000 8086 	beq.w	80041ce <HAL_TIM_ConfigClockSource+0x172>
 80040c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c6:	d87f      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x16c>
 80040c8:	2b70      	cmp	r3, #112	; 0x70
 80040ca:	d01a      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0xa6>
 80040cc:	2b70      	cmp	r3, #112	; 0x70
 80040ce:	d87b      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x16c>
 80040d0:	2b60      	cmp	r3, #96	; 0x60
 80040d2:	d050      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x11a>
 80040d4:	2b60      	cmp	r3, #96	; 0x60
 80040d6:	d877      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x16c>
 80040d8:	2b50      	cmp	r3, #80	; 0x50
 80040da:	d03c      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0xfa>
 80040dc:	2b50      	cmp	r3, #80	; 0x50
 80040de:	d873      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x16c>
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d058      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x13a>
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d86f      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x16c>
 80040e8:	2b30      	cmp	r3, #48	; 0x30
 80040ea:	d064      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x15a>
 80040ec:	2b30      	cmp	r3, #48	; 0x30
 80040ee:	d86b      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x16c>
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d060      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x15a>
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d867      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d05c      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x15a>
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d05a      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004100:	e062      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6899      	ldr	r1, [r3, #8]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f000 fb67 	bl	80047e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004124:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	609a      	str	r2, [r3, #8]
      break;
 800412e:	e04f      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6899      	ldr	r1, [r3, #8]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f000 fb50 	bl	80047e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004152:	609a      	str	r2, [r3, #8]
      break;
 8004154:	e03c      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	461a      	mov	r2, r3
 8004164:	f000 fac4 	bl	80046f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2150      	movs	r1, #80	; 0x50
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fb1d 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 8004174:	e02c      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	461a      	mov	r2, r3
 8004184:	f000 fae3 	bl	800474e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2160      	movs	r1, #96	; 0x60
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fb0d 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 8004194:	e01c      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6859      	ldr	r1, [r3, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f000 faa4 	bl	80046f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2140      	movs	r1, #64	; 0x40
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fafd 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 80041b4:	e00c      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4619      	mov	r1, r3
 80041c0:	4610      	mov	r0, r2
 80041c2:	f000 faf4 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 80041c6:	e003      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e000      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a40      	ldr	r2, [pc, #256]	; (8004364 <TIM_Base_SetConfig+0x114>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426e:	d00f      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a3d      	ldr	r2, [pc, #244]	; (8004368 <TIM_Base_SetConfig+0x118>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00b      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a3c      	ldr	r2, [pc, #240]	; (800436c <TIM_Base_SetConfig+0x11c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a3b      	ldr	r2, [pc, #236]	; (8004370 <TIM_Base_SetConfig+0x120>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a3a      	ldr	r2, [pc, #232]	; (8004374 <TIM_Base_SetConfig+0x124>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a2f      	ldr	r2, [pc, #188]	; (8004364 <TIM_Base_SetConfig+0x114>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d02b      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d027      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a2c      	ldr	r2, [pc, #176]	; (8004368 <TIM_Base_SetConfig+0x118>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d023      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a2b      	ldr	r2, [pc, #172]	; (800436c <TIM_Base_SetConfig+0x11c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01f      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a2a      	ldr	r2, [pc, #168]	; (8004370 <TIM_Base_SetConfig+0x120>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d01b      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a29      	ldr	r2, [pc, #164]	; (8004374 <TIM_Base_SetConfig+0x124>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d017      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a28      	ldr	r2, [pc, #160]	; (8004378 <TIM_Base_SetConfig+0x128>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a27      	ldr	r2, [pc, #156]	; (800437c <TIM_Base_SetConfig+0x12c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00f      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a26      	ldr	r2, [pc, #152]	; (8004380 <TIM_Base_SetConfig+0x130>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00b      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a25      	ldr	r2, [pc, #148]	; (8004384 <TIM_Base_SetConfig+0x134>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a24      	ldr	r2, [pc, #144]	; (8004388 <TIM_Base_SetConfig+0x138>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a23      	ldr	r2, [pc, #140]	; (800438c <TIM_Base_SetConfig+0x13c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d108      	bne.n	8004314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <TIM_Base_SetConfig+0x114>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_Base_SetConfig+0xf8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a0c      	ldr	r2, [pc, #48]	; (8004374 <TIM_Base_SetConfig+0x124>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d103      	bne.n	8004350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	615a      	str	r2, [r3, #20]
}
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40010000 	.word	0x40010000
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800
 8004370:	40000c00 	.word	0x40000c00
 8004374:	40010400 	.word	0x40010400
 8004378:	40014000 	.word	0x40014000
 800437c:	40014400 	.word	0x40014400
 8004380:	40014800 	.word	0x40014800
 8004384:	40001800 	.word	0x40001800
 8004388:	40001c00 	.word	0x40001c00
 800438c:	40002000 	.word	0x40002000

08004390 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f023 0201 	bic.w	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0303 	bic.w	r3, r3, #3
 80043c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f023 0302 	bic.w	r3, r3, #2
 80043d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a20      	ldr	r2, [pc, #128]	; (8004468 <TIM_OC1_SetConfig+0xd8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_OC1_SetConfig+0x64>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a1f      	ldr	r2, [pc, #124]	; (800446c <TIM_OC1_SetConfig+0xdc>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10c      	bne.n	800440e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0308 	bic.w	r3, r3, #8
 80043fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a15      	ldr	r2, [pc, #84]	; (8004468 <TIM_OC1_SetConfig+0xd8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_OC1_SetConfig+0x8e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a14      	ldr	r2, [pc, #80]	; (800446c <TIM_OC1_SetConfig+0xdc>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d111      	bne.n	8004442 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800442c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	621a      	str	r2, [r3, #32]
}
 800445c:	bf00      	nop
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	40010000 	.word	0x40010000
 800446c:	40010400 	.word	0x40010400

08004470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f023 0210 	bic.w	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f023 0320 	bic.w	r3, r3, #32
 80044ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a22      	ldr	r2, [pc, #136]	; (8004554 <TIM_OC2_SetConfig+0xe4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_OC2_SetConfig+0x68>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a21      	ldr	r2, [pc, #132]	; (8004558 <TIM_OC2_SetConfig+0xe8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d10d      	bne.n	80044f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a17      	ldr	r2, [pc, #92]	; (8004554 <TIM_OC2_SetConfig+0xe4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_OC2_SetConfig+0x94>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a16      	ldr	r2, [pc, #88]	; (8004558 <TIM_OC2_SetConfig+0xe8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d113      	bne.n	800452c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800450a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40010400 	.word	0x40010400

0800455c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a21      	ldr	r2, [pc, #132]	; (800463c <TIM_OC3_SetConfig+0xe0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_OC3_SetConfig+0x66>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a20      	ldr	r2, [pc, #128]	; (8004640 <TIM_OC3_SetConfig+0xe4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10d      	bne.n	80045de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a16      	ldr	r2, [pc, #88]	; (800463c <TIM_OC3_SetConfig+0xe0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_OC3_SetConfig+0x92>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a15      	ldr	r2, [pc, #84]	; (8004640 <TIM_OC3_SetConfig+0xe4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d113      	bne.n	8004616 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	621a      	str	r2, [r3, #32]
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	40010000 	.word	0x40010000
 8004640:	40010400 	.word	0x40010400

08004644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800468e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	031b      	lsls	r3, r3, #12
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <TIM_OC4_SetConfig+0xa4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_OC4_SetConfig+0x68>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a11      	ldr	r2, [pc, #68]	; (80046ec <TIM_OC4_SetConfig+0xa8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d109      	bne.n	80046c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	019b      	lsls	r3, r3, #6
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	621a      	str	r2, [r3, #32]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40010400 	.word	0x40010400

080046f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f023 0201 	bic.w	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800471a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f023 030a 	bic.w	r3, r3, #10
 800472c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800474e:	b480      	push	{r7}
 8004750:	b087      	sub	sp, #28
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	f023 0210 	bic.w	r2, r3, #16
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	031b      	lsls	r3, r3, #12
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800478a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f043 0307 	orr.w	r3, r3, #7
 80047d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	609a      	str	r2, [r3, #8]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	021a      	lsls	r2, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	431a      	orrs	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004838:	2302      	movs	r3, #2
 800483a:	e05a      	b.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a21      	ldr	r2, [pc, #132]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d022      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004888:	d01d      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1d      	ldr	r2, [pc, #116]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d018      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1b      	ldr	r2, [pc, #108]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1a      	ldr	r2, [pc, #104]	; (800490c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a18      	ldr	r2, [pc, #96]	; (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a17      	ldr	r2, [pc, #92]	; (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a15      	ldr	r2, [pc, #84]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d10c      	bne.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40010000 	.word	0x40010000
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00
 8004910:	40010400 	.word	0x40010400
 8004914:	40014000 	.word	0x40014000
 8004918:	40001800 	.word	0x40001800

0800491c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004934:	2302      	movs	r3, #2
 8004936:	e03d      	b.n	80049b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e03f      	b.n	8004a7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fd f9a4 	bl	8001d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2224      	movs	r2, #36	; 0x24
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 ff25 	bl	800587c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e047      	b.n	8004b24 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fd f957 	bl	8001d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2224      	movs	r2, #36	; 0x24
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ac4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fed8 	bl	800587c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ada:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004aea:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0208 	orr.w	r2, r2, #8
 8004afa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b0a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d17c      	bne.n	8004c46 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_UART_Transmit+0x2c>
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e075      	b.n	8004c48 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Transmit+0x3e>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e06e      	b.n	8004c48 <HAL_UART_Transmit+0x11c>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2221      	movs	r2, #33	; 0x21
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b80:	f7fd fa6a 	bl	8002058 <HAL_GetTick>
 8004b84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	88fa      	ldrh	r2, [r7, #6]
 8004b8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	88fa      	ldrh	r2, [r7, #6]
 8004b90:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9a:	d108      	bne.n	8004bae <HAL_UART_Transmit+0x82>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	61bb      	str	r3, [r7, #24]
 8004bac:	e003      	b.n	8004bb6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004bbe:	e02a      	b.n	8004c16 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2180      	movs	r1, #128	; 0x80
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fc14 	bl	80053f8 <UART_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e036      	b.n	8004c48 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10b      	bne.n	8004bf8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	e007      	b.n	8004c08 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3301      	adds	r3, #1
 8004c06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1cf      	bne.n	8004bc0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2200      	movs	r2, #0
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fbe4 	bl	80053f8 <UART_WaitOnFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e006      	b.n	8004c48 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e000      	b.n	8004c48 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
  }
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d11d      	bne.n	8004ca6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <HAL_UART_Receive_IT+0x26>
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e016      	b.n	8004ca8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_UART_Receive_IT+0x38>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e00f      	b.n	8004ca8 <HAL_UART_Receive_IT+0x58>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 fc19 	bl	80054d4 <UART_Start_Receive_IT>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	e000      	b.n	8004ca8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b0a0      	sub	sp, #128	; 0x80
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cca:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8004cce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004cd8:	66ba      	str	r2, [r7, #104]	; 0x68
 8004cda:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004cde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e5      	bne.n	8004cb8 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3314      	adds	r3, #20
 8004cf2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3314      	adds	r3, #20
 8004d0a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d0c:	657a      	str	r2, [r7, #84]	; 0x54
 8004d0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e5      	bne.n	8004cec <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d119      	bne.n	8004d5c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d32:	e853 3f00 	ldrex	r3, [r3]
 8004d36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	f023 0310 	bic.w	r3, r3, #16
 8004d3e:	677b      	str	r3, [r7, #116]	; 0x74
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	330c      	adds	r3, #12
 8004d46:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004d48:	643a      	str	r2, [r7, #64]	; 0x40
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d50:	e841 2300 	strex	r3, r2, [r1]
 8004d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e5      	bne.n	8004d28 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	d136      	bne.n	8004dd8 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d80:	673b      	str	r3, [r7, #112]	; 0x70
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e5      	bne.n	8004d6a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d018      	beq.n	8004dd8 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004daa:	2200      	movs	r2, #0
 8004dac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fd fac3 	bl	800233e <HAL_DMA_Abort>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00c      	beq.n	8004dd8 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fd fb4d 	bl	8002462 <HAL_DMA_GetError>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d104      	bne.n	8004dd8 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e052      	b.n	8004e7e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b40      	cmp	r3, #64	; 0x40
 8004de4:	d136      	bne.n	8004e54 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3314      	adds	r3, #20
 8004dec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3314      	adds	r3, #20
 8004e04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e06:	61ba      	str	r2, [r7, #24]
 8004e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6979      	ldr	r1, [r7, #20]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	613b      	str	r3, [r7, #16]
   return(result);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e5      	bne.n	8004de6 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d018      	beq.n	8004e54 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	2200      	movs	r2, #0
 8004e28:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fd fa85 	bl	800233e <HAL_DMA_Abort>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00c      	beq.n	8004e54 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fd fb0f 	bl	8002462 <HAL_DMA_GetError>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d104      	bne.n	8004e54 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2210      	movs	r2, #16
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e014      	b.n	8004e7e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3780      	adds	r7, #128	; 0x80
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b0ba      	sub	sp, #232	; 0xe8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10f      	bne.n	8004eee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d009      	beq.n	8004eee <HAL_UART_IRQHandler+0x66>
 8004eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fc0d 	bl	8005706 <UART_Receive_IT>
      return;
 8004eec:	e256      	b.n	800539c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80de 	beq.w	80050b4 <HAL_UART_IRQHandler+0x22c>
 8004ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d106      	bne.n	8004f12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80d1 	beq.w	80050b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_UART_IRQHandler+0xae>
 8004f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f043 0201 	orr.w	r2, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <HAL_UART_IRQHandler+0xd2>
 8004f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	f043 0202 	orr.w	r2, r3, #2
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00b      	beq.n	8004f7e <HAL_UART_IRQHandler+0xf6>
 8004f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f043 0204 	orr.w	r2, r3, #4
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d011      	beq.n	8004fae <HAL_UART_IRQHandler+0x126>
 8004f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d105      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f043 0208 	orr.w	r2, r3, #8
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 81ed 	beq.w	8005392 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x14e>
 8004fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fb98 	bl	8005706 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <HAL_UART_IRQHandler+0x17a>
 8004ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d04f      	beq.n	80050a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 faa0 	bl	8005548 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d141      	bne.n	800509a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3314      	adds	r3, #20
 800501c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800502c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3314      	adds	r3, #20
 800503e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005042:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800504e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800505a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1d9      	bne.n	8005016 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	2b00      	cmp	r3, #0
 8005068:	d013      	beq.n	8005092 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	4a7d      	ldr	r2, [pc, #500]	; (8005264 <HAL_UART_IRQHandler+0x3dc>)
 8005070:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd f9d1 	bl	800241e <HAL_DMA_Abort_IT>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d016      	beq.n	80050b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800508c:	4610      	mov	r0, r2
 800508e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	e00e      	b.n	80050b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f99a 	bl	80053cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005098:	e00a      	b.n	80050b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f996 	bl	80053cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a0:	e006      	b.n	80050b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f992 	bl	80053cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80050ae:	e170      	b.n	8005392 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b0:	bf00      	nop
    return;
 80050b2:	e16e      	b.n	8005392 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	f040 814a 	bne.w	8005352 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 8143 	beq.w	8005352 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 813c 	beq.w	8005352 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	60bb      	str	r3, [r7, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	60bb      	str	r3, [r7, #8]
 80050ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	f040 80b4 	bne.w	8005268 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800510c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 8140 	beq.w	8005396 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800511a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800511e:	429a      	cmp	r2, r3
 8005120:	f080 8139 	bcs.w	8005396 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800512a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005136:	f000 8088 	beq.w	800524a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	330c      	adds	r3, #12
 8005162:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005166:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800516a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005172:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800517e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1d9      	bne.n	800513a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3314      	adds	r3, #20
 800518c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3314      	adds	r3, #20
 80051a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e1      	bne.n	8005186 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3314      	adds	r3, #20
 80051c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3314      	adds	r3, #20
 80051e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e3      	bne.n	80051c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800521a:	f023 0310 	bic.w	r3, r3, #16
 800521e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	330c      	adds	r3, #12
 8005228:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800522c:	65ba      	str	r2, [r7, #88]	; 0x58
 800522e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800523a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e3      	bne.n	8005208 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	4618      	mov	r0, r3
 8005246:	f7fd f87a 	bl	800233e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005252:	b29b      	uxth	r3, r3
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	b29b      	uxth	r3, r3
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f8c0 	bl	80053e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005260:	e099      	b.n	8005396 <HAL_UART_IRQHandler+0x50e>
 8005262:	bf00      	nop
 8005264:	0800560f 	.word	0x0800560f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005270:	b29b      	uxth	r3, r3
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 808b 	beq.w	800539a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8086 	beq.w	800539a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80052b2:	647a      	str	r2, [r7, #68]	; 0x44
 80052b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e3      	bne.n	800528e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	623b      	str	r3, [r7, #32]
   return(result);
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3314      	adds	r3, #20
 80052e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052ea:	633a      	str	r2, [r7, #48]	; 0x30
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e3      	bne.n	80052c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	60fb      	str	r3, [r7, #12]
   return(result);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0310 	bic.w	r3, r3, #16
 8005322:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005330:	61fa      	str	r2, [r7, #28]
 8005332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	69b9      	ldr	r1, [r7, #24]
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	617b      	str	r3, [r7, #20]
   return(result);
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e3      	bne.n	800530c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005348:	4619      	mov	r1, r3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f848 	bl	80053e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005350:	e023      	b.n	800539a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <HAL_UART_IRQHandler+0x4ea>
 800535e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f963 	bl	8005636 <UART_Transmit_IT>
    return;
 8005370:	e014      	b.n	800539c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00e      	beq.n	800539c <HAL_UART_IRQHandler+0x514>
 800537e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d008      	beq.n	800539c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f9a3 	bl	80056d6 <UART_EndTransmit_IT>
    return;
 8005390:	e004      	b.n	800539c <HAL_UART_IRQHandler+0x514>
    return;
 8005392:	bf00      	nop
 8005394:	e002      	b.n	800539c <HAL_UART_IRQHandler+0x514>
      return;
 8005396:	bf00      	nop
 8005398:	e000      	b.n	800539c <HAL_UART_IRQHandler+0x514>
      return;
 800539a:	bf00      	nop
  }
}
 800539c:	37e8      	adds	r7, #232	; 0xe8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop

080053a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b090      	sub	sp, #64	; 0x40
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	4613      	mov	r3, r2
 8005406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005408:	e050      	b.n	80054ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d04c      	beq.n	80054ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005414:	2b00      	cmp	r3, #0
 8005416:	d007      	beq.n	8005428 <UART_WaitOnFlagUntilTimeout+0x30>
 8005418:	f7fc fe1e 	bl	8002058 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005424:	429a      	cmp	r2, r3
 8005426:	d241      	bcs.n	80054ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800543e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005448:	637a      	str	r2, [r7, #52]	; 0x34
 800544a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800544e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e5      	bne.n	8005428 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3314      	adds	r3, #20
 8005462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	613b      	str	r3, [r7, #16]
   return(result);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	63bb      	str	r3, [r7, #56]	; 0x38
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3314      	adds	r3, #20
 800547a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800547c:	623a      	str	r2, [r7, #32]
 800547e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	69f9      	ldr	r1, [r7, #28]
 8005482:	6a3a      	ldr	r2, [r7, #32]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	61bb      	str	r3, [r7, #24]
   return(result);
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e00f      	b.n	80054cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4013      	ands	r3, r2
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d09f      	beq.n	800540a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3740      	adds	r7, #64	; 0x40
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	4613      	mov	r3, r2
 80054e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	88fa      	ldrh	r2, [r7, #6]
 80054ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	88fa      	ldrh	r2, [r7, #6]
 80054f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2222      	movs	r2, #34	; 0x22
 80054fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005518:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695a      	ldr	r2, [r3, #20]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0201 	orr.w	r2, r2, #1
 8005528:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0220 	orr.w	r2, r2, #32
 8005538:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005548:	b480      	push	{r7}
 800554a:	b095      	sub	sp, #84	; 0x54
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	330c      	adds	r3, #12
 800556e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005570:	643a      	str	r2, [r7, #64]	; 0x40
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005576:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e5      	bne.n	8005550 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3314      	adds	r3, #20
 800558a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	61fb      	str	r3, [r7, #28]
   return(result);
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f023 0301 	bic.w	r3, r3, #1
 800559a:	64bb      	str	r3, [r7, #72]	; 0x48
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3314      	adds	r3, #20
 80055a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e5      	bne.n	8005584 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d119      	bne.n	80055f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f023 0310 	bic.w	r3, r3, #16
 80055d6:	647b      	str	r3, [r7, #68]	; 0x44
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	330c      	adds	r3, #12
 80055de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055e0:	61ba      	str	r2, [r7, #24]
 80055e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	6979      	ldr	r1, [r7, #20]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	613b      	str	r3, [r7, #16]
   return(result);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e5      	bne.n	80055c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005602:	bf00      	nop
 8005604:	3754      	adds	r7, #84	; 0x54
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7ff fecf 	bl	80053cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b21      	cmp	r3, #33	; 0x21
 8005648:	d13e      	bne.n	80056c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005652:	d114      	bne.n	800567e <UART_Transmit_IT+0x48>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d110      	bne.n	800567e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005670:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	1c9a      	adds	r2, r3, #2
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	621a      	str	r2, [r3, #32]
 800567c:	e008      	b.n	8005690 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	1c59      	adds	r1, r3, #1
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6211      	str	r1, [r2, #32]
 8005688:	781a      	ldrb	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29b      	uxth	r3, r3
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	4619      	mov	r1, r3
 800569e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10f      	bne.n	80056c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	e000      	b.n	80056ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056c8:	2302      	movs	r3, #2
  }
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff fe54 	bl	80053a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b08c      	sub	sp, #48	; 0x30
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b22      	cmp	r3, #34	; 0x22
 8005718:	f040 80ab 	bne.w	8005872 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005724:	d117      	bne.n	8005756 <UART_Receive_IT+0x50>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d113      	bne.n	8005756 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	b29b      	uxth	r3, r3
 8005740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005744:	b29a      	uxth	r2, r3
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	1c9a      	adds	r2, r3, #2
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	629a      	str	r2, [r3, #40]	; 0x28
 8005754:	e026      	b.n	80057a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800575c:	2300      	movs	r3, #0
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005768:	d007      	beq.n	800577a <UART_Receive_IT+0x74>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <UART_Receive_IT+0x82>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	b2da      	uxtb	r2, r3
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	e008      	b.n	800579a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005794:	b2da      	uxtb	r2, r3
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	4619      	mov	r1, r3
 80057b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d15a      	bne.n	800586e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0220 	bic.w	r2, r2, #32
 80057c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0201 	bic.w	r2, r2, #1
 80057e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d135      	bne.n	8005864 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	613b      	str	r3, [r7, #16]
   return(result);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f023 0310 	bic.w	r3, r3, #16
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581e:	623a      	str	r2, [r7, #32]
 8005820:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	69f9      	ldr	r1, [r7, #28]
 8005824:	6a3a      	ldr	r2, [r7, #32]
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	61bb      	str	r3, [r7, #24]
   return(result);
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e5      	bne.n	80057fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b10      	cmp	r3, #16
 800583e:	d10a      	bne.n	8005856 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff fdbf 	bl	80053e0 <HAL_UARTEx_RxEventCallback>
 8005862:	e002      	b.n	800586a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff fda7 	bl	80053b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e002      	b.n	8005874 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005872:	2302      	movs	r3, #2
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	3730      	adds	r7, #48	; 0x30
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	b09f      	sub	sp, #124	; 0x7c
 8005882:	af00      	add	r7, sp, #0
 8005884:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005892:	68d9      	ldr	r1, [r3, #12]
 8005894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	ea40 0301 	orr.w	r3, r0, r1
 800589c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800589e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	431a      	orrs	r2, r3
 80058ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80058b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058c0:	f021 010c 	bic.w	r1, r1, #12
 80058c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058ca:	430b      	orrs	r3, r1
 80058cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058da:	6999      	ldr	r1, [r3, #24]
 80058dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	ea40 0301 	orr.w	r3, r0, r1
 80058e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	4bc5      	ldr	r3, [pc, #788]	; (8005c00 <UART_SetConfig+0x384>)
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d004      	beq.n	80058fa <UART_SetConfig+0x7e>
 80058f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	4bc3      	ldr	r3, [pc, #780]	; (8005c04 <UART_SetConfig+0x388>)
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d103      	bne.n	8005902 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058fa:	f7fd fceb 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 80058fe:	6778      	str	r0, [r7, #116]	; 0x74
 8005900:	e002      	b.n	8005908 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005902:	f7fd fcd3 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8005906:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005910:	f040 80b6 	bne.w	8005a80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005916:	461c      	mov	r4, r3
 8005918:	f04f 0500 	mov.w	r5, #0
 800591c:	4622      	mov	r2, r4
 800591e:	462b      	mov	r3, r5
 8005920:	1891      	adds	r1, r2, r2
 8005922:	6439      	str	r1, [r7, #64]	; 0x40
 8005924:	415b      	adcs	r3, r3
 8005926:	647b      	str	r3, [r7, #68]	; 0x44
 8005928:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800592c:	1912      	adds	r2, r2, r4
 800592e:	eb45 0303 	adc.w	r3, r5, r3
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f04f 0100 	mov.w	r1, #0
 800593a:	00d9      	lsls	r1, r3, #3
 800593c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005940:	00d0      	lsls	r0, r2, #3
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	1911      	adds	r1, r2, r4
 8005948:	6639      	str	r1, [r7, #96]	; 0x60
 800594a:	416b      	adcs	r3, r5
 800594c:	667b      	str	r3, [r7, #100]	; 0x64
 800594e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	461a      	mov	r2, r3
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	1891      	adds	r1, r2, r2
 800595a:	63b9      	str	r1, [r7, #56]	; 0x38
 800595c:	415b      	adcs	r3, r3
 800595e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005960:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005964:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005968:	f7fb f824 	bl	80009b4 <__aeabi_uldivmod>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4ba5      	ldr	r3, [pc, #660]	; (8005c08 <UART_SetConfig+0x38c>)
 8005972:	fba3 2302 	umull	r2, r3, r3, r2
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	011e      	lsls	r6, r3, #4
 800597a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800597c:	461c      	mov	r4, r3
 800597e:	f04f 0500 	mov.w	r5, #0
 8005982:	4622      	mov	r2, r4
 8005984:	462b      	mov	r3, r5
 8005986:	1891      	adds	r1, r2, r2
 8005988:	6339      	str	r1, [r7, #48]	; 0x30
 800598a:	415b      	adcs	r3, r3
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
 800598e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005992:	1912      	adds	r2, r2, r4
 8005994:	eb45 0303 	adc.w	r3, r5, r3
 8005998:	f04f 0000 	mov.w	r0, #0
 800599c:	f04f 0100 	mov.w	r1, #0
 80059a0:	00d9      	lsls	r1, r3, #3
 80059a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059a6:	00d0      	lsls	r0, r2, #3
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	1911      	adds	r1, r2, r4
 80059ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80059b0:	416b      	adcs	r3, r5
 80059b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	461a      	mov	r2, r3
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	1891      	adds	r1, r2, r2
 80059c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80059c2:	415b      	adcs	r3, r3
 80059c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80059ce:	f7fa fff1 	bl	80009b4 <__aeabi_uldivmod>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4b8c      	ldr	r3, [pc, #560]	; (8005c08 <UART_SetConfig+0x38c>)
 80059d8:	fba3 1302 	umull	r1, r3, r3, r2
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	2164      	movs	r1, #100	; 0x64
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	3332      	adds	r3, #50	; 0x32
 80059ea:	4a87      	ldr	r2, [pc, #540]	; (8005c08 <UART_SetConfig+0x38c>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	095b      	lsrs	r3, r3, #5
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059f8:	441e      	add	r6, r3
 80059fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059fc:	4618      	mov	r0, r3
 80059fe:	f04f 0100 	mov.w	r1, #0
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	1894      	adds	r4, r2, r2
 8005a08:	623c      	str	r4, [r7, #32]
 8005a0a:	415b      	adcs	r3, r3
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a12:	1812      	adds	r2, r2, r0
 8005a14:	eb41 0303 	adc.w	r3, r1, r3
 8005a18:	f04f 0400 	mov.w	r4, #0
 8005a1c:	f04f 0500 	mov.w	r5, #0
 8005a20:	00dd      	lsls	r5, r3, #3
 8005a22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a26:	00d4      	lsls	r4, r2, #3
 8005a28:	4622      	mov	r2, r4
 8005a2a:	462b      	mov	r3, r5
 8005a2c:	1814      	adds	r4, r2, r0
 8005a2e:	653c      	str	r4, [r7, #80]	; 0x50
 8005a30:	414b      	adcs	r3, r1
 8005a32:	657b      	str	r3, [r7, #84]	; 0x54
 8005a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	1891      	adds	r1, r2, r2
 8005a40:	61b9      	str	r1, [r7, #24]
 8005a42:	415b      	adcs	r3, r3
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a4e:	f7fa ffb1 	bl	80009b4 <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4b6c      	ldr	r3, [pc, #432]	; (8005c08 <UART_SetConfig+0x38c>)
 8005a58:	fba3 1302 	umull	r1, r3, r3, r2
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	2164      	movs	r1, #100	; 0x64
 8005a60:	fb01 f303 	mul.w	r3, r1, r3
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	3332      	adds	r3, #50	; 0x32
 8005a6a:	4a67      	ldr	r2, [pc, #412]	; (8005c08 <UART_SetConfig+0x38c>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	f003 0207 	and.w	r2, r3, #7
 8005a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4432      	add	r2, r6
 8005a7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a7e:	e0b9      	b.n	8005bf4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a82:	461c      	mov	r4, r3
 8005a84:	f04f 0500 	mov.w	r5, #0
 8005a88:	4622      	mov	r2, r4
 8005a8a:	462b      	mov	r3, r5
 8005a8c:	1891      	adds	r1, r2, r2
 8005a8e:	6139      	str	r1, [r7, #16]
 8005a90:	415b      	adcs	r3, r3
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a98:	1912      	adds	r2, r2, r4
 8005a9a:	eb45 0303 	adc.w	r3, r5, r3
 8005a9e:	f04f 0000 	mov.w	r0, #0
 8005aa2:	f04f 0100 	mov.w	r1, #0
 8005aa6:	00d9      	lsls	r1, r3, #3
 8005aa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005aac:	00d0      	lsls	r0, r2, #3
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	eb12 0804 	adds.w	r8, r2, r4
 8005ab6:	eb43 0905 	adc.w	r9, r3, r5
 8005aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f04f 0100 	mov.w	r1, #0
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	008b      	lsls	r3, r1, #2
 8005ace:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ad2:	0082      	lsls	r2, r0, #2
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	f7fa ff6c 	bl	80009b4 <__aeabi_uldivmod>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4b49      	ldr	r3, [pc, #292]	; (8005c08 <UART_SetConfig+0x38c>)
 8005ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	011e      	lsls	r6, r3, #4
 8005aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aec:	4618      	mov	r0, r3
 8005aee:	f04f 0100 	mov.w	r1, #0
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	1894      	adds	r4, r2, r2
 8005af8:	60bc      	str	r4, [r7, #8]
 8005afa:	415b      	adcs	r3, r3
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b02:	1812      	adds	r2, r2, r0
 8005b04:	eb41 0303 	adc.w	r3, r1, r3
 8005b08:	f04f 0400 	mov.w	r4, #0
 8005b0c:	f04f 0500 	mov.w	r5, #0
 8005b10:	00dd      	lsls	r5, r3, #3
 8005b12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b16:	00d4      	lsls	r4, r2, #3
 8005b18:	4622      	mov	r2, r4
 8005b1a:	462b      	mov	r3, r5
 8005b1c:	1814      	adds	r4, r2, r0
 8005b1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b20:	414b      	adcs	r3, r1
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f04f 0100 	mov.w	r1, #0
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	008b      	lsls	r3, r1, #2
 8005b38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b3c:	0082      	lsls	r2, r0, #2
 8005b3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b42:	f7fa ff37 	bl	80009b4 <__aeabi_uldivmod>
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <UART_SetConfig+0x38c>)
 8005b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b50:	095b      	lsrs	r3, r3, #5
 8005b52:	2164      	movs	r1, #100	; 0x64
 8005b54:	fb01 f303 	mul.w	r3, r1, r3
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	3332      	adds	r3, #50	; 0x32
 8005b5e:	4a2a      	ldr	r2, [pc, #168]	; (8005c08 <UART_SetConfig+0x38c>)
 8005b60:	fba2 2303 	umull	r2, r3, r2, r3
 8005b64:	095b      	lsrs	r3, r3, #5
 8005b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b6a:	441e      	add	r6, r3
 8005b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f04f 0100 	mov.w	r1, #0
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	1894      	adds	r4, r2, r2
 8005b7a:	603c      	str	r4, [r7, #0]
 8005b7c:	415b      	adcs	r3, r3
 8005b7e:	607b      	str	r3, [r7, #4]
 8005b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b84:	1812      	adds	r2, r2, r0
 8005b86:	eb41 0303 	adc.w	r3, r1, r3
 8005b8a:	f04f 0400 	mov.w	r4, #0
 8005b8e:	f04f 0500 	mov.w	r5, #0
 8005b92:	00dd      	lsls	r5, r3, #3
 8005b94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b98:	00d4      	lsls	r4, r2, #3
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	eb12 0a00 	adds.w	sl, r2, r0
 8005ba2:	eb43 0b01 	adc.w	fp, r3, r1
 8005ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f04f 0100 	mov.w	r1, #0
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	008b      	lsls	r3, r1, #2
 8005bba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bbe:	0082      	lsls	r2, r0, #2
 8005bc0:	4650      	mov	r0, sl
 8005bc2:	4659      	mov	r1, fp
 8005bc4:	f7fa fef6 	bl	80009b4 <__aeabi_uldivmod>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <UART_SetConfig+0x38c>)
 8005bce:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	2164      	movs	r1, #100	; 0x64
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	3332      	adds	r3, #50	; 0x32
 8005be0:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <UART_SetConfig+0x38c>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	f003 020f 	and.w	r2, r3, #15
 8005bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4432      	add	r2, r6
 8005bf2:	609a      	str	r2, [r3, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	377c      	adds	r7, #124	; 0x7c
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bfe:	bf00      	nop
 8005c00:	40011000 	.word	0x40011000
 8005c04:	40011400 	.word	0x40011400
 8005c08:	51eb851f 	.word	0x51eb851f

08005c0c <__libc_init_array>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4d0d      	ldr	r5, [pc, #52]	; (8005c44 <__libc_init_array+0x38>)
 8005c10:	4c0d      	ldr	r4, [pc, #52]	; (8005c48 <__libc_init_array+0x3c>)
 8005c12:	1b64      	subs	r4, r4, r5
 8005c14:	10a4      	asrs	r4, r4, #2
 8005c16:	2600      	movs	r6, #0
 8005c18:	42a6      	cmp	r6, r4
 8005c1a:	d109      	bne.n	8005c30 <__libc_init_array+0x24>
 8005c1c:	4d0b      	ldr	r5, [pc, #44]	; (8005c4c <__libc_init_array+0x40>)
 8005c1e:	4c0c      	ldr	r4, [pc, #48]	; (8005c50 <__libc_init_array+0x44>)
 8005c20:	f000 f828 	bl	8005c74 <_init>
 8005c24:	1b64      	subs	r4, r4, r5
 8005c26:	10a4      	asrs	r4, r4, #2
 8005c28:	2600      	movs	r6, #0
 8005c2a:	42a6      	cmp	r6, r4
 8005c2c:	d105      	bne.n	8005c3a <__libc_init_array+0x2e>
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c34:	4798      	blx	r3
 8005c36:	3601      	adds	r6, #1
 8005c38:	e7ee      	b.n	8005c18 <__libc_init_array+0xc>
 8005c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3e:	4798      	blx	r3
 8005c40:	3601      	adds	r6, #1
 8005c42:	e7f2      	b.n	8005c2a <__libc_init_array+0x1e>
 8005c44:	08005cac 	.word	0x08005cac
 8005c48:	08005cac 	.word	0x08005cac
 8005c4c:	08005cac 	.word	0x08005cac
 8005c50:	08005cb0 	.word	0x08005cb0

08005c54 <memset>:
 8005c54:	4402      	add	r2, r0
 8005c56:	4603      	mov	r3, r0
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d100      	bne.n	8005c5e <memset+0xa>
 8005c5c:	4770      	bx	lr
 8005c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c62:	e7f9      	b.n	8005c58 <memset+0x4>

08005c64 <strcpy>:
 8005c64:	4603      	mov	r3, r0
 8005c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c6a:	f803 2b01 	strb.w	r2, [r3], #1
 8005c6e:	2a00      	cmp	r2, #0
 8005c70:	d1f9      	bne.n	8005c66 <strcpy+0x2>
 8005c72:	4770      	bx	lr

08005c74 <_init>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr

08005c80 <_fini>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	bf00      	nop
 8005c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c86:	bc08      	pop	{r3}
 8005c88:	469e      	mov	lr, r3
 8005c8a:	4770      	bx	lr
