
FDCAN_Classic_Frame_Networking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cdc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df4  08002df4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002df4  08002df4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002df4  08002df4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000020  08002e1c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002e1c  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000a1ba  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000b0eb  00000000  00000000  0002a202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a6b  00000000  00000000  000352ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  00036d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b347e  00000000  00000000  000375a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000788  00000000  00000000  000eaa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bedb  00000000  00000000  000eb1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010708b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c30  00000000  00000000  001070e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d84 	.word	0x08002d84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08002d84 	.word	0x08002d84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000224:	f000 fc0a 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 800022a:	490d      	ldr	r1, [pc, #52]	; (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000240:	4c0a      	ldr	r4, [pc, #40]	; (800026c <LoopForever+0x16>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024e:	f002 fd6d 	bl	8002d2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000252:	f000 f80f 	bl	8000274 <main>

08000256 <LoopForever>:

LoopForever:
  b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000264:	08002dfc 	.word	0x08002dfc
  ldr r2, =_sbss
 8000268:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800026c:	20000104 	.word	0x20000104

08000270 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_COMP_IRQHandler>
	...

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 fbec 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f85a 	bl	8000334 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Configure Tamper push-button in interrupt mode */
  BSP_PB_Init(BUTTON_TAMPER, BUTTON_MODE_GPIO);
 8000280:	2100      	movs	r1, #0
 8000282:	2000      	movs	r0, #0
 8000284:	f000 fb64 	bl	8000950 <BSP_PB_Init>

  /* Configure LED1, LED2, LED3 and LED4 */
  BSP_LED_Init(LED1);
 8000288:	2000      	movs	r0, #0
 800028a:	f000 faab 	bl	80007e4 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800028e:	2001      	movs	r0, #1
 8000290:	f000 faa8 	bl	80007e4 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000294:	2002      	movs	r0, #2
 8000296:	f000 faa5 	bl	80007e4 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 800029a:	2003      	movs	r0, #3
 800029c:	f000 faa2 	bl	80007e4 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 f906 	bl	80004b0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002a4:	f000 f8bc 	bl	8000420 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* Configure the FDCAN peripheral */
  FDCAN_Config();
 80002a8:	f000 f918 	bl	80004dc <FDCAN_Config>
  ubKeyNumberValue = 0x4;
 80002ac:	4b1c      	ldr	r3, [pc, #112]	; (8000320 <main+0xac>)
 80002ae:	2204      	movs	r2, #4
 80002b0:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    while (BSP_PB_GetState(BUTTON_TAMPER) == KEY_PRESSED)
 80002b2:	e02f      	b.n	8000314 <main+0xa0>
    {
      if (ubKeyNumber == ubKeyNumberValue)
 80002b4:	4b1b      	ldr	r3, [pc, #108]	; (8000324 <main+0xb0>)
 80002b6:	781a      	ldrb	r2, [r3, #0]
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <main+0xac>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d103      	bne.n	80002c8 <main+0x54>
      {
        ubKeyNumber = 0x00;
 80002c0:	4b18      	ldr	r3, [pc, #96]	; (8000324 <main+0xb0>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
 80002c6:	e025      	b.n	8000314 <main+0xa0>
      }
      else
      {
        LED_Display(++ubKeyNumber);
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <main+0xb0>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <main+0xb0>)
 80002d2:	701a      	strb	r2, [r3, #0]
 80002d4:	4b13      	ldr	r3, [pc, #76]	; (8000324 <main+0xb0>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 f99d 	bl	8000618 <LED_Display>

        /* Set the data to be transmitted */
        TxData[0] = ubKeyNumber;
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <main+0xb0>)
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <main+0xb4>)
 80002e4:	701a      	strb	r2, [r3, #0]
        TxData[1] = 0xAD;
 80002e6:	4b10      	ldr	r3, [pc, #64]	; (8000328 <main+0xb4>)
 80002e8:	22ad      	movs	r2, #173	; 0xad
 80002ea:	705a      	strb	r2, [r3, #1]

        /* Start the Transmission process */
        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80002ec:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <main+0xb4>)
 80002ee:	490f      	ldr	r1, [pc, #60]	; (800032c <main+0xb8>)
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <main+0xbc>)
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 ff65 	bl	80011c2 <HAL_FDCAN_AddMessageToTxFifoQ>
 80002f8:	1e03      	subs	r3, r0, #0
 80002fa:	d001      	beq.n	8000300 <main+0x8c>
        {
          /* Transmission request Error */
          Error_Handler();
 80002fc:	f000 f9c0 	bl	8000680 <Error_Handler>
        }
        HAL_Delay(10);
 8000300:	200a      	movs	r0, #10
 8000302:	f000 fc2d 	bl	8000b60 <HAL_Delay>

        while (BSP_PB_GetState(BUTTON_TAMPER) != KEY_NOT_PRESSED)
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	2000      	movs	r0, #0
 800030a:	f000 fb7f 	bl	8000a0c <BSP_PB_GetState>
 800030e:	0003      	movs	r3, r0
 8000310:	2b01      	cmp	r3, #1
 8000312:	d1f9      	bne.n	8000308 <main+0x94>
    while (BSP_PB_GetState(BUTTON_TAMPER) == KEY_PRESSED)
 8000314:	2000      	movs	r0, #0
 8000316:	f000 fb79 	bl	8000a0c <BSP_PB_GetState>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d0ca      	beq.n	80002b4 <main+0x40>
 800031e:	e7f9      	b.n	8000314 <main+0xa0>
 8000320:	2000003d 	.word	0x2000003d
 8000324:	2000003c 	.word	0x2000003c
 8000328:	200000a4 	.word	0x200000a4
 800032c:	200000b4 	.word	0x200000b4
 8000330:	20000040 	.word	0x20000040

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b0a9      	sub	sp, #164	; 0xa4
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	2464      	movs	r4, #100	; 0x64
 800033c:	193b      	adds	r3, r7, r4
 800033e:	0018      	movs	r0, r3
 8000340:	233c      	movs	r3, #60	; 0x3c
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f002 fd15 	bl	8002d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034a:	2354      	movs	r3, #84	; 0x54
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	0018      	movs	r0, r3
 8000350:	2310      	movs	r3, #16
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f002 fd0d 	bl	8002d74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	0018      	movs	r0, r3
 800035e:	2350      	movs	r3, #80	; 0x50
 8000360:	001a      	movs	r2, r3
 8000362:	2100      	movs	r1, #0
 8000364:	f002 fd06 	bl	8002d74 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000368:	2380      	movs	r3, #128	; 0x80
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	0018      	movs	r0, r3
 800036e:	f001 fd51 	bl	8001e14 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000372:	193b      	adds	r3, r7, r4
 8000374:	2202      	movs	r2, #2
 8000376:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000378:	193b      	adds	r3, r7, r4
 800037a:	2280      	movs	r2, #128	; 0x80
 800037c:	0052      	lsls	r2, r2, #1
 800037e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000380:	0021      	movs	r1, r4
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2240      	movs	r2, #64	; 0x40
 800038c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2202      	movs	r2, #2
 8000392:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2202      	movs	r2, #2
 8000398:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2200      	movs	r2, #0
 800039e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2208      	movs	r2, #8
 80003a4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	0292      	lsls	r2, r2, #10
 80003ac:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	0492      	lsls	r2, r2, #18
 80003b4:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2280      	movs	r2, #128	; 0x80
 80003ba:	0592      	lsls	r2, r2, #22
 80003bc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 fd67 	bl	8001e94 <HAL_RCC_OscConfig>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ca:	f000 f959 	bl	8000680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ce:	2154      	movs	r1, #84	; 0x54
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2207      	movs	r2, #7
 80003d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2202      	movs	r2, #2
 80003da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2200      	movs	r2, #0
 80003e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2102      	movs	r1, #2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f002 f8b7 	bl	8002560 <HAL_RCC_ClockConfig>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80003f6:	f000 f943 	bl	8000680 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	0492      	lsls	r2, r2, #18
 8000400:	601a      	str	r2, [r3, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2200      	movs	r2, #0
 8000406:	64da      	str	r2, [r3, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	0018      	movs	r0, r3
 800040c:	f002 fa32 	bl	8002874 <HAL_RCCEx_PeriphCLKConfig>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000414:	f000 f934 	bl	8000680 <Error_Handler>
  }
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b029      	add	sp, #164	; 0xa4
 800041e:	bd90      	pop	{r4, r7, pc}

08000420 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000424:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <MX_FDCAN1_Init+0x8c>)
 8000428:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800042c:	2200      	movs	r2, #0
 800042e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000430:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000432:	22c0      	movs	r2, #192	; 0xc0
 8000434:	0092      	lsls	r2, r2, #2
 8000436:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000440:	2201      	movs	r2, #1
 8000442:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000446:	2201      	movs	r2, #1
 8000448:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800044c:	2200      	movs	r2, #0
 800044e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000452:	2201      	movs	r2, #1
 8000454:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000458:	2210      	movs	r2, #16
 800045a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800045e:	223f      	movs	r2, #63	; 0x3f
 8000460:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000464:	2210      	movs	r2, #16
 8000466:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800046a:	2201      	movs	r2, #1
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000470:	2204      	movs	r2, #4
 8000472:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000476:	2205      	movs	r2, #5
 8000478:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800047c:	2204      	movs	r2, #4
 800047e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000482:	2201      	movs	r2, #1
 8000484:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000488:	2200      	movs	r2, #0
 800048a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800048e:	2200      	movs	r2, #0
 8000490:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000494:	0018      	movs	r0, r3
 8000496:	f000 fc7b 	bl	8000d90 <HAL_FDCAN_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800049e:	f000 f8ef 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000040 	.word	0x20000040
 80004ac:	40006400 	.word	0x40006400

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <MX_GPIO_Init+0x28>)
 80004b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ba:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <MX_GPIO_Init+0x28>)
 80004bc:	2108      	movs	r1, #8
 80004be:	430a      	orrs	r2, r1
 80004c0:	635a      	str	r2, [r3, #52]	; 0x34
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <MX_GPIO_Init+0x28>)
 80004c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c6:	2208      	movs	r2, #8
 80004c8:	4013      	ands	r3, r2
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	40021000 	.word	0x40021000

080004dc <FDCAN_Config>:
  * @brief  Configures the FDCAN.
  * @param  None
  * @retval None
  */
static void FDCAN_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af02      	add	r7, sp, #8
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80004e2:	003b      	movs	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 80004e8:	003b      	movs	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80004ee:	003b      	movs	r3, r7
 80004f0:	2202      	movs	r2, #2
 80004f2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80004f4:	003b      	movs	r3, r7
 80004f6:	2201      	movs	r2, #1
 80004f8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x321;
 80004fa:	003b      	movs	r3, r7
 80004fc:	4a26      	ldr	r2, [pc, #152]	; (8000598 <FDCAN_Config+0xbc>)
 80004fe:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8000500:	003b      	movs	r3, r7
 8000502:	4a26      	ldr	r2, [pc, #152]	; (800059c <FDCAN_Config+0xc0>)
 8000504:	615a      	str	r2, [r3, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000506:	003a      	movs	r2, r7
 8000508:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <FDCAN_Config+0xc4>)
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fda5 	bl	800105c <HAL_FDCAN_ConfigFilter>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <FDCAN_Config+0x3e>
  {
    Error_Handler();
 8000516:	f000 f8b3 	bl	8000680 <Error_Handler>
  }

  /* Configure global filter:
     Filter all remote frames with STD and EXT ID
     Reject non matching frames with STD ID and EXT ID */
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 800051a:	4821      	ldr	r0, [pc, #132]	; (80005a0 <FDCAN_Config+0xc4>)
 800051c:	2300      	movs	r3, #0
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2300      	movs	r3, #0
 8000522:	2202      	movs	r2, #2
 8000524:	2102      	movs	r1, #2
 8000526:	f000 fdf6 	bl	8001116 <HAL_FDCAN_ConfigGlobalFilter>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <FDCAN_Config+0x56>
  {
    Error_Handler();
 800052e:	f000 f8a7 	bl	8000680 <Error_Handler>
  }

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000532:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <FDCAN_Config+0xc4>)
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fe1e 	bl	8001176 <HAL_FDCAN_Start>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <FDCAN_Config+0x66>
  {
    Error_Handler();
 800053e:	f000 f89f 	bl	8000680 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <FDCAN_Config+0xc4>)
 8000544:	2200      	movs	r2, #0
 8000546:	2101      	movs	r1, #1
 8000548:	0018      	movs	r0, r3
 800054a:	f000 ff61 	bl	8001410 <HAL_FDCAN_ActivateNotification>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <FDCAN_Config+0x7a>
  {
    Error_Handler();
 8000552:	f000 f895 	bl	8000680 <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x321;
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <FDCAN_Config+0xc8>)
 8000558:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <FDCAN_Config+0xbc>)
 800055a:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <FDCAN_Config+0xc8>)
 800055e:	2200      	movs	r2, #0
 8000560:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <FDCAN_Config+0xc8>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <FDCAN_Config+0xc8>)
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	0292      	lsls	r2, r2, #10
 800056e:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <FDCAN_Config+0xc8>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <FDCAN_Config+0xc8>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <FDCAN_Config+0xc8>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <FDCAN_Config+0xc8>)
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <FDCAN_Config+0xc8>)
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b006      	add	sp, #24
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	00000321 	.word	0x00000321
 800059c:	000007ff 	.word	0x000007ff
 80005a0:	20000040 	.word	0x20000040
 80005a4:	200000b4 	.word	0x200000b4

080005a8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	2201      	movs	r2, #1
 80005b6:	4013      	ands	r3, r2
 80005b8:	d021      	beq.n	80005fe <HAL_FDCAN_RxFifo0Callback+0x56>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80005bc:	4a13      	ldr	r2, [pc, #76]	; (800060c <HAL_FDCAN_RxFifo0Callback+0x64>)
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	f000 fe43 	bl	800124c <HAL_FDCAN_GetRxMessage>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <HAL_FDCAN_RxFifo0Callback+0x26>
    {
    Error_Handler();
 80005ca:	f000 f859 	bl	8000680 <Error_Handler>
    }

    /* Display LEDx */
    if ((RxHeader.Identifier == 0x321) && (RxHeader.IdType == FDCAN_STANDARD_ID) && (RxHeader.DataLength == FDCAN_DLC_BYTES_2))
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_FDCAN_RxFifo0Callback+0x64>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <HAL_FDCAN_RxFifo0Callback+0x68>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d112      	bne.n	80005fe <HAL_FDCAN_RxFifo0Callback+0x56>
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_FDCAN_RxFifo0Callback+0x64>)
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d10e      	bne.n	80005fe <HAL_FDCAN_RxFifo0Callback+0x56>
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_FDCAN_RxFifo0Callback+0x64>)
 80005e2:	68da      	ldr	r2, [r3, #12]
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	029b      	lsls	r3, r3, #10
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d108      	bne.n	80005fe <HAL_FDCAN_RxFifo0Callback+0x56>
    {
      LED_Display(RxData[0]);
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 f811 	bl	8000618 <LED_Display>
      ubKeyNumber = RxData[0];
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 80005fc:	701a      	strb	r2, [r3, #0]
    }
  }
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b002      	add	sp, #8
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	200000ac 	.word	0x200000ac
 800060c:	200000d8 	.word	0x200000d8
 8000610:	00000321 	.word	0x00000321
 8000614:	2000003c 	.word	0x2000003c

08000618 <LED_Display>:
  * @brief  Turns ON/OFF the dedicated LED.
  * @param  LedStatus: LED number from 1 to 4
  * @retval None
  */
void LED_Display(uint8_t LedStatus)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	0002      	movs	r2, r0
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	701a      	strb	r2, [r3, #0]
  /* Turn OFF all LEDs */
  BSP_LED_Off(LED1);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f977 	bl	8000918 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 f974 	bl	8000918 <BSP_LED_Off>
  BSP_LED_Off(LED3);
 8000630:	2002      	movs	r0, #2
 8000632:	f000 f971 	bl	8000918 <BSP_LED_Off>
  BSP_LED_Off(LED4);
 8000636:	2003      	movs	r0, #3
 8000638:	f000 f96e 	bl	8000918 <BSP_LED_Off>

  switch(LedStatus)
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b04      	cmp	r3, #4
 8000642:	d014      	beq.n	800066e <LED_Display+0x56>
 8000644:	dc17      	bgt.n	8000676 <LED_Display+0x5e>
 8000646:	2b03      	cmp	r3, #3
 8000648:	d00d      	beq.n	8000666 <LED_Display+0x4e>
 800064a:	dc14      	bgt.n	8000676 <LED_Display+0x5e>
 800064c:	2b01      	cmp	r3, #1
 800064e:	d002      	beq.n	8000656 <LED_Display+0x3e>
 8000650:	2b02      	cmp	r3, #2
 8000652:	d004      	beq.n	800065e <LED_Display+0x46>
      /* Turn ON LED4 */
      BSP_LED_On(LED4);
      break;

    default:
      break;
 8000654:	e00f      	b.n	8000676 <LED_Display+0x5e>
      BSP_LED_On(LED1);
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f942 	bl	80008e0 <BSP_LED_On>
      break;
 800065c:	e00c      	b.n	8000678 <LED_Display+0x60>
      BSP_LED_On(LED2);
 800065e:	2001      	movs	r0, #1
 8000660:	f000 f93e 	bl	80008e0 <BSP_LED_On>
      break;
 8000664:	e008      	b.n	8000678 <LED_Display+0x60>
      BSP_LED_On(LED3);
 8000666:	2002      	movs	r0, #2
 8000668:	f000 f93a 	bl	80008e0 <BSP_LED_On>
      break;
 800066c:	e004      	b.n	8000678 <LED_Display+0x60>
      BSP_LED_On(LED4);
 800066e:	2003      	movs	r0, #3
 8000670:	f000 f936 	bl	80008e0 <BSP_LED_On>
      break;
 8000674:	e000      	b.n	8000678 <LED_Display+0x60>
      break;
 8000676:	46c0      	nop			; (mov r8, r8)
  }
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b002      	add	sp, #8
 800067e:	bd80      	pop	{r7, pc}

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Turn LED1, LED2, LED3 and LED4 on */
  BSP_LED_On(LED1);
 8000684:	2000      	movs	r0, #0
 8000686:	f000 f92b 	bl	80008e0 <BSP_LED_On>
  BSP_LED_On(LED2);
 800068a:	2001      	movs	r0, #1
 800068c:	f000 f928 	bl	80008e0 <BSP_LED_On>
  BSP_LED_On(LED3);
 8000690:	2002      	movs	r0, #2
 8000692:	f000 f925 	bl	80008e0 <BSP_LED_On>
  BSP_LED_On(LED4);
 8000696:	2003      	movs	r0, #3
 8000698:	f000 f922 	bl	80008e0 <BSP_LED_On>

  while(1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x1c>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <HAL_MspInit+0x4c>)
 80006a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <HAL_MspInit+0x4c>)
 80006ac:	2101      	movs	r1, #1
 80006ae:	430a      	orrs	r2, r1
 80006b0:	641a      	str	r2, [r3, #64]	; 0x40
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <HAL_MspInit+0x4c>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	2201      	movs	r2, #1
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <HAL_MspInit+0x4c>)
 80006c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_MspInit+0x4c>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0549      	lsls	r1, r1, #21
 80006c8:	430a      	orrs	r2, r1
 80006ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <HAL_MspInit+0x4c>)
 80006ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	055b      	lsls	r3, r3, #21
 80006d4:	4013      	ands	r3, r2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80006da:	23c0      	movs	r3, #192	; 0xc0
 80006dc:	00db      	lsls	r3, r3, #3
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 fa62 	bl	8000ba8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b002      	add	sp, #8
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000

080006f0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b08b      	sub	sp, #44	; 0x2c
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	2414      	movs	r4, #20
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	0018      	movs	r0, r3
 80006fe:	2314      	movs	r3, #20
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f002 fb36 	bl	8002d74 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <HAL_FDCAN_MspInit+0x9c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d138      	bne.n	8000784 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <HAL_FDCAN_MspInit+0xa0>)
 8000714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <HAL_FDCAN_MspInit+0xa0>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0149      	lsls	r1, r1, #5
 800071c:	430a      	orrs	r2, r1
 800071e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <HAL_FDCAN_MspInit+0xa0>)
 8000722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	015b      	lsls	r3, r3, #5
 8000728:	4013      	ands	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <HAL_FDCAN_MspInit+0xa0>)
 8000730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_FDCAN_MspInit+0xa0>)
 8000734:	2108      	movs	r1, #8
 8000736:	430a      	orrs	r2, r1
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <HAL_FDCAN_MspInit+0xa0>)
 800073c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073e:	2208      	movs	r2, #8
 8000740:	4013      	ands	r3, r2
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD12     ------> FDCAN1_RX
    PD13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	22c0      	movs	r2, #192	; 0xc0
 800074a:	0192      	lsls	r2, r2, #6
 800074c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	0021      	movs	r1, r4
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2202      	movs	r2, #2
 8000754:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2203      	movs	r2, #3
 8000760:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2203      	movs	r2, #3
 8000766:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000768:	187b      	adds	r3, r7, r1
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <HAL_FDCAN_MspInit+0xa4>)
 800076c:	0019      	movs	r1, r3
 800076e:	0010      	movs	r0, r2
 8000770:	f001 f9aa 	bl	8001ac8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2015      	movs	r0, #21
 800077a:	f000 fad7 	bl	8000d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 800077e:	2015      	movs	r0, #21
 8000780:	f000 fae9 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b00b      	add	sp, #44	; 0x2c
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	40006400 	.word	0x40006400
 8000790:	40021000 	.word	0x40021000
 8000794:	50000c00 	.word	0x50000c00

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c0:	f000 f9b2 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 fef2 	bl	80015bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	20000040 	.word	0x20000040

080007e4 <BSP_LED_Init>:
*     @arg LED3
*     @arg LED4
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10c      	bne.n	8000812 <BSP_LED_Init+0x2e>
 80007f8:	4b36      	ldr	r3, [pc, #216]	; (80008d4 <BSP_LED_Init+0xf0>)
 80007fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007fc:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <BSP_LED_Init+0xf0>)
 80007fe:	2108      	movs	r1, #8
 8000800:	430a      	orrs	r2, r1
 8000802:	635a      	str	r2, [r3, #52]	; 0x34
 8000804:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <BSP_LED_Init+0xf0>)
 8000806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000808:	2208      	movs	r2, #8
 800080a:	4013      	ands	r3, r2
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	e031      	b.n	8000876 <BSP_LED_Init+0x92>
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d10c      	bne.n	8000834 <BSP_LED_Init+0x50>
 800081a:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <BSP_LED_Init+0xf0>)
 800081c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <BSP_LED_Init+0xf0>)
 8000820:	2108      	movs	r1, #8
 8000822:	430a      	orrs	r2, r1
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <BSP_LED_Init+0xf0>)
 8000828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082a:	2208      	movs	r2, #8
 800082c:	4013      	ands	r3, r2
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	e020      	b.n	8000876 <BSP_LED_Init+0x92>
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d10c      	bne.n	8000856 <BSP_LED_Init+0x72>
 800083c:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <BSP_LED_Init+0xf0>)
 800083e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000840:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <BSP_LED_Init+0xf0>)
 8000842:	2108      	movs	r1, #8
 8000844:	430a      	orrs	r2, r1
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <BSP_LED_Init+0xf0>)
 800084a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084c:	2208      	movs	r2, #8
 800084e:	4013      	ands	r3, r2
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	e00f      	b.n	8000876 <BSP_LED_Init+0x92>
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b03      	cmp	r3, #3
 800085c:	d10b      	bne.n	8000876 <BSP_LED_Init+0x92>
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <BSP_LED_Init+0xf0>)
 8000860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <BSP_LED_Init+0xf0>)
 8000864:	2108      	movs	r1, #8
 8000866:	430a      	orrs	r2, r1
 8000868:	635a      	str	r2, [r3, #52]	; 0x34
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <BSP_LED_Init+0xf0>)
 800086c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800086e:	2208      	movs	r2, #8
 8000870:	4013      	ands	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <BSP_LED_Init+0xf4>)
 800087c:	0052      	lsls	r2, r2, #1
 800087e:	5ad3      	ldrh	r3, [r2, r3]
 8000880:	001a      	movs	r2, r3
 8000882:	211c      	movs	r1, #28
 8000884:	187b      	adds	r3, r7, r1
 8000886:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2201      	movs	r2, #1
 800088c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2201      	movs	r2, #1
 8000892:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2203      	movs	r2, #3
 8000898:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <BSP_LED_Init+0xf8>)
 80008a0:	0092      	lsls	r2, r2, #2
 80008a2:	58d3      	ldr	r3, [r2, r3]
 80008a4:	187a      	adds	r2, r7, r1
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 f90d 	bl	8001ac8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <BSP_LED_Init+0xf8>)
 80008b4:	0092      	lsls	r2, r2, #2
 80008b6:	58d0      	ldr	r0, [r2, r3]
 80008b8:	1dfb      	adds	r3, r7, #7
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <BSP_LED_Init+0xf4>)
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	5ad3      	ldrh	r3, [r2, r3]
 80008c2:	2201      	movs	r2, #1
 80008c4:	0019      	movs	r1, r3
 80008c6:	f001 fa88 	bl	8001dda <HAL_GPIO_WritePin>
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b00c      	add	sp, #48	; 0x30
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	40021000 	.word	0x40021000
 80008d8:	08002d9c 	.word	0x08002d9c
 80008dc:	20000000 	.word	0x20000000

080008e0 <BSP_LED_On>:
*     @arg LED3
*     @arg LED4
* @retval None
*/
void BSP_LED_On(Led_TypeDef Led)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	0002      	movs	r2, r0
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <BSP_LED_On+0x30>)
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	58d0      	ldr	r0, [r2, r3]
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <BSP_LED_On+0x34>)
 80008fc:	0052      	lsls	r2, r2, #1
 80008fe:	5ad3      	ldrh	r3, [r2, r3]
 8000900:	2200      	movs	r2, #0
 8000902:	0019      	movs	r1, r3
 8000904:	f001 fa69 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b002      	add	sp, #8
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000000 	.word	0x20000000
 8000914:	08002d9c 	.word	0x08002d9c

08000918 <BSP_LED_Off>:
*     @arg LED3
*     @arg LED4
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	0002      	movs	r2, r0
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <BSP_LED_Off+0x30>)
 800092a:	0092      	lsls	r2, r2, #2
 800092c:	58d0      	ldr	r0, [r2, r3]
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <BSP_LED_Off+0x34>)
 8000934:	0052      	lsls	r2, r2, #1
 8000936:	5ad3      	ldrh	r3, [r2, r3]
 8000938:	2201      	movs	r2, #1
 800093a:	0019      	movs	r1, r3
 800093c:	f001 fa4d 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	08002d9c 	.word	0x08002d9c

08000950 <BSP_PB_Init>:
*     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
*                            with interrupt generation capability
* @retval None
*/
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Mode)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
 8000956:	0002      	movs	r2, r0
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	1dbb      	adds	r3, r7, #6
 800095e:	1c0a      	adds	r2, r1, #0
 8000960:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the Tamper Clock */
  TAMPERx_GPIO_CLK_ENABLE(Button);
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10b      	bne.n	8000982 <BSP_PB_Init+0x32>
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <BSP_PB_Init+0xb4>)
 800096c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <BSP_PB_Init+0xb4>)
 8000970:	2104      	movs	r1, #4
 8000972:	430a      	orrs	r2, r1
 8000974:	635a      	str	r2, [r3, #52]	; 0x34
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <BSP_PB_Init+0xb4>)
 8000978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800097a:	2204      	movs	r2, #4
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	001a      	movs	r2, r3
 8000988:	210c      	movs	r1, #12
 800098a:	187b      	adds	r3, r7, r1
 800098c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2202      	movs	r2, #2
 8000992:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2203      	movs	r2, #3
 8000998:	60da      	str	r2, [r3, #12]

  if (Mode == BUTTON_MODE_GPIO)
 800099a:	1dbb      	adds	r3, r7, #6
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10c      	bne.n	80009bc <BSP_PB_Init+0x6c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <BSP_PB_Init+0xb8>)
 80009ae:	0092      	lsls	r2, r2, #2
 80009b0:	58d3      	ldr	r3, [r2, r3]
 80009b2:	187a      	adds	r2, r7, r1
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f001 f886 	bl	8001ac8 <HAL_GPIO_Init>
  }

  if (Mode == BUTTON_MODE_EXTI)
 80009bc:	1dbb      	adds	r3, r7, #6
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d11a      	bne.n	80009fa <BSP_PB_Init+0xaa>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c4:	210c      	movs	r1, #12
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2284      	movs	r2, #132	; 0x84
 80009ca:	0392      	lsls	r2, r2, #14
 80009cc:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <BSP_PB_Init+0xb8>)
 80009d4:	0092      	lsls	r2, r2, #2
 80009d6:	58d3      	ldr	r3, [r2, r3]
 80009d8:	187a      	adds	r2, r7, r1
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 f873 	bl	8001ac8 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03, 0x00);
 80009e2:	2307      	movs	r3, #7
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	2200      	movs	r2, #0
 80009e8:	2103      	movs	r1, #3
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f99e 	bl	8000d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80009f0:	2307      	movs	r3, #7
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 f9ae 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  }
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b008      	add	sp, #32
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40021000 	.word	0x40021000
 8000a08:	20000010 	.word	0x20000010

08000a0c <BSP_PB_GetState>:
*   This parameter can be one of the following values:
*     @arg BUTTON_TAMPER: Tamper Push Button
* @retval The Button GPIO pin value
*/
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	0002      	movs	r2, r0
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	701a      	strb	r2, [r3, #0]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <BSP_PB_GetState+0x2c>)
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	58d3      	ldr	r3, [r2, r3]
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	0192      	lsls	r2, r2, #6
 8000a26:	0011      	movs	r1, r2
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f001 f9b9 	bl	8001da0 <HAL_GPIO_ReadPin>
 8000a2e:	0003      	movs	r3, r0
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b002      	add	sp, #8
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000010 	.word	0x20000010

08000a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <SystemInit+0x14>)
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	0512      	lsls	r2, r2, #20
 8000a46:	609a      	str	r2, [r3, #8]
#endif
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_Init+0x3c>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_Init+0x3c>)
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	0049      	lsls	r1, r1, #1
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 f810 	bl	8000a94 <HAL_InitTick>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	e001      	b.n	8000a84 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff fe0e 	bl	80006a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40022000 	.word	0x40022000

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <HAL_InitTick+0x88>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d02b      	beq.n	8000b04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_InitTick+0x8c>)
 8000aae:	681c      	ldr	r4, [r3, #0]
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_InitTick+0x88>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	23fa      	movs	r3, #250	; 0xfa
 8000ab8:	0098      	lsls	r0, r3, #2
 8000aba:	f7ff fb25 	bl	8000108 <__udivsi3>
 8000abe:	0003      	movs	r3, r0
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	0020      	movs	r0, r4
 8000ac4:	f7ff fb20 	bl	8000108 <__udivsi3>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f953 	bl	8000d76 <HAL_SYSTICK_Config>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d112      	bne.n	8000afa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d80a      	bhi.n	8000af0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	2301      	movs	r3, #1
 8000ade:	425b      	negs	r3, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f922 	bl	8000d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_InitTick+0x90>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e00d      	b.n	8000b0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000af0:	230f      	movs	r3, #15
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e008      	b.n	8000b0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afa:	230f      	movs	r3, #15
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e003      	b.n	8000b0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b04:	230f      	movs	r3, #15
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	781b      	ldrb	r3, [r3, #0]
}
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b005      	add	sp, #20
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	2000001c 	.word	0x2000001c
 8000b20:	20000014 	.word	0x20000014
 8000b24:	20000018 	.word	0x20000018

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_IncTick+0x1c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	001a      	movs	r2, r3
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x20>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	18d2      	adds	r2, r2, r3
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_IncTick+0x20>)
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	2000001c 	.word	0x2000001c
 8000b48:	20000100 	.word	0x20000100

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b02      	ldr	r3, [pc, #8]	; (8000b5c <HAL_GetTick+0x10>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000100 	.word	0x20000100

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff fff0 	bl	8000b4c <HAL_GetTick>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3301      	adds	r3, #1
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	001a      	movs	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	189b      	adds	r3, r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	f7ff ffe0 	bl	8000b4c <HAL_GetTick>
 8000b8c:	0002      	movs	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	2000001c 	.word	0x2000001c

08000ba8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	0019      	movs	r1, r3
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	40010000 	.word	0x40010000
 8000bd0:	fffff9ff 	.word	0xfffff9ff

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	0002      	movs	r2, r0
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b7f      	cmp	r3, #127	; 0x7f
 8000be6:	d809      	bhi.n	8000bfc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	001a      	movs	r2, r3
 8000bee:	231f      	movs	r3, #31
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_EnableIRQ+0x30>)
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	000a      	movs	r2, r1
 8000bfa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	0002      	movs	r2, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c1c:	d828      	bhi.n	8000c70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c1e:	4a2f      	ldr	r2, [pc, #188]	; (8000cdc <__NVIC_SetPriority+0xd4>)
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	33c0      	adds	r3, #192	; 0xc0
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	589b      	ldr	r3, [r3, r2]
 8000c2e:	1dfa      	adds	r2, r7, #7
 8000c30:	7812      	ldrb	r2, [r2, #0]
 8000c32:	0011      	movs	r1, r2
 8000c34:	2203      	movs	r2, #3
 8000c36:	400a      	ands	r2, r1
 8000c38:	00d2      	lsls	r2, r2, #3
 8000c3a:	21ff      	movs	r1, #255	; 0xff
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	000a      	movs	r2, r1
 8000c40:	43d2      	mvns	r2, r2
 8000c42:	401a      	ands	r2, r3
 8000c44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	019b      	lsls	r3, r3, #6
 8000c4a:	22ff      	movs	r2, #255	; 0xff
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	0018      	movs	r0, r3
 8000c54:	2303      	movs	r3, #3
 8000c56:	4003      	ands	r3, r0
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5c:	481f      	ldr	r0, [pc, #124]	; (8000cdc <__NVIC_SetPriority+0xd4>)
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	430a      	orrs	r2, r1
 8000c68:	33c0      	adds	r3, #192	; 0xc0
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c6e:	e031      	b.n	8000cd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <__NVIC_SetPriority+0xd8>)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	0019      	movs	r1, r3
 8000c78:	230f      	movs	r3, #15
 8000c7a:	400b      	ands	r3, r1
 8000c7c:	3b08      	subs	r3, #8
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	3306      	adds	r3, #6
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	18d3      	adds	r3, r2, r3
 8000c86:	3304      	adds	r3, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	1dfa      	adds	r2, r7, #7
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	0011      	movs	r1, r2
 8000c90:	2203      	movs	r2, #3
 8000c92:	400a      	ands	r2, r1
 8000c94:	00d2      	lsls	r2, r2, #3
 8000c96:	21ff      	movs	r1, #255	; 0xff
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	000a      	movs	r2, r1
 8000c9c:	43d2      	mvns	r2, r2
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	22ff      	movs	r2, #255	; 0xff
 8000ca8:	401a      	ands	r2, r3
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	4003      	ands	r3, r0
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <__NVIC_SetPriority+0xd8>)
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	001c      	movs	r4, r3
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	4023      	ands	r3, r4
 8000cc4:	3b08      	subs	r3, #8
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	3306      	adds	r3, #6
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	18c3      	adds	r3, r0, r3
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b003      	add	sp, #12
 8000cda:	bd90      	pop	{r4, r7, pc}
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	1e5a      	subs	r2, r3, #1
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	045b      	lsls	r3, r3, #17
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d301      	bcc.n	8000cfc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e010      	b.n	8000d1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <SysTick_Config+0x44>)
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	3a01      	subs	r2, #1
 8000d02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d04:	2301      	movs	r3, #1
 8000d06:	425b      	negs	r3, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff ff7c 	bl	8000c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SysTick_Config+0x44>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <SysTick_Config+0x44>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	0018      	movs	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	210f      	movs	r1, #15
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	1c02      	adds	r2, r0, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b25b      	sxtb	r3, r3
 8000d46:	0011      	movs	r1, r2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff ff5d 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b004      	add	sp, #16
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	0002      	movs	r2, r0
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff ff33 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff ffaf 	bl	8000ce4 <SysTick_Config>
 8000d86:	0003      	movs	r3, r0
}
 8000d88:	0018      	movs	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b002      	add	sp, #8
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e14e      	b.n	8001040 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	225c      	movs	r2, #92	; 0x5c
 8000da6:	5c9b      	ldrb	r3, [r3, r2]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d107      	bne.n	8000dbe <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	225d      	movs	r2, #93	; 0x5d
 8000db2:	2100      	movs	r1, #0
 8000db4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff fc99 	bl	80006f0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	699a      	ldr	r2, [r3, #24]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2110      	movs	r1, #16
 8000dca:	438a      	bics	r2, r1
 8000dcc:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dce:	f7ff febd 	bl	8000b4c <HAL_GetTick>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dd6:	e012      	b.n	8000dfe <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000dd8:	f7ff feb8 	bl	8000b4c <HAL_GetTick>
 8000ddc:	0002      	movs	r2, r0
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b0a      	cmp	r3, #10
 8000de4:	d90b      	bls.n	8000dfe <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	2201      	movs	r2, #1
 8000dec:	431a      	orrs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	225c      	movs	r2, #92	; 0x5c
 8000df6:	2103      	movs	r1, #3
 8000df8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e120      	b.n	8001040 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	2208      	movs	r2, #8
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d0e5      	beq.n	8000dd8 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	699a      	ldr	r2, [r3, #24]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2101      	movs	r1, #1
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e1c:	f7ff fe96 	bl	8000b4c <HAL_GetTick>
 8000e20:	0003      	movs	r3, r0
 8000e22:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e24:	e012      	b.n	8000e4c <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e26:	f7ff fe91 	bl	8000b4c <HAL_GetTick>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b0a      	cmp	r3, #10
 8000e32:	d90b      	bls.n	8000e4c <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e38:	2201      	movs	r2, #1
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	225c      	movs	r2, #92	; 0x5c
 8000e44:	2103      	movs	r1, #3
 8000e46:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e0f9      	b.n	8001040 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	2201      	movs	r2, #1
 8000e54:	4013      	ands	r3, r2
 8000e56:	d0e6      	beq.n	8000e26 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	699a      	ldr	r2, [r3, #24]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2102      	movs	r1, #2
 8000e64:	430a      	orrs	r2, r1
 8000e66:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a76      	ldr	r2, [pc, #472]	; (8001048 <HAL_FDCAN_Init+0x2b8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d103      	bne.n	8000e7a <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000e72:	4a76      	ldr	r2, [pc, #472]	; (800104c <HAL_FDCAN_Init+0x2bc>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7c1b      	ldrb	r3, [r3, #16]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	699a      	ldr	r2, [r3, #24]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2140      	movs	r1, #64	; 0x40
 8000e8e:	438a      	bics	r2, r1
 8000e90:	619a      	str	r2, [r3, #24]
 8000e92:	e007      	b.n	8000ea4 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	699a      	ldr	r2, [r3, #24]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2140      	movs	r1, #64	; 0x40
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7c5b      	ldrb	r3, [r3, #17]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d109      	bne.n	8000ec0 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	699a      	ldr	r2, [r3, #24]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	01c9      	lsls	r1, r1, #7
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	619a      	str	r2, [r3, #24]
 8000ebe:	e007      	b.n	8000ed0 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	699a      	ldr	r2, [r3, #24]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4961      	ldr	r1, [pc, #388]	; (8001050 <HAL_FDCAN_Init+0x2c0>)
 8000ecc:	400a      	ands	r2, r1
 8000ece:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7c9b      	ldrb	r3, [r3, #18]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d108      	bne.n	8000eea <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	699a      	ldr	r2, [r3, #24]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	495c      	ldr	r1, [pc, #368]	; (8001054 <HAL_FDCAN_Init+0x2c4>)
 8000ee4:	400a      	ands	r2, r1
 8000ee6:	619a      	str	r2, [r3, #24]
 8000ee8:	e008      	b.n	8000efc <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	699a      	ldr	r2, [r3, #24]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	0149      	lsls	r1, r1, #5
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4a55      	ldr	r2, [pc, #340]	; (8001058 <HAL_FDCAN_Init+0x2c8>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	0019      	movs	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	430a      	orrs	r2, r1
 8000f12:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	699a      	ldr	r2, [r3, #24]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	21a4      	movs	r1, #164	; 0xa4
 8000f20:	438a      	bics	r2, r1
 8000f22:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2110      	movs	r1, #16
 8000f30:	438a      	bics	r2, r1
 8000f32:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d108      	bne.n	8000f4e <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	699a      	ldr	r2, [r3, #24]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2104      	movs	r1, #4
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	619a      	str	r2, [r3, #24]
 8000f4c:	e02c      	b.n	8000fa8 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d028      	beq.n	8000fa8 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d01c      	beq.n	8000f98 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	699a      	ldr	r2, [r3, #24]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	691a      	ldr	r2, [r3, #16]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2110      	movs	r1, #16
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d110      	bne.n	8000fa8 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	699a      	ldr	r2, [r3, #24]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2120      	movs	r1, #32
 8000f92:	430a      	orrs	r2, r1
 8000f94:	619a      	str	r2, [r3, #24]
 8000f96:	e007      	b.n	8000fa8 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	699a      	ldr	r2, [r3, #24]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fb8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fd0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fd2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	23c0      	movs	r3, #192	; 0xc0
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d115      	bne.n	800100c <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	3b01      	subs	r3, #1
 8000fec:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fee:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	3b01      	subs	r3, #1
 8001002:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001008:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800100a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	22c0      	movs	r2, #192	; 0xc0
 8001012:	5899      	ldr	r1, [r3, r2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	21c0      	movs	r1, #192	; 0xc0
 8001020:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	0018      	movs	r0, r3
 8001026:	f000 fc67 	bl	80018f8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	225c      	movs	r2, #92	; 0x5c
 800103a:	2101      	movs	r1, #1
 800103c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b004      	add	sp, #16
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40006400 	.word	0x40006400
 800104c:	40006500 	.word	0x40006500
 8001050:	ffffbfff 	.word	0xffffbfff
 8001054:	ffffefff 	.word	0xffffefff
 8001058:	fffffcff 	.word	0xfffffcff

0800105c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001066:	2017      	movs	r0, #23
 8001068:	183b      	adds	r3, r7, r0
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	215c      	movs	r1, #92	; 0x5c
 800106e:	5c52      	ldrb	r2, [r2, r1]
 8001070:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001072:	0002      	movs	r2, r0
 8001074:	18bb      	adds	r3, r7, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d003      	beq.n	8001084 <HAL_FDCAN_ConfigFilter+0x28>
 800107c:	18bb      	adds	r3, r7, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d13d      	bne.n	8001100 <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d119      	bne.n	80010c0 <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001098:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80010a0:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	18d3      	adds	r3, r2, r3
 80010b6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e01d      	b.n	80010fc <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	075a      	lsls	r2, r3, #29
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	079a      	lsls	r2, r3, #30
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	4313      	orrs	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	18d3      	adds	r3, r2, r3
 80010e8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3304      	adds	r3, #4
 80010f4:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e006      	b.n	800110e <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001104:	2202      	movs	r2, #2
 8001106:	431a      	orrs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
  }
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b006      	add	sp, #24
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	225c      	movs	r2, #92	; 0x5c
 8001128:	5c9b      	ldrb	r3, [r3, r2]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b01      	cmp	r3, #1
 800112e:	d117      	bne.n	8001160 <HAL_FDCAN_ConfigGlobalFilter+0x4a>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	589b      	ldr	r3, [r3, r2]
 8001138:	223f      	movs	r2, #63	; 0x3f
 800113a:	4393      	bics	r3, r2
 800113c:	0019      	movs	r1, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	011a      	lsls	r2, r3, #4
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	431a      	orrs	r2, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	431a      	orrs	r2, r3
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	431a      	orrs	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	505a      	str	r2, [r3, r1]
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	e006      	b.n	800116e <HAL_FDCAN_ConfigGlobalFilter+0x58>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001164:	2204      	movs	r2, #4
 8001166:	431a      	orrs	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
  }
}
 800116e:	0018      	movs	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	b004      	add	sp, #16
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	225c      	movs	r2, #92	; 0x5c
 8001182:	5c9b      	ldrb	r3, [r3, r2]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d110      	bne.n	80011ac <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	225c      	movs	r2, #92	; 0x5c
 800118e:	2102      	movs	r1, #2
 8001190:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	699a      	ldr	r2, [r3, #24]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	438a      	bics	r2, r1
 80011a0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	e006      	b.n	80011ba <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b0:	2204      	movs	r2, #4
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
  }
}
 80011ba:	0018      	movs	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	225c      	movs	r2, #92	; 0x5c
 80011d2:	5c9b      	ldrb	r3, [r3, r2]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d12d      	bne.n	8001236 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	22c4      	movs	r2, #196	; 0xc4
 80011e0:	589a      	ldr	r2, [r3, r2]
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	039b      	lsls	r3, r3, #14
 80011e6:	4013      	ands	r3, r2
 80011e8:	d008      	beq.n	80011fc <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	431a      	orrs	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e023      	b.n	8001244 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	22c4      	movs	r2, #196	; 0xc4
 8001202:	589b      	ldr	r3, [r3, r2]
 8001204:	0c1b      	lsrs	r3, r3, #16
 8001206:	2203      	movs	r2, #3
 8001208:	4013      	ands	r3, r2
 800120a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 fbdc 	bl	80019d0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2101      	movs	r1, #1
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4091      	lsls	r1, r2
 8001222:	000a      	movs	r2, r1
 8001224:	21cc      	movs	r1, #204	; 0xcc
 8001226:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001228:	2201      	movs	r2, #1
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	409a      	lsls	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e006      	b.n	8001244 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	2208      	movs	r2, #8
 800123c:	431a      	orrs	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
  }
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b006      	add	sp, #24
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800125a:	201b      	movs	r0, #27
 800125c:	183b      	adds	r3, r7, r0
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	215c      	movs	r1, #92	; 0x5c
 8001262:	5c52      	ldrb	r2, [r2, r1]
 8001264:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001266:	183b      	adds	r3, r7, r0
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d000      	beq.n	8001270 <HAL_FDCAN_GetRxMessage+0x24>
 800126e:	e0c1      	b.n	80013f4 <HAL_FDCAN_GetRxMessage+0x1a8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b40      	cmp	r3, #64	; 0x40
 8001274:	d121      	bne.n	80012ba <HAL_FDCAN_GetRxMessage+0x6e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2290      	movs	r2, #144	; 0x90
 800127c:	589b      	ldr	r3, [r3, r2]
 800127e:	220f      	movs	r2, #15
 8001280:	4013      	ands	r3, r2
 8001282:	d108      	bne.n	8001296 <HAL_FDCAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	0052      	lsls	r2, r2, #1
 800128c:	431a      	orrs	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e0b5      	b.n	8001402 <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2290      	movs	r2, #144	; 0x90
 800129c:	589b      	ldr	r3, [r3, r2]
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	2203      	movs	r2, #3
 80012a2:	4013      	ands	r3, r2
 80012a4:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	0013      	movs	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	189b      	adds	r3, r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	18cb      	adds	r3, r1, r3
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
 80012b8:	e020      	b.n	80012fc <HAL_FDCAN_GetRxMessage+0xb0>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2298      	movs	r2, #152	; 0x98
 80012c0:	589b      	ldr	r3, [r3, r2]
 80012c2:	220f      	movs	r2, #15
 80012c4:	4013      	ands	r3, r2
 80012c6:	d108      	bne.n	80012da <HAL_FDCAN_GetRxMessage+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	0052      	lsls	r2, r2, #1
 80012d0:	431a      	orrs	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e093      	b.n	8001402 <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2298      	movs	r2, #152	; 0x98
 80012e0:	589b      	ldr	r3, [r3, r2]
 80012e2:	0a1b      	lsrs	r3, r3, #8
 80012e4:	2203      	movs	r2, #3
 80012e6:	4013      	ands	r3, r2
 80012e8:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	0013      	movs	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	189b      	adds	r3, r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	18cb      	adds	r3, r1, r3
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	05db      	lsls	r3, r3, #23
 8001304:	401a      	ands	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d107      	bne.n	8001322 <HAL_FDCAN_GetRxMessage+0xd6>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	0c9b      	lsrs	r3, r3, #18
 8001318:	055b      	lsls	r3, r3, #21
 800131a:	0d5a      	lsrs	r2, r3, #21
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e005      	b.n	800132e <HAL_FDCAN_GetRxMessage+0xe2>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	059b      	lsls	r3, r3, #22
 8001336:	401a      	ands	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	0fdb      	lsrs	r3, r3, #31
 8001342:	07da      	lsls	r2, r3, #31
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	3304      	adds	r3, #4
 800134c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	041b      	lsls	r3, r3, #16
 8001354:	0c1a      	lsrs	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	23f0      	movs	r3, #240	; 0xf0
 8001360:	031b      	lsls	r3, r3, #12
 8001362:	401a      	ands	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	035b      	lsls	r3, r3, #13
 8001370:	401a      	ands	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	039b      	lsls	r3, r3, #14
 800137e:	401a      	ands	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0e1b      	lsrs	r3, r3, #24
 800138a:	227f      	movs	r2, #127	; 0x7f
 800138c:	401a      	ands	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	0fda      	lsrs	r2, r3, #31
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	3304      	adds	r3, #4
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
 80013aa:	e00a      	b.n	80013c2 <HAL_FDCAN_GetRxMessage+0x176>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	18d2      	adds	r2, r2, r3
 80013b2:	6839      	ldr	r1, [r7, #0]
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	18cb      	adds	r3, r1, r3
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	3301      	adds	r3, #1
 80013c0:	623b      	str	r3, [r7, #32]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	0c1b      	lsrs	r3, r3, #16
 80013c8:	4a10      	ldr	r2, [pc, #64]	; (800140c <HAL_FDCAN_GetRxMessage+0x1c0>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	001a      	movs	r2, r3
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d3eb      	bcc.n	80013ac <HAL_FDCAN_GetRxMessage+0x160>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b40      	cmp	r3, #64	; 0x40
 80013d8:	d105      	bne.n	80013e6 <HAL_FDCAN_GetRxMessage+0x19a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2194      	movs	r1, #148	; 0x94
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	505a      	str	r2, [r3, r1]
 80013e4:	e004      	b.n	80013f0 <HAL_FDCAN_GetRxMessage+0x1a4>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	219c      	movs	r1, #156	; 0x9c
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e006      	b.n	8001402 <HAL_FDCAN_GetRxMessage+0x1b6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f8:	2208      	movs	r2, #8
 80013fa:	431a      	orrs	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
  }
}
 8001402:	0018      	movs	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	b00a      	add	sp, #40	; 0x28
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	08002de4 	.word	0x08002de4

08001410 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800141c:	2017      	movs	r0, #23
 800141e:	183b      	adds	r3, r7, r0
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	215c      	movs	r1, #92	; 0x5c
 8001424:	5c52      	ldrb	r2, [r2, r1]
 8001426:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001428:	0002      	movs	r2, r0
 800142a:	18bb      	adds	r3, r7, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d004      	beq.n	800143c <HAL_FDCAN_ActivateNotification+0x2c>
 8001432:	18bb      	adds	r3, r7, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d000      	beq.n	800143c <HAL_FDCAN_ActivateNotification+0x2c>
 800143a:	e0b4      	b.n	80015a6 <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	2207      	movs	r2, #7
 8001448:	4013      	ands	r3, r2
 800144a:	d003      	beq.n	8001454 <HAL_FDCAN_ActivateNotification+0x44>
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	2201      	movs	r2, #1
 8001450:	4013      	ands	r3, r2
 8001452:	d034      	beq.n	80014be <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2238      	movs	r2, #56	; 0x38
 8001458:	4013      	ands	r3, r2
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 800145a:	d003      	beq.n	8001464 <HAL_FDCAN_ActivateNotification+0x54>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	2202      	movs	r2, #2
 8001460:	4013      	ands	r3, r2
 8001462:	d02c      	beq.n	80014be <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	23e0      	movs	r3, #224	; 0xe0
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800146c:	d003      	beq.n	8001476 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	2204      	movs	r2, #4
 8001472:	4013      	ands	r3, r2
 8001474:	d023      	beq.n	80014be <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	23f0      	movs	r3, #240	; 0xf0
 800147a:	015b      	lsls	r3, r3, #5
 800147c:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800147e:	d003      	beq.n	8001488 <HAL_FDCAN_ActivateNotification+0x78>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2208      	movs	r2, #8
 8001484:	4013      	ands	r3, r2
 8001486:	d01a      	beq.n	80014be <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	23e0      	movs	r3, #224	; 0xe0
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001490:	d003      	beq.n	800149a <HAL_FDCAN_ActivateNotification+0x8a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	2210      	movs	r2, #16
 8001496:	4013      	ands	r3, r2
 8001498:	d011      	beq.n	80014be <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	23c0      	movs	r3, #192	; 0xc0
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014a2:	d003      	beq.n	80014ac <HAL_FDCAN_ActivateNotification+0x9c>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2220      	movs	r2, #32
 80014a8:	4013      	ands	r3, r2
 80014aa:	d008      	beq.n	80014be <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	23fc      	movs	r3, #252	; 0xfc
 80014b0:	041b      	lsls	r3, r3, #16
 80014b2:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014b4:	d00b      	beq.n	80014ce <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2240      	movs	r2, #64	; 0x40
 80014ba:	4013      	ands	r3, r2
 80014bc:	d107      	bne.n	80014ce <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	430a      	orrs	r2, r1
 80014cc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2207      	movs	r2, #7
 80014d2:	4013      	ands	r3, r2
 80014d4:	d003      	beq.n	80014de <HAL_FDCAN_ActivateNotification+0xce>
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	2201      	movs	r2, #1
 80014da:	4013      	ands	r3, r2
 80014dc:	d134      	bne.n	8001548 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2238      	movs	r2, #56	; 0x38
 80014e2:	4013      	ands	r3, r2
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80014e4:	d003      	beq.n	80014ee <HAL_FDCAN_ActivateNotification+0xde>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d12c      	bne.n	8001548 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	23e0      	movs	r3, #224	; 0xe0
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80014f6:	d003      	beq.n	8001500 <HAL_FDCAN_ActivateNotification+0xf0>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	2204      	movs	r2, #4
 80014fc:	4013      	ands	r3, r2
 80014fe:	d123      	bne.n	8001548 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	23f0      	movs	r3, #240	; 0xf0
 8001504:	015b      	lsls	r3, r3, #5
 8001506:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001508:	d003      	beq.n	8001512 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	2208      	movs	r2, #8
 800150e:	4013      	ands	r3, r2
 8001510:	d11a      	bne.n	8001548 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	23e0      	movs	r3, #224	; 0xe0
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800151a:	d003      	beq.n	8001524 <HAL_FDCAN_ActivateNotification+0x114>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	2210      	movs	r2, #16
 8001520:	4013      	ands	r3, r2
 8001522:	d111      	bne.n	8001548 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	23c0      	movs	r3, #192	; 0xc0
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800152c:	d003      	beq.n	8001536 <HAL_FDCAN_ActivateNotification+0x126>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	2220      	movs	r2, #32
 8001532:	4013      	ands	r3, r2
 8001534:	d108      	bne.n	8001548 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	23fc      	movs	r3, #252	; 0xfc
 800153a:	041b      	lsls	r3, r3, #16
 800153c:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800153e:	d00b      	beq.n	8001558 <HAL_FDCAN_ActivateNotification+0x148>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	2240      	movs	r2, #64	; 0x40
 8001544:	4013      	ands	r3, r2
 8001546:	d007      	beq.n	8001558 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2102      	movs	r1, #2
 8001554:	430a      	orrs	r2, r1
 8001556:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	4013      	ands	r3, r2
 800155e:	d009      	beq.n	8001574 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	22dc      	movs	r2, #220	; 0xdc
 8001566:	5899      	ldr	r1, [r3, r2]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	430a      	orrs	r2, r1
 8001570:	21dc      	movs	r1, #220	; 0xdc
 8001572:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4013      	ands	r3, r2
 800157c:	d009      	beq.n	8001592 <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	22e0      	movs	r2, #224	; 0xe0
 8001584:	5899      	ldr	r1, [r3, r2]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	430a      	orrs	r2, r1
 800158e:	21e0      	movs	r1, #224	; 0xe0
 8001590:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	430a      	orrs	r2, r1
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e006      	b.n	80015b4 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015aa:	2202      	movs	r2, #2
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
  }
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b006      	add	sp, #24
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ca:	23e0      	movs	r3, #224	; 0xe0
 80015cc:	015b      	lsls	r3, r3, #5
 80015ce:	4013      	ands	r3, r2
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	4013      	ands	r3, r2
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015e4:	2207      	movs	r2, #7
 80015e6:	4013      	ands	r3, r2
 80015e8:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	4013      	ands	r3, r2
 80015f4:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015fc:	2238      	movs	r2, #56	; 0x38
 80015fe:	4013      	ands	r3, r2
 8001600:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	4013      	ands	r3, r2
 800160c:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001614:	23f1      	movs	r3, #241	; 0xf1
 8001616:	041b      	lsls	r3, r3, #16
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800162e:	23e0      	movs	r3, #224	; 0xe0
 8001630:	031b      	lsls	r3, r3, #12
 8001632:	4013      	ands	r3, r2
 8001634:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	4013      	ands	r3, r2
 8001640:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001648:	2240      	movs	r2, #64	; 0x40
 800164a:	4013      	ands	r3, r2
 800164c:	d00d      	beq.n	800166a <HAL_FDCAN_IRQHandler+0xae>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	2240      	movs	r2, #64	; 0x40
 8001656:	4013      	ands	r3, r2
 8001658:	d007      	beq.n	800166a <HAL_FDCAN_IRQHandler+0xae>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2240      	movs	r2, #64	; 0x40
 8001660:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	0018      	movs	r0, r3
 8001666:	f000 f92e 	bl	80018c6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4013      	ands	r3, r2
 8001676:	d01d      	beq.n	80016b4 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4013      	ands	r3, r2
 8001684:	d016      	beq.n	80016b4 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	22d8      	movs	r2, #216	; 0xd8
 800168c:	589b      	ldr	r3, [r3, r2]
 800168e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	22e0      	movs	r2, #224	; 0xe0
 8001696:	589a      	ldr	r2, [r3, r2]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0052      	lsls	r2, r2, #1
 80016a6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	0011      	movs	r1, r2
 80016ae:	0018      	movs	r0, r3
 80016b0:	f000 f8f0 	bl	8001894 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d009      	beq.n	80016ce <HAL_FDCAN_IRQHandler+0x112>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80016c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	0011      	movs	r1, r2
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 f8c0 	bl	800184e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d009      	beq.n	80016e8 <HAL_FDCAN_IRQHandler+0x12c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6a3a      	ldr	r2, [r7, #32]
 80016da:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80016dc:	6a3a      	ldr	r2, [r7, #32]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	0011      	movs	r1, r2
 80016e2:	0018      	movs	r0, r3
 80016e4:	f7fe ff60 	bl	80005a8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <HAL_FDCAN_IRQHandler+0x146>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f000 f8af 	bl	8001860 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d00f      	beq.n	8001730 <HAL_FDCAN_IRQHandler+0x174>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4013      	ands	r3, r2
 800171c:	d008      	beq.n	8001730 <HAL_FDCAN_IRQHandler+0x174>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	0092      	lsls	r2, r2, #2
 8001726:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	0018      	movs	r0, r3
 800172c:	f000 f8a1 	bl	8001872 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	4013      	ands	r3, r2
 800173a:	d01b      	beq.n	8001774 <HAL_FDCAN_IRQHandler+0x1b8>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	4013      	ands	r3, r2
 8001746:	d015      	beq.n	8001774 <HAL_FDCAN_IRQHandler+0x1b8>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	22d4      	movs	r2, #212	; 0xd4
 800174e:	589b      	ldr	r3, [r3, r2]
 8001750:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	22dc      	movs	r2, #220	; 0xdc
 8001758:	589a      	ldr	r2, [r3, r2]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2280      	movs	r2, #128	; 0x80
 8001766:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0011      	movs	r1, r2
 800176e:	0018      	movs	r0, r3
 8001770:	f000 f887 	bl	8001882 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	019b      	lsls	r3, r3, #6
 800177e:	4013      	ands	r3, r2
 8001780:	d00f      	beq.n	80017a2 <HAL_FDCAN_IRQHandler+0x1e6>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	019b      	lsls	r3, r3, #6
 800178c:	4013      	ands	r3, r2
 800178e:	d008      	beq.n	80017a2 <HAL_FDCAN_IRQHandler+0x1e6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	0192      	lsls	r2, r2, #6
 8001798:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	0018      	movs	r0, r3
 800179e:	f000 f882 	bl	80018a6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	4013      	ands	r3, r2
 80017ae:	d00f      	beq.n	80017d0 <HAL_FDCAN_IRQHandler+0x214>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	4013      	ands	r3, r2
 80017bc:	d008      	beq.n	80017d0 <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	0212      	lsls	r2, r2, #8
 80017c6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 f873 	bl	80018b6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	01db      	lsls	r3, r3, #7
 80017da:	4013      	ands	r3, r2
 80017dc:	d011      	beq.n	8001802 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	01db      	lsls	r3, r3, #7
 80017e8:	4013      	ands	r3, r2
 80017ea:	d00a      	beq.n	8001802 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	01d2      	lsls	r2, r2, #7
 80017f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d009      	beq.n	800181c <HAL_FDCAN_IRQHandler+0x260>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0011      	movs	r1, r2
 8001816:	0018      	movs	r0, r3
 8001818:	f000 f865 	bl	80018e6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <HAL_FDCAN_IRQHandler+0x27a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_FDCAN_IRQHandler+0x28a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	0018      	movs	r0, r3
 8001842:	f000 f848 	bl	80018d6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	b00a      	add	sp, #40	; 0x28
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	b002      	add	sp, #8
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b002      	add	sp, #8
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b002      	add	sp, #8
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b002      	add	sp, #8
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b002      	add	sp, #8
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001900:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8001902:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d105      	bne.n	800191a <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	22d4      	movs	r2, #212	; 0xd4
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4694      	mov	ip, r2
 8001916:	4463      	add	r3, ip
 8001918:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	589b      	ldr	r3, [r3, r2]
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800192a:	4013      	ands	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	041a      	lsls	r2, r3, #16
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	2180      	movs	r1, #128	; 0x80
 800193c:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3370      	adds	r3, #112	; 0x70
 8001942:	001a      	movs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	589b      	ldr	r3, [r3, r2]
 8001950:	4a1e      	ldr	r2, [pc, #120]	; (80019cc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001952:	4013      	ands	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195a:	061a      	lsls	r2, r3, #24
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	33b0      	adds	r3, #176	; 0xb0
 800196a:	001a      	movs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	3389      	adds	r3, #137	; 0x89
 8001974:	33ff      	adds	r3, #255	; 0xff
 8001976:	001a      	movs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2298      	movs	r2, #152	; 0x98
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	189a      	adds	r2, r3, r2
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	229e      	movs	r2, #158	; 0x9e
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	189a      	adds	r2, r3, r2
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e005      	b.n	80019a6 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3304      	adds	r3, #4
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	22d4      	movs	r2, #212	; 0xd4
 80019aa:	0092      	lsls	r2, r2, #2
 80019ac:	4694      	mov	ip, r2
 80019ae:	4463      	add	r3, ip
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d3f1      	bcc.n	800199a <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b004      	add	sp, #16
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	4000b400 	.word	0x4000b400
 80019c4:	40006800 	.word	0x40006800
 80019c8:	ffe0ffff 	.word	0xffe0ffff
 80019cc:	f0ffffff 	.word	0xf0ffffff

080019d0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80019ee:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e00b      	b.n	8001a14 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001a04:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001a0a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	05d2      	lsls	r2, r2, #23
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a1e:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001a24:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001a2a:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	189b      	adds	r3, r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	18cb      	adds	r3, r1, r3
 8001a44:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e020      	b.n	8001aa6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3303      	adds	r3, #3
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	18d3      	adds	r3, r2, r3
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3302      	adds	r3, #2
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	18cb      	adds	r3, r1, r3
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001a7c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	18cb      	adds	r3, r1, r3
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001a8a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	188a      	adds	r2, r1, r2
 8001a92:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001a94:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	0c1b      	lsrs	r3, r3, #16
 8001aac:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <FDCAN_CopyMessageToRAM+0xf4>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d3d5      	bcc.n	8001a64 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001ab8:	46c0      	nop			; (mov r8, r8)
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b008      	add	sp, #32
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	08002de4 	.word	0x08002de4

08001ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad6:	e14d      	b.n	8001d74 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2101      	movs	r1, #1
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4091      	lsls	r1, r2
 8001ae2:	000a      	movs	r2, r1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d100      	bne.n	8001af0 <HAL_GPIO_Init+0x28>
 8001aee:	e13e      	b.n	8001d6e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2203      	movs	r2, #3
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d005      	beq.n	8001b08 <HAL_GPIO_Init+0x40>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2203      	movs	r2, #3
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d130      	bne.n	8001b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	409a      	lsls	r2, r3
 8001b16:	0013      	movs	r3, r2
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	0013      	movs	r3, r2
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b3e:	2201      	movs	r2, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	43da      	mvns	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	091b      	lsrs	r3, r3, #4
 8001b54:	2201      	movs	r2, #1
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2203      	movs	r2, #3
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d017      	beq.n	8001ba6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	409a      	lsls	r2, r3
 8001b84:	0013      	movs	r3, r2
 8001b86:	43da      	mvns	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	409a      	lsls	r2, r3
 8001b98:	0013      	movs	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2203      	movs	r2, #3
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d123      	bne.n	8001bfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	58d3      	ldr	r3, [r2, r3]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2107      	movs	r1, #7
 8001bde:	400b      	ands	r3, r1
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	6939      	ldr	r1, [r7, #16]
 8001bf8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	409a      	lsls	r2, r3
 8001c08:	0013      	movs	r3, r2
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2203      	movs	r2, #3
 8001c18:	401a      	ands	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	0013      	movs	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	23c0      	movs	r3, #192	; 0xc0
 8001c34:	029b      	lsls	r3, r3, #10
 8001c36:	4013      	ands	r3, r2
 8001c38:	d100      	bne.n	8001c3c <HAL_GPIO_Init+0x174>
 8001c3a:	e098      	b.n	8001d6e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001c3c:	4a53      	ldr	r2, [pc, #332]	; (8001d8c <HAL_GPIO_Init+0x2c4>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3318      	adds	r3, #24
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	589b      	ldr	r3, [r3, r2]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	4013      	ands	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	220f      	movs	r2, #15
 8001c54:	409a      	lsls	r2, r3
 8001c56:	0013      	movs	r3, r2
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	23a0      	movs	r3, #160	; 0xa0
 8001c64:	05db      	lsls	r3, r3, #23
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d019      	beq.n	8001c9e <HAL_GPIO_Init+0x1d6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a48      	ldr	r2, [pc, #288]	; (8001d90 <HAL_GPIO_Init+0x2c8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0x1d2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a47      	ldr	r2, [pc, #284]	; (8001d94 <HAL_GPIO_Init+0x2cc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00d      	beq.n	8001c96 <HAL_GPIO_Init+0x1ce>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a46      	ldr	r2, [pc, #280]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x1ca>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a45      	ldr	r2, [pc, #276]	; (8001d9c <HAL_GPIO_Init+0x2d4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_Init+0x1c6>
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	e008      	b.n	8001ca0 <HAL_GPIO_Init+0x1d8>
 8001c8e:	2305      	movs	r3, #5
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x1d8>
 8001c92:	2303      	movs	r3, #3
 8001c94:	e004      	b.n	8001ca0 <HAL_GPIO_Init+0x1d8>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_Init+0x1d8>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x1d8>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	2103      	movs	r1, #3
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	00d2      	lsls	r2, r2, #3
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001cb0:	4936      	ldr	r1, [pc, #216]	; (8001d8c <HAL_GPIO_Init+0x2c4>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3318      	adds	r3, #24
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cbe:	4a33      	ldr	r2, [pc, #204]	; (8001d8c <HAL_GPIO_Init+0x2c4>)
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	58d3      	ldr	r3, [r2, r3]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	025b      	lsls	r3, r3, #9
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ce4:	4929      	ldr	r1, [pc, #164]	; (8001d8c <HAL_GPIO_Init+0x2c4>)
 8001ce6:	2280      	movs	r2, #128	; 0x80
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001cec:	4a27      	ldr	r2, [pc, #156]	; (8001d8c <HAL_GPIO_Init+0x2c4>)
 8001cee:	2384      	movs	r3, #132	; 0x84
 8001cf0:	58d3      	ldr	r3, [r2, r3]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	029b      	lsls	r3, r3, #10
 8001d06:	4013      	ands	r3, r2
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d12:	491e      	ldr	r1, [pc, #120]	; (8001d8c <HAL_GPIO_Init+0x2c4>)
 8001d14:	2284      	movs	r2, #132	; 0x84
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <HAL_GPIO_Init+0x2c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43da      	mvns	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	035b      	lsls	r3, r3, #13
 8001d32:	4013      	ands	r3, r2
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_GPIO_Init+0x2c4>)
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_GPIO_Init+0x2c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	039b      	lsls	r3, r3, #14
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_GPIO_Init+0x2c4>)
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	40da      	lsrs	r2, r3
 8001d7c:	1e13      	subs	r3, r2, #0
 8001d7e:	d000      	beq.n	8001d82 <HAL_GPIO_Init+0x2ba>
 8001d80:	e6aa      	b.n	8001ad8 <HAL_GPIO_Init+0x10>
  }
}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b006      	add	sp, #24
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021800 	.word	0x40021800
 8001d90:	50000400 	.word	0x50000400
 8001d94:	50000800 	.word	0x50000800
 8001d98:	50000c00 	.word	0x50000c00
 8001d9c:	50001000 	.word	0x50001000

08001da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	000a      	movs	r2, r1
 8001daa:	1cbb      	adds	r3, r7, #2
 8001dac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	1cba      	adds	r2, r7, #2
 8001db4:	8812      	ldrh	r2, [r2, #0]
 8001db6:	4013      	ands	r3, r2
 8001db8:	d004      	beq.n	8001dc4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001dba:	230f      	movs	r3, #15
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e003      	b.n	8001dcc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001dcc:	230f      	movs	r3, #15
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	781b      	ldrb	r3, [r3, #0]
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b004      	add	sp, #16
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	0008      	movs	r0, r1
 8001de4:	0011      	movs	r1, r2
 8001de6:	1cbb      	adds	r3, r7, #2
 8001de8:	1c02      	adds	r2, r0, #0
 8001dea:	801a      	strh	r2, [r3, #0]
 8001dec:	1c7b      	adds	r3, r7, #1
 8001dee:	1c0a      	adds	r2, r1, #0
 8001df0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df2:	1c7b      	adds	r3, r7, #1
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d004      	beq.n	8001e04 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfa:	1cbb      	adds	r3, r7, #2
 8001dfc:	881a      	ldrh	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e02:	e003      	b.n	8001e0c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e04:	1cbb      	adds	r3, r7, #2
 8001e06:	881a      	ldrh	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d11f      	bne.n	8001e78 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	0013      	movs	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	189b      	adds	r3, r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4912      	ldr	r1, [pc, #72]	; (8001e90 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001e46:	0018      	movs	r0, r3
 8001e48:	f7fe f95e 	bl	8000108 <__udivsi3>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e52:	e008      	b.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e001      	b.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e009      	b.n	8001e7a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	401a      	ands	r2, r3
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d0ed      	beq.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b004      	add	sp, #16
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	40007000 	.word	0x40007000
 8001e88:	fffff9ff 	.word	0xfffff9ff
 8001e8c:	20000014 	.word	0x20000014
 8001e90:	000f4240 	.word	0x000f4240

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f000 fb56 	bl	8002554 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d100      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x20>
 8001eb2:	e07d      	b.n	8001fb0 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb4:	4bc3      	ldr	r3, [pc, #780]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2238      	movs	r2, #56	; 0x38
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ebe:	4bc1      	ldr	r3, [pc, #772]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d102      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x40>
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d002      	beq.n	8001eda <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eda:	4bba      	ldr	r3, [pc, #744]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	029b      	lsls	r3, r3, #10
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d063      	beq.n	8001fae <HAL_RCC_OscConfig+0x11a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d15f      	bne.n	8001fae <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f000 fb30 	bl	8002554 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	025b      	lsls	r3, r3, #9
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_OscConfig+0x7c>
 8001f00:	4bb0      	ldr	r3, [pc, #704]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4baf      	ldr	r3, [pc, #700]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	0249      	lsls	r1, r1, #9
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e020      	b.n	8001f52 <HAL_RCC_OscConfig+0xbe>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	23a0      	movs	r3, #160	; 0xa0
 8001f16:	02db      	lsls	r3, r3, #11
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d10e      	bne.n	8001f3a <HAL_RCC_OscConfig+0xa6>
 8001f1c:	4ba9      	ldr	r3, [pc, #676]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4ba8      	ldr	r3, [pc, #672]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f22:	2180      	movs	r1, #128	; 0x80
 8001f24:	02c9      	lsls	r1, r1, #11
 8001f26:	430a      	orrs	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	4ba6      	ldr	r3, [pc, #664]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4ba5      	ldr	r3, [pc, #660]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	0249      	lsls	r1, r1, #9
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e00b      	b.n	8001f52 <HAL_RCC_OscConfig+0xbe>
 8001f3a:	4ba2      	ldr	r3, [pc, #648]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4ba1      	ldr	r3, [pc, #644]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f40:	49a1      	ldr	r1, [pc, #644]	; (80021c8 <HAL_RCC_OscConfig+0x334>)
 8001f42:	400a      	ands	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	4b9f      	ldr	r3, [pc, #636]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b9e      	ldr	r3, [pc, #632]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f4c:	499f      	ldr	r1, [pc, #636]	; (80021cc <HAL_RCC_OscConfig+0x338>)
 8001f4e:	400a      	ands	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d014      	beq.n	8001f84 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fdf7 	bl	8000b4c <HAL_GetTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7fe fdf2 	bl	8000b4c <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e2ee      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f76:	4b93      	ldr	r3, [pc, #588]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0xd0>
 8001f82:	e015      	b.n	8001fb0 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe fde2 	bl	8000b4c <HAL_GetTick>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fddd 	bl	8000b4c <HAL_GetTick>
 8001f92:	0002      	movs	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e2d9      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fa0:	4b88      	ldr	r3, [pc, #544]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	029b      	lsls	r3, r3, #10
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0xfa>
 8001fac:	e000      	b.n	8001fb0 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d100      	bne.n	8001fbc <HAL_RCC_OscConfig+0x128>
 8001fba:	e099      	b.n	80020f0 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fbc:	4b81      	ldr	r3, [pc, #516]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2238      	movs	r2, #56	; 0x38
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc6:	4b7f      	ldr	r3, [pc, #508]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d102      	bne.n	8001fdc <HAL_RCC_OscConfig+0x148>
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d002      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d135      	bne.n	800204e <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe2:	4b78      	ldr	r3, [pc, #480]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4013      	ands	r3, r2
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_OscConfig+0x166>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e2ac      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b72      	ldr	r3, [pc, #456]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a74      	ldr	r2, [pc, #464]	; (80021d0 <HAL_RCC_OscConfig+0x33c>)
 8002000:	4013      	ands	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	021a      	lsls	r2, r3, #8
 800200a:	4b6e      	ldr	r3, [pc, #440]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 800200c:	430a      	orrs	r2, r1
 800200e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d112      	bne.n	800203c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002016:	4b6b      	ldr	r3, [pc, #428]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a6e      	ldr	r2, [pc, #440]	; (80021d4 <HAL_RCC_OscConfig+0x340>)
 800201c:	4013      	ands	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800202a:	4b66      	ldr	r3, [pc, #408]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	0adb      	lsrs	r3, r3, #11
 8002030:	2207      	movs	r2, #7
 8002032:	4013      	ands	r3, r2
 8002034:	4a68      	ldr	r2, [pc, #416]	; (80021d8 <HAL_RCC_OscConfig+0x344>)
 8002036:	40da      	lsrs	r2, r3
 8002038:	4b68      	ldr	r3, [pc, #416]	; (80021dc <HAL_RCC_OscConfig+0x348>)
 800203a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800203c:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <HAL_RCC_OscConfig+0x34c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0018      	movs	r0, r3
 8002042:	f7fe fd27 	bl	8000a94 <HAL_InitTick>
 8002046:	1e03      	subs	r3, r0, #0
 8002048:	d051      	beq.n	80020ee <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e282      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d030      	beq.n	80020b8 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002056:	4b5b      	ldr	r3, [pc, #364]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a5e      	ldr	r2, [pc, #376]	; (80021d4 <HAL_RCC_OscConfig+0x340>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800206a:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b55      	ldr	r3, [pc, #340]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	0049      	lsls	r1, r1, #1
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7fe fd68 	bl	8000b4c <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002082:	f7fe fd63 	bl	8000b4c <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e25f      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002094:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4013      	ands	r3, r2
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a0:	4b48      	ldr	r3, [pc, #288]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a4a      	ldr	r2, [pc, #296]	; (80021d0 <HAL_RCC_OscConfig+0x33c>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	0019      	movs	r1, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	021a      	lsls	r2, r3, #8
 80020b0:	4b44      	ldr	r3, [pc, #272]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	e01b      	b.n	80020f0 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80020b8:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 80020be:	4949      	ldr	r1, [pc, #292]	; (80021e4 <HAL_RCC_OscConfig+0x350>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7fe fd42 	bl	8000b4c <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ce:	f7fe fd3d 	bl	8000b4c <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e239      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e0:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4013      	ands	r3, r2
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x23a>
 80020ec:	e000      	b.n	80020f0 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2208      	movs	r2, #8
 80020f6:	4013      	ands	r3, r2
 80020f8:	d047      	beq.n	800218a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020fa:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2238      	movs	r2, #56	; 0x38
 8002100:	4013      	ands	r3, r2
 8002102:	2b18      	cmp	r3, #24
 8002104:	d10a      	bne.n	800211c <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002106:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8002108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d03c      	beq.n	800218a <HAL_RCC_OscConfig+0x2f6>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d138      	bne.n	800218a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e21b      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d019      	beq.n	8002158 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8002126:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002128:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 800212a:	2101      	movs	r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe fd0c 	bl	8000b4c <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213a:	f7fe fd07 	bl	8000b4c <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e203      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 800214e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002150:	2202      	movs	r2, #2
 8002152:	4013      	ands	r3, r2
 8002154:	d0f1      	beq.n	800213a <HAL_RCC_OscConfig+0x2a6>
 8002156:	e018      	b.n	800218a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 800215a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 800215e:	2101      	movs	r1, #1
 8002160:	438a      	bics	r2, r1
 8002162:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe fcf2 	bl	8000b4c <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216e:	f7fe fced 	bl	8000b4c <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1e9      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002180:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8002182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002184:	2202      	movs	r2, #2
 8002186:	4013      	ands	r3, r2
 8002188:	d1f1      	bne.n	800216e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2204      	movs	r2, #4
 8002190:	4013      	ands	r3, r2
 8002192:	d100      	bne.n	8002196 <HAL_RCC_OscConfig+0x302>
 8002194:	e0c6      	b.n	8002324 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002196:	231f      	movs	r3, #31
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2238      	movs	r2, #56	; 0x38
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d11e      	bne.n	80021e8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	2202      	movs	r2, #2
 80021b0:	4013      	ands	r3, r2
 80021b2:	d100      	bne.n	80021b6 <HAL_RCC_OscConfig+0x322>
 80021b4:	e0b6      	b.n	8002324 <HAL_RCC_OscConfig+0x490>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d000      	beq.n	80021c0 <HAL_RCC_OscConfig+0x32c>
 80021be:	e0b1      	b.n	8002324 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e1c7      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
 80021c4:	40021000 	.word	0x40021000
 80021c8:	fffeffff 	.word	0xfffeffff
 80021cc:	fffbffff 	.word	0xfffbffff
 80021d0:	ffff80ff 	.word	0xffff80ff
 80021d4:	ffffc7ff 	.word	0xffffc7ff
 80021d8:	00f42400 	.word	0x00f42400
 80021dc:	20000014 	.word	0x20000014
 80021e0:	20000018 	.word	0x20000018
 80021e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021e8:	4bb8      	ldr	r3, [pc, #736]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 80021ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	055b      	lsls	r3, r3, #21
 80021f0:	4013      	ands	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_OscConfig+0x364>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x366>
 80021f8:	2300      	movs	r3, #0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d011      	beq.n	8002222 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	4bb3      	ldr	r3, [pc, #716]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002202:	4bb2      	ldr	r3, [pc, #712]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002204:	2180      	movs	r1, #128	; 0x80
 8002206:	0549      	lsls	r1, r1, #21
 8002208:	430a      	orrs	r2, r1
 800220a:	63da      	str	r2, [r3, #60]	; 0x3c
 800220c:	4baf      	ldr	r3, [pc, #700]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 800220e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	055b      	lsls	r3, r3, #21
 8002214:	4013      	ands	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800221a:	231f      	movs	r3, #31
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002222:	4bab      	ldr	r3, [pc, #684]	; (80024d0 <HAL_RCC_OscConfig+0x63c>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4013      	ands	r3, r2
 800222c:	d11a      	bne.n	8002264 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800222e:	4ba8      	ldr	r3, [pc, #672]	; (80024d0 <HAL_RCC_OscConfig+0x63c>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4ba7      	ldr	r3, [pc, #668]	; (80024d0 <HAL_RCC_OscConfig+0x63c>)
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	0049      	lsls	r1, r1, #1
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800223c:	f7fe fc86 	bl	8000b4c <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7fe fc81 	bl	8000b4c <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e17d      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002258:	4b9d      	ldr	r3, [pc, #628]	; (80024d0 <HAL_RCC_OscConfig+0x63c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4013      	ands	r3, r2
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x3e6>
 800226c:	4b97      	ldr	r3, [pc, #604]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 800226e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002270:	4b96      	ldr	r3, [pc, #600]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002272:	2101      	movs	r1, #1
 8002274:	430a      	orrs	r2, r1
 8002276:	65da      	str	r2, [r3, #92]	; 0x5c
 8002278:	e01c      	b.n	80022b4 <HAL_RCC_OscConfig+0x420>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b05      	cmp	r3, #5
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x408>
 8002282:	4b92      	ldr	r3, [pc, #584]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002284:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002286:	4b91      	ldr	r3, [pc, #580]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002288:	2104      	movs	r1, #4
 800228a:	430a      	orrs	r2, r1
 800228c:	65da      	str	r2, [r3, #92]	; 0x5c
 800228e:	4b8f      	ldr	r3, [pc, #572]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002290:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002292:	4b8e      	ldr	r3, [pc, #568]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002294:	2101      	movs	r1, #1
 8002296:	430a      	orrs	r2, r1
 8002298:	65da      	str	r2, [r3, #92]	; 0x5c
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0x420>
 800229c:	4b8b      	ldr	r3, [pc, #556]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 800229e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022a0:	4b8a      	ldr	r3, [pc, #552]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 80022a2:	2101      	movs	r1, #1
 80022a4:	438a      	bics	r2, r1
 80022a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80022a8:	4b88      	ldr	r3, [pc, #544]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 80022aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022ac:	4b87      	ldr	r3, [pc, #540]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 80022ae:	2104      	movs	r1, #4
 80022b0:	438a      	bics	r2, r1
 80022b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d014      	beq.n	80022e6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fc46 	bl	8000b4c <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c4:	e009      	b.n	80022da <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7fe fc41 	bl	8000b4c <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	4a80      	ldr	r2, [pc, #512]	; (80024d4 <HAL_RCC_OscConfig+0x640>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e13c      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022da:	4b7c      	ldr	r3, [pc, #496]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	2202      	movs	r2, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x432>
 80022e4:	e013      	b.n	800230e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fc31 	bl	8000b4c <HAL_GetTick>
 80022ea:	0003      	movs	r3, r0
 80022ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ee:	e009      	b.n	8002304 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7fe fc2c 	bl	8000b4c <HAL_GetTick>
 80022f4:	0002      	movs	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	4a76      	ldr	r2, [pc, #472]	; (80024d4 <HAL_RCC_OscConfig+0x640>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e127      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002304:	4b71      	ldr	r3, [pc, #452]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	2202      	movs	r2, #2
 800230a:	4013      	ands	r3, r2
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800230e:	231f      	movs	r3, #31
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4b6c      	ldr	r3, [pc, #432]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 800231a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800231c:	4b6b      	ldr	r3, [pc, #428]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 800231e:	496e      	ldr	r1, [pc, #440]	; (80024d8 <HAL_RCC_OscConfig+0x644>)
 8002320:	400a      	ands	r2, r1
 8002322:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2220      	movs	r2, #32
 800232a:	4013      	ands	r3, r2
 800232c:	d039      	beq.n	80023a2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01b      	beq.n	800236e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002336:	4b65      	ldr	r3, [pc, #404]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b64      	ldr	r3, [pc, #400]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	03c9      	lsls	r1, r1, #15
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7fe fc02 	bl	8000b4c <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800234e:	f7fe fbfd 	bl	8000b4c <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0f9      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002360:	4b5a      	ldr	r3, [pc, #360]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	041b      	lsls	r3, r3, #16
 8002368:	4013      	ands	r3, r2
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x4ba>
 800236c:	e019      	b.n	80023a2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800236e:	4b57      	ldr	r3, [pc, #348]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b56      	ldr	r3, [pc, #344]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002374:	4959      	ldr	r1, [pc, #356]	; (80024dc <HAL_RCC_OscConfig+0x648>)
 8002376:	400a      	ands	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7fe fbe7 	bl	8000b4c <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002384:	f7fe fbe2 	bl	8000b4c <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e0de      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002396:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	4013      	ands	r3, r2
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d100      	bne.n	80023ac <HAL_RCC_OscConfig+0x518>
 80023aa:	e0d2      	b.n	8002552 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ac:	4b47      	ldr	r3, [pc, #284]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2238      	movs	r2, #56	; 0x38
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d100      	bne.n	80023ba <HAL_RCC_OscConfig+0x526>
 80023b8:	e081      	b.n	80024be <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d156      	bne.n	8002470 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c2:	4b42      	ldr	r3, [pc, #264]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4b41      	ldr	r3, [pc, #260]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 80023c8:	4945      	ldr	r1, [pc, #276]	; (80024e0 <HAL_RCC_OscConfig+0x64c>)
 80023ca:	400a      	ands	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7fe fbbd 	bl	8000b4c <HAL_GetTick>
 80023d2:	0003      	movs	r3, r0
 80023d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe fbb8 	bl	8000b4c <HAL_GetTick>
 80023dc:	0002      	movs	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e0b4      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ea:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	049b      	lsls	r3, r3, #18
 80023f2:	4013      	ands	r3, r2
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f6:	4b35      	ldr	r3, [pc, #212]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4a3a      	ldr	r2, [pc, #232]	; (80024e4 <HAL_RCC_OscConfig+0x650>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	431a      	orrs	r2, r3
 8002424:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002426:	430a      	orrs	r2, r1
 8002428:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242a:	4b28      	ldr	r3, [pc, #160]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b27      	ldr	r3, [pc, #156]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	0449      	lsls	r1, r1, #17
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0549      	lsls	r1, r1, #21
 8002442:	430a      	orrs	r2, r1
 8002444:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7fe fb81 	bl	8000b4c <HAL_GetTick>
 800244a:	0003      	movs	r3, r0
 800244c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe fb7c 	bl	8000b4c <HAL_GetTick>
 8002454:	0002      	movs	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e078      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	049b      	lsls	r3, r3, #18
 800246a:	4013      	ands	r3, r2
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x5bc>
 800246e:	e070      	b.n	8002552 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002470:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002476:	491a      	ldr	r1, [pc, #104]	; (80024e0 <HAL_RCC_OscConfig+0x64c>)
 8002478:	400a      	ands	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 8002482:	2103      	movs	r1, #3
 8002484:	438a      	bics	r2, r1
 8002486:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 800248e:	4916      	ldr	r1, [pc, #88]	; (80024e8 <HAL_RCC_OscConfig+0x654>)
 8002490:	400a      	ands	r2, r1
 8002492:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fb5a 	bl	8000b4c <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249e:	f7fe fb55 	bl	8000b4c <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e051      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_RCC_OscConfig+0x638>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	049b      	lsls	r3, r3, #18
 80024b8:	4013      	ands	r3, r2
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x60a>
 80024bc:	e049      	b.n	8002552 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d112      	bne.n	80024ec <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e044      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
 80024d4:	00001388 	.word	0x00001388
 80024d8:	efffffff 	.word	0xefffffff
 80024dc:	ffbfffff 	.word	0xffbfffff
 80024e0:	feffffff 	.word	0xfeffffff
 80024e4:	11c1808c 	.word	0x11c1808c
 80024e8:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_RCC_OscConfig+0x6c8>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2203      	movs	r2, #3
 80024f6:	401a      	ands	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d126      	bne.n	800254e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2270      	movs	r2, #112	; 0x70
 8002504:	401a      	ands	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d11f      	bne.n	800254e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	23fe      	movs	r3, #254	; 0xfe
 8002512:	01db      	lsls	r3, r3, #7
 8002514:	401a      	ands	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d116      	bne.n	800254e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	23f8      	movs	r3, #248	; 0xf8
 8002524:	039b      	lsls	r3, r3, #14
 8002526:	401a      	ands	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d10e      	bne.n	800254e <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	23e0      	movs	r3, #224	; 0xe0
 8002534:	051b      	lsls	r3, r3, #20
 8002536:	401a      	ands	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	0f5b      	lsrs	r3, r3, #29
 8002544:	075a      	lsls	r2, r3, #29
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	0018      	movs	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	b008      	add	sp, #32
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0e9      	b.n	8002748 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b76      	ldr	r3, [pc, #472]	; (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2207      	movs	r2, #7
 800257a:	4013      	ands	r3, r2
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d91e      	bls.n	80025c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b73      	ldr	r3, [pc, #460]	; (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2207      	movs	r2, #7
 8002588:	4393      	bics	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	4b70      	ldr	r3, [pc, #448]	; (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002594:	f7fe fada 	bl	8000b4c <HAL_GetTick>
 8002598:	0003      	movs	r3, r0
 800259a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800259c:	e009      	b.n	80025b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259e:	f7fe fad5 	bl	8000b4c <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	4a6a      	ldr	r2, [pc, #424]	; (8002754 <HAL_RCC_ClockConfig+0x1f4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e0ca      	b.n	8002748 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025b2:	4b67      	ldr	r3, [pc, #412]	; (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2207      	movs	r2, #7
 80025b8:	4013      	ands	r3, r2
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d1ee      	bne.n	800259e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2202      	movs	r2, #2
 80025c6:	4013      	ands	r3, r2
 80025c8:	d015      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2204      	movs	r2, #4
 80025d0:	4013      	ands	r3, r2
 80025d2:	d006      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025d4:	4b60      	ldr	r3, [pc, #384]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	4b5f      	ldr	r3, [pc, #380]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 80025da:	21e0      	movs	r1, #224	; 0xe0
 80025dc:	01c9      	lsls	r1, r1, #7
 80025de:	430a      	orrs	r2, r1
 80025e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e2:	4b5d      	ldr	r3, [pc, #372]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	4a5d      	ldr	r2, [pc, #372]	; (800275c <HAL_RCC_ClockConfig+0x1fc>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	0019      	movs	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2201      	movs	r2, #1
 80025fc:	4013      	ands	r3, r2
 80025fe:	d057      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d107      	bne.n	8002618 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	029b      	lsls	r3, r3, #10
 8002610:	4013      	ands	r3, r2
 8002612:	d12b      	bne.n	800266c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e097      	b.n	8002748 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d107      	bne.n	8002630 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002620:	4b4d      	ldr	r3, [pc, #308]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	049b      	lsls	r3, r3, #18
 8002628:	4013      	ands	r3, r2
 800262a:	d11f      	bne.n	800266c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e08b      	b.n	8002748 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002638:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4013      	ands	r3, r2
 8002642:	d113      	bne.n	800266c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e07f      	b.n	8002748 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d106      	bne.n	800265e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002650:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 8002652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002654:	2202      	movs	r2, #2
 8002656:	4013      	ands	r3, r2
 8002658:	d108      	bne.n	800266c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e074      	b.n	8002748 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800265e:	4b3e      	ldr	r3, [pc, #248]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	2202      	movs	r2, #2
 8002664:	4013      	ands	r3, r2
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e06d      	b.n	8002748 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800266c:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2207      	movs	r2, #7
 8002672:	4393      	bics	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	4b37      	ldr	r3, [pc, #220]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 800267c:	430a      	orrs	r2, r1
 800267e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002680:	f7fe fa64 	bl	8000b4c <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002688:	e009      	b.n	800269e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268a:	f7fe fa5f 	bl	8000b4c <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	4a2f      	ldr	r2, [pc, #188]	; (8002754 <HAL_RCC_ClockConfig+0x1f4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e054      	b.n	8002748 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	4b2e      	ldr	r3, [pc, #184]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2238      	movs	r2, #56	; 0x38
 80026a4:	401a      	ands	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d1ec      	bne.n	800268a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2207      	movs	r2, #7
 80026b6:	4013      	ands	r3, r2
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d21e      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2207      	movs	r2, #7
 80026c4:	4393      	bics	r3, r2
 80026c6:	0019      	movs	r1, r3
 80026c8:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026d0:	f7fe fa3c 	bl	8000b4c <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026d8:	e009      	b.n	80026ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026da:	f7fe fa37 	bl	8000b4c <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <HAL_RCC_ClockConfig+0x1f4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e02c      	b.n	8002748 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2207      	movs	r2, #7
 80026f4:	4013      	ands	r3, r2
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d1ee      	bne.n	80026da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2204      	movs	r2, #4
 8002702:	4013      	ands	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	4a15      	ldr	r2, [pc, #84]	; (8002760 <HAL_RCC_ClockConfig+0x200>)
 800270c:	4013      	ands	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 8002716:	430a      	orrs	r2, r1
 8002718:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800271a:	f000 f829 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 800271e:	0001      	movs	r1, r0
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	220f      	movs	r2, #15
 8002728:	401a      	ands	r2, r3
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_RCC_ClockConfig+0x204>)
 800272c:	0092      	lsls	r2, r2, #2
 800272e:	58d3      	ldr	r3, [r2, r3]
 8002730:	221f      	movs	r2, #31
 8002732:	4013      	ands	r3, r2
 8002734:	000a      	movs	r2, r1
 8002736:	40da      	lsrs	r2, r3
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_ClockConfig+0x208>)
 800273a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_ClockConfig+0x20c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0018      	movs	r0, r3
 8002742:	f7fe f9a7 	bl	8000a94 <HAL_InitTick>
 8002746:	0003      	movs	r3, r0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b004      	add	sp, #16
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40022000 	.word	0x40022000
 8002754:	00001388 	.word	0x00001388
 8002758:	40021000 	.word	0x40021000
 800275c:	fffff0ff 	.word	0xfffff0ff
 8002760:	ffff8fff 	.word	0xffff8fff
 8002764:	08002da4 	.word	0x08002da4
 8002768:	20000014 	.word	0x20000014
 800276c:	20000018 	.word	0x20000018

08002770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002776:	4b3c      	ldr	r3, [pc, #240]	; (8002868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2238      	movs	r2, #56	; 0x38
 800277c:	4013      	ands	r3, r2
 800277e:	d10f      	bne.n	80027a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002780:	4b39      	ldr	r3, [pc, #228]	; (8002868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0adb      	lsrs	r3, r3, #11
 8002786:	2207      	movs	r2, #7
 8002788:	4013      	ands	r3, r2
 800278a:	2201      	movs	r2, #1
 800278c:	409a      	lsls	r2, r3
 800278e:	0013      	movs	r3, r2
 8002790:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002792:	6839      	ldr	r1, [r7, #0]
 8002794:	4835      	ldr	r0, [pc, #212]	; (800286c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002796:	f7fd fcb7 	bl	8000108 <__udivsi3>
 800279a:	0003      	movs	r3, r0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	e05d      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a0:	4b31      	ldr	r3, [pc, #196]	; (8002868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2238      	movs	r2, #56	; 0x38
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d102      	bne.n	80027b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027ac:	4b30      	ldr	r3, [pc, #192]	; (8002870 <HAL_RCC_GetSysClockFreq+0x100>)
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	e054      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b2:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2238      	movs	r2, #56	; 0x38
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d138      	bne.n	8002830 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027be:	4b2a      	ldr	r3, [pc, #168]	; (8002868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2203      	movs	r2, #3
 80027c4:	4013      	ands	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	2207      	movs	r2, #7
 80027d0:	4013      	ands	r3, r2
 80027d2:	3301      	adds	r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d10d      	bne.n	80027f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	4824      	ldr	r0, [pc, #144]	; (8002870 <HAL_RCC_GetSysClockFreq+0x100>)
 80027e0:	f7fd fc92 	bl	8000108 <__udivsi3>
 80027e4:	0003      	movs	r3, r0
 80027e6:	0019      	movs	r1, r3
 80027e8:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	227f      	movs	r2, #127	; 0x7f
 80027f0:	4013      	ands	r3, r2
 80027f2:	434b      	muls	r3, r1
 80027f4:	617b      	str	r3, [r7, #20]
        break;
 80027f6:	e00d      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	481c      	ldr	r0, [pc, #112]	; (800286c <HAL_RCC_GetSysClockFreq+0xfc>)
 80027fc:	f7fd fc84 	bl	8000108 <__udivsi3>
 8002800:	0003      	movs	r3, r0
 8002802:	0019      	movs	r1, r3
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	227f      	movs	r2, #127	; 0x7f
 800280c:	4013      	ands	r3, r2
 800280e:	434b      	muls	r3, r1
 8002810:	617b      	str	r3, [r7, #20]
        break;
 8002812:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	0f5b      	lsrs	r3, r3, #29
 800281a:	2207      	movs	r2, #7
 800281c:	4013      	ands	r3, r2
 800281e:	3301      	adds	r3, #1
 8002820:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	6978      	ldr	r0, [r7, #20]
 8002826:	f7fd fc6f 	bl	8000108 <__udivsi3>
 800282a:	0003      	movs	r3, r0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	e015      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2238      	movs	r2, #56	; 0x38
 8002836:	4013      	ands	r3, r2
 8002838:	2b20      	cmp	r3, #32
 800283a:	d103      	bne.n	8002844 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	e00b      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2238      	movs	r2, #56	; 0x38
 800284a:	4013      	ands	r3, r2
 800284c:	2b18      	cmp	r3, #24
 800284e:	d103      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002850:	23fa      	movs	r3, #250	; 0xfa
 8002852:	01db      	lsls	r3, r3, #7
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	e001      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800285c:	693b      	ldr	r3, [r7, #16]
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b006      	add	sp, #24
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	40021000 	.word	0x40021000
 800286c:	00f42400 	.word	0x00f42400
 8002870:	007a1200 	.word	0x007a1200

08002874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800287c:	2313      	movs	r3, #19
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002884:	2312      	movs	r3, #18
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	029b      	lsls	r3, r3, #10
 8002894:	4013      	ands	r3, r2
 8002896:	d100      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002898:	e0ad      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289a:	2011      	movs	r0, #17
 800289c:	183b      	adds	r3, r7, r0
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a2:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	055b      	lsls	r3, r3, #21
 80028aa:	4013      	ands	r3, r2
 80028ac:	d110      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028b2:	4b43      	ldr	r3, [pc, #268]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028b4:	2180      	movs	r1, #128	; 0x80
 80028b6:	0549      	lsls	r1, r1, #21
 80028b8:	430a      	orrs	r2, r1
 80028ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80028bc:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	055b      	lsls	r3, r3, #21
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ca:	183b      	adds	r3, r7, r0
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d0:	4b3c      	ldr	r3, [pc, #240]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	0049      	lsls	r1, r1, #1
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028de:	f7fe f935 	bl	8000b4c <HAL_GetTick>
 80028e2:	0003      	movs	r3, r0
 80028e4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028e6:	e00b      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e8:	f7fe f930 	bl	8000b4c <HAL_GetTick>
 80028ec:	0002      	movs	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d904      	bls.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80028f6:	2313      	movs	r3, #19
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	2203      	movs	r2, #3
 80028fc:	701a      	strb	r2, [r3, #0]
        break;
 80028fe:	e005      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002900:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4013      	ands	r3, r2
 800290a:	d0ed      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800290c:	2313      	movs	r3, #19
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d15e      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002916:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002918:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800291a:	23c0      	movs	r3, #192	; 0xc0
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4013      	ands	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d019      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	429a      	cmp	r2, r3
 8002930:	d014      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	4a24      	ldr	r2, [pc, #144]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002938:	4013      	ands	r3, r2
 800293a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800293c:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800293e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002940:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	0249      	lsls	r1, r1, #9
 8002946:	430a      	orrs	r2, r1
 8002948:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800294c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002950:	491e      	ldr	r1, [pc, #120]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002952:	400a      	ands	r2, r1
 8002954:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002956:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2201      	movs	r2, #1
 8002960:	4013      	ands	r3, r2
 8002962:	d016      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe f8f2 	bl	8000b4c <HAL_GetTick>
 8002968:	0003      	movs	r3, r0
 800296a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296c:	e00c      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe f8ed 	bl	8000b4c <HAL_GetTick>
 8002972:	0002      	movs	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d904      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800297e:	2313      	movs	r3, #19
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2203      	movs	r2, #3
 8002984:	701a      	strb	r2, [r3, #0]
            break;
 8002986:	e004      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d0ed      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002992:	2313      	movs	r3, #19
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800299e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a0:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80029ac:	430a      	orrs	r2, r1
 80029ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80029b0:	e016      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029b2:	2312      	movs	r3, #18
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	2213      	movs	r2, #19
 80029b8:	18ba      	adds	r2, r7, r2
 80029ba:	7812      	ldrb	r2, [r2, #0]
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e00f      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40007000 	.word	0x40007000
 80029c8:	fffffcff 	.word	0xfffffcff
 80029cc:	fffeffff 	.word	0xfffeffff
 80029d0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d4:	2312      	movs	r3, #18
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2213      	movs	r2, #19
 80029da:	18ba      	adds	r2, r7, r2
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029e0:	2311      	movs	r3, #17
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ea:	4bc5      	ldr	r3, [pc, #788]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80029ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ee:	4bc4      	ldr	r3, [pc, #784]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80029f0:	49c4      	ldr	r1, [pc, #784]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f2:	400a      	ands	r2, r1
 80029f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2201      	movs	r2, #1
 80029fc:	4013      	ands	r3, r2
 80029fe:	d009      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a00:	4bbf      	ldr	r3, [pc, #764]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	2203      	movs	r2, #3
 8002a06:	4393      	bics	r3, r2
 8002a08:	0019      	movs	r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4bbc      	ldr	r3, [pc, #752]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002a10:	430a      	orrs	r2, r1
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d009      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a1e:	4bb8      	ldr	r3, [pc, #736]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	220c      	movs	r2, #12
 8002a24:	4393      	bics	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	4bb4      	ldr	r3, [pc, #720]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2204      	movs	r2, #4
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d009      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a3c:	4bb0      	ldr	r3, [pc, #704]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	2230      	movs	r2, #48	; 0x30
 8002a42:	4393      	bics	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	4bad      	ldr	r3, [pc, #692]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2210      	movs	r2, #16
 8002a56:	4013      	ands	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a5a:	4ba9      	ldr	r3, [pc, #676]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5e:	4aaa      	ldr	r2, [pc, #680]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	4ba5      	ldr	r3, [pc, #660]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	015b      	lsls	r3, r3, #5
 8002a76:	4013      	ands	r3, r2
 8002a78:	d009      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002a7a:	4ba1      	ldr	r3, [pc, #644]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	4aa3      	ldr	r2, [pc, #652]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	4b9d      	ldr	r3, [pc, #628]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	d009      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a9a:	4b99      	ldr	r3, [pc, #612]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	4a9c      	ldr	r2, [pc, #624]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa8:	4b95      	ldr	r3, [pc, #596]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d009      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aba:	4b91      	ldr	r3, [pc, #580]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	4a95      	ldr	r2, [pc, #596]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac8:	4b8d      	ldr	r3, [pc, #564]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002aca:	430a      	orrs	r2, r1
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d009      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ad8:	4b89      	ldr	r3, [pc, #548]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	4a8e      	ldr	r2, [pc, #568]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	4b86      	ldr	r3, [pc, #536]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2240      	movs	r2, #64	; 0x40
 8002af2:	4013      	ands	r3, r2
 8002af4:	d009      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002af6:	4b82      	ldr	r3, [pc, #520]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	4a88      	ldr	r2, [pc, #544]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	0019      	movs	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002b06:	430a      	orrs	r2, r1
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	02db      	lsls	r3, r3, #11
 8002b12:	4013      	ands	r3, r2
 8002b14:	d016      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b16:	4b7a      	ldr	r3, [pc, #488]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	4a81      	ldr	r2, [pc, #516]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b24:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002b26:	430a      	orrs	r2, r1
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b2e:	23c0      	movs	r3, #192	; 0xc0
 8002b30:	051b      	lsls	r3, r3, #20
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d106      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b36:	4b72      	ldr	r3, [pc, #456]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	4b71      	ldr	r3, [pc, #452]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	0449      	lsls	r1, r1, #17
 8002b40:	430a      	orrs	r2, r1
 8002b42:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	01db      	lsls	r3, r3, #7
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d015      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x308>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b50:	4b6b      	ldr	r3, [pc, #428]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	0899      	lsrs	r1, r3, #2
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b5c:	4b68      	ldr	r3, [pc, #416]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	05db      	lsls	r3, r3, #23
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d106      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b6e:	4b64      	ldr	r3, [pc, #400]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	0249      	lsls	r1, r1, #9
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	031b      	lsls	r3, r3, #12
 8002b84:	4013      	ands	r3, r2
 8002b86:	d009      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b88:	4b5d      	ldr	r3, [pc, #372]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	2240      	movs	r2, #64	; 0x40
 8002b8e:	4393      	bics	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b96:	4b5a      	ldr	r3, [pc, #360]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	039b      	lsls	r3, r3, #14
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d016      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ba8:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bac:	4a5d      	ldr	r2, [pc, #372]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb6:	4b52      	ldr	r3, [pc, #328]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	03db      	lsls	r3, r3, #15
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002bc8:	4b4d      	ldr	r3, [pc, #308]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	0449      	lsls	r1, r1, #17
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	03db      	lsls	r3, r3, #15
 8002bde:	4013      	ands	r3, r2
 8002be0:	d016      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	4a50      	ldr	r2, [pc, #320]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf0:	4b43      	ldr	r3, [pc, #268]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	045b      	lsls	r3, r3, #17
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d106      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c02:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	0449      	lsls	r1, r1, #17
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d014      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	2203      	movs	r2, #3
 8002c22:	4393      	bics	r3, r2
 8002c24:	0019      	movs	r1, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1a      	ldr	r2, [r3, #32]
 8002c2a:	4b35      	ldr	r3, [pc, #212]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d106      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c38:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	0249      	lsls	r1, r1, #9
 8002c42:	430a      	orrs	r2, r1
 8002c44:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	019b      	lsls	r3, r3, #6
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d014      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002c52:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	220c      	movs	r2, #12
 8002c58:	4393      	bics	r3, r2
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c62:	430a      	orrs	r2, r1
 8002c64:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	0249      	lsls	r1, r1, #9
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	045b      	lsls	r3, r3, #17
 8002c84:	4013      	ands	r3, r2
 8002c86:	d016      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c96:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	019b      	lsls	r3, r3, #6
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002cae:	2180      	movs	r1, #128	; 0x80
 8002cb0:	0449      	lsls	r1, r1, #17
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	049b      	lsls	r3, r3, #18
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d016      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d106      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ce2:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	0449      	lsls	r1, r1, #17
 8002cec:	430a      	orrs	r2, r1
 8002cee:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002cf0:	2312      	movs	r3, #18
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	781b      	ldrb	r3, [r3, #0]
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b006      	add	sp, #24
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	40021000 	.word	0x40021000
 8002d04:	efffffff 	.word	0xefffffff
 8002d08:	fffff3ff 	.word	0xfffff3ff
 8002d0c:	fffffcff 	.word	0xfffffcff
 8002d10:	fff3ffff 	.word	0xfff3ffff
 8002d14:	ffcfffff 	.word	0xffcfffff
 8002d18:	ffffcfff 	.word	0xffffcfff
 8002d1c:	ffff3fff 	.word	0xffff3fff
 8002d20:	f3ffffff 	.word	0xf3ffffff
 8002d24:	ffbfffff 	.word	0xffbfffff
 8002d28:	feffffff 	.word	0xfeffffff

08002d2c <__libc_init_array>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	2600      	movs	r6, #0
 8002d30:	4d0c      	ldr	r5, [pc, #48]	; (8002d64 <__libc_init_array+0x38>)
 8002d32:	4c0d      	ldr	r4, [pc, #52]	; (8002d68 <__libc_init_array+0x3c>)
 8002d34:	1b64      	subs	r4, r4, r5
 8002d36:	10a4      	asrs	r4, r4, #2
 8002d38:	42a6      	cmp	r6, r4
 8002d3a:	d109      	bne.n	8002d50 <__libc_init_array+0x24>
 8002d3c:	2600      	movs	r6, #0
 8002d3e:	f000 f821 	bl	8002d84 <_init>
 8002d42:	4d0a      	ldr	r5, [pc, #40]	; (8002d6c <__libc_init_array+0x40>)
 8002d44:	4c0a      	ldr	r4, [pc, #40]	; (8002d70 <__libc_init_array+0x44>)
 8002d46:	1b64      	subs	r4, r4, r5
 8002d48:	10a4      	asrs	r4, r4, #2
 8002d4a:	42a6      	cmp	r6, r4
 8002d4c:	d105      	bne.n	8002d5a <__libc_init_array+0x2e>
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}
 8002d50:	00b3      	lsls	r3, r6, #2
 8002d52:	58eb      	ldr	r3, [r5, r3]
 8002d54:	4798      	blx	r3
 8002d56:	3601      	adds	r6, #1
 8002d58:	e7ee      	b.n	8002d38 <__libc_init_array+0xc>
 8002d5a:	00b3      	lsls	r3, r6, #2
 8002d5c:	58eb      	ldr	r3, [r5, r3]
 8002d5e:	4798      	blx	r3
 8002d60:	3601      	adds	r6, #1
 8002d62:	e7f2      	b.n	8002d4a <__libc_init_array+0x1e>
 8002d64:	08002df4 	.word	0x08002df4
 8002d68:	08002df4 	.word	0x08002df4
 8002d6c:	08002df4 	.word	0x08002df4
 8002d70:	08002df8 	.word	0x08002df8

08002d74 <memset>:
 8002d74:	0003      	movs	r3, r0
 8002d76:	1882      	adds	r2, r0, r2
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d100      	bne.n	8002d7e <memset+0xa>
 8002d7c:	4770      	bx	lr
 8002d7e:	7019      	strb	r1, [r3, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	e7f9      	b.n	8002d78 <memset+0x4>

08002d84 <_init>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr

08002d90 <_fini>:
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d96:	bc08      	pop	{r3}
 8002d98:	469e      	mov	lr, r3
 8002d9a:	4770      	bx	lr
