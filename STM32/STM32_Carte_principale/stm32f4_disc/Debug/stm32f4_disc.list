
stm32f4_disc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be8  08004be8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bf0  08004bf0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000047c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000048c  2000048c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014663  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002991  00000000  00000000  000346a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00037038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df8  00000000  00000000  00037f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000306d  00000000  00000000  00038d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001388f  00000000  00000000  0003bdad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc4f6  00000000  00000000  0004f63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011bb32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ddc  00000000  00000000  0011bb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b84 	.word	0x08004b84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004b84 	.word	0x08004b84

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <envoyer_message_pc>:


/*
 * Envoyer un message depuis le PC
 */
int envoyer_message_pc (char message[50]){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

	uint8_t constantes[4] = {0x08, 0x09, 0xa, 0xB};
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <envoyer_message_pc+0x24>)
 80004ca:	60fb      	str	r3, [r7, #12]

	HAL_UART_Transmit(&huart2, constantes, sizeof(constantes), 100);
 80004cc:	f107 010c 	add.w	r1, r7, #12
 80004d0:	2364      	movs	r3, #100	; 0x64
 80004d2:	2204      	movs	r2, #4
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <envoyer_message_pc+0x28>)
 80004d6:	f003 fab2 	bl	8003a3e <HAL_UART_Transmit>

	return 1;
 80004da:	2301      	movs	r3, #1
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	0b0a0908 	.word	0x0b0a0908
 80004e8:	20000444 	.word	0x20000444

080004ec <recevoir_message_pc2>:
	}
	*/
}


void recevoir_message_pc2(){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

	if (UART2_rxBuffer_2[pc_message_recu_index] == '\r'){ // on est a la fin du message
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <recevoir_message_pc2+0x44>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <recevoir_message_pc2+0x48>)
 80004f8:	5c9b      	ldrb	r3, [r3, r2]
 80004fa:	2b0d      	cmp	r3, #13
 80004fc:	d110      	bne.n	8000520 <recevoir_message_pc2+0x34>
		strcpy((char *)message_recu_PC,(char *)UART2_rxBuffer_2);
 80004fe:	490d      	ldr	r1, [pc, #52]	; (8000534 <recevoir_message_pc2+0x48>)
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <recevoir_message_pc2+0x4c>)
 8000502:	f004 fb37 	bl	8004b74 <strcpy>
		pc_message_recu_index = 0;
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <recevoir_message_pc2+0x44>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
		traiter_message_pc();
 800050c:	f000 f818 	bl	8000540 <traiter_message_pc>

		HAL_UART_Abort(&huart2);
 8000510:	480a      	ldr	r0, [pc, #40]	; (800053c <recevoir_message_pc2+0x50>)
 8000512:	f003 fb56 	bl	8003bc2 <HAL_UART_Abort>
		HAL_UART_Receive_IT(&huart2, UART2_rxBuffer_2, sizeof(UART2_rxBuffer_2));
 8000516:	2264      	movs	r2, #100	; 0x64
 8000518:	4906      	ldr	r1, [pc, #24]	; (8000534 <recevoir_message_pc2+0x48>)
 800051a:	4808      	ldr	r0, [pc, #32]	; (800053c <recevoir_message_pc2+0x50>)
 800051c:	f003 fb21 	bl	8003b62 <HAL_UART_Receive_IT>
	}

	pc_message_recu_index ++;
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <recevoir_message_pc2+0x44>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b01      	ldr	r3, [pc, #4]	; (8000530 <recevoir_message_pc2+0x44>)
 800052a:	701a      	strb	r2, [r3, #0]

}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000034 	.word	0x20000034
 8000534:	200002cc 	.word	0x200002cc
 8000538:	20000100 	.word	0x20000100
 800053c:	20000444 	.word	0x20000444

08000540 <traiter_message_pc>:


void traiter_message_pc(){
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0



	switch(message_recu_PC[0]){
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <traiter_message_pc+0x44>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b05      	cmp	r3, #5
 800054a:	d816      	bhi.n	800057a <traiter_message_pc+0x3a>
 800054c:	a201      	add	r2, pc, #4	; (adr r2, 8000554 <traiter_message_pc+0x14>)
 800054e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000552:	bf00      	nop
 8000554:	08000579 	.word	0x08000579
 8000558:	08000579 	.word	0x08000579
 800055c:	08000579 	.word	0x08000579
 8000560:	08000579 	.word	0x08000579
 8000564:	08000579 	.word	0x08000579
 8000568:	0800056d 	.word	0x0800056d

		break;

	case 5:   // controle PWM

		pwm = 2 * UART2_rxBuffer_2[1]; // on a un rapport *2
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <traiter_message_pc+0x48>)
 800056e:	785b      	ldrb	r3, [r3, #1]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	4a06      	ldr	r2, [pc, #24]	; (800058c <traiter_message_pc+0x4c>)
 8000574:	6013      	str	r3, [r2, #0]
		break;
 8000576:	e000      	b.n	800057a <traiter_message_pc+0x3a>
		break;
 8000578:	bf00      	nop
	}

}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	20000100 	.word	0x20000100
 8000588:	200002cc 	.word	0x200002cc
 800058c:	2000002c 	.word	0x2000002c

08000590 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	4b9a      	ldr	r3, [pc, #616]	; (8000814 <MX_GPIO_Init+0x284>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a99      	ldr	r2, [pc, #612]	; (8000814 <MX_GPIO_Init+0x284>)
 80005b0:	f043 0310 	orr.w	r3, r3, #16
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b97      	ldr	r3, [pc, #604]	; (8000814 <MX_GPIO_Init+0x284>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0310 	and.w	r3, r3, #16
 80005be:	61bb      	str	r3, [r7, #24]
 80005c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	4b93      	ldr	r3, [pc, #588]	; (8000814 <MX_GPIO_Init+0x284>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a92      	ldr	r2, [pc, #584]	; (8000814 <MX_GPIO_Init+0x284>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b90      	ldr	r3, [pc, #576]	; (8000814 <MX_GPIO_Init+0x284>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	4b8c      	ldr	r3, [pc, #560]	; (8000814 <MX_GPIO_Init+0x284>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a8b      	ldr	r2, [pc, #556]	; (8000814 <MX_GPIO_Init+0x284>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b89      	ldr	r3, [pc, #548]	; (8000814 <MX_GPIO_Init+0x284>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	4b85      	ldr	r3, [pc, #532]	; (8000814 <MX_GPIO_Init+0x284>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a84      	ldr	r2, [pc, #528]	; (8000814 <MX_GPIO_Init+0x284>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b82      	ldr	r3, [pc, #520]	; (8000814 <MX_GPIO_Init+0x284>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b7e      	ldr	r3, [pc, #504]	; (8000814 <MX_GPIO_Init+0x284>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a7d      	ldr	r2, [pc, #500]	; (8000814 <MX_GPIO_Init+0x284>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b7b      	ldr	r3, [pc, #492]	; (8000814 <MX_GPIO_Init+0x284>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b77      	ldr	r3, [pc, #476]	; (8000814 <MX_GPIO_Init+0x284>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a76      	ldr	r2, [pc, #472]	; (8000814 <MX_GPIO_Init+0x284>)
 800063c:	f043 0308 	orr.w	r3, r3, #8
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b74      	ldr	r3, [pc, #464]	; (8000814 <MX_GPIO_Init+0x284>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0308 	and.w	r3, r3, #8
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2108      	movs	r1, #8
 8000652:	4871      	ldr	r0, [pc, #452]	; (8000818 <MX_GPIO_Init+0x288>)
 8000654:	f001 fa06 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2101      	movs	r1, #1
 800065c:	486f      	ldr	r0, [pc, #444]	; (800081c <MX_GPIO_Init+0x28c>)
 800065e:	f001 fa01 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000662:	2200      	movs	r2, #0
 8000664:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000668:	486d      	ldr	r0, [pc, #436]	; (8000820 <MX_GPIO_Init+0x290>)
 800066a:	f001 f9fb 	bl	8001a64 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800066e:	2308      	movs	r3, #8
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4619      	mov	r1, r3
 8000684:	4864      	ldr	r0, [pc, #400]	; (8000818 <MX_GPIO_Init+0x288>)
 8000686:	f001 f851 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800068a:	2301      	movs	r3, #1
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	485e      	ldr	r0, [pc, #376]	; (800081c <MX_GPIO_Init+0x28c>)
 80006a2:	f001 f843 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80006a6:	2308      	movs	r3, #8
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006b6:	2305      	movs	r3, #5
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4856      	ldr	r0, [pc, #344]	; (800081c <MX_GPIO_Init+0x28c>)
 80006c2:	f001 f833 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c6:	2301      	movs	r3, #1
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	4852      	ldr	r0, [pc, #328]	; (8000824 <MX_GPIO_Init+0x294>)
 80006dc:	f001 f826 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80006e0:	2310      	movs	r3, #16
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006f0:	2306      	movs	r3, #6
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	484a      	ldr	r0, [pc, #296]	; (8000824 <MX_GPIO_Init+0x294>)
 80006fc:	f001 f816 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000700:	2304      	movs	r3, #4
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	4845      	ldr	r0, [pc, #276]	; (8000828 <MX_GPIO_Init+0x298>)
 8000714:	f001 f80a 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800072a:	2305      	movs	r3, #5
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	483c      	ldr	r0, [pc, #240]	; (8000828 <MX_GPIO_Init+0x298>)
 8000736:	f000 fff9 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800073a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800073e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	4833      	ldr	r0, [pc, #204]	; (8000820 <MX_GPIO_Init+0x290>)
 8000754:	f000 ffea 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000758:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800076a:	2306      	movs	r3, #6
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4829      	ldr	r0, [pc, #164]	; (800081c <MX_GPIO_Init+0x28c>)
 8000776:	f000 ffd9 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800077a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4825      	ldr	r0, [pc, #148]	; (8000824 <MX_GPIO_Init+0x294>)
 8000790:	f000 ffcc 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000794:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007a6:	230a      	movs	r3, #10
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	481c      	ldr	r0, [pc, #112]	; (8000824 <MX_GPIO_Init+0x294>)
 80007b2:	f000 ffbb 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007b6:	2320      	movs	r3, #32
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4815      	ldr	r0, [pc, #84]	; (8000820 <MX_GPIO_Init+0x290>)
 80007ca:	f000 ffaf 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007ce:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d4:	2312      	movs	r3, #18
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d8:	2301      	movs	r3, #1
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007e0:	2304      	movs	r3, #4
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	480f      	ldr	r0, [pc, #60]	; (8000828 <MX_GPIO_Init+0x298>)
 80007ec:	f000 ff9e 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0x288>)
 8000806:	f000 ff91 	bl	800172c <HAL_GPIO_Init>

}
 800080a:	bf00      	nop
 800080c:	3730      	adds	r7, #48	; 0x30
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40021000 	.word	0x40021000
 800081c:	40020800 	.word	0x40020800
 8000820:	40020c00 	.word	0x40020c00
 8000824:	40020000 	.word	0x40020000
 8000828:	40020400 	.word	0x40020400

0800082c <demarrer_pwm_lidar>:





void demarrer_pwm_lidar(){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

  TIM1->CCR1 = 30000;
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <demarrer_pwm_lidar+0x18>)
 8000832:	f247 5230 	movw	r2, #30000	; 0x7530
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000838:	2100      	movs	r1, #0
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <demarrer_pwm_lidar+0x1c>)
 800083c:	f002 fbe4 	bl	8003008 <HAL_TIM_PWM_Start>
  return;
 8000840:	bf00      	nop


  }
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40010000 	.word	0x40010000
 8000848:	20000280 	.word	0x20000280

0800084c <tests_lidar>:


/*
 * Test
 */
void tests_lidar(){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

	memset(lidar_message_recu,0,sizeof(lidar_message_recu));
 8000850:	2264      	movs	r2, #100	; 0x64
 8000852:	2100      	movs	r1, #0
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <tests_lidar+0x18>)
 8000856:	f004 f985 	bl	8004b64 <memset>
	//reset_lidar();
	//HAL_Delay(100);

	//lidar_get_info();

	lidar_scan();
 800085a:	f000 f805 	bl	8000868 <lidar_scan>

	return;
 800085e:	bf00      	nop
}
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000016c 	.word	0x2000016c

08000868 <lidar_scan>:
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}


void lidar_scan(){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
	uint8_t Data[2] = {0xA5, 0x20};
 800086e:	f242 03a5 	movw	r3, #8357	; 0x20a5
 8000872:	80bb      	strh	r3, [r7, #4]
	HAL_UART_Transmit(&huart3, Data, 2, 100);
 8000874:	1d39      	adds	r1, r7, #4
 8000876:	2364      	movs	r3, #100	; 0x64
 8000878:	2202      	movs	r2, #2
 800087a:	4803      	ldr	r0, [pc, #12]	; (8000888 <lidar_scan+0x20>)
 800087c:	f003 f8df 	bl	8003a3e <HAL_UART_Transmit>
	return;
 8000880:	bf00      	nop
}
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000330 	.word	0x20000330

0800088c <uart_lidar_recieve>:



void uart_lidar_recieve(){
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

	octet_recu = UART3_rxBuffer;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <uart_lidar_recieve+0x80>)
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <uart_lidar_recieve+0x84>)
 8000896:	701a      	strb	r2, [r3, #0]


	if ((octet_recu == 0xA5) && (last_bit_state == end) ){  // on recoit l'octet de start
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <uart_lidar_recieve+0x84>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2ba5      	cmp	r3, #165	; 0xa5
 800089e:	d112      	bne.n	80008c6 <uart_lidar_recieve+0x3a>
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <uart_lidar_recieve+0x88>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d10e      	bne.n	80008c6 <uart_lidar_recieve+0x3a>
		bit_state = start1;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <uart_lidar_recieve+0x8c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
		taille_message_recu = 0; // on remet a zero la taille du message recu
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <uart_lidar_recieve+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
		index_ecriture_message_recu = 0;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <uart_lidar_recieve+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
		memset(lidar_message_recu,0,sizeof(lidar_message_recu)); // on efface le buffer
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	2100      	movs	r1, #0
 80008be:	4819      	ldr	r0, [pc, #100]	; (8000924 <uart_lidar_recieve+0x98>)
 80008c0:	f004 f950 	bl	8004b64 <memset>
 80008c4:	e01c      	b.n	8000900 <uart_lidar_recieve+0x74>
		}

	else if ((last_bit_state == start1) && (octet_recu == 0x5A)){ // on recoit le deuxième octet de start
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <uart_lidar_recieve+0x88>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d107      	bne.n	80008de <uart_lidar_recieve+0x52>
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <uart_lidar_recieve+0x84>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b5a      	cmp	r3, #90	; 0x5a
 80008d4:	d103      	bne.n	80008de <uart_lidar_recieve+0x52>
		bit_state = start2;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <uart_lidar_recieve+0x8c>)
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
 80008dc:	e010      	b.n	8000900 <uart_lidar_recieve+0x74>
	}

	else if (last_bit_state == start2){   // on a l'octet qui donne la taille de la communication
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <uart_lidar_recieve+0x88>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d107      	bne.n	80008f6 <uart_lidar_recieve+0x6a>
		bit_state = size;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <uart_lidar_recieve+0x8c>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	701a      	strb	r2, [r3, #0]
		taille_message_recu = octet_recu;
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <uart_lidar_recieve+0x84>)
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <uart_lidar_recieve+0x90>)
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	e004      	b.n	8000900 <uart_lidar_recieve+0x74>
	}

	else{                                     // on a une data
		reception_octet_data();
 80008f6:	f000 f817 	bl	8000928 <reception_octet_data>
		bit_state = data;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <uart_lidar_recieve+0x8c>)
 80008fc:	2203      	movs	r2, #3
 80008fe:	701a      	strb	r2, [r3, #0]
	}



	last_bit_state = bit_state; // machine d'état
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <uart_lidar_recieve+0x8c>)
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <uart_lidar_recieve+0x88>)
 8000906:	701a      	strb	r2, [r3, #0]

	return;
 8000908:	bf00      	nop
}
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000374 	.word	0x20000374
 8000910:	20000169 	.word	0x20000169
 8000914:	20000000 	.word	0x20000000
 8000918:	20000168 	.word	0x20000168
 800091c:	2000016a 	.word	0x2000016a
 8000920:	20000164 	.word	0x20000164
 8000924:	2000016c 	.word	0x2000016c

08000928 <reception_octet_data>:

void reception_octet_data(){
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
		lidar_message_recu[index_ecriture_message_recu] = octet_recu;
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <reception_octet_data+0x3c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <reception_octet_data+0x40>)
 8000932:	7811      	ldrb	r1, [r2, #0]
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <reception_octet_data+0x44>)
 8000936:	54d1      	strb	r1, [r2, r3]
		index_ecriture_message_recu ++;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <reception_octet_data+0x3c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a09      	ldr	r2, [pc, #36]	; (8000964 <reception_octet_data+0x3c>)
 8000940:	6013      	str	r3, [r2, #0]
		if (index_ecriture_message_recu == taille_message_recu){
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <reception_octet_data+0x48>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <reception_octet_data+0x3c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	429a      	cmp	r2, r3
 800094e:	d103      	bne.n	8000958 <reception_octet_data+0x30>
			bit_state = end;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <reception_octet_data+0x4c>)
 8000952:	2204      	movs	r2, #4
 8000954:	701a      	strb	r2, [r3, #0]
		}


	return;
 8000956:	bf00      	nop
 8000958:	bf00      	nop
}
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000164 	.word	0x20000164
 8000968:	20000169 	.word	0x20000169
 800096c:	2000016c 	.word	0x2000016c
 8000970:	2000016a 	.word	0x2000016a
 8000974:	20000168 	.word	0x20000168

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	; 0x38
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097e:	f000 fc8f 	bl	80012a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000982:	f000 f845 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000986:	f7ff fe03 	bl	8000590 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800098a:	f000 fb5b 	bl	8001044 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800098e:	f000 fb83 	bl	8001098 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000992:	f000 f8ad 	bl	8000af0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000996:	f000 fa75 	bl	8000e84 <MX_TIM1_Init>
  MX_SPI2_Init();
 800099a:	f000 f8df 	bl	8000b5c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer_2, sizeof(&UART2_rxBuffer_2));
 800099e:	2204      	movs	r2, #4
 80009a0:	4915      	ldr	r1, [pc, #84]	; (80009f8 <main+0x80>)
 80009a2:	4816      	ldr	r0, [pc, #88]	; (80009fc <main+0x84>)
 80009a4:	f003 f8dd 	bl	8003b62 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	4915      	ldr	r1, [pc, #84]	; (8000a00 <main+0x88>)
 80009ac:	4815      	ldr	r0, [pc, #84]	; (8000a04 <main+0x8c>)
 80009ae:	f003 f8d8 	bl	8003b62 <HAL_UART_Receive_IT>

  demarrer_pwm_lidar();
 80009b2:	f7ff ff3b 	bl	800082c <demarrer_pwm_lidar>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80009b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ba:	4813      	ldr	r0, [pc, #76]	; (8000a08 <main+0x90>)
 80009bc:	f001 f86b 	bl	8001a96 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80009c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c4:	f000 fcde 	bl	8001384 <HAL_Delay>


	  //tests_lidar();
	  //test_spi();

	  char message [50] = "coucou";
 80009c8:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <main+0x94>)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d0:	6018      	str	r0, [r3, #0]
 80009d2:	3304      	adds	r3, #4
 80009d4:	8019      	strh	r1, [r3, #0]
 80009d6:	3302      	adds	r3, #2
 80009d8:	0c0a      	lsrs	r2, r1, #16
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	f107 030b 	add.w	r3, r7, #11
 80009e0:	222b      	movs	r2, #43	; 0x2b
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f004 f8bd 	bl	8004b64 <memset>
	  envoyer_message_pc(message);
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fd67 	bl	80004c0 <envoyer_message_pc>

	  //test_spi_();
	  tests_lidar();
 80009f2:	f7ff ff2b 	bl	800084c <tests_lidar>
  {
 80009f6:	e7de      	b.n	80009b6 <main+0x3e>
 80009f8:	200002cc 	.word	0x200002cc
 80009fc:	20000444 	.word	0x20000444
 8000a00:	20000374 	.word	0x20000374
 8000a04:	20000330 	.word	0x20000330
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	08004b9c 	.word	0x08004b9c

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b094      	sub	sp, #80	; 0x50
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0320 	add.w	r3, r7, #32
 8000a1a:	2230      	movs	r2, #48	; 0x30
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f004 f8a0 	bl	8004b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <SystemClock_Config+0xcc>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a27      	ldr	r2, [pc, #156]	; (8000adc <SystemClock_Config+0xcc>)
 8000a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b25      	ldr	r3, [pc, #148]	; (8000adc <SystemClock_Config+0xcc>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a76:	2302      	movs	r3, #2
 8000a78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a80:	2308      	movs	r3, #8
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a84:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 f818 	bl	8001acc <HAL_RCC_OscConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000aa2:	f000 f81f 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ab2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	2105      	movs	r1, #5
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fa79 	bl	8001fbc <HAL_RCC_ClockConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ad0:	f000 f808 	bl	8000ae4 <Error_Handler>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3750      	adds	r7, #80	; 0x50
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000af6:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <MX_SPI1_Init+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b24:	2230      	movs	r2, #48	; 0x30
 8000b26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b42:	f001 fc37 	bl	80023b4 <HAL_SPI_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b4c:	f7ff ffca 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000228 	.word	0x20000228
 8000b58:	40013000 	.word	0x40013000

08000b5c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000b62:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <MX_SPI2_Init+0x74>)
 8000b64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000b68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000ba8:	220a      	movs	r2, #10
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bac:	4807      	ldr	r0, [pc, #28]	; (8000bcc <MX_SPI2_Init+0x70>)
 8000bae:	f001 fc01 	bl	80023b4 <HAL_SPI_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bb8:	f7ff ff94 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */


  HAL_SPI_Receive_IT (SPI2, pRxData_spi , sizeof(pRxData_spi));
 8000bbc:	2264      	movs	r2, #100	; 0x64
 8000bbe:	4905      	ldr	r1, [pc, #20]	; (8000bd4 <MX_SPI2_Init+0x78>)
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <MX_SPI2_Init+0x74>)
 8000bc2:	f001 fc81 	bl	80024c8 <HAL_SPI_Receive_IT>

  /* USER CODE END SPI2_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200001d0 	.word	0x200001d0
 8000bd0:	40003800 	.word	0x40003800
 8000bd4:	2000009c 	.word	0x2000009c

08000bd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a4e      	ldr	r2, [pc, #312]	; (8000d30 <HAL_SPI_MspInit+0x158>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d13d      	bne.n	8000c76 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	4b4d      	ldr	r3, [pc, #308]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a4c      	ldr	r2, [pc, #304]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b4a      	ldr	r3, [pc, #296]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b46      	ldr	r3, [pc, #280]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a45      	ldr	r2, [pc, #276]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b43      	ldr	r3, [pc, #268]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c32:	23e0      	movs	r3, #224	; 0xe0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c42:	2305      	movs	r3, #5
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	483a      	ldr	r0, [pc, #232]	; (8000d38 <HAL_SPI_MspInit+0x160>)
 8000c4e:	f000 fd6d 	bl	800172c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c64:	2305      	movs	r3, #5
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4832      	ldr	r0, [pc, #200]	; (8000d38 <HAL_SPI_MspInit+0x160>)
 8000c70:	f000 fd5c 	bl	800172c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c74:	e057      	b.n	8000d26 <HAL_SPI_MspInit+0x14e>
  else if(spiHandle->Instance==SPI2)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a30      	ldr	r2, [pc, #192]	; (8000d3c <HAL_SPI_MspInit+0x164>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d152      	bne.n	8000d26 <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a2a      	ldr	r2, [pc, #168]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a23      	ldr	r2, [pc, #140]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cac:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_SPI_MspInit+0x15c>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4814      	ldr	r0, [pc, #80]	; (8000d40 <HAL_SPI_MspInit+0x168>)
 8000cf0:	f000 fd1c 	bl	800172c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000cf4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d06:	2305      	movs	r3, #5
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <HAL_SPI_MspInit+0x16c>)
 8000d12:	f000 fd0b 	bl	800172c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2024      	movs	r0, #36	; 0x24
 8000d1c:	f000 fc31 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d20:	2024      	movs	r0, #36	; 0x24
 8000d22:	f000 fc4a 	bl	80015ba <HAL_NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3730      	adds	r7, #48	; 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40013000 	.word	0x40013000
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40003800 	.word	0x40003800
 8000d40:	40020800 	.word	0x40020800
 8000d44:	40020400 	.word	0x40020400

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d86:	2007      	movs	r0, #7
 8000d88:	f000 fbf0 	bl	800156c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 faae 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <SPI2_IRQHandler+0x10>)
 8000df2:	f001 fc9b 	bl	800272c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200001d0 	.word	0x200001d0

08000e00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <USART2_IRQHandler+0x14>)
 8000e06:	f002 ffc7 	bl	8003d98 <HAL_UART_IRQHandler>
  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, 1);
  */

  //uart_pc_recieve();

  recevoir_message_pc2();
 8000e0a:	f7ff fb6f 	bl	80004ec <recevoir_message_pc2>

  /* USER CODE END USART2_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000444 	.word	0x20000444

08000e18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <USART3_IRQHandler+0x3c>)
 8000e20:	f002 ffba 	bl	8003d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */


  i++;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <USART3_IRQHandler+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <USART3_IRQHandler+0x40>)
 8000e2c:	6013      	str	r3, [r2, #0]
  if (i==2){
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <USART3_IRQHandler+0x40>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d102      	bne.n	8000e3c <USART3_IRQHandler+0x24>
	  uint8_t a = UART3_rxBuffer;
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <USART3_IRQHandler+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]

  }

  uart_lidar_recieve();
 8000e3c:	f7ff fd26 	bl	800088c <uart_lidar_recieve>
  HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	4906      	ldr	r1, [pc, #24]	; (8000e5c <USART3_IRQHandler+0x44>)
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <USART3_IRQHandler+0x3c>)
 8000e46:	f002 fe8c 	bl	8003b62 <HAL_UART_Receive_IT>




  /* USER CODE END USART3_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000330 	.word	0x20000330
 8000e58:	20000030 	.word	0x20000030
 8000e5c:	20000374 	.word	0x20000374

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b092      	sub	sp, #72	; 0x48
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2220      	movs	r2, #32
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f003 fe58 	bl	8004b64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eb4:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <MX_TIM1_Init+0x100>)
 8000eb6:	4a34      	ldr	r2, [pc, #208]	; (8000f88 <MX_TIM1_Init+0x104>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eba:	4b32      	ldr	r3, [pc, #200]	; (8000f84 <MX_TIM1_Init+0x100>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <MX_TIM1_Init+0x100>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	; (8000f84 <MX_TIM1_Init+0x100>)
 8000ec8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ecc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <MX_TIM1_Init+0x100>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MX_TIM1_Init+0x100>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <MX_TIM1_Init+0x100>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ee0:	4828      	ldr	r0, [pc, #160]	; (8000f84 <MX_TIM1_Init+0x100>)
 8000ee2:	f002 f842 	bl	8002f6a <HAL_TIM_PWM_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000eec:	f7ff fdfa 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efc:	4619      	mov	r1, r3
 8000efe:	4821      	ldr	r0, [pc, #132]	; (8000f84 <MX_TIM1_Init+0x100>)
 8000f00:	f002 fc82 	bl	8003808 <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f0a:	f7ff fdeb 	bl	8000ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0e:	2360      	movs	r3, #96	; 0x60
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4619      	mov	r1, r3
 8000f32:	4814      	ldr	r0, [pc, #80]	; (8000f84 <MX_TIM1_Init+0x100>)
 8000f34:	f002 f930 	bl	8003198 <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000f3e:	f7ff fdd1 	bl	8000ae4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <MX_TIM1_Init+0x100>)
 8000f66:	f002 fccb 	bl	8003900 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000f70:	f7ff fdb8 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <MX_TIM1_Init+0x100>)
 8000f76:	f000 f82b 	bl	8000fd0 <HAL_TIM_MspPostInit>

}
 8000f7a:	bf00      	nop
 8000f7c:	3748      	adds	r7, #72	; 0x48
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000280 	.word	0x20000280
 8000f88:	40010000 	.word	0x40010000

08000f8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10d      	bne.n	8000fba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_TIM_PWM_MspInit+0x40>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_TIM_PWM_MspInit+0x40>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <HAL_TIM_PWM_MspInit+0x40>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_TIM_MspPostInit+0x68>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d11e      	bne.n	8001030 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_TIM_MspPostInit+0x6c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_TIM_MspPostInit+0x6c>)
 8000ffc:	f043 0310 	orr.w	r3, r3, #16
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_TIM_MspPostInit+0x6c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800100e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001012:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_TIM_MspPostInit+0x70>)
 800102c:	f000 fb7e 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40010000 	.word	0x40010000
 800103c:	40023800 	.word	0x40023800
 8001040:	40021000 	.word	0x40021000

08001044 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_USART2_UART_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800107c:	f002 fc92 	bl	80039a4 <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001086:	f7ff fd2d 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000444 	.word	0x20000444
 8001094:	40004400 	.word	0x40004400

08001098 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_USART3_UART_Init+0x50>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010d0:	f002 fc68 	bl	80039a4 <HAL_UART_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010da:	f7ff fd03 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000330 	.word	0x20000330
 80010e8:	40004800 	.word	0x40004800

080010ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a4a      	ldr	r2, [pc, #296]	; (8001234 <HAL_UART_MspInit+0x148>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d134      	bne.n	8001178 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	4b49      	ldr	r3, [pc, #292]	; (8001238 <HAL_UART_MspInit+0x14c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a48      	ldr	r2, [pc, #288]	; (8001238 <HAL_UART_MspInit+0x14c>)
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b46      	ldr	r3, [pc, #280]	; (8001238 <HAL_UART_MspInit+0x14c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	61bb      	str	r3, [r7, #24]
 8001128:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	4b42      	ldr	r3, [pc, #264]	; (8001238 <HAL_UART_MspInit+0x14c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a41      	ldr	r2, [pc, #260]	; (8001238 <HAL_UART_MspInit+0x14c>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <HAL_UART_MspInit+0x14c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001146:	230c      	movs	r3, #12
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001156:	2307      	movs	r3, #7
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4836      	ldr	r0, [pc, #216]	; (800123c <HAL_UART_MspInit+0x150>)
 8001162:	f000 fae3 	bl	800172c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2026      	movs	r0, #38	; 0x26
 800116c:	f000 fa09 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001170:	2026      	movs	r0, #38	; 0x26
 8001172:	f000 fa22 	bl	80015ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001176:	e058      	b.n	800122a <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a30      	ldr	r2, [pc, #192]	; (8001240 <HAL_UART_MspInit+0x154>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d153      	bne.n	800122a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <HAL_UART_MspInit+0x14c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a2b      	ldr	r2, [pc, #172]	; (8001238 <HAL_UART_MspInit+0x14c>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b29      	ldr	r3, [pc, #164]	; (8001238 <HAL_UART_MspInit+0x14c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a24      	ldr	r2, [pc, #144]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b22      	ldr	r3, [pc, #136]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011e8:	2307      	movs	r3, #7
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4814      	ldr	r0, [pc, #80]	; (8001244 <HAL_UART_MspInit+0x158>)
 80011f4:	f000 fa9a 	bl	800172c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800120a:	2307      	movs	r3, #7
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <HAL_UART_MspInit+0x15c>)
 8001216:	f000 fa89 	bl	800172c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2027      	movs	r0, #39	; 0x27
 8001220:	f000 f9af 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001224:	2027      	movs	r0, #39	; 0x27
 8001226:	f000 f9c8 	bl	80015ba <HAL_NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3730      	adds	r7, #48	; 0x30
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40004400 	.word	0x40004400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000
 8001240:	40004800 	.word	0x40004800
 8001244:	40020400 	.word	0x40020400
 8001248:	40020c00 	.word	0x40020c00

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001284 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001252:	490e      	ldr	r1, [pc, #56]	; (800128c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001268:	4c0b      	ldr	r4, [pc, #44]	; (8001298 <LoopFillZerobss+0x26>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001276:	f7ff fdf3 	bl	8000e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127a:	f003 fc4f 	bl	8004b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff fb7b 	bl	8000978 <main>
  bx  lr    
 8001282:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001290:	08004bf8 	.word	0x08004bf8
  ldr r2, =_sbss
 8001294:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001298:	2000048c 	.word	0x2000048c

0800129c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <HAL_Init+0x40>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <HAL_Init+0x40>)
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_Init+0x40>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f94f 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fd38 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023c00 	.word	0x40023c00

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f967 	bl	80015d6 <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f000 f92f 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000004 	.word	0x20000004
 800133c:	2000000c 	.word	0x2000000c
 8001340:	20000008 	.word	0x20000008

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000000c 	.word	0x2000000c
 8001368:	20000488 	.word	0x20000488

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000488 	.word	0x20000488

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000000c 	.word	0x2000000c

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff29 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff3e 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff8e 	bl	80014c0 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff31 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff feb6 	bl	800136c <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d008      	beq.n	8001620 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2280      	movs	r2, #128	; 0x80
 8001612:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e052      	b.n	80016c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0216 	bic.w	r2, r2, #22
 800162e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800163e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	2b00      	cmp	r3, #0
 8001646:	d103      	bne.n	8001650 <HAL_DMA_Abort+0x62>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0208 	bic.w	r2, r2, #8
 800165e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001670:	e013      	b.n	800169a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001672:	f7ff fe7b 	bl	800136c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b05      	cmp	r3, #5
 800167e:	d90c      	bls.n	800169a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2220      	movs	r2, #32
 8001684:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2203      	movs	r2, #3
 800168a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e015      	b.n	80016c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e4      	bne.n	8001672 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ac:	223f      	movs	r2, #63	; 0x3f
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d004      	beq.n	80016ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e00c      	b.n	8001706 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2205      	movs	r2, #5
 80016f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	e16b      	b.n	8001a20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	429a      	cmp	r2, r3
 8001762:	f040 815a 	bne.w	8001a1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b01      	cmp	r3, #1
 8001770:	d005      	beq.n	800177e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177a:	2b02      	cmp	r3, #2
 800177c:	d130      	bne.n	80017e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 0201 	and.w	r2, r3, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d017      	beq.n	800181c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d123      	bne.n	8001870 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	08da      	lsrs	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3208      	adds	r2, #8
 8001830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	69b9      	ldr	r1, [r7, #24]
 800186c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0203 	and.w	r2, r3, #3
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80b4 	beq.w	8001a1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b60      	ldr	r3, [pc, #384]	; (8001a38 <HAL_GPIO_Init+0x30c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a5f      	ldr	r2, [pc, #380]	; (8001a38 <HAL_GPIO_Init+0x30c>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <HAL_GPIO_Init+0x30c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ce:	4a5b      	ldr	r2, [pc, #364]	; (8001a3c <HAL_GPIO_Init+0x310>)
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a52      	ldr	r2, [pc, #328]	; (8001a40 <HAL_GPIO_Init+0x314>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d02b      	beq.n	8001952 <HAL_GPIO_Init+0x226>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a51      	ldr	r2, [pc, #324]	; (8001a44 <HAL_GPIO_Init+0x318>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d025      	beq.n	800194e <HAL_GPIO_Init+0x222>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a50      	ldr	r2, [pc, #320]	; (8001a48 <HAL_GPIO_Init+0x31c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01f      	beq.n	800194a <HAL_GPIO_Init+0x21e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4f      	ldr	r2, [pc, #316]	; (8001a4c <HAL_GPIO_Init+0x320>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d019      	beq.n	8001946 <HAL_GPIO_Init+0x21a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4e      	ldr	r2, [pc, #312]	; (8001a50 <HAL_GPIO_Init+0x324>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x216>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4d      	ldr	r2, [pc, #308]	; (8001a54 <HAL_GPIO_Init+0x328>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x212>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <HAL_GPIO_Init+0x32c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x20e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4b      	ldr	r2, [pc, #300]	; (8001a5c <HAL_GPIO_Init+0x330>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x20a>
 8001932:	2307      	movs	r3, #7
 8001934:	e00e      	b.n	8001954 <HAL_GPIO_Init+0x228>
 8001936:	2308      	movs	r3, #8
 8001938:	e00c      	b.n	8001954 <HAL_GPIO_Init+0x228>
 800193a:	2306      	movs	r3, #6
 800193c:	e00a      	b.n	8001954 <HAL_GPIO_Init+0x228>
 800193e:	2305      	movs	r3, #5
 8001940:	e008      	b.n	8001954 <HAL_GPIO_Init+0x228>
 8001942:	2304      	movs	r3, #4
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x228>
 8001946:	2303      	movs	r3, #3
 8001948:	e004      	b.n	8001954 <HAL_GPIO_Init+0x228>
 800194a:	2302      	movs	r3, #2
 800194c:	e002      	b.n	8001954 <HAL_GPIO_Init+0x228>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x228>
 8001952:	2300      	movs	r3, #0
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f002 0203 	and.w	r2, r2, #3
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	4093      	lsls	r3, r2
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001964:	4935      	ldr	r1, [pc, #212]	; (8001a3c <HAL_GPIO_Init+0x310>)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <HAL_GPIO_Init+0x334>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001996:	4a32      	ldr	r2, [pc, #200]	; (8001a60 <HAL_GPIO_Init+0x334>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800199c:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <HAL_GPIO_Init+0x334>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c0:	4a27      	ldr	r2, [pc, #156]	; (8001a60 <HAL_GPIO_Init+0x334>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_GPIO_Init+0x334>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ea:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <HAL_GPIO_Init+0x334>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_GPIO_Init+0x334>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a14:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <HAL_GPIO_Init+0x334>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b0f      	cmp	r3, #15
 8001a24:	f67f ae90 	bls.w	8001748 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40020c00 	.word	0x40020c00
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40021400 	.word	0x40021400
 8001a58:	40021800 	.word	0x40021800
 8001a5c:	40021c00 	.word	0x40021c00
 8001a60:	40013c00 	.word	0x40013c00

08001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a80:	e003      	b.n	8001a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	041a      	lsls	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	619a      	str	r2, [r3, #24]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aa8:	887a      	ldrh	r2, [r7, #2]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	041a      	lsls	r2, r3, #16
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	619a      	str	r2, [r3, #24]
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e264      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d075      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aea:	4ba3      	ldr	r3, [pc, #652]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d00c      	beq.n	8001b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af6:	4ba0      	ldr	r3, [pc, #640]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d112      	bne.n	8001b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b02:	4b9d      	ldr	r3, [pc, #628]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b0e:	d10b      	bne.n	8001b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	4b99      	ldr	r3, [pc, #612]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d05b      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x108>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d157      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e23f      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b30:	d106      	bne.n	8001b40 <HAL_RCC_OscConfig+0x74>
 8001b32:	4b91      	ldr	r3, [pc, #580]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a90      	ldr	r2, [pc, #576]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e01d      	b.n	8001b7c <HAL_RCC_OscConfig+0xb0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x98>
 8001b4a:	4b8b      	ldr	r3, [pc, #556]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a8a      	ldr	r2, [pc, #552]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b88      	ldr	r3, [pc, #544]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a87      	ldr	r2, [pc, #540]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e00b      	b.n	8001b7c <HAL_RCC_OscConfig+0xb0>
 8001b64:	4b84      	ldr	r3, [pc, #528]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a83      	ldr	r2, [pc, #524]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b81      	ldr	r3, [pc, #516]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a80      	ldr	r2, [pc, #512]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff fbf2 	bl	800136c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fbee 	bl	800136c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e204      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0xc0>
 8001baa:	e014      	b.n	8001bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fbde 	bl	800136c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fbda 	bl	800136c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1f0      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	4b6c      	ldr	r3, [pc, #432]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xe8>
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d063      	beq.n	8001caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001be2:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00b      	beq.n	8001c06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bee:	4b62      	ldr	r3, [pc, #392]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d11c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfa:	4b5f      	ldr	r3, [pc, #380]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d116      	bne.n	8001c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	4b5c      	ldr	r3, [pc, #368]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <HAL_RCC_OscConfig+0x152>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e1c4      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1e:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4952      	ldr	r1, [pc, #328]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c32:	e03a      	b.n	8001caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3c:	4b4f      	ldr	r3, [pc, #316]	; (8001d7c <HAL_RCC_OscConfig+0x2b0>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff fb93 	bl	800136c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fb8f 	bl	800136c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1a5      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c68:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4940      	ldr	r1, [pc, #256]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
 8001c7c:	e015      	b.n	8001caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7e:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_RCC_OscConfig+0x2b0>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff fb72 	bl	800136c <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fb6e 	bl	800136c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e184      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d030      	beq.n	8001d18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d016      	beq.n	8001cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cbe:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_RCC_OscConfig+0x2b4>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff fb52 	bl	800136c <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fb4e 	bl	800136c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e164      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x200>
 8001cea:	e015      	b.n	8001d18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_RCC_OscConfig+0x2b4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fb3b 	bl	800136c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fb37 	bl	800136c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e14d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a0 	beq.w	8001e66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10f      	bne.n	8001d56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_OscConfig+0x2b8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d121      	bne.n	8001da6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_RCC_OscConfig+0x2b8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <HAL_RCC_OscConfig+0x2b8>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fafd 	bl	800136c <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e011      	b.n	8001d9a <HAL_RCC_OscConfig+0x2ce>
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	42470000 	.word	0x42470000
 8001d80:	42470e80 	.word	0x42470e80
 8001d84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d88:	f7ff faf0 	bl	800136c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e106      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9a:	4b85      	ldr	r3, [pc, #532]	; (8001fb0 <HAL_RCC_OscConfig+0x4e4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d106      	bne.n	8001dbc <HAL_RCC_OscConfig+0x2f0>
 8001dae:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	4a80      	ldr	r2, [pc, #512]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dba:	e01c      	b.n	8001df6 <HAL_RCC_OscConfig+0x32a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	d10c      	bne.n	8001dde <HAL_RCC_OscConfig+0x312>
 8001dc4:	4b7b      	ldr	r3, [pc, #492]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	4a7a      	ldr	r2, [pc, #488]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd0:	4b78      	ldr	r3, [pc, #480]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	4a77      	ldr	r2, [pc, #476]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6713      	str	r3, [r2, #112]	; 0x70
 8001ddc:	e00b      	b.n	8001df6 <HAL_RCC_OscConfig+0x32a>
 8001dde:	4b75      	ldr	r3, [pc, #468]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	4a74      	ldr	r2, [pc, #464]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dea:	4b72      	ldr	r3, [pc, #456]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a71      	ldr	r2, [pc, #452]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d015      	beq.n	8001e2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fab5 	bl	800136c <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7ff fab1 	bl	800136c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e0c5      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	4b65      	ldr	r3, [pc, #404]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ee      	beq.n	8001e06 <HAL_RCC_OscConfig+0x33a>
 8001e28:	e014      	b.n	8001e54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff fa9f 	bl	800136c <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7ff fa9b 	bl	800136c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0af      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e48:	4b5a      	ldr	r3, [pc, #360]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ee      	bne.n	8001e32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d105      	bne.n	8001e66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5a:	4b56      	ldr	r3, [pc, #344]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a55      	ldr	r2, [pc, #340]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 809b 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e70:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d05c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d141      	bne.n	8001f08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e84:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <HAL_RCC_OscConfig+0x4ec>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fa6f 	bl	800136c <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e92:	f7ff fa6b 	bl	800136c <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e081      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea4:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	019b      	lsls	r3, r3, #6
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	041b      	lsls	r3, r3, #16
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	061b      	lsls	r3, r3, #24
 8001ed4:	4937      	ldr	r1, [pc, #220]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eda:	4b37      	ldr	r3, [pc, #220]	; (8001fb8 <HAL_RCC_OscConfig+0x4ec>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fa44 	bl	800136c <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7ff fa40 	bl	800136c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e056      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x41c>
 8001f06:	e04e      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_RCC_OscConfig+0x4ec>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff fa2d 	bl	800136c <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f16:	f7ff fa29 	bl	800136c <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e03f      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f28:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f0      	bne.n	8001f16 <HAL_RCC_OscConfig+0x44a>
 8001f34:	e037      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e032      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_RCC_OscConfig+0x4e8>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d028      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d121      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d11a      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f72:	4013      	ands	r3, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d111      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	085b      	lsrs	r3, r3, #1
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	42470060 	.word	0x42470060

08001fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0cc      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b68      	ldr	r3, [pc, #416]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d90c      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b65      	ldr	r3, [pc, #404]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0b8      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002010:	4b59      	ldr	r3, [pc, #356]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800201a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	494d      	ldr	r1, [pc, #308]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d044      	beq.n	80020dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d119      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d003      	beq.n	800207a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002076:	2b03      	cmp	r3, #3
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e06f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e067      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4934      	ldr	r1, [pc, #208]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ac:	f7ff f95e 	bl	800136c <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7ff f95a 	bl	800136c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e04f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d20c      	bcs.n	8002104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e032      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4916      	ldr	r1, [pc, #88]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	490e      	ldr	r1, [pc, #56]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002142:	f000 f821 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002146:	4602      	mov	r2, r0
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	490a      	ldr	r1, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	5ccb      	ldrb	r3, [r1, r3]
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f8be 	bl	80012e4 <HAL_InitTick>

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023c00 	.word	0x40023c00
 8002178:	40023800 	.word	0x40023800
 800217c:	08004bd0 	.word	0x08004bd0
 8002180:	20000004 	.word	0x20000004
 8002184:	20000008 	.word	0x20000008

08002188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	2300      	movs	r3, #0
 800219a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a0:	4b67      	ldr	r3, [pc, #412]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d00d      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x40>
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	f200 80bd 	bhi.w	800232c <HAL_RCC_GetSysClockFreq+0x1a4>
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x34>
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ba:	e0b7      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b61      	ldr	r3, [pc, #388]	; (8002344 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021be:	60bb      	str	r3, [r7, #8]
       break;
 80021c0:	e0b7      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021c2:	4b61      	ldr	r3, [pc, #388]	; (8002348 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80021c4:	60bb      	str	r3, [r7, #8]
      break;
 80021c6:	e0b4      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c8:	4b5d      	ldr	r3, [pc, #372]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d2:	4b5b      	ldr	r3, [pc, #364]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d04d      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021de:	4b58      	ldr	r3, [pc, #352]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	099b      	lsrs	r3, r3, #6
 80021e4:	461a      	mov	r2, r3
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021ee:	f04f 0100 	mov.w	r1, #0
 80021f2:	ea02 0800 	and.w	r8, r2, r0
 80021f6:	ea03 0901 	and.w	r9, r3, r1
 80021fa:	4640      	mov	r0, r8
 80021fc:	4649      	mov	r1, r9
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	014b      	lsls	r3, r1, #5
 8002208:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800220c:	0142      	lsls	r2, r0, #5
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	ebb0 0008 	subs.w	r0, r0, r8
 8002216:	eb61 0109 	sbc.w	r1, r1, r9
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	018b      	lsls	r3, r1, #6
 8002224:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002228:	0182      	lsls	r2, r0, #6
 800222a:	1a12      	subs	r2, r2, r0
 800222c:	eb63 0301 	sbc.w	r3, r3, r1
 8002230:	f04f 0000 	mov.w	r0, #0
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	00d9      	lsls	r1, r3, #3
 800223a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800223e:	00d0      	lsls	r0, r2, #3
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	eb12 0208 	adds.w	r2, r2, r8
 8002248:	eb43 0309 	adc.w	r3, r3, r9
 800224c:	f04f 0000 	mov.w	r0, #0
 8002250:	f04f 0100 	mov.w	r1, #0
 8002254:	0259      	lsls	r1, r3, #9
 8002256:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800225a:	0250      	lsls	r0, r2, #9
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	461a      	mov	r2, r3
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	f7fd ffac 	bl	80001c8 <__aeabi_uldivmod>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4613      	mov	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e04a      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	099b      	lsrs	r3, r3, #6
 8002280:	461a      	mov	r2, r3
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800228a:	f04f 0100 	mov.w	r1, #0
 800228e:	ea02 0400 	and.w	r4, r2, r0
 8002292:	ea03 0501 	and.w	r5, r3, r1
 8002296:	4620      	mov	r0, r4
 8002298:	4629      	mov	r1, r5
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	014b      	lsls	r3, r1, #5
 80022a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022a8:	0142      	lsls	r2, r0, #5
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	1b00      	subs	r0, r0, r4
 80022b0:	eb61 0105 	sbc.w	r1, r1, r5
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	018b      	lsls	r3, r1, #6
 80022be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022c2:	0182      	lsls	r2, r0, #6
 80022c4:	1a12      	subs	r2, r2, r0
 80022c6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ca:	f04f 0000 	mov.w	r0, #0
 80022ce:	f04f 0100 	mov.w	r1, #0
 80022d2:	00d9      	lsls	r1, r3, #3
 80022d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022d8:	00d0      	lsls	r0, r2, #3
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	1912      	adds	r2, r2, r4
 80022e0:	eb45 0303 	adc.w	r3, r5, r3
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	0299      	lsls	r1, r3, #10
 80022ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022f2:	0290      	lsls	r0, r2, #10
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	f7fd ff60 	bl	80001c8 <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4613      	mov	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	3301      	adds	r3, #1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	60bb      	str	r3, [r7, #8]
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800232e:	60bb      	str	r3, [r7, #8]
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	68bb      	ldr	r3, [r7, #8]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	00f42400 	.word	0x00f42400
 8002348:	007a1200 	.word	0x007a1200

0800234c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_RCC_GetHCLKFreq+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000004 	.word	0x20000004

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002368:	f7ff fff0 	bl	800234c <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0a9b      	lsrs	r3, r3, #10
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4903      	ldr	r1, [pc, #12]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40023800 	.word	0x40023800
 8002388:	08004be0 	.word	0x08004be0

0800238c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002390:	f7ff ffdc 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	0b5b      	lsrs	r3, r3, #13
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4903      	ldr	r1, [pc, #12]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08004be0 	.word	0x08004be0

080023b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07b      	b.n	80024be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d108      	bne.n	80023e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023d6:	d009      	beq.n	80023ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
 80023de:	e005      	b.n	80023ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fbe6 	bl	8000bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002422:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002470:	ea42 0103 	orr.w	r1, r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	f003 0104 	and.w	r1, r3, #4
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	f003 0210 	and.w	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d110      	bne.n	8002504 <HAL_SPI_Receive_IT+0x3c>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ea:	d10b      	bne.n	8002504 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2204      	movs	r2, #4
 80024f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f882 	bl	8002604 <HAL_SPI_TransmitReceive_IT>
 8002500:	4603      	mov	r3, r0
 8002502:	e076      	b.n	80025f2 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_SPI_Receive_IT+0x4a>
 800250e:	2302      	movs	r3, #2
 8002510:	e06f      	b.n	80025f2 <HAL_SPI_Receive_IT+0x12a>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d002      	beq.n	800252c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002526:	2302      	movs	r3, #2
 8002528:	75fb      	strb	r3, [r7, #23]
    goto error;
 800252a:	e05d      	b.n	80025e8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_SPI_Receive_IT+0x70>
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800253c:	e054      	b.n	80025e8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2204      	movs	r2, #4
 8002542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	88fa      	ldrh	r2, [r7, #6]
 8002556:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	88fa      	ldrh	r2, [r7, #6]
 800255c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4a1e      	ldr	r2, [pc, #120]	; (80025fc <HAL_SPI_Receive_IT+0x134>)
 8002582:	641a      	str	r2, [r3, #64]	; 0x40
 8002584:	e002      	b.n	800258c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <HAL_SPI_Receive_IT+0x138>)
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002594:	d10f      	bne.n	80025b6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80025c4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d008      	beq.n	80025e6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e000      	b.n	80025e8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80025e6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	08002b5d 	.word	0x08002b5d
 8002600:	08002b13 	.word	0x08002b13

08002604 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_SPI_TransmitReceive_IT+0x20>
 8002620:	2302      	movs	r3, #2
 8002622:	e075      	b.n	8002710 <HAL_SPI_TransmitReceive_IT+0x10c>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002632:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800263a:	7dbb      	ldrb	r3, [r7, #22]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d00d      	beq.n	800265c <HAL_SPI_TransmitReceive_IT+0x58>
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002646:	d106      	bne.n	8002656 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <HAL_SPI_TransmitReceive_IT+0x52>
 8002650:	7dbb      	ldrb	r3, [r7, #22]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d002      	beq.n	800265c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002656:	2302      	movs	r3, #2
 8002658:	75fb      	strb	r3, [r7, #23]
    goto error;
 800265a:	e054      	b.n	8002706 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_SPI_TransmitReceive_IT+0x6a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_SPI_TransmitReceive_IT+0x6a>
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002672:	e048      	b.n	8002706 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b04      	cmp	r3, #4
 800267e:	d003      	beq.n	8002688 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2205      	movs	r2, #5
 8002684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	887a      	ldrh	r2, [r7, #2]
 800269e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	887a      	ldrh	r2, [r7, #2]
 80026aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4a17      	ldr	r2, [pc, #92]	; (800271c <HAL_SPI_TransmitReceive_IT+0x118>)
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a17      	ldr	r2, [pc, #92]	; (8002720 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80026c4:	645a      	str	r2, [r3, #68]	; 0x44
 80026c6:	e005      	b.n	80026d4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <HAL_SPI_TransmitReceive_IT+0x120>)
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4a15      	ldr	r2, [pc, #84]	; (8002728 <HAL_SPI_TransmitReceive_IT+0x124>)
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80026e2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b40      	cmp	r3, #64	; 0x40
 80026f0:	d008      	beq.n	8002704 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e000      	b.n	8002706 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002704:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800270e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	08002a55 	.word	0x08002a55
 8002720:	08002ab5 	.word	0x08002ab5
 8002724:	08002991 	.word	0x08002991
 8002728:	080029f5 	.word	0x080029f5

0800272c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10f      	bne.n	8002770 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	099b      	lsrs	r3, r3, #6
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
    return;
 800276e:	e0d7      	b.n	8002920 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_SPI_IRQHandler+0x66>
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	09db      	lsrs	r3, r3, #7
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
    return;
 8002790:	e0c6      	b.n	8002920 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_SPI_IRQHandler+0x8c>
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80b4 	beq.w	8002920 <HAL_SPI_IRQHandler+0x1f4>
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80ad 	beq.w	8002920 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d023      	beq.n	800281a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d011      	beq.n	8002802 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	e00b      	b.n	800281a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]
        return;
 8002818:	e082      	b.n	8002920 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d014      	beq.n	8002850 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00c      	beq.n	8002876 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	f043 0208 	orr.w	r2, r3, #8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	2b00      	cmp	r3, #0
 800287c:	d04f      	beq.n	800291e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800288c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d104      	bne.n	80028aa <HAL_SPI_IRQHandler+0x17e>
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d034      	beq.n	8002914 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0203 	bic.w	r2, r2, #3
 80028b8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d011      	beq.n	80028e6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_SPI_IRQHandler+0x1fc>)
 80028c8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fefd 	bl	80016ce <HAL_DMA_Abort_IT>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f2:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_SPI_IRQHandler+0x1fc>)
 80028f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fee7 	bl	80016ce <HAL_DMA_Abort_IT>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002912:	e003      	b.n	800291c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f81d 	bl	8002954 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800291a:	e000      	b.n	800291e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800291c:	bf00      	nop
    return;
 800291e:	bf00      	nop
  }
}
 8002920:	3720      	adds	r7, #32
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	08002969 	.word	0x08002969

0800292c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f7ff ffe6 	bl	8002954 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002988:	bf00      	nop
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f103 020c 	add.w	r2, r3, #12
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10f      	bne.n	80029ec <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029da:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fa0c 	bl	8002e04 <SPI_CloseRxTx_ISR>
    }
  }
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	7812      	ldrb	r2, [r2, #0]
 8002a08:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10f      	bne.n	8002a4c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a3a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f9dc 	bl	8002e04 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	b292      	uxth	r2, r2
 8002a68:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	1c9a      	adds	r2, r3, #2
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10f      	bne.n	8002aac <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a9a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9ac 	bl	8002e04 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	881a      	ldrh	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	1c9a      	adds	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f97d 	bl	8002e04 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f103 020c 	add.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	7812      	ldrb	r2, [r2, #0]
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f9cc 	bl	8002eec <SPI_CloseRx_ISR>
  }
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6e:	b292      	uxth	r2, r2
 8002b70:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b76:	1c9a      	adds	r2, r3, #2
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f9a9 	bl	8002eec <SPI_CloseRx_ISR>
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bb4:	f7fe fbda 	bl	800136c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bc4:	f7fe fbd2 	bl	800136c <HAL_GetTick>
 8002bc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bca:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	015b      	lsls	r3, r3, #5
 8002bd0:	0d1b      	lsrs	r3, r3, #20
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bda:	e054      	b.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d050      	beq.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002be4:	f7fe fbc2 	bl	800136c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d902      	bls.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d13d      	bne.n	8002c76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c12:	d111      	bne.n	8002c38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1c:	d004      	beq.n	8002c28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c26:	d107      	bne.n	8002c38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c40:	d10f      	bne.n	8002c62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e017      	b.n	8002ca6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d19b      	bne.n	8002bdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc8:	d111      	bne.n	8002cee <SPI_EndRxTransaction+0x3a>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd2:	d004      	beq.n	8002cde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cdc:	d107      	bne.n	8002cee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cf6:	d12a      	bne.n	8002d4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d00:	d012      	beq.n	8002d28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff ff49 	bl	8002ba4 <SPI_WaitFlagStateUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02d      	beq.n	8002d74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	f043 0220 	orr.w	r2, r3, #32
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e026      	b.n	8002d76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2101      	movs	r1, #1
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f7ff ff36 	bl	8002ba4 <SPI_WaitFlagStateUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01a      	beq.n	8002d74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	f043 0220 	orr.w	r2, r3, #32
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e013      	b.n	8002d76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2101      	movs	r1, #1
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff ff23 	bl	8002ba4 <SPI_WaitFlagStateUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e000      	b.n	8002d76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <SPI_EndRxTxTransaction+0x7c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <SPI_EndRxTxTransaction+0x80>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	0d5b      	lsrs	r3, r3, #21
 8002d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002daa:	d112      	bne.n	8002dd2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2180      	movs	r1, #128	; 0x80
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7ff fef4 	bl	8002ba4 <SPI_WaitFlagStateUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e00f      	b.n	8002df2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	2b80      	cmp	r3, #128	; 0x80
 8002dea:	d0f2      	beq.n	8002dd2 <SPI_EndRxTxTransaction+0x52>
 8002dec:	e000      	b.n	8002df0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002dee:	bf00      	nop
  }

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000004 	.word	0x20000004
 8002e00:	165e9f81 	.word	0x165e9f81

08002e04 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002e0c:	4b35      	ldr	r3, [pc, #212]	; (8002ee4 <SPI_CloseRxTx_ISR+0xe0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a35      	ldr	r2, [pc, #212]	; (8002ee8 <SPI_CloseRxTx_ISR+0xe4>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0a5b      	lsrs	r3, r3, #9
 8002e18:	2264      	movs	r2, #100	; 0x64
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e20:	f7fe faa4 	bl	800136c <HAL_GetTick>
 8002e24:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0220 	bic.w	r2, r2, #32
 8002e34:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d106      	bne.n	8002e4a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	f043 0220 	orr.w	r2, r3, #32
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e48:	e009      	b.n	8002e5e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0eb      	beq.n	8002e36 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	2164      	movs	r1, #100	; 0x64
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ff8c 	bl	8002d80 <SPI_EndRxTxTransaction>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d115      	bne.n	8002ecc <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d107      	bne.n	8002ebc <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff fd39 	bl	800292c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002eba:	e00e      	b.n	8002eda <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff fd3b 	bl	8002940 <HAL_SPI_TxRxCpltCallback>
}
 8002eca:	e006      	b.n	8002eda <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff fd3d 	bl	8002954 <HAL_SPI_ErrorCallback>
}
 8002eda:	bf00      	nop
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000004 	.word	0x20000004
 8002ee8:	057619f1 	.word	0x057619f1

08002eec <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f02:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002f04:	f7fe fa32 	bl	800136c <HAL_GetTick>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2164      	movs	r1, #100	; 0x64
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff fed0 	bl	8002cb4 <SPI_EndRxTransaction>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d103      	bne.n	8002f5c <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff fce9 	bl	800292c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002f5a:	e002      	b.n	8002f62 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fcf9 	bl	8002954 <HAL_SPI_ErrorCallback>
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e041      	b.n	8003000 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d106      	bne.n	8002f96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7fd fffb 	bl	8000f8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f000 f9b7 	bl	800331c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_TIM_PWM_Start+0x24>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	bf14      	ite	ne
 8003024:	2301      	movne	r3, #1
 8003026:	2300      	moveq	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e022      	b.n	8003072 <HAL_TIM_PWM_Start+0x6a>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b04      	cmp	r3, #4
 8003030:	d109      	bne.n	8003046 <HAL_TIM_PWM_Start+0x3e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b01      	cmp	r3, #1
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e015      	b.n	8003072 <HAL_TIM_PWM_Start+0x6a>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d109      	bne.n	8003060 <HAL_TIM_PWM_Start+0x58>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e008      	b.n	8003072 <HAL_TIM_PWM_Start+0x6a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e07c      	b.n	8003174 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d104      	bne.n	800308a <HAL_TIM_PWM_Start+0x82>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003088:	e013      	b.n	80030b2 <HAL_TIM_PWM_Start+0xaa>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b04      	cmp	r3, #4
 800308e:	d104      	bne.n	800309a <HAL_TIM_PWM_Start+0x92>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003098:	e00b      	b.n	80030b2 <HAL_TIM_PWM_Start+0xaa>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d104      	bne.n	80030aa <HAL_TIM_PWM_Start+0xa2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a8:	e003      	b.n	80030b2 <HAL_TIM_PWM_Start+0xaa>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2201      	movs	r2, #1
 80030b8:	6839      	ldr	r1, [r7, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fb7e 	bl	80037bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a2d      	ldr	r2, [pc, #180]	; (800317c <HAL_TIM_PWM_Start+0x174>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d004      	beq.n	80030d4 <HAL_TIM_PWM_Start+0xcc>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <HAL_TIM_PWM_Start+0x178>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_TIM_PWM_Start+0xd0>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_TIM_PWM_Start+0xd2>
 80030d8:	2300      	movs	r3, #0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a22      	ldr	r2, [pc, #136]	; (800317c <HAL_TIM_PWM_Start+0x174>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d022      	beq.n	800313e <HAL_TIM_PWM_Start+0x136>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003100:	d01d      	beq.n	800313e <HAL_TIM_PWM_Start+0x136>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1f      	ldr	r2, [pc, #124]	; (8003184 <HAL_TIM_PWM_Start+0x17c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d018      	beq.n	800313e <HAL_TIM_PWM_Start+0x136>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_TIM_PWM_Start+0x180>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_TIM_PWM_Start+0x136>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1c      	ldr	r2, [pc, #112]	; (800318c <HAL_TIM_PWM_Start+0x184>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00e      	beq.n	800313e <HAL_TIM_PWM_Start+0x136>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a16      	ldr	r2, [pc, #88]	; (8003180 <HAL_TIM_PWM_Start+0x178>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d009      	beq.n	800313e <HAL_TIM_PWM_Start+0x136>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <HAL_TIM_PWM_Start+0x188>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d004      	beq.n	800313e <HAL_TIM_PWM_Start+0x136>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a16      	ldr	r2, [pc, #88]	; (8003194 <HAL_TIM_PWM_Start+0x18c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d111      	bne.n	8003162 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b06      	cmp	r3, #6
 800314e:	d010      	beq.n	8003172 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003160:	e007      	b.n	8003172 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40010000 	.word	0x40010000
 8003180:	40010400 	.word	0x40010400
 8003184:	40000400 	.word	0x40000400
 8003188:	40000800 	.word	0x40000800
 800318c:	40000c00 	.word	0x40000c00
 8003190:	40014000 	.word	0x40014000
 8003194:	40001800 	.word	0x40001800

08003198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0ae      	b.n	8003314 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	f200 809f 	bhi.w	8003304 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031c6:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003305 	.word	0x08003305
 80031d4:	08003305 	.word	0x08003305
 80031d8:	08003305 	.word	0x08003305
 80031dc:	08003241 	.word	0x08003241
 80031e0:	08003305 	.word	0x08003305
 80031e4:	08003305 	.word	0x08003305
 80031e8:	08003305 	.word	0x08003305
 80031ec:	08003283 	.word	0x08003283
 80031f0:	08003305 	.word	0x08003305
 80031f4:	08003305 	.word	0x08003305
 80031f8:	08003305 	.word	0x08003305
 80031fc:	080032c3 	.word	0x080032c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f928 	bl	800345c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0208 	orr.w	r2, r2, #8
 800321a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0204 	bic.w	r2, r2, #4
 800322a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6999      	ldr	r1, [r3, #24]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	619a      	str	r2, [r3, #24]
      break;
 800323e:	e064      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f978 	bl	800353c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800325a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6999      	ldr	r1, [r3, #24]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	619a      	str	r2, [r3, #24]
      break;
 8003280:	e043      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f9cd 	bl	8003628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0208 	orr.w	r2, r2, #8
 800329c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0204 	bic.w	r2, r2, #4
 80032ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69d9      	ldr	r1, [r3, #28]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	61da      	str	r2, [r3, #28]
      break;
 80032c0:	e023      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fa21 	bl	8003710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69d9      	ldr	r1, [r3, #28]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	021a      	lsls	r2, r3, #8
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	61da      	str	r2, [r3, #28]
      break;
 8003302:	e002      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	75fb      	strb	r3, [r7, #23]
      break;
 8003308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003312:	7dfb      	ldrb	r3, [r7, #23]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a40      	ldr	r2, [pc, #256]	; (8003430 <TIM_Base_SetConfig+0x114>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d013      	beq.n	800335c <TIM_Base_SetConfig+0x40>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333a:	d00f      	beq.n	800335c <TIM_Base_SetConfig+0x40>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a3d      	ldr	r2, [pc, #244]	; (8003434 <TIM_Base_SetConfig+0x118>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00b      	beq.n	800335c <TIM_Base_SetConfig+0x40>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a3c      	ldr	r2, [pc, #240]	; (8003438 <TIM_Base_SetConfig+0x11c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d007      	beq.n	800335c <TIM_Base_SetConfig+0x40>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a3b      	ldr	r2, [pc, #236]	; (800343c <TIM_Base_SetConfig+0x120>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <TIM_Base_SetConfig+0x40>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a3a      	ldr	r2, [pc, #232]	; (8003440 <TIM_Base_SetConfig+0x124>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d108      	bne.n	800336e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a2f      	ldr	r2, [pc, #188]	; (8003430 <TIM_Base_SetConfig+0x114>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02b      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337c:	d027      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a2c      	ldr	r2, [pc, #176]	; (8003434 <TIM_Base_SetConfig+0x118>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d023      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2b      	ldr	r2, [pc, #172]	; (8003438 <TIM_Base_SetConfig+0x11c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01f      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a2a      	ldr	r2, [pc, #168]	; (800343c <TIM_Base_SetConfig+0x120>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01b      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a29      	ldr	r2, [pc, #164]	; (8003440 <TIM_Base_SetConfig+0x124>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d017      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a28      	ldr	r2, [pc, #160]	; (8003444 <TIM_Base_SetConfig+0x128>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a27      	ldr	r2, [pc, #156]	; (8003448 <TIM_Base_SetConfig+0x12c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00f      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a26      	ldr	r2, [pc, #152]	; (800344c <TIM_Base_SetConfig+0x130>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00b      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a25      	ldr	r2, [pc, #148]	; (8003450 <TIM_Base_SetConfig+0x134>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a24      	ldr	r2, [pc, #144]	; (8003454 <TIM_Base_SetConfig+0x138>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a23      	ldr	r2, [pc, #140]	; (8003458 <TIM_Base_SetConfig+0x13c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d108      	bne.n	80033e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <TIM_Base_SetConfig+0x114>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <TIM_Base_SetConfig+0xf8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <TIM_Base_SetConfig+0x124>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d103      	bne.n	800341c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	615a      	str	r2, [r3, #20]
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40000c00 	.word	0x40000c00
 8003440:	40010400 	.word	0x40010400
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800
 8003450:	40001800 	.word	0x40001800
 8003454:	40001c00 	.word	0x40001c00
 8003458:	40002000 	.word	0x40002000

0800345c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f023 0201 	bic.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f023 0302 	bic.w	r3, r3, #2
 80034a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a20      	ldr	r2, [pc, #128]	; (8003534 <TIM_OC1_SetConfig+0xd8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_OC1_SetConfig+0x64>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <TIM_OC1_SetConfig+0xdc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d10c      	bne.n	80034da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f023 0308 	bic.w	r3, r3, #8
 80034c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f023 0304 	bic.w	r3, r3, #4
 80034d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <TIM_OC1_SetConfig+0xd8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d003      	beq.n	80034ea <TIM_OC1_SetConfig+0x8e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <TIM_OC1_SetConfig+0xdc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d111      	bne.n	800350e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	621a      	str	r2, [r3, #32]
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40010000 	.word	0x40010000
 8003538:	40010400 	.word	0x40010400

0800353c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f023 0210 	bic.w	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f023 0320 	bic.w	r3, r3, #32
 8003586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a22      	ldr	r2, [pc, #136]	; (8003620 <TIM_OC2_SetConfig+0xe4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_OC2_SetConfig+0x68>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a21      	ldr	r2, [pc, #132]	; (8003624 <TIM_OC2_SetConfig+0xe8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d10d      	bne.n	80035c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a17      	ldr	r2, [pc, #92]	; (8003620 <TIM_OC2_SetConfig+0xe4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d003      	beq.n	80035d0 <TIM_OC2_SetConfig+0x94>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a16      	ldr	r2, [pc, #88]	; (8003624 <TIM_OC2_SetConfig+0xe8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d113      	bne.n	80035f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40010400 	.word	0x40010400

08003628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a21      	ldr	r2, [pc, #132]	; (8003708 <TIM_OC3_SetConfig+0xe0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d003      	beq.n	800368e <TIM_OC3_SetConfig+0x66>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a20      	ldr	r2, [pc, #128]	; (800370c <TIM_OC3_SetConfig+0xe4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10d      	bne.n	80036aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a16      	ldr	r2, [pc, #88]	; (8003708 <TIM_OC3_SetConfig+0xe0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d003      	beq.n	80036ba <TIM_OC3_SetConfig+0x92>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a15      	ldr	r2, [pc, #84]	; (800370c <TIM_OC3_SetConfig+0xe4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d113      	bne.n	80036e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	621a      	str	r2, [r3, #32]
}
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	40010000 	.word	0x40010000
 800370c:	40010400 	.word	0x40010400

08003710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800375a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	031b      	lsls	r3, r3, #12
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <TIM_OC4_SetConfig+0xa4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d003      	beq.n	8003778 <TIM_OC4_SetConfig+0x68>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <TIM_OC4_SetConfig+0xa8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d109      	bne.n	800378c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800377e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	019b      	lsls	r3, r3, #6
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	621a      	str	r2, [r3, #32]
}
 80037a6:	bf00      	nop
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40010400 	.word	0x40010400

080037bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	2201      	movs	r2, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	43db      	mvns	r3, r3
 80037de:	401a      	ands	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	431a      	orrs	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	621a      	str	r2, [r3, #32]
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800381c:	2302      	movs	r3, #2
 800381e:	e05a      	b.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a21      	ldr	r2, [pc, #132]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d01d      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d018      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1b      	ldr	r2, [pc, #108]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d013      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1a      	ldr	r2, [pc, #104]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00e      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a18      	ldr	r2, [pc, #96]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d009      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d10c      	bne.n	80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800
 80038f0:	40000c00 	.word	0x40000c00
 80038f4:	40010400 	.word	0x40010400
 80038f8:	40014000 	.word	0x40014000
 80038fc:	40001800 	.word	0x40001800

08003900 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003918:	2302      	movs	r3, #2
 800391a:	e03d      	b.n	8003998 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e03f      	b.n	8003a36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd fb8e 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2224      	movs	r2, #36	; 0x24
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fecf 	bl	800478c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b08a      	sub	sp, #40	; 0x28
 8003a42:	af02      	add	r7, sp, #8
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d17c      	bne.n	8003b58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_UART_Transmit+0x2c>
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e075      	b.n	8003b5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_UART_Transmit+0x3e>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e06e      	b.n	8003b5a <HAL_UART_Transmit+0x11c>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2221      	movs	r2, #33	; 0x21
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a92:	f7fd fc6b 	bl	800136c <HAL_GetTick>
 8003a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	88fa      	ldrh	r2, [r7, #6]
 8003a9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	88fa      	ldrh	r2, [r7, #6]
 8003aa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d108      	bne.n	8003ac0 <HAL_UART_Transmit+0x82>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d104      	bne.n	8003ac0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	e003      	b.n	8003ac8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ad0:	e02a      	b.n	8003b28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fc13 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e036      	b.n	8003b5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10b      	bne.n	8003b0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	3302      	adds	r3, #2
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	e007      	b.n	8003b1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	3301      	adds	r3, #1
 8003b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1cf      	bne.n	8003ad2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2140      	movs	r1, #64	; 0x40
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fbe3 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e006      	b.n	8003b5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d11d      	bne.n	8003bb8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_UART_Receive_IT+0x26>
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e016      	b.n	8003bba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_UART_Receive_IT+0x38>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e00f      	b.n	8003bba <HAL_UART_Receive_IT+0x58>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fc18 	bl	80043e4 <UART_Start_Receive_IT>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	e000      	b.n	8003bba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
  }
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b0a0      	sub	sp, #128	; 0x80
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8003bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bdc:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8003be0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003bea:	66ba      	str	r2, [r7, #104]	; 0x68
 8003bec:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003bf0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003bf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e5      	bne.n	8003bca <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3314      	adds	r3, #20
 8003c1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c1e:	657a      	str	r2, [r7, #84]	; 0x54
 8003c20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e5      	bne.n	8003bfe <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d119      	bne.n	8003c6e <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	f023 0310 	bic.w	r3, r3, #16
 8003c50:	677b      	str	r3, [r7, #116]	; 0x74
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c5a:	643a      	str	r2, [r7, #64]	; 0x40
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b80      	cmp	r3, #128	; 0x80
 8003c7a:	d136      	bne.n	8003cea <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3314      	adds	r3, #20
 8003c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c92:	673b      	str	r3, [r7, #112]	; 0x70
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3314      	adds	r3, #20
 8003c9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e5      	bne.n	8003c7c <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d018      	beq.n	8003cea <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fd fc92 	bl	80015ee <HAL_DMA_Abort>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00c      	beq.n	8003cea <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fd fd1c 	bl	8001712 <HAL_DMA_GetError>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d104      	bne.n	8003cea <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2210      	movs	r2, #16
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e052      	b.n	8003d90 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b40      	cmp	r3, #64	; 0x40
 8003cf6:	d136      	bne.n	8003d66 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3314      	adds	r3, #20
 8003cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3314      	adds	r3, #20
 8003d16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d18:	61ba      	str	r2, [r7, #24]
 8003d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6979      	ldr	r1, [r7, #20]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	613b      	str	r3, [r7, #16]
   return(result);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d018      	beq.n	8003d66 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	2200      	movs	r2, #0
 8003d3a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fd fc54 	bl	80015ee <HAL_DMA_Abort>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00c      	beq.n	8003d66 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fd fcde 	bl	8001712 <HAL_DMA_GetError>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d104      	bne.n	8003d66 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2210      	movs	r2, #16
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e014      	b.n	8003d90 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3780      	adds	r7, #128	; 0x80
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b0ba      	sub	sp, #232	; 0xe8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_UART_IRQHandler+0x66>
 8003dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fc0d 	bl	8004616 <UART_Receive_IT>
      return;
 8003dfc:	e256      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80de 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x22c>
 8003e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d106      	bne.n	8003e22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80d1 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_UART_IRQHandler+0xae>
 8003e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_UART_IRQHandler+0xd2>
 8003e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0202 	orr.w	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_UART_IRQHandler+0xf6>
 8003e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f043 0204 	orr.w	r2, r3, #4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d011      	beq.n	8003ebe <HAL_UART_IRQHandler+0x126>
 8003e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f043 0208 	orr.w	r2, r3, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 81ed 	beq.w	80042a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x14e>
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fb98 	bl	8004616 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_UART_IRQHandler+0x17a>
 8003f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d04f      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 faa0 	bl	8004458 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b40      	cmp	r3, #64	; 0x40
 8003f24:	d141      	bne.n	8003faa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1d9      	bne.n	8003f26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d013      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	4a7d      	ldr	r2, [pc, #500]	; (8004174 <HAL_UART_IRQHandler+0x3dc>)
 8003f80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fd fba1 	bl	80016ce <HAL_DMA_Abort_IT>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e00e      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f99a 	bl	80042dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e00a      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f996 	bl	80042dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e006      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f992 	bl	80042dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fbe:	e170      	b.n	80042a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	bf00      	nop
    return;
 8003fc2:	e16e      	b.n	80042a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	f040 814a 	bne.w	8004262 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8143 	beq.w	8004262 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 813c 	beq.w	8004262 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	f040 80b4 	bne.w	8004178 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800401c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8140 	beq.w	80042a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800402a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800402e:	429a      	cmp	r2, r3
 8004030:	f080 8139 	bcs.w	80042a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800403a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004046:	f000 8088 	beq.w	800415a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004076:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800407a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004082:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800408e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1d9      	bne.n	800404a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3314      	adds	r3, #20
 800409c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3314      	adds	r3, #20
 80040b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e1      	bne.n	8004096 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e3      	bne.n	80040d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412a:	f023 0310 	bic.w	r3, r3, #16
 800412e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800413c:	65ba      	str	r2, [r7, #88]	; 0x58
 800413e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004142:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800414a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e3      	bne.n	8004118 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	4618      	mov	r0, r3
 8004156:	f7fd fa4a 	bl	80015ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004162:	b29b      	uxth	r3, r3
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	4619      	mov	r1, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8c0 	bl	80042f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004170:	e099      	b.n	80042a6 <HAL_UART_IRQHandler+0x50e>
 8004172:	bf00      	nop
 8004174:	0800451f 	.word	0x0800451f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004180:	b29b      	uxth	r3, r3
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 808b 	beq.w	80042aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8086 	beq.w	80042aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041c2:	647a      	str	r2, [r7, #68]	; 0x44
 80041c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e3      	bne.n	800419e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	623b      	str	r3, [r7, #32]
   return(result);
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3314      	adds	r3, #20
 80041f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041fa:	633a      	str	r2, [r7, #48]	; 0x30
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e3      	bne.n	80041d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	60fb      	str	r3, [r7, #12]
   return(result);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0310 	bic.w	r3, r3, #16
 8004232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004240:	61fa      	str	r2, [r7, #28]
 8004242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	617b      	str	r3, [r7, #20]
   return(result);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e3      	bne.n	800421c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f848 	bl	80042f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004260:	e023      	b.n	80042aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_UART_IRQHandler+0x4ea>
 800426e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f963 	bl	8004546 <UART_Transmit_IT>
    return;
 8004280:	e014      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00e      	beq.n	80042ac <HAL_UART_IRQHandler+0x514>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f9a3 	bl	80045e6 <UART_EndTransmit_IT>
    return;
 80042a0:	e004      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
    return;
 80042a2:	bf00      	nop
 80042a4:	e002      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
      return;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
      return;
 80042aa:	bf00      	nop
  }
}
 80042ac:	37e8      	adds	r7, #232	; 0xe8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop

080042b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b090      	sub	sp, #64	; 0x40
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004318:	e050      	b.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d04c      	beq.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
 8004328:	f7fd f820 	bl	800136c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004334:	429a      	cmp	r2, r3
 8004336:	d241      	bcs.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004358:	637a      	str	r2, [r7, #52]	; 0x34
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	613b      	str	r3, [r7, #16]
   return(result);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	63bb      	str	r3, [r7, #56]	; 0x38
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800438c:	623a      	str	r2, [r7, #32]
 800438e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	69f9      	ldr	r1, [r7, #28]
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	61bb      	str	r3, [r7, #24]
   return(result);
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e00f      	b.n	80043dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d09f      	beq.n	800431a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3740      	adds	r7, #64	; 0x40
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2222      	movs	r2, #34	; 0x22
 800440e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004428:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0220 	orr.w	r2, r2, #32
 8004448:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004458:	b480      	push	{r7}
 800445a:	b095      	sub	sp, #84	; 0x54
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004480:	643a      	str	r2, [r7, #64]	; 0x40
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e5      	bne.n	8004460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3314      	adds	r3, #20
 800449a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3314      	adds	r3, #20
 80044b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d119      	bne.n	8004504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	647b      	str	r3, [r7, #68]	; 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044f0:	61ba      	str	r2, [r7, #24]
 80044f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6979      	ldr	r1, [r7, #20]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	613b      	str	r3, [r7, #16]
   return(result);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e5      	bne.n	80044d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004512:	bf00      	nop
 8004514:	3754      	adds	r7, #84	; 0x54
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff fecf 	bl	80042dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b21      	cmp	r3, #33	; 0x21
 8004558:	d13e      	bne.n	80045d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004562:	d114      	bne.n	800458e <UART_Transmit_IT+0x48>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d110      	bne.n	800458e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004580:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	1c9a      	adds	r2, r3, #2
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	621a      	str	r2, [r3, #32]
 800458c:	e008      	b.n	80045a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	1c59      	adds	r1, r3, #1
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6211      	str	r1, [r2, #32]
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	4619      	mov	r1, r3
 80045ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10f      	bne.n	80045d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fe54 	bl	80042b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b08c      	sub	sp, #48	; 0x30
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b22      	cmp	r3, #34	; 0x22
 8004628:	f040 80ab 	bne.w	8004782 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004634:	d117      	bne.n	8004666 <UART_Receive_IT+0x50>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d113      	bne.n	8004666 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004654:	b29a      	uxth	r2, r3
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	629a      	str	r2, [r3, #40]	; 0x28
 8004664:	e026      	b.n	80046b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800466c:	2300      	movs	r3, #0
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004678:	d007      	beq.n	800468a <UART_Receive_IT+0x74>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <UART_Receive_IT+0x82>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e008      	b.n	80046aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29b      	uxth	r3, r3
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4619      	mov	r1, r3
 80046c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d15a      	bne.n	800477e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0220 	bic.w	r2, r2, #32
 80046d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	2b01      	cmp	r3, #1
 8004706:	d135      	bne.n	8004774 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	330c      	adds	r3, #12
 8004714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	613b      	str	r3, [r7, #16]
   return(result);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f023 0310 	bic.w	r3, r3, #16
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	330c      	adds	r3, #12
 800472c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472e:	623a      	str	r2, [r7, #32]
 8004730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	69f9      	ldr	r1, [r7, #28]
 8004734:	6a3a      	ldr	r2, [r7, #32]
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	61bb      	str	r3, [r7, #24]
   return(result);
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e5      	bne.n	800470e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b10      	cmp	r3, #16
 800474e:	d10a      	bne.n	8004766 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff fdbf 	bl	80042f0 <HAL_UARTEx_RxEventCallback>
 8004772:	e002      	b.n	800477a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff fda7 	bl	80042c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e002      	b.n	8004784 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3730      	adds	r7, #48	; 0x30
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004790:	b09f      	sub	sp, #124	; 0x7c
 8004792:	af00      	add	r7, sp, #0
 8004794:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a2:	68d9      	ldr	r1, [r3, #12]
 80047a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	ea40 0301 	orr.w	r3, r0, r1
 80047ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	431a      	orrs	r2, r3
 80047be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80047c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047d0:	f021 010c 	bic.w	r1, r1, #12
 80047d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047da:	430b      	orrs	r3, r1
 80047dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ea:	6999      	ldr	r1, [r3, #24]
 80047ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	ea40 0301 	orr.w	r3, r0, r1
 80047f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4bc5      	ldr	r3, [pc, #788]	; (8004b10 <UART_SetConfig+0x384>)
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d004      	beq.n	800480a <UART_SetConfig+0x7e>
 8004800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4bc3      	ldr	r3, [pc, #780]	; (8004b14 <UART_SetConfig+0x388>)
 8004806:	429a      	cmp	r2, r3
 8004808:	d103      	bne.n	8004812 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800480a:	f7fd fdbf 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 800480e:	6778      	str	r0, [r7, #116]	; 0x74
 8004810:	e002      	b.n	8004818 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004812:	f7fd fda7 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8004816:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004820:	f040 80b6 	bne.w	8004990 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004826:	461c      	mov	r4, r3
 8004828:	f04f 0500 	mov.w	r5, #0
 800482c:	4622      	mov	r2, r4
 800482e:	462b      	mov	r3, r5
 8004830:	1891      	adds	r1, r2, r2
 8004832:	6439      	str	r1, [r7, #64]	; 0x40
 8004834:	415b      	adcs	r3, r3
 8004836:	647b      	str	r3, [r7, #68]	; 0x44
 8004838:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800483c:	1912      	adds	r2, r2, r4
 800483e:	eb45 0303 	adc.w	r3, r5, r3
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f04f 0100 	mov.w	r1, #0
 800484a:	00d9      	lsls	r1, r3, #3
 800484c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004850:	00d0      	lsls	r0, r2, #3
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	1911      	adds	r1, r2, r4
 8004858:	6639      	str	r1, [r7, #96]	; 0x60
 800485a:	416b      	adcs	r3, r5
 800485c:	667b      	str	r3, [r7, #100]	; 0x64
 800485e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	461a      	mov	r2, r3
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	1891      	adds	r1, r2, r2
 800486a:	63b9      	str	r1, [r7, #56]	; 0x38
 800486c:	415b      	adcs	r3, r3
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004874:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004878:	f7fb fca6 	bl	80001c8 <__aeabi_uldivmod>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4ba5      	ldr	r3, [pc, #660]	; (8004b18 <UART_SetConfig+0x38c>)
 8004882:	fba3 2302 	umull	r2, r3, r3, r2
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	011e      	lsls	r6, r3, #4
 800488a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800488c:	461c      	mov	r4, r3
 800488e:	f04f 0500 	mov.w	r5, #0
 8004892:	4622      	mov	r2, r4
 8004894:	462b      	mov	r3, r5
 8004896:	1891      	adds	r1, r2, r2
 8004898:	6339      	str	r1, [r7, #48]	; 0x30
 800489a:	415b      	adcs	r3, r3
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
 800489e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048a2:	1912      	adds	r2, r2, r4
 80048a4:	eb45 0303 	adc.w	r3, r5, r3
 80048a8:	f04f 0000 	mov.w	r0, #0
 80048ac:	f04f 0100 	mov.w	r1, #0
 80048b0:	00d9      	lsls	r1, r3, #3
 80048b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048b6:	00d0      	lsls	r0, r2, #3
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	1911      	adds	r1, r2, r4
 80048be:	65b9      	str	r1, [r7, #88]	; 0x58
 80048c0:	416b      	adcs	r3, r5
 80048c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	461a      	mov	r2, r3
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	1891      	adds	r1, r2, r2
 80048d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80048d2:	415b      	adcs	r3, r3
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80048de:	f7fb fc73 	bl	80001c8 <__aeabi_uldivmod>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4b8c      	ldr	r3, [pc, #560]	; (8004b18 <UART_SetConfig+0x38c>)
 80048e8:	fba3 1302 	umull	r1, r3, r3, r2
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	2164      	movs	r1, #100	; 0x64
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	3332      	adds	r3, #50	; 0x32
 80048fa:	4a87      	ldr	r2, [pc, #540]	; (8004b18 <UART_SetConfig+0x38c>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004908:	441e      	add	r6, r3
 800490a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490c:	4618      	mov	r0, r3
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	1894      	adds	r4, r2, r2
 8004918:	623c      	str	r4, [r7, #32]
 800491a:	415b      	adcs	r3, r3
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
 800491e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004922:	1812      	adds	r2, r2, r0
 8004924:	eb41 0303 	adc.w	r3, r1, r3
 8004928:	f04f 0400 	mov.w	r4, #0
 800492c:	f04f 0500 	mov.w	r5, #0
 8004930:	00dd      	lsls	r5, r3, #3
 8004932:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004936:	00d4      	lsls	r4, r2, #3
 8004938:	4622      	mov	r2, r4
 800493a:	462b      	mov	r3, r5
 800493c:	1814      	adds	r4, r2, r0
 800493e:	653c      	str	r4, [r7, #80]	; 0x50
 8004940:	414b      	adcs	r3, r1
 8004942:	657b      	str	r3, [r7, #84]	; 0x54
 8004944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	461a      	mov	r2, r3
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	1891      	adds	r1, r2, r2
 8004950:	61b9      	str	r1, [r7, #24]
 8004952:	415b      	adcs	r3, r3
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800495a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800495e:	f7fb fc33 	bl	80001c8 <__aeabi_uldivmod>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4b6c      	ldr	r3, [pc, #432]	; (8004b18 <UART_SetConfig+0x38c>)
 8004968:	fba3 1302 	umull	r1, r3, r3, r2
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	2164      	movs	r1, #100	; 0x64
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	3332      	adds	r3, #50	; 0x32
 800497a:	4a67      	ldr	r2, [pc, #412]	; (8004b18 <UART_SetConfig+0x38c>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	f003 0207 	and.w	r2, r3, #7
 8004986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4432      	add	r2, r6
 800498c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800498e:	e0b9      	b.n	8004b04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004992:	461c      	mov	r4, r3
 8004994:	f04f 0500 	mov.w	r5, #0
 8004998:	4622      	mov	r2, r4
 800499a:	462b      	mov	r3, r5
 800499c:	1891      	adds	r1, r2, r2
 800499e:	6139      	str	r1, [r7, #16]
 80049a0:	415b      	adcs	r3, r3
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049a8:	1912      	adds	r2, r2, r4
 80049aa:	eb45 0303 	adc.w	r3, r5, r3
 80049ae:	f04f 0000 	mov.w	r0, #0
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	00d9      	lsls	r1, r3, #3
 80049b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049bc:	00d0      	lsls	r0, r2, #3
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	eb12 0804 	adds.w	r8, r2, r4
 80049c6:	eb43 0905 	adc.w	r9, r3, r5
 80049ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	008b      	lsls	r3, r1, #2
 80049de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049e2:	0082      	lsls	r2, r0, #2
 80049e4:	4640      	mov	r0, r8
 80049e6:	4649      	mov	r1, r9
 80049e8:	f7fb fbee 	bl	80001c8 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4b49      	ldr	r3, [pc, #292]	; (8004b18 <UART_SetConfig+0x38c>)
 80049f2:	fba3 2302 	umull	r2, r3, r3, r2
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	011e      	lsls	r6, r3, #4
 80049fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049fc:	4618      	mov	r0, r3
 80049fe:	f04f 0100 	mov.w	r1, #0
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	1894      	adds	r4, r2, r2
 8004a08:	60bc      	str	r4, [r7, #8]
 8004a0a:	415b      	adcs	r3, r3
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a12:	1812      	adds	r2, r2, r0
 8004a14:	eb41 0303 	adc.w	r3, r1, r3
 8004a18:	f04f 0400 	mov.w	r4, #0
 8004a1c:	f04f 0500 	mov.w	r5, #0
 8004a20:	00dd      	lsls	r5, r3, #3
 8004a22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a26:	00d4      	lsls	r4, r2, #3
 8004a28:	4622      	mov	r2, r4
 8004a2a:	462b      	mov	r3, r5
 8004a2c:	1814      	adds	r4, r2, r0
 8004a2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004a30:	414b      	adcs	r3, r1
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f04f 0100 	mov.w	r1, #0
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	008b      	lsls	r3, r1, #2
 8004a48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a4c:	0082      	lsls	r2, r0, #2
 8004a4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004a52:	f7fb fbb9 	bl	80001c8 <__aeabi_uldivmod>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4b2f      	ldr	r3, [pc, #188]	; (8004b18 <UART_SetConfig+0x38c>)
 8004a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	2164      	movs	r1, #100	; 0x64
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	3332      	adds	r3, #50	; 0x32
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <UART_SetConfig+0x38c>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a7a:	441e      	add	r6, r3
 8004a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f04f 0100 	mov.w	r1, #0
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	1894      	adds	r4, r2, r2
 8004a8a:	603c      	str	r4, [r7, #0]
 8004a8c:	415b      	adcs	r3, r3
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a94:	1812      	adds	r2, r2, r0
 8004a96:	eb41 0303 	adc.w	r3, r1, r3
 8004a9a:	f04f 0400 	mov.w	r4, #0
 8004a9e:	f04f 0500 	mov.w	r5, #0
 8004aa2:	00dd      	lsls	r5, r3, #3
 8004aa4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004aa8:	00d4      	lsls	r4, r2, #3
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	eb12 0a00 	adds.w	sl, r2, r0
 8004ab2:	eb43 0b01 	adc.w	fp, r3, r1
 8004ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	008b      	lsls	r3, r1, #2
 8004aca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ace:	0082      	lsls	r2, r0, #2
 8004ad0:	4650      	mov	r0, sl
 8004ad2:	4659      	mov	r1, fp
 8004ad4:	f7fb fb78 	bl	80001c8 <__aeabi_uldivmod>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <UART_SetConfig+0x38c>)
 8004ade:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2164      	movs	r1, #100	; 0x64
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	3332      	adds	r3, #50	; 0x32
 8004af0:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <UART_SetConfig+0x38c>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	f003 020f 	and.w	r2, r3, #15
 8004afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4432      	add	r2, r6
 8004b02:	609a      	str	r2, [r3, #8]
}
 8004b04:	bf00      	nop
 8004b06:	377c      	adds	r7, #124	; 0x7c
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0e:	bf00      	nop
 8004b10:	40011000 	.word	0x40011000
 8004b14:	40011400 	.word	0x40011400
 8004b18:	51eb851f 	.word	0x51eb851f

08004b1c <__libc_init_array>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	4d0d      	ldr	r5, [pc, #52]	; (8004b54 <__libc_init_array+0x38>)
 8004b20:	4c0d      	ldr	r4, [pc, #52]	; (8004b58 <__libc_init_array+0x3c>)
 8004b22:	1b64      	subs	r4, r4, r5
 8004b24:	10a4      	asrs	r4, r4, #2
 8004b26:	2600      	movs	r6, #0
 8004b28:	42a6      	cmp	r6, r4
 8004b2a:	d109      	bne.n	8004b40 <__libc_init_array+0x24>
 8004b2c:	4d0b      	ldr	r5, [pc, #44]	; (8004b5c <__libc_init_array+0x40>)
 8004b2e:	4c0c      	ldr	r4, [pc, #48]	; (8004b60 <__libc_init_array+0x44>)
 8004b30:	f000 f828 	bl	8004b84 <_init>
 8004b34:	1b64      	subs	r4, r4, r5
 8004b36:	10a4      	asrs	r4, r4, #2
 8004b38:	2600      	movs	r6, #0
 8004b3a:	42a6      	cmp	r6, r4
 8004b3c:	d105      	bne.n	8004b4a <__libc_init_array+0x2e>
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}
 8004b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b44:	4798      	blx	r3
 8004b46:	3601      	adds	r6, #1
 8004b48:	e7ee      	b.n	8004b28 <__libc_init_array+0xc>
 8004b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4e:	4798      	blx	r3
 8004b50:	3601      	adds	r6, #1
 8004b52:	e7f2      	b.n	8004b3a <__libc_init_array+0x1e>
 8004b54:	08004bf0 	.word	0x08004bf0
 8004b58:	08004bf0 	.word	0x08004bf0
 8004b5c:	08004bf0 	.word	0x08004bf0
 8004b60:	08004bf4 	.word	0x08004bf4

08004b64 <memset>:
 8004b64:	4402      	add	r2, r0
 8004b66:	4603      	mov	r3, r0
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d100      	bne.n	8004b6e <memset+0xa>
 8004b6c:	4770      	bx	lr
 8004b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b72:	e7f9      	b.n	8004b68 <memset+0x4>

08004b74 <strcpy>:
 8004b74:	4603      	mov	r3, r0
 8004b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b7a:	f803 2b01 	strb.w	r2, [r3], #1
 8004b7e:	2a00      	cmp	r2, #0
 8004b80:	d1f9      	bne.n	8004b76 <strcpy+0x2>
 8004b82:	4770      	bx	lr

08004b84 <_init>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	bf00      	nop
 8004b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8a:	bc08      	pop	{r3}
 8004b8c:	469e      	mov	lr, r3
 8004b8e:	4770      	bx	lr

08004b90 <_fini>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	bf00      	nop
 8004b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b96:	bc08      	pop	{r3}
 8004b98:	469e      	mov	lr, r3
 8004b9a:	4770      	bx	lr
