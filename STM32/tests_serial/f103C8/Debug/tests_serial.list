
tests_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08001b04  08001b04  00011b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cf8  08001cf8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cf8  08001cf8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cf8  08001cf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cf8  08001cf8  00011cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cfc  08001cfc  00011cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08001d0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001d0c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000053b4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013af  00000000  00000000  000253e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  00026798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000598  00000000  00000000  00026db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001609e  00000000  00000000  00027350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081b8  00000000  00000000  0003d3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e197  00000000  00000000  000455a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c373d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016d0  00000000  00000000  000c3790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001aec 	.word	0x08001aec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001aec 	.word	0x08001aec

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MX_GPIO_Init+0x40>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <MX_GPIO_Init+0x40>)
 8000158:	f043 0304 	orr.w	r3, r3, #4
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <MX_GPIO_Init+0x40>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0304 	and.w	r3, r3, #4
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <MX_GPIO_Init+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	; (800018c <MX_GPIO_Init+0x40>)
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <MX_GPIO_Init+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0308 	and.w	r3, r3, #8
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]

}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 f959 	bl	800044c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f810 	bl	80001be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f7ff ffd5 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a2:	f000 f8b7 	bl	8000314 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int a = 3;
 80001a6:	2303      	movs	r3, #3
 80001a8:	607b      	str	r3, [r7, #4]


  while (1)
  {

	  a ++;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	3301      	adds	r3, #1
 80001ae:	607b      	str	r3, [r7, #4]

	  a ++;
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	3301      	adds	r3, #1
 80001b4:	607b      	str	r3, [r7, #4]

	  HAL_Delay(1);
 80001b6:	2001      	movs	r0, #1
 80001b8:	f000 f9aa 	bl	8000510 <HAL_Delay>
	  a ++;
 80001bc:	e7f5      	b.n	80001aa <main+0x1a>

080001be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001be:	b580      	push	{r7, lr}
 80001c0:	b090      	sub	sp, #64	; 0x40
 80001c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c4:	f107 0318 	add.w	r3, r7, #24
 80001c8:	2228      	movs	r2, #40	; 0x28
 80001ca:	2100      	movs	r1, #0
 80001cc:	4618      	mov	r0, r3
 80001ce:	f001 fc85 	bl	8001adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e0:	2302      	movs	r3, #2
 80001e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e8:	2310      	movs	r3, #16
 80001ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ec:	2300      	movs	r3, #0
 80001ee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	f107 0318 	add.w	r3, r7, #24
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 fd27 	bl	8000c48 <HAL_RCC_OscConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000200:	f000 f818 	bl	8000234 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000204:	230f      	movs	r3, #15
 8000206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000208:	2300      	movs	r3, #0
 800020a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2100      	movs	r1, #0
 800021c:	4618      	mov	r0, r3
 800021e:	f001 f883 	bl	8001328 <HAL_RCC_ClockConfig>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000228:	f000 f804 	bl	8000234 <Error_Handler>
  }
}
 800022c:	bf00      	nop
 800022e:	3740      	adds	r7, #64	; 0x40
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000238:	b672      	cpsid	i
}
 800023a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800023c:	e7fe      	b.n	800023c <Error_Handler+0x8>

0800023e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800023e:	b480      	push	{r7}
 8000240:	b083      	sub	sp, #12
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
 8000246:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
	...

08000254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800025a:	4b15      	ldr	r3, [pc, #84]	; (80002b0 <HAL_MspInit+0x5c>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a14      	ldr	r2, [pc, #80]	; (80002b0 <HAL_MspInit+0x5c>)
 8000260:	f043 0301 	orr.w	r3, r3, #1
 8000264:	6193      	str	r3, [r2, #24]
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <HAL_MspInit+0x5c>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000272:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <HAL_MspInit+0x5c>)
 8000274:	69db      	ldr	r3, [r3, #28]
 8000276:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <HAL_MspInit+0x5c>)
 8000278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800027c:	61d3      	str	r3, [r2, #28]
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <HAL_MspInit+0x5c>)
 8000280:	69db      	ldr	r3, [r3, #28]
 8000282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800028a:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <HAL_MspInit+0x60>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <HAL_MspInit+0x60>)
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002a6:	bf00      	nop
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40021000 	.word	0x40021000
 80002b4:	40010000 	.word	0x40010000

080002b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002bc:	e7fe      	b.n	80002bc <NMI_Handler+0x4>

080002be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002be:	b480      	push	{r7}
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002c2:	e7fe      	b.n	80002c2 <HardFault_Handler+0x4>

080002c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <MemManage_Handler+0x4>

080002ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ca:	b480      	push	{r7}
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <BusFault_Handler+0x4>

080002d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <UsageFault_Handler+0x4>

080002d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr

080002e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr

080002ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr

080002fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002fe:	f000 f8eb 	bl	80004d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}

08000306 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
	...

08000314 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 800031a:	4a12      	ldr	r2, [pc, #72]	; (8000364 <MX_USART1_UART_Init+0x50>)
 800031c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000320:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 800033a:	220c      	movs	r2, #12
 800033c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_USART1_UART_Init+0x4c>)
 800034c:	f001 fa2c 	bl	80017a8 <HAL_UART_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000356:	f7ff ff6d 	bl	8000234 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000028 	.word	0x20000028
 8000364:	40013800 	.word	0x40013800

08000368 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a1c      	ldr	r2, [pc, #112]	; (80003f4 <HAL_UART_MspInit+0x8c>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d131      	bne.n	80003ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000388:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <HAL_UART_MspInit+0x90>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a1a      	ldr	r2, [pc, #104]	; (80003f8 <HAL_UART_MspInit+0x90>)
 800038e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <HAL_UART_MspInit+0x90>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <HAL_UART_MspInit+0x90>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <HAL_UART_MspInit+0x90>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <HAL_UART_MspInit+0x90>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	60bb      	str	r3, [r7, #8]
 80003b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003be:	2302      	movs	r3, #2
 80003c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c2:	2303      	movs	r3, #3
 80003c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	4619      	mov	r1, r3
 80003cc:	480b      	ldr	r0, [pc, #44]	; (80003fc <HAL_UART_MspInit+0x94>)
 80003ce:	f000 f9cb 	bl	8000768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4619      	mov	r1, r3
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <HAL_UART_MspInit+0x94>)
 80003e8:	f000 f9be 	bl	8000768 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80003ec:	bf00      	nop
 80003ee:	3720      	adds	r7, #32
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40013800 	.word	0x40013800
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800

08000400 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	; (8000434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	; (8000438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	; (8000444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000426:	f7ff ff6e 	bl	8000306 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800042a:	f001 fb33 	bl	8001a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042e:	f7ff feaf 	bl	8000190 <main>
  bx lr
 8000432:	4770      	bx	lr
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800043c:	08001d00 	.word	0x08001d00
  ldr r2, =_sbss
 8000440:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000444:	20000070 	.word	0x20000070

08000448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC1_2_IRQHandler>
	...

0800044c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <HAL_Init+0x28>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a07      	ldr	r2, [pc, #28]	; (8000474 <HAL_Init+0x28>)
 8000456:	f043 0310 	orr.w	r3, r3, #16
 800045a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800045c:	2003      	movs	r0, #3
 800045e:	f000 f92b 	bl	80006b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000462:	200f      	movs	r0, #15
 8000464:	f000 f808 	bl	8000478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000468:	f7ff fef4 	bl	8000254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800046c:	2300      	movs	r3, #0
}
 800046e:	4618      	mov	r0, r3
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <HAL_InitTick+0x54>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_InitTick+0x58>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4619      	mov	r1, r3
 800048a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800048e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000492:	fbb2 f3f3 	udiv	r3, r2, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f000 f95a 	bl	8000750 <HAL_SYSTICK_Config>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004a2:	2301      	movs	r3, #1
 80004a4:	e00e      	b.n	80004c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2b0f      	cmp	r3, #15
 80004aa:	d80a      	bhi.n	80004c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ac:	2200      	movs	r2, #0
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	f04f 30ff 	mov.w	r0, #4294967295
 80004b4:	f000 f920 	bl	80006f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004b8:	4a06      	ldr	r2, [pc, #24]	; (80004d4 <HAL_InitTick+0x5c>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004be:	2300      	movs	r3, #0
 80004c0:	e000      	b.n	80004c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004c2:	2301      	movs	r3, #1
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000000 	.word	0x20000000
 80004d0:	20000008 	.word	0x20000008
 80004d4:	20000004 	.word	0x20000004

080004d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_IncTick+0x1c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_IncTick+0x20>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <HAL_IncTick+0x20>)
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	20000008 	.word	0x20000008
 80004f8:	2000006c 	.word	0x2000006c

080004fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <HAL_GetTick+0x10>)
 8000502:	681b      	ldr	r3, [r3, #0]
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	2000006c 	.word	0x2000006c

08000510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000518:	f7ff fff0 	bl	80004fc <HAL_GetTick>
 800051c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000528:	d005      	beq.n	8000536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_Delay+0x44>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000536:	bf00      	nop
 8000538:	f7ff ffe0 	bl	80004fc <HAL_GetTick>
 800053c:	4602      	mov	r2, r0
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	429a      	cmp	r2, r3
 8000546:	d8f7      	bhi.n	8000538 <HAL_Delay+0x28>
  {
  }
}
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000008 	.word	0x20000008

08000558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f003 0307 	and.w	r3, r3, #7
 8000566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058a:	4a04      	ldr	r2, [pc, #16]	; (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	60d3      	str	r3, [r2, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <__NVIC_GetPriorityGrouping+0x18>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	0a1b      	lsrs	r3, r3, #8
 80005aa:	f003 0307 	and.w	r3, r3, #7
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	6039      	str	r1, [r7, #0]
 80005c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db0a      	blt.n	80005e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	490c      	ldr	r1, [pc, #48]	; (8000608 <__NVIC_SetPriority+0x4c>)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	0112      	lsls	r2, r2, #4
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	440b      	add	r3, r1
 80005e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e4:	e00a      	b.n	80005fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4908      	ldr	r1, [pc, #32]	; (800060c <__NVIC_SetPriority+0x50>)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	3b04      	subs	r3, #4
 80005f4:	0112      	lsls	r2, r2, #4
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	440b      	add	r3, r1
 80005fa:	761a      	strb	r2, [r3, #24]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000e100 	.word	0xe000e100
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000610:	b480      	push	{r7}
 8000612:	b089      	sub	sp, #36	; 0x24
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	f1c3 0307 	rsb	r3, r3, #7
 800062a:	2b04      	cmp	r3, #4
 800062c:	bf28      	it	cs
 800062e:	2304      	movcs	r3, #4
 8000630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	3304      	adds	r3, #4
 8000636:	2b06      	cmp	r3, #6
 8000638:	d902      	bls.n	8000640 <NVIC_EncodePriority+0x30>
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	3b03      	subs	r3, #3
 800063e:	e000      	b.n	8000642 <NVIC_EncodePriority+0x32>
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	f04f 32ff 	mov.w	r2, #4294967295
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	43da      	mvns	r2, r3
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	401a      	ands	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000658:	f04f 31ff 	mov.w	r1, #4294967295
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	43d9      	mvns	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	4313      	orrs	r3, r2
         );
}
 800066a:	4618      	mov	r0, r3
 800066c:	3724      	adds	r7, #36	; 0x24
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3b01      	subs	r3, #1
 8000680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000684:	d301      	bcc.n	800068a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000686:	2301      	movs	r3, #1
 8000688:	e00f      	b.n	80006aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <SysTick_Config+0x40>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3b01      	subs	r3, #1
 8000690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000692:	210f      	movs	r1, #15
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f7ff ff90 	bl	80005bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <SysTick_Config+0x40>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <SysTick_Config+0x40>)
 80006a4:	2207      	movs	r2, #7
 80006a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	e000e010 	.word	0xe000e010

080006b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b07      	cmp	r3, #7
 80006c4:	d00f      	beq.n	80006e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b06      	cmp	r3, #6
 80006ca:	d00c      	beq.n	80006e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b05      	cmp	r3, #5
 80006d0:	d009      	beq.n	80006e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d006      	beq.n	80006e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d003      	beq.n	80006e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80006de:	2192      	movs	r1, #146	; 0x92
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80006e2:	f7ff fdac 	bl	800023e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff36 	bl	8000558 <__NVIC_SetPriorityGrouping>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	08001b04 	.word	0x08001b04

080006f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d903      	bls.n	8000718 <HAL_NVIC_SetPriority+0x20>
 8000710:	21aa      	movs	r1, #170	; 0xaa
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <HAL_NVIC_SetPriority+0x54>)
 8000714:	f7ff fd93 	bl	800023e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	2b0f      	cmp	r3, #15
 800071c:	d903      	bls.n	8000726 <HAL_NVIC_SetPriority+0x2e>
 800071e:	21ab      	movs	r1, #171	; 0xab
 8000720:	480a      	ldr	r0, [pc, #40]	; (800074c <HAL_NVIC_SetPriority+0x54>)
 8000722:	f7ff fd8c 	bl	800023e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000726:	f7ff ff3b 	bl	80005a0 <__NVIC_GetPriorityGrouping>
 800072a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	68b9      	ldr	r1, [r7, #8]
 8000730:	6978      	ldr	r0, [r7, #20]
 8000732:	f7ff ff6d 	bl	8000610 <NVIC_EncodePriority>
 8000736:	4602      	mov	r2, r0
 8000738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073c:	4611      	mov	r1, r2
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff3c 	bl	80005bc <__NVIC_SetPriority>
}
 8000744:	bf00      	nop
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	08001b04 	.word	0x08001b04

08000750 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff8b 	bl	8000674 <SysTick_Config>
 800075e:	4603      	mov	r3, r0
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4aa1      	ldr	r2, [pc, #644]	; (8000a04 <HAL_GPIO_Init+0x29c>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d013      	beq.n	80007aa <HAL_GPIO_Init+0x42>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4aa0      	ldr	r2, [pc, #640]	; (8000a08 <HAL_GPIO_Init+0x2a0>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d00f      	beq.n	80007aa <HAL_GPIO_Init+0x42>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a9f      	ldr	r2, [pc, #636]	; (8000a0c <HAL_GPIO_Init+0x2a4>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d00b      	beq.n	80007aa <HAL_GPIO_Init+0x42>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a9e      	ldr	r2, [pc, #632]	; (8000a10 <HAL_GPIO_Init+0x2a8>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d007      	beq.n	80007aa <HAL_GPIO_Init+0x42>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a9d      	ldr	r2, [pc, #628]	; (8000a14 <HAL_GPIO_Init+0x2ac>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d003      	beq.n	80007aa <HAL_GPIO_Init+0x42>
 80007a2:	21bd      	movs	r1, #189	; 0xbd
 80007a4:	489c      	ldr	r0, [pc, #624]	; (8000a18 <HAL_GPIO_Init+0x2b0>)
 80007a6:	f7ff fd4a 	bl	800023e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d005      	beq.n	80007c0 <HAL_GPIO_Init+0x58>
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	0c1b      	lsrs	r3, r3, #16
 80007ba:	041b      	lsls	r3, r3, #16
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d003      	beq.n	80007c8 <HAL_GPIO_Init+0x60>
 80007c0:	21be      	movs	r1, #190	; 0xbe
 80007c2:	4895      	ldr	r0, [pc, #596]	; (8000a18 <HAL_GPIO_Init+0x2b0>)
 80007c4:	f7ff fd3b 	bl	800023e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	f000 821d 	beq.w	8000c0c <HAL_GPIO_Init+0x4a4>
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	f000 8218 	beq.w	8000c0c <HAL_GPIO_Init+0x4a4>
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	2b11      	cmp	r3, #17
 80007e2:	f000 8213 	beq.w	8000c0c <HAL_GPIO_Init+0x4a4>
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	f000 820e 	beq.w	8000c0c <HAL_GPIO_Init+0x4a4>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	2b12      	cmp	r3, #18
 80007f6:	f000 8209 	beq.w	8000c0c <HAL_GPIO_Init+0x4a4>
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	4a87      	ldr	r2, [pc, #540]	; (8000a1c <HAL_GPIO_Init+0x2b4>)
 8000800:	4293      	cmp	r3, r2
 8000802:	f000 8203 	beq.w	8000c0c <HAL_GPIO_Init+0x4a4>
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	4a85      	ldr	r2, [pc, #532]	; (8000a20 <HAL_GPIO_Init+0x2b8>)
 800080c:	4293      	cmp	r3, r2
 800080e:	f000 81fd 	beq.w	8000c0c <HAL_GPIO_Init+0x4a4>
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	4a83      	ldr	r2, [pc, #524]	; (8000a24 <HAL_GPIO_Init+0x2bc>)
 8000818:	4293      	cmp	r3, r2
 800081a:	f000 81f7 	beq.w	8000c0c <HAL_GPIO_Init+0x4a4>
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	4a81      	ldr	r2, [pc, #516]	; (8000a28 <HAL_GPIO_Init+0x2c0>)
 8000824:	4293      	cmp	r3, r2
 8000826:	f000 81f1 	beq.w	8000c0c <HAL_GPIO_Init+0x4a4>
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	4a7f      	ldr	r2, [pc, #508]	; (8000a2c <HAL_GPIO_Init+0x2c4>)
 8000830:	4293      	cmp	r3, r2
 8000832:	f000 81eb 	beq.w	8000c0c <HAL_GPIO_Init+0x4a4>
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4a7d      	ldr	r2, [pc, #500]	; (8000a30 <HAL_GPIO_Init+0x2c8>)
 800083c:	4293      	cmp	r3, r2
 800083e:	f000 81e5 	beq.w	8000c0c <HAL_GPIO_Init+0x4a4>
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	2b03      	cmp	r3, #3
 8000848:	f000 81e0 	beq.w	8000c0c <HAL_GPIO_Init+0x4a4>
 800084c:	21bf      	movs	r1, #191	; 0xbf
 800084e:	4872      	ldr	r0, [pc, #456]	; (8000a18 <HAL_GPIO_Init+0x2b0>)
 8000850:	f7ff fcf5 	bl	800023e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000854:	e1da      	b.n	8000c0c <HAL_GPIO_Init+0x4a4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000856:	2201      	movs	r2, #1
 8000858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	69fa      	ldr	r2, [r7, #28]
 8000866:	4013      	ands	r3, r2
 8000868:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	429a      	cmp	r2, r3
 8000870:	f040 81c9 	bne.w	8000c06 <HAL_GPIO_Init+0x49e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a63      	ldr	r2, [pc, #396]	; (8000a04 <HAL_GPIO_Init+0x29c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d013      	beq.n	80008a4 <HAL_GPIO_Init+0x13c>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a62      	ldr	r2, [pc, #392]	; (8000a08 <HAL_GPIO_Init+0x2a0>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d00f      	beq.n	80008a4 <HAL_GPIO_Init+0x13c>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a61      	ldr	r2, [pc, #388]	; (8000a0c <HAL_GPIO_Init+0x2a4>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d00b      	beq.n	80008a4 <HAL_GPIO_Init+0x13c>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a60      	ldr	r2, [pc, #384]	; (8000a10 <HAL_GPIO_Init+0x2a8>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d007      	beq.n	80008a4 <HAL_GPIO_Init+0x13c>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a5f      	ldr	r2, [pc, #380]	; (8000a14 <HAL_GPIO_Init+0x2ac>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d003      	beq.n	80008a4 <HAL_GPIO_Init+0x13c>
 800089c:	21cd      	movs	r1, #205	; 0xcd
 800089e:	485e      	ldr	r0, [pc, #376]	; (8000a18 <HAL_GPIO_Init+0x2b0>)
 80008a0:	f7ff fccd 	bl	800023e <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	4a61      	ldr	r2, [pc, #388]	; (8000a30 <HAL_GPIO_Init+0x2c8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	f000 80c2 	beq.w	8000a34 <HAL_GPIO_Init+0x2cc>
 80008b0:	4a5f      	ldr	r2, [pc, #380]	; (8000a30 <HAL_GPIO_Init+0x2c8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	f200 80e8 	bhi.w	8000a88 <HAL_GPIO_Init+0x320>
 80008b8:	4a5a      	ldr	r2, [pc, #360]	; (8000a24 <HAL_GPIO_Init+0x2bc>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	f000 80ba 	beq.w	8000a34 <HAL_GPIO_Init+0x2cc>
 80008c0:	4a58      	ldr	r2, [pc, #352]	; (8000a24 <HAL_GPIO_Init+0x2bc>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	f200 80e0 	bhi.w	8000a88 <HAL_GPIO_Init+0x320>
 80008c8:	4a58      	ldr	r2, [pc, #352]	; (8000a2c <HAL_GPIO_Init+0x2c4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f000 80b2 	beq.w	8000a34 <HAL_GPIO_Init+0x2cc>
 80008d0:	4a56      	ldr	r2, [pc, #344]	; (8000a2c <HAL_GPIO_Init+0x2c4>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	f200 80d8 	bhi.w	8000a88 <HAL_GPIO_Init+0x320>
 80008d8:	4a51      	ldr	r2, [pc, #324]	; (8000a20 <HAL_GPIO_Init+0x2b8>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	f000 80aa 	beq.w	8000a34 <HAL_GPIO_Init+0x2cc>
 80008e0:	4a4f      	ldr	r2, [pc, #316]	; (8000a20 <HAL_GPIO_Init+0x2b8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	f200 80d0 	bhi.w	8000a88 <HAL_GPIO_Init+0x320>
 80008e8:	4a4f      	ldr	r2, [pc, #316]	; (8000a28 <HAL_GPIO_Init+0x2c0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	f000 80a2 	beq.w	8000a34 <HAL_GPIO_Init+0x2cc>
 80008f0:	4a4d      	ldr	r2, [pc, #308]	; (8000a28 <HAL_GPIO_Init+0x2c0>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	f200 80c8 	bhi.w	8000a88 <HAL_GPIO_Init+0x320>
 80008f8:	2b12      	cmp	r3, #18
 80008fa:	d82b      	bhi.n	8000954 <HAL_GPIO_Init+0x1ec>
 80008fc:	2b12      	cmp	r3, #18
 80008fe:	f200 80c3 	bhi.w	8000a88 <HAL_GPIO_Init+0x320>
 8000902:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <HAL_GPIO_Init+0x1a0>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000a35 	.word	0x08000a35
 800090c:	0800095d 	.word	0x0800095d
 8000910:	080009af 	.word	0x080009af
 8000914:	08000a83 	.word	0x08000a83
 8000918:	08000a89 	.word	0x08000a89
 800091c:	08000a89 	.word	0x08000a89
 8000920:	08000a89 	.word	0x08000a89
 8000924:	08000a89 	.word	0x08000a89
 8000928:	08000a89 	.word	0x08000a89
 800092c:	08000a89 	.word	0x08000a89
 8000930:	08000a89 	.word	0x08000a89
 8000934:	08000a89 	.word	0x08000a89
 8000938:	08000a89 	.word	0x08000a89
 800093c:	08000a89 	.word	0x08000a89
 8000940:	08000a89 	.word	0x08000a89
 8000944:	08000a89 	.word	0x08000a89
 8000948:	08000a89 	.word	0x08000a89
 800094c:	08000985 	.word	0x08000985
 8000950:	080009d9 	.word	0x080009d9
 8000954:	4a31      	ldr	r2, [pc, #196]	; (8000a1c <HAL_GPIO_Init+0x2b4>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d06c      	beq.n	8000a34 <HAL_GPIO_Init+0x2cc>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800095a:	e095      	b.n	8000a88 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d00b      	beq.n	800097c <HAL_GPIO_Init+0x214>
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d007      	beq.n	800097c <HAL_GPIO_Init+0x214>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d003      	beq.n	800097c <HAL_GPIO_Init+0x214>
 8000974:	21d5      	movs	r1, #213	; 0xd5
 8000976:	4828      	ldr	r0, [pc, #160]	; (8000a18 <HAL_GPIO_Init+0x2b0>)
 8000978:	f7ff fc61 	bl	800023e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e082      	b.n	8000a8a <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d00b      	beq.n	80009a4 <HAL_GPIO_Init+0x23c>
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d007      	beq.n	80009a4 <HAL_GPIO_Init+0x23c>
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	2b03      	cmp	r3, #3
 800099a:	d003      	beq.n	80009a4 <HAL_GPIO_Init+0x23c>
 800099c:	21dc      	movs	r1, #220	; 0xdc
 800099e:	481e      	ldr	r0, [pc, #120]	; (8000a18 <HAL_GPIO_Init+0x2b0>)
 80009a0:	f7ff fc4d 	bl	800023e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	3304      	adds	r3, #4
 80009aa:	623b      	str	r3, [r7, #32]
          break;
 80009ac:	e06d      	b.n	8000a8a <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d00b      	beq.n	80009ce <HAL_GPIO_Init+0x266>
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d007      	beq.n	80009ce <HAL_GPIO_Init+0x266>
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d003      	beq.n	80009ce <HAL_GPIO_Init+0x266>
 80009c6:	21e3      	movs	r1, #227	; 0xe3
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <HAL_GPIO_Init+0x2b0>)
 80009ca:	f7ff fc38 	bl	800023e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	3308      	adds	r3, #8
 80009d4:	623b      	str	r3, [r7, #32]
          break;
 80009d6:	e058      	b.n	8000a8a <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d00b      	beq.n	80009f8 <HAL_GPIO_Init+0x290>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d007      	beq.n	80009f8 <HAL_GPIO_Init+0x290>
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d003      	beq.n	80009f8 <HAL_GPIO_Init+0x290>
 80009f0:	21ea      	movs	r1, #234	; 0xea
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <HAL_GPIO_Init+0x2b0>)
 80009f4:	f7ff fc23 	bl	800023e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	330c      	adds	r3, #12
 80009fe:	623b      	str	r3, [r7, #32]
          break;
 8000a00:	e043      	b.n	8000a8a <HAL_GPIO_Init+0x322>
 8000a02:	bf00      	nop
 8000a04:	40010800 	.word	0x40010800
 8000a08:	40010c00 	.word	0x40010c00
 8000a0c:	40011000 	.word	0x40011000
 8000a10:	40011400 	.word	0x40011400
 8000a14:	40011800 	.word	0x40011800
 8000a18:	08001b78 	.word	0x08001b78
 8000a1c:	10110000 	.word	0x10110000
 8000a20:	10210000 	.word	0x10210000
 8000a24:	10310000 	.word	0x10310000
 8000a28:	10120000 	.word	0x10120000
 8000a2c:	10220000 	.word	0x10220000
 8000a30:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00b      	beq.n	8000a54 <HAL_GPIO_Init+0x2ec>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d007      	beq.n	8000a54 <HAL_GPIO_Init+0x2ec>
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d003      	beq.n	8000a54 <HAL_GPIO_Init+0x2ec>
 8000a4c:	21f7      	movs	r1, #247	; 0xf7
 8000a4e:	4876      	ldr	r0, [pc, #472]	; (8000c28 <HAL_GPIO_Init+0x4c0>)
 8000a50:	f7ff fbf5 	bl	800023e <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <HAL_GPIO_Init+0x2fa>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	623b      	str	r3, [r7, #32]
          break;
 8000a60:	e013      	b.n	8000a8a <HAL_GPIO_Init+0x322>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d105      	bne.n	8000a76 <HAL_GPIO_Init+0x30e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	69fa      	ldr	r2, [r7, #28]
 8000a72:	611a      	str	r2, [r3, #16]
          break;
 8000a74:	e009      	b.n	8000a8a <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a76:	2308      	movs	r3, #8
 8000a78:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	69fa      	ldr	r2, [r7, #28]
 8000a7e:	615a      	str	r2, [r3, #20]
          break;
 8000a80:	e003      	b.n	8000a8a <HAL_GPIO_Init+0x322>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
          break;
 8000a86:	e000      	b.n	8000a8a <HAL_GPIO_Init+0x322>
          break;
 8000a88:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	2bff      	cmp	r3, #255	; 0xff
 8000a8e:	d801      	bhi.n	8000a94 <HAL_GPIO_Init+0x32c>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	e001      	b.n	8000a98 <HAL_GPIO_Init+0x330>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3304      	adds	r3, #4
 8000a98:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	2bff      	cmp	r3, #255	; 0xff
 8000a9e:	d802      	bhi.n	8000aa6 <HAL_GPIO_Init+0x33e>
 8000aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	e002      	b.n	8000aac <HAL_GPIO_Init+0x344>
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	3b08      	subs	r3, #8
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	401a      	ands	r2, r3
 8000abe:	6a39      	ldr	r1, [r7, #32]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f000 8096 	beq.w	8000c06 <HAL_GPIO_Init+0x49e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ada:	4b54      	ldr	r3, [pc, #336]	; (8000c2c <HAL_GPIO_Init+0x4c4>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a53      	ldr	r2, [pc, #332]	; (8000c2c <HAL_GPIO_Init+0x4c4>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b51      	ldr	r3, [pc, #324]	; (8000c2c <HAL_GPIO_Init+0x4c4>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af2:	4a4f      	ldr	r2, [pc, #316]	; (8000c30 <HAL_GPIO_Init+0x4c8>)
 8000af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	3302      	adds	r3, #2
 8000afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	220f      	movs	r2, #15
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	4013      	ands	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a46      	ldr	r2, [pc, #280]	; (8000c34 <HAL_GPIO_Init+0x4cc>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d013      	beq.n	8000b46 <HAL_GPIO_Init+0x3de>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a45      	ldr	r2, [pc, #276]	; (8000c38 <HAL_GPIO_Init+0x4d0>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d00d      	beq.n	8000b42 <HAL_GPIO_Init+0x3da>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a44      	ldr	r2, [pc, #272]	; (8000c3c <HAL_GPIO_Init+0x4d4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d007      	beq.n	8000b3e <HAL_GPIO_Init+0x3d6>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a43      	ldr	r2, [pc, #268]	; (8000c40 <HAL_GPIO_Init+0x4d8>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_GPIO_Init+0x3d2>
 8000b36:	2303      	movs	r3, #3
 8000b38:	e006      	b.n	8000b48 <HAL_GPIO_Init+0x3e0>
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	e004      	b.n	8000b48 <HAL_GPIO_Init+0x3e0>
 8000b3e:	2302      	movs	r3, #2
 8000b40:	e002      	b.n	8000b48 <HAL_GPIO_Init+0x3e0>
 8000b42:	2301      	movs	r3, #1
 8000b44:	e000      	b.n	8000b48 <HAL_GPIO_Init+0x3e0>
 8000b46:	2300      	movs	r3, #0
 8000b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b4a:	f002 0203 	and.w	r2, r2, #3
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	4093      	lsls	r3, r2
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b58:	4935      	ldr	r1, [pc, #212]	; (8000c30 <HAL_GPIO_Init+0x4c8>)
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	3302      	adds	r3, #2
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d006      	beq.n	8000b80 <HAL_GPIO_Init+0x418>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b72:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4933      	ldr	r1, [pc, #204]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	600b      	str	r3, [r1, #0]
 8000b7e:	e006      	b.n	8000b8e <HAL_GPIO_Init+0x426>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b80:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	43db      	mvns	r3, r3
 8000b88:	492e      	ldr	r1, [pc, #184]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <HAL_GPIO_Init+0x440>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	4929      	ldr	r1, [pc, #164]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	604b      	str	r3, [r1, #4]
 8000ba6:	e006      	b.n	8000bb6 <HAL_GPIO_Init+0x44e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	4924      	ldr	r1, [pc, #144]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d006      	beq.n	8000bd0 <HAL_GPIO_Init+0x468>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	491f      	ldr	r1, [pc, #124]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	608b      	str	r3, [r1, #8]
 8000bce:	e006      	b.n	8000bde <HAL_GPIO_Init+0x476>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	491a      	ldr	r1, [pc, #104]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d006      	beq.n	8000bf8 <HAL_GPIO_Init+0x490>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000bec:	68da      	ldr	r2, [r3, #12]
 8000bee:	4915      	ldr	r1, [pc, #84]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	60cb      	str	r3, [r1, #12]
 8000bf6:	e006      	b.n	8000c06 <HAL_GPIO_Init+0x49e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	4910      	ldr	r1, [pc, #64]	; (8000c44 <HAL_GPIO_Init+0x4dc>)
 8000c02:	4013      	ands	r3, r2
 8000c04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	3301      	adds	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	fa22 f303 	lsr.w	r3, r2, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f47f ae1d 	bne.w	8000856 <HAL_GPIO_Init+0xee>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08001b78 	.word	0x08001b78
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010000 	.word	0x40010000
 8000c34:	40010800 	.word	0x40010800
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	40011000 	.word	0x40011000
 8000c40:	40011400 	.word	0x40011400
 8000c44:	40010400 	.word	0x40010400

08000c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e35c      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d01c      	beq.n	8000c9c <HAL_RCC_OscConfig+0x54>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d116      	bne.n	8000c9c <HAL_RCC_OscConfig+0x54>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d110      	bne.n	8000c9c <HAL_RCC_OscConfig+0x54>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10a      	bne.n	8000c9c <HAL_RCC_OscConfig+0x54>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d104      	bne.n	8000c9c <HAL_RCC_OscConfig+0x54>
 8000c92:	f240 1167 	movw	r1, #359	; 0x167
 8000c96:	48a5      	ldr	r0, [pc, #660]	; (8000f2c <HAL_RCC_OscConfig+0x2e4>)
 8000c98:	f7ff fad1 	bl	800023e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 809a 	beq.w	8000dde <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00e      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x88>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cba:	d009      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x88>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cc4:	d004      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x88>
 8000cc6:	f240 116d 	movw	r1, #365	; 0x16d
 8000cca:	4898      	ldr	r0, [pc, #608]	; (8000f2c <HAL_RCC_OscConfig+0x2e4>)
 8000ccc:	f7ff fab7 	bl	800023e <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cd0:	4b97      	ldr	r3, [pc, #604]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 030c 	and.w	r3, r3, #12
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d00c      	beq.n	8000cf6 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cdc:	4b94      	ldr	r3, [pc, #592]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 030c 	and.w	r3, r3, #12
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	d112      	bne.n	8000d0e <HAL_RCC_OscConfig+0xc6>
 8000ce8:	4b91      	ldr	r3, [pc, #580]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf4:	d10b      	bne.n	8000d0e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf6:	4b8e      	ldr	r3, [pc, #568]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d06c      	beq.n	8000ddc <HAL_RCC_OscConfig+0x194>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d168      	bne.n	8000ddc <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e302      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d16:	d106      	bne.n	8000d26 <HAL_RCC_OscConfig+0xde>
 8000d18:	4b85      	ldr	r3, [pc, #532]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a84      	ldr	r2, [pc, #528]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e02e      	b.n	8000d84 <HAL_RCC_OscConfig+0x13c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10c      	bne.n	8000d48 <HAL_RCC_OscConfig+0x100>
 8000d2e:	4b80      	ldr	r3, [pc, #512]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a7f      	ldr	r2, [pc, #508]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b7d      	ldr	r3, [pc, #500]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a7c      	ldr	r2, [pc, #496]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e01d      	b.n	8000d84 <HAL_RCC_OscConfig+0x13c>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d50:	d10c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x124>
 8000d52:	4b77      	ldr	r3, [pc, #476]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a76      	ldr	r2, [pc, #472]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	4b74      	ldr	r3, [pc, #464]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a73      	ldr	r2, [pc, #460]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e00b      	b.n	8000d84 <HAL_RCC_OscConfig+0x13c>
 8000d6c:	4b70      	ldr	r3, [pc, #448]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a6f      	ldr	r2, [pc, #444]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	4b6d      	ldr	r3, [pc, #436]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a6c      	ldr	r2, [pc, #432]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8c:	f7ff fbb6 	bl	80004fc <HAL_GetTick>
 8000d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d92:	e008      	b.n	8000da6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d94:	f7ff fbb2 	bl	80004fc <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b64      	cmp	r3, #100	; 0x64
 8000da0:	d901      	bls.n	8000da6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e2b6      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da6:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0f0      	beq.n	8000d94 <HAL_RCC_OscConfig+0x14c>
 8000db2:	e014      	b.n	8000dde <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db4:	f7ff fba2 	bl	80004fc <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dbc:	f7ff fb9e 	bl	80004fc <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b64      	cmp	r3, #100	; 0x64
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e2a2      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dce:	4b58      	ldr	r3, [pc, #352]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f0      	bne.n	8000dbc <HAL_RCC_OscConfig+0x174>
 8000dda:	e000      	b.n	8000dde <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d079      	beq.n	8000ede <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d008      	beq.n	8000e04 <HAL_RCC_OscConfig+0x1bc>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d004      	beq.n	8000e04 <HAL_RCC_OscConfig+0x1bc>
 8000dfa:	f240 11a1 	movw	r1, #417	; 0x1a1
 8000dfe:	484b      	ldr	r0, [pc, #300]	; (8000f2c <HAL_RCC_OscConfig+0x2e4>)
 8000e00:	f7ff fa1d 	bl	800023e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	2b1f      	cmp	r3, #31
 8000e0a:	d904      	bls.n	8000e16 <HAL_RCC_OscConfig+0x1ce>
 8000e0c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8000e10:	4846      	ldr	r0, [pc, #280]	; (8000f2c <HAL_RCC_OscConfig+0x2e4>)
 8000e12:	f7ff fa14 	bl	800023e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e16:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00b      	beq.n	8000e3a <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e22:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d11c      	bne.n	8000e68 <HAL_RCC_OscConfig+0x220>
 8000e2e:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d116      	bne.n	8000e68 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d005      	beq.n	8000e52 <HAL_RCC_OscConfig+0x20a>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d001      	beq.n	8000e52 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e260      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e52:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	4933      	ldr	r1, [pc, #204]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e66:	e03a      	b.n	8000ede <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d020      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <HAL_RCC_OscConfig+0x2ec>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e76:	f7ff fb41 	bl	80004fc <HAL_GetTick>
 8000e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e7e:	f7ff fb3d 	bl	80004fc <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e241      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0f0      	beq.n	8000e7e <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	4921      	ldr	r1, [pc, #132]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000eac:	4313      	orrs	r3, r2
 8000eae:	600b      	str	r3, [r1, #0]
 8000eb0:	e015      	b.n	8000ede <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <HAL_RCC_OscConfig+0x2ec>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fb20 	bl	80004fc <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec0:	f7ff fb1c 	bl	80004fc <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e220      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_RCC_OscConfig+0x2e8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f0      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d048      	beq.n	8000f7c <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d008      	beq.n	8000f04 <HAL_RCC_OscConfig+0x2bc>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d004      	beq.n	8000f04 <HAL_RCC_OscConfig+0x2bc>
 8000efa:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8000efe:	480b      	ldr	r0, [pc, #44]	; (8000f2c <HAL_RCC_OscConfig+0x2e4>)
 8000f00:	f7ff f99d 	bl	800023e <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d021      	beq.n	8000f50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_RCC_OscConfig+0x2f0>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f12:	f7ff faf3 	bl	80004fc <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f18:	e010      	b.n	8000f3c <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1a:	f7ff faef 	bl	80004fc <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d909      	bls.n	8000f3c <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e1f3      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
 8000f2c:	08001bec 	.word	0x08001bec
 8000f30:	40021000 	.word	0x40021000
 8000f34:	42420000 	.word	0x42420000
 8000f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3c:	4b67      	ldr	r3, [pc, #412]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0e8      	beq.n	8000f1a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f000 fc0f 	bl	800176c <RCC_Delay>
 8000f4e:	e015      	b.n	8000f7c <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f50:	4b63      	ldr	r3, [pc, #396]	; (80010e0 <HAL_RCC_OscConfig+0x498>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fad1 	bl	80004fc <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f5e:	f7ff facd 	bl	80004fc <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e1d1      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f70:	4b5a      	ldr	r3, [pc, #360]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8000f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f0      	bne.n	8000f5e <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80c0 	beq.w	800110a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00c      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x368>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d008      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x368>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2b05      	cmp	r3, #5
 8000fa4:	d004      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x368>
 8000fa6:	f240 2111 	movw	r1, #529	; 0x211
 8000faa:	484e      	ldr	r0, [pc, #312]	; (80010e4 <HAL_RCC_OscConfig+0x49c>)
 8000fac:	f7ff f947 	bl	800023e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fb0:	4b4a      	ldr	r3, [pc, #296]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10d      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	4b47      	ldr	r3, [pc, #284]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	4a46      	ldr	r2, [pc, #280]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8000fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	61d3      	str	r3, [r2, #28]
 8000fc8:	4b44      	ldr	r3, [pc, #272]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <HAL_RCC_OscConfig+0x4a0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d118      	bne.n	8001016 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fe4:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <HAL_RCC_OscConfig+0x4a0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a3f      	ldr	r2, [pc, #252]	; (80010e8 <HAL_RCC_OscConfig+0x4a0>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ff0:	f7ff fa84 	bl	80004fc <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff8:	f7ff fa80 	bl	80004fc <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e184      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <HAL_RCC_OscConfig+0x4a0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d106      	bne.n	800102c <HAL_RCC_OscConfig+0x3e4>
 800101e:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	4a2e      	ldr	r2, [pc, #184]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6213      	str	r3, [r2, #32]
 800102a:	e02d      	b.n	8001088 <HAL_RCC_OscConfig+0x440>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10c      	bne.n	800104e <HAL_RCC_OscConfig+0x406>
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4a28      	ldr	r2, [pc, #160]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 800103a:	f023 0301 	bic.w	r3, r3, #1
 800103e:	6213      	str	r3, [r2, #32]
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	4a25      	ldr	r2, [pc, #148]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8001046:	f023 0304 	bic.w	r3, r3, #4
 800104a:	6213      	str	r3, [r2, #32]
 800104c:	e01c      	b.n	8001088 <HAL_RCC_OscConfig+0x440>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b05      	cmp	r3, #5
 8001054:	d10c      	bne.n	8001070 <HAL_RCC_OscConfig+0x428>
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4a20      	ldr	r2, [pc, #128]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6213      	str	r3, [r2, #32]
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6213      	str	r3, [r2, #32]
 800106e:	e00b      	b.n	8001088 <HAL_RCC_OscConfig+0x440>
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8001076:	f023 0301 	bic.w	r3, r3, #1
 800107a:	6213      	str	r3, [r2, #32]
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4a16      	ldr	r2, [pc, #88]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 8001082:	f023 0304 	bic.w	r3, r3, #4
 8001086:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d015      	beq.n	80010bc <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001090:	f7ff fa34 	bl	80004fc <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001096:	e00a      	b.n	80010ae <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001098:	f7ff fa30 	bl	80004fc <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e132      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_RCC_OscConfig+0x494>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0ee      	beq.n	8001098 <HAL_RCC_OscConfig+0x450>
 80010ba:	e01d      	b.n	80010f8 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010bc:	f7ff fa1e 	bl	80004fc <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c2:	e013      	b.n	80010ec <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c4:	f7ff fa1a 	bl	80004fc <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d90a      	bls.n	80010ec <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e11c      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	42420480 	.word	0x42420480
 80010e4:	08001bec 	.word	0x08001bec
 80010e8:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ec:	4b8b      	ldr	r3, [pc, #556]	; (800131c <HAL_RCC_OscConfig+0x6d4>)
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1e5      	bne.n	80010c4 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d105      	bne.n	800110a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010fe:	4b87      	ldr	r3, [pc, #540]	; (800131c <HAL_RCC_OscConfig+0x6d4>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	4a86      	ldr	r2, [pc, #536]	; (800131c <HAL_RCC_OscConfig+0x6d4>)
 8001104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001108:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00c      	beq.n	800112c <HAL_RCC_OscConfig+0x4e4>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d008      	beq.n	800112c <HAL_RCC_OscConfig+0x4e4>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d004      	beq.n	800112c <HAL_RCC_OscConfig+0x4e4>
 8001122:	f240 21af 	movw	r1, #687	; 0x2af
 8001126:	487e      	ldr	r0, [pc, #504]	; (8001320 <HAL_RCC_OscConfig+0x6d8>)
 8001128:	f7ff f889 	bl	800023e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80ee 	beq.w	8001312 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001136:	4b79      	ldr	r3, [pc, #484]	; (800131c <HAL_RCC_OscConfig+0x6d4>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b08      	cmp	r3, #8
 8001140:	f000 80ce 	beq.w	80012e0 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	2b02      	cmp	r3, #2
 800114a:	f040 80b2 	bne.w	80012b2 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d009      	beq.n	800116a <HAL_RCC_OscConfig+0x522>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115e:	d004      	beq.n	800116a <HAL_RCC_OscConfig+0x522>
 8001160:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001164:	486e      	ldr	r0, [pc, #440]	; (8001320 <HAL_RCC_OscConfig+0x6d8>)
 8001166:	f7ff f86a 	bl	800023e <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	2b00      	cmp	r3, #0
 8001170:	d04a      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800117a:	d045      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001184:	d040      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800118e:	d03b      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001198:	d036      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80011a2:	d031      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80011ac:	d02c      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80011b6:	d027      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80011c0:	d022      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80011ca:	d01d      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80011d4:	d018      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80011de:	d013      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80011e8:	d00e      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80011f2:	d009      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80011fc:	d004      	beq.n	8001208 <HAL_RCC_OscConfig+0x5c0>
 80011fe:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001202:	4847      	ldr	r0, [pc, #284]	; (8001320 <HAL_RCC_OscConfig+0x6d8>)
 8001204:	f7ff f81b 	bl	800023e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001208:	4b46      	ldr	r3, [pc, #280]	; (8001324 <HAL_RCC_OscConfig+0x6dc>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120e:	f7ff f975 	bl	80004fc <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001216:	f7ff f971 	bl	80004fc <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e075      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001228:	4b3c      	ldr	r3, [pc, #240]	; (800131c <HAL_RCC_OscConfig+0x6d4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f0      	bne.n	8001216 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d116      	bne.n	800126c <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <HAL_RCC_OscConfig+0x612>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800124e:	d004      	beq.n	800125a <HAL_RCC_OscConfig+0x612>
 8001250:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001254:	4832      	ldr	r0, [pc, #200]	; (8001320 <HAL_RCC_OscConfig+0x6d8>)
 8001256:	f7fe fff2 	bl	800023e <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_RCC_OscConfig+0x6d4>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	492d      	ldr	r1, [pc, #180]	; (800131c <HAL_RCC_OscConfig+0x6d4>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_RCC_OscConfig+0x6d4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a19      	ldr	r1, [r3, #32]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	430b      	orrs	r3, r1
 800127e:	4927      	ldr	r1, [pc, #156]	; (800131c <HAL_RCC_OscConfig+0x6d4>)
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_RCC_OscConfig+0x6dc>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128a:	f7ff f937 	bl	80004fc <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff f933 	bl	80004fc <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e037      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_RCC_OscConfig+0x6d4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x64a>
 80012b0:	e02f      	b.n	8001312 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_RCC_OscConfig+0x6dc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff f920 	bl	80004fc <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c0:	f7ff f91c 	bl	80004fc <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e020      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_RCC_OscConfig+0x6d4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x678>
 80012de:	e018      	b.n	8001312 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e013      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_RCC_OscConfig+0x6d4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d106      	bne.n	800130e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130a:	429a      	cmp	r2, r3
 800130c:	d001      	beq.n	8001312 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	08001bec 	.word	0x08001bec
 8001324:	42420060 	.word	0x42420060

08001328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e176      	b.n	800162a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d116      	bne.n	8001376 <HAL_RCC_ClockConfig+0x4e>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d110      	bne.n	8001376 <HAL_RCC_ClockConfig+0x4e>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10a      	bne.n	8001376 <HAL_RCC_ClockConfig+0x4e>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b00      	cmp	r3, #0
 800136a:	d104      	bne.n	8001376 <HAL_RCC_ClockConfig+0x4e>
 800136c:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001370:	4874      	ldr	r0, [pc, #464]	; (8001544 <HAL_RCC_ClockConfig+0x21c>)
 8001372:	f7fe ff64 	bl	800023e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00a      	beq.n	8001392 <HAL_RCC_ClockConfig+0x6a>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d007      	beq.n	8001392 <HAL_RCC_ClockConfig+0x6a>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d004      	beq.n	8001392 <HAL_RCC_ClockConfig+0x6a>
 8001388:	f240 3139 	movw	r1, #825	; 0x339
 800138c:	486d      	ldr	r0, [pc, #436]	; (8001544 <HAL_RCC_ClockConfig+0x21c>)
 800138e:	f7fe ff56 	bl	800023e <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001392:	4b6d      	ldr	r3, [pc, #436]	; (8001548 <HAL_RCC_ClockConfig+0x220>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d910      	bls.n	80013c2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a0:	4b69      	ldr	r3, [pc, #420]	; (8001548 <HAL_RCC_ClockConfig+0x220>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 0207 	bic.w	r2, r3, #7
 80013a8:	4967      	ldr	r1, [pc, #412]	; (8001548 <HAL_RCC_ClockConfig+0x220>)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b0:	4b65      	ldr	r3, [pc, #404]	; (8001548 <HAL_RCC_ClockConfig+0x220>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d001      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e133      	b.n	800162a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d049      	beq.n	8001462 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013da:	4b5c      	ldr	r3, [pc, #368]	; (800154c <HAL_RCC_ClockConfig+0x224>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4a5b      	ldr	r2, [pc, #364]	; (800154c <HAL_RCC_ClockConfig+0x224>)
 80013e0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013e4:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f2:	4b56      	ldr	r3, [pc, #344]	; (800154c <HAL_RCC_ClockConfig+0x224>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4a55      	ldr	r2, [pc, #340]	; (800154c <HAL_RCC_ClockConfig+0x224>)
 80013f8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013fc:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d024      	beq.n	8001450 <HAL_RCC_ClockConfig+0x128>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b80      	cmp	r3, #128	; 0x80
 800140c:	d020      	beq.n	8001450 <HAL_RCC_ClockConfig+0x128>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b90      	cmp	r3, #144	; 0x90
 8001414:	d01c      	beq.n	8001450 <HAL_RCC_ClockConfig+0x128>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2ba0      	cmp	r3, #160	; 0xa0
 800141c:	d018      	beq.n	8001450 <HAL_RCC_ClockConfig+0x128>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2bb0      	cmp	r3, #176	; 0xb0
 8001424:	d014      	beq.n	8001450 <HAL_RCC_ClockConfig+0x128>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2bc0      	cmp	r3, #192	; 0xc0
 800142c:	d010      	beq.n	8001450 <HAL_RCC_ClockConfig+0x128>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2bd0      	cmp	r3, #208	; 0xd0
 8001434:	d00c      	beq.n	8001450 <HAL_RCC_ClockConfig+0x128>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2be0      	cmp	r3, #224	; 0xe0
 800143c:	d008      	beq.n	8001450 <HAL_RCC_ClockConfig+0x128>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2bf0      	cmp	r3, #240	; 0xf0
 8001444:	d004      	beq.n	8001450 <HAL_RCC_ClockConfig+0x128>
 8001446:	f240 315f 	movw	r1, #863	; 0x35f
 800144a:	483e      	ldr	r0, [pc, #248]	; (8001544 <HAL_RCC_ClockConfig+0x21c>)
 800144c:	f7fe fef7 	bl	800023e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001450:	4b3e      	ldr	r3, [pc, #248]	; (800154c <HAL_RCC_ClockConfig+0x224>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	493b      	ldr	r1, [pc, #236]	; (800154c <HAL_RCC_ClockConfig+0x224>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d051      	beq.n	8001512 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00c      	beq.n	8001490 <HAL_RCC_ClockConfig+0x168>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d008      	beq.n	8001490 <HAL_RCC_ClockConfig+0x168>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d004      	beq.n	8001490 <HAL_RCC_ClockConfig+0x168>
 8001486:	f240 3166 	movw	r1, #870	; 0x366
 800148a:	482e      	ldr	r0, [pc, #184]	; (8001544 <HAL_RCC_ClockConfig+0x21c>)
 800148c:	f7fe fed7 	bl	800023e <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d107      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001498:	4b2c      	ldr	r3, [pc, #176]	; (800154c <HAL_RCC_ClockConfig+0x224>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d115      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0c0      	b.n	800162a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d107      	bne.n	80014c0 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b0:	4b26      	ldr	r3, [pc, #152]	; (800154c <HAL_RCC_ClockConfig+0x224>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d109      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0b4      	b.n	800162a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_RCC_ClockConfig+0x224>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0ac      	b.n	800162a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_RCC_ClockConfig+0x224>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f023 0203 	bic.w	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	491b      	ldr	r1, [pc, #108]	; (800154c <HAL_RCC_ClockConfig+0x224>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e2:	f7ff f80b 	bl	80004fc <HAL_GetTick>
 80014e6:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e8:	e00a      	b.n	8001500 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ea:	f7ff f807 	bl	80004fc <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e094      	b.n	800162a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_RCC_ClockConfig+0x224>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 020c 	and.w	r2, r3, #12
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	429a      	cmp	r2, r3
 8001510:	d1eb      	bne.n	80014ea <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <HAL_RCC_ClockConfig+0x220>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d217      	bcs.n	8001550 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x220>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 0207 	bic.w	r2, r3, #7
 8001528:	4907      	ldr	r1, [pc, #28]	; (8001548 <HAL_RCC_ClockConfig+0x220>)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_RCC_ClockConfig+0x220>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d008      	beq.n	8001550 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e073      	b.n	800162a <HAL_RCC_ClockConfig+0x302>
 8001542:	bf00      	nop
 8001544:	08001bec 	.word	0x08001bec
 8001548:	40022000 	.word	0x40022000
 800154c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d025      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d018      	beq.n	8001596 <HAL_RCC_ClockConfig+0x26e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800156c:	d013      	beq.n	8001596 <HAL_RCC_ClockConfig+0x26e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001576:	d00e      	beq.n	8001596 <HAL_RCC_ClockConfig+0x26e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001580:	d009      	beq.n	8001596 <HAL_RCC_ClockConfig+0x26e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800158a:	d004      	beq.n	8001596 <HAL_RCC_ClockConfig+0x26e>
 800158c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001590:	4828      	ldr	r0, [pc, #160]	; (8001634 <HAL_RCC_ClockConfig+0x30c>)
 8001592:	f7fe fe54 	bl	800023e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001596:	4b28      	ldr	r3, [pc, #160]	; (8001638 <HAL_RCC_ClockConfig+0x310>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	4925      	ldr	r1, [pc, #148]	; (8001638 <HAL_RCC_ClockConfig+0x310>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d026      	beq.n	8001602 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d018      	beq.n	80015ee <HAL_RCC_ClockConfig+0x2c6>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c4:	d013      	beq.n	80015ee <HAL_RCC_ClockConfig+0x2c6>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80015ce:	d00e      	beq.n	80015ee <HAL_RCC_ClockConfig+0x2c6>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80015d8:	d009      	beq.n	80015ee <HAL_RCC_ClockConfig+0x2c6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80015e2:	d004      	beq.n	80015ee <HAL_RCC_ClockConfig+0x2c6>
 80015e4:	f240 31ab 	movw	r1, #939	; 0x3ab
 80015e8:	4812      	ldr	r0, [pc, #72]	; (8001634 <HAL_RCC_ClockConfig+0x30c>)
 80015ea:	f7fe fe28 	bl	800023e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_RCC_ClockConfig+0x310>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	490e      	ldr	r1, [pc, #56]	; (8001638 <HAL_RCC_ClockConfig+0x310>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001602:	f000 f821 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001606:	4602      	mov	r2, r0
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_RCC_ClockConfig+0x310>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	490a      	ldr	r1, [pc, #40]	; (800163c <HAL_RCC_ClockConfig+0x314>)
 8001614:	5ccb      	ldrb	r3, [r1, r3]
 8001616:	fa22 f303 	lsr.w	r3, r2, r3
 800161a:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_RCC_ClockConfig+0x318>)
 800161c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x31c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff28 	bl	8000478 <HAL_InitTick>

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	08001bec 	.word	0x08001bec
 8001638:	40021000 	.word	0x40021000
 800163c:	08001ce0 	.word	0x08001ce0
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b490      	push	{r4, r7}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001650:	1d3c      	adds	r4, r7, #4
 8001652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001658:	f240 2301 	movw	r3, #513	; 0x201
 800165c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b04      	cmp	r3, #4
 8001680:	d002      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x40>
 8001682:	2b08      	cmp	r3, #8
 8001684:	d003      	beq.n	800168e <HAL_RCC_GetSysClockFreq+0x46>
 8001686:	e02d      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 800168a:	623b      	str	r3, [r7, #32]
      break;
 800168c:	e02d      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	0c9b      	lsrs	r3, r3, #18
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800169a:	4413      	add	r3, r2
 800169c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	0c5b      	lsrs	r3, r3, #17
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016ba:	4413      	add	r3, r2
 80016bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c6:	fb02 f203 	mul.w	r2, r2, r3
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
 80016d2:	e004      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	623b      	str	r3, [r7, #32]
      break;
 80016e2:	e002      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016e6:	623b      	str	r3, [r7, #32]
      break;
 80016e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ea:	6a3b      	ldr	r3, [r7, #32]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc90      	pop	{r4, r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	08001c5c 	.word	0x08001c5c
 80016fc:	40021000 	.word	0x40021000
 8001700:	007a1200 	.word	0x007a1200
 8001704:	003d0900 	.word	0x003d0900

08001708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800170c:	4b02      	ldr	r3, [pc, #8]	; (8001718 <HAL_RCC_GetHCLKFreq+0x10>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	20000000 	.word	0x20000000

0800171c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001720:	f7ff fff2 	bl	8001708 <HAL_RCC_GetHCLKFreq>
 8001724:	4602      	mov	r2, r0
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	4903      	ldr	r1, [pc, #12]	; (8001740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	08001cf0 	.word	0x08001cf0

08001744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001748:	f7ff ffde 	bl	8001708 <HAL_RCC_GetHCLKFreq>
 800174c:	4602      	mov	r2, r0
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	0adb      	lsrs	r3, r3, #11
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	4903      	ldr	r1, [pc, #12]	; (8001768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800175a:	5ccb      	ldrb	r3, [r1, r3]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000
 8001768:	08001cf0 	.word	0x08001cf0

0800176c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <RCC_Delay+0x34>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <RCC_Delay+0x38>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	0a5b      	lsrs	r3, r3, #9
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	fb02 f303 	mul.w	r3, r2, r3
 8001786:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001788:	bf00      	nop
  }
  while (Delay --);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1e5a      	subs	r2, r3, #1
 800178e:	60fa      	str	r2, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f9      	bne.n	8001788 <RCC_Delay+0x1c>
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	20000000 	.word	0x20000000
 80017a4:	10624dd3 	.word	0x10624dd3

080017a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e092      	b.n	80018e0 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d02c      	beq.n	800181c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a48      	ldr	r2, [pc, #288]	; (80018e8 <HAL_UART_Init+0x140>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d00e      	beq.n	80017ea <HAL_UART_Init+0x42>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a46      	ldr	r2, [pc, #280]	; (80018ec <HAL_UART_Init+0x144>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d009      	beq.n	80017ea <HAL_UART_Init+0x42>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a45      	ldr	r2, [pc, #276]	; (80018f0 <HAL_UART_Init+0x148>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d004      	beq.n	80017ea <HAL_UART_Init+0x42>
 80017e0:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80017e4:	4843      	ldr	r0, [pc, #268]	; (80018f4 <HAL_UART_Init+0x14c>)
 80017e6:	f7fe fd2a 	bl	800023e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d028      	beq.n	8001844 <HAL_UART_Init+0x9c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017fa:	d023      	beq.n	8001844 <HAL_UART_Init+0x9c>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001804:	d01e      	beq.n	8001844 <HAL_UART_Init+0x9c>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800180e:	d019      	beq.n	8001844 <HAL_UART_Init+0x9c>
 8001810:	f240 116d 	movw	r1, #365	; 0x16d
 8001814:	4837      	ldr	r0, [pc, #220]	; (80018f4 <HAL_UART_Init+0x14c>)
 8001816:	f7fe fd12 	bl	800023e <assert_failed>
 800181a:	e013      	b.n	8001844 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a31      	ldr	r2, [pc, #196]	; (80018e8 <HAL_UART_Init+0x140>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00e      	beq.n	8001844 <HAL_UART_Init+0x9c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a30      	ldr	r2, [pc, #192]	; (80018ec <HAL_UART_Init+0x144>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d009      	beq.n	8001844 <HAL_UART_Init+0x9c>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2e      	ldr	r2, [pc, #184]	; (80018f0 <HAL_UART_Init+0x148>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d004      	beq.n	8001844 <HAL_UART_Init+0x9c>
 800183a:	f240 1171 	movw	r1, #369	; 0x171
 800183e:	482d      	ldr	r0, [pc, #180]	; (80018f4 <HAL_UART_Init+0x14c>)
 8001840:	f7fe fcfd 	bl	800023e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d009      	beq.n	8001860 <HAL_UART_Init+0xb8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001854:	d004      	beq.n	8001860 <HAL_UART_Init+0xb8>
 8001856:	f240 1173 	movw	r1, #371	; 0x173
 800185a:	4826      	ldr	r0, [pc, #152]	; (80018f4 <HAL_UART_Init+0x14c>)
 800185c:	f7fe fcef 	bl	800023e <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d106      	bne.n	800187a <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7fe fd77 	bl	8000368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2224      	movs	r2, #36	; 0x24
 800187e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001890:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f830 	bl	80018f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2220      	movs	r2, #32
 80018d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2220      	movs	r2, #32
 80018da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40004400 	.word	0x40004400
 80018f0:	40004800 	.word	0x40004800
 80018f4:	08001c6c 	.word	0x08001c6c

080018f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4a5f      	ldr	r2, [pc, #380]	; (8001a84 <UART_SetConfig+0x18c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d904      	bls.n	8001914 <UART_SetConfig+0x1c>
 800190a:	f640 6153 	movw	r1, #3667	; 0xe53
 800190e:	485e      	ldr	r0, [pc, #376]	; (8001a88 <UART_SetConfig+0x190>)
 8001910:	f7fe fc95 	bl	800023e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d009      	beq.n	8001930 <UART_SetConfig+0x38>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001924:	d004      	beq.n	8001930 <UART_SetConfig+0x38>
 8001926:	f640 6154 	movw	r1, #3668	; 0xe54
 800192a:	4857      	ldr	r0, [pc, #348]	; (8001a88 <UART_SetConfig+0x190>)
 800192c:	f7fe fc87 	bl	800023e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00e      	beq.n	8001956 <UART_SetConfig+0x5e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001940:	d009      	beq.n	8001956 <UART_SetConfig+0x5e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800194a:	d004      	beq.n	8001956 <UART_SetConfig+0x5e>
 800194c:	f640 6155 	movw	r1, #3669	; 0xe55
 8001950:	484d      	ldr	r0, [pc, #308]	; (8001a88 <UART_SetConfig+0x190>)
 8001952:	f7fe fc74 	bl	800023e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d103      	bne.n	800196c <UART_SetConfig+0x74>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d104      	bne.n	8001976 <UART_SetConfig+0x7e>
 800196c:	f640 6156 	movw	r1, #3670	; 0xe56
 8001970:	4845      	ldr	r0, [pc, #276]	; (8001a88 <UART_SetConfig+0x190>)
 8001972:	f7fe fc64 	bl	800023e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	4313      	orrs	r3, r2
 800199c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019a8:	f023 030c 	bic.w	r3, r3, #12
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	430b      	orrs	r3, r1
 80019b4:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699a      	ldr	r2, [r3, #24]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a2e      	ldr	r2, [pc, #184]	; (8001a8c <UART_SetConfig+0x194>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d103      	bne.n	80019de <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019d6:	f7ff feb5 	bl	8001744 <HAL_RCC_GetPCLK2Freq>
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	e002      	b.n	80019e4 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019de:	f7ff fe9d 	bl	800171c <HAL_RCC_GetPCLK1Freq>
 80019e2:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009a      	lsls	r2, r3, #2
 80019ee:	441a      	add	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <UART_SetConfig+0x198>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	095b      	lsrs	r3, r3, #5
 8001a02:	0119      	lsls	r1, r3, #4
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009a      	lsls	r2, r3, #2
 8001a0e:	441a      	add	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <UART_SetConfig+0x198>)
 8001a1c:	fba3 0302 	umull	r0, r3, r3, r2
 8001a20:	095b      	lsrs	r3, r3, #5
 8001a22:	2064      	movs	r0, #100	; 0x64
 8001a24:	fb00 f303 	mul.w	r3, r0, r3
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	3332      	adds	r3, #50	; 0x32
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <UART_SetConfig+0x198>)
 8001a30:	fba2 2303 	umull	r2, r3, r2, r3
 8001a34:	095b      	lsrs	r3, r3, #5
 8001a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a3a:	4419      	add	r1, r3
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	009a      	lsls	r2, r3, #2
 8001a46:	441a      	add	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <UART_SetConfig+0x198>)
 8001a54:	fba3 0302 	umull	r0, r3, r3, r2
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	2064      	movs	r0, #100	; 0x64
 8001a5c:	fb00 f303 	mul.w	r3, r0, r3
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	3332      	adds	r3, #50	; 0x32
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <UART_SetConfig+0x198>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	095b      	lsrs	r3, r3, #5
 8001a6e:	f003 020f 	and.w	r2, r3, #15
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	440a      	add	r2, r1
 8001a78:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	0044aa20 	.word	0x0044aa20
 8001a88:	08001c6c 	.word	0x08001c6c
 8001a8c:	40013800 	.word	0x40013800
 8001a90:	51eb851f 	.word	0x51eb851f

08001a94 <__libc_init_array>:
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	2600      	movs	r6, #0
 8001a98:	4d0c      	ldr	r5, [pc, #48]	; (8001acc <__libc_init_array+0x38>)
 8001a9a:	4c0d      	ldr	r4, [pc, #52]	; (8001ad0 <__libc_init_array+0x3c>)
 8001a9c:	1b64      	subs	r4, r4, r5
 8001a9e:	10a4      	asrs	r4, r4, #2
 8001aa0:	42a6      	cmp	r6, r4
 8001aa2:	d109      	bne.n	8001ab8 <__libc_init_array+0x24>
 8001aa4:	f000 f822 	bl	8001aec <_init>
 8001aa8:	2600      	movs	r6, #0
 8001aaa:	4d0a      	ldr	r5, [pc, #40]	; (8001ad4 <__libc_init_array+0x40>)
 8001aac:	4c0a      	ldr	r4, [pc, #40]	; (8001ad8 <__libc_init_array+0x44>)
 8001aae:	1b64      	subs	r4, r4, r5
 8001ab0:	10a4      	asrs	r4, r4, #2
 8001ab2:	42a6      	cmp	r6, r4
 8001ab4:	d105      	bne.n	8001ac2 <__libc_init_array+0x2e>
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
 8001ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001abc:	4798      	blx	r3
 8001abe:	3601      	adds	r6, #1
 8001ac0:	e7ee      	b.n	8001aa0 <__libc_init_array+0xc>
 8001ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ac6:	4798      	blx	r3
 8001ac8:	3601      	adds	r6, #1
 8001aca:	e7f2      	b.n	8001ab2 <__libc_init_array+0x1e>
 8001acc:	08001cf8 	.word	0x08001cf8
 8001ad0:	08001cf8 	.word	0x08001cf8
 8001ad4:	08001cf8 	.word	0x08001cf8
 8001ad8:	08001cfc 	.word	0x08001cfc

08001adc <memset>:
 8001adc:	4603      	mov	r3, r0
 8001ade:	4402      	add	r2, r0
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d100      	bne.n	8001ae6 <memset+0xa>
 8001ae4:	4770      	bx	lr
 8001ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8001aea:	e7f9      	b.n	8001ae0 <memset+0x4>

08001aec <_init>:
 8001aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aee:	bf00      	nop
 8001af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001af2:	bc08      	pop	{r3}
 8001af4:	469e      	mov	lr, r3
 8001af6:	4770      	bx	lr

08001af8 <_fini>:
 8001af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afa:	bf00      	nop
 8001afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001afe:	bc08      	pop	{r3}
 8001b00:	469e      	mov	lr, r3
 8001b02:	4770      	bx	lr
