
stm32f4_disc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005450  08005450  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005450  08005450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005458  08005458  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000480  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000490  20000490  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014670  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000298f  00000000  00000000  000346b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00037040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e00  00000000  00000000  00037f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034d3  00000000  00000000  00038d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139e7  00000000  00000000  0003c22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd4ac  00000000  00000000  0004fc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011d0be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f24  00000000  00000000  0011d114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005420 	.word	0x08005420

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005420 	.word	0x08005420

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <recevoir_message_pc2>:
	}
	*/
}


void recevoir_message_pc2(){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

	if (UART2_rxBuffer_2[pc_message_recu_index] == '\r'){ // on est a la fin du message
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <recevoir_message_pc2+0x44>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <recevoir_message_pc2+0x48>)
 8000d08:	5c9b      	ldrb	r3, [r3, r2]
 8000d0a:	2b0d      	cmp	r3, #13
 8000d0c:	d110      	bne.n	8000d30 <recevoir_message_pc2+0x34>
		strcpy((char *)message_recu_PC,(char *)UART2_rxBuffer_2);
 8000d0e:	490d      	ldr	r1, [pc, #52]	; (8000d44 <recevoir_message_pc2+0x48>)
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <recevoir_message_pc2+0x4c>)
 8000d12:	f004 fb7d 	bl	8005410 <strcpy>
		pc_message_recu_index = 0;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <recevoir_message_pc2+0x44>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
		traiter_message_pc();
 8000d1c:	f000 f818 	bl	8000d50 <traiter_message_pc>

		HAL_UART_Abort(&huart2);
 8000d20:	480a      	ldr	r0, [pc, #40]	; (8000d4c <recevoir_message_pc2+0x50>)
 8000d22:	f003 fb9c 	bl	800445e <HAL_UART_Abort>
		HAL_UART_Receive_IT(&huart2, UART2_rxBuffer_2, sizeof(UART2_rxBuffer_2));
 8000d26:	2264      	movs	r2, #100	; 0x64
 8000d28:	4906      	ldr	r1, [pc, #24]	; (8000d44 <recevoir_message_pc2+0x48>)
 8000d2a:	4808      	ldr	r0, [pc, #32]	; (8000d4c <recevoir_message_pc2+0x50>)
 8000d2c:	f003 fb67 	bl	80043fe <HAL_UART_Receive_IT>
	}

	pc_message_recu_index ++;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <recevoir_message_pc2+0x44>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b01      	ldr	r3, [pc, #4]	; (8000d40 <recevoir_message_pc2+0x44>)
 8000d3a:	701a      	strb	r2, [r3, #0]

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000038 	.word	0x20000038
 8000d44:	200002d0 	.word	0x200002d0
 8000d48:	20000104 	.word	0x20000104
 8000d4c:	20000448 	.word	0x20000448

08000d50 <traiter_message_pc>:


void traiter_message_pc(){
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0

	int a;



	switch(message_recu_PC[0]){
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <traiter_message_pc+0x68>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b05      	cmp	r3, #5
 8000d5c:	d825      	bhi.n	8000daa <traiter_message_pc+0x5a>
 8000d5e:	a201      	add	r2, pc, #4	; (adr r2, 8000d64 <traiter_message_pc+0x14>)
 8000d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d64:	08000d7d 	.word	0x08000d7d
 8000d68:	08000d83 	.word	0x08000d83
 8000d6c:	08000d89 	.word	0x08000d89
 8000d70:	08000d8f 	.word	0x08000d8f
 8000d74:	08000d95 	.word	0x08000d95
 8000d78:	08000d9b 	.word	0x08000d9b



	case 0:   // stop
		a = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
		break;
 8000d80:	e013      	b.n	8000daa <traiter_message_pc+0x5a>

	case 1:   // avancer
		a = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	607b      	str	r3, [r7, #4]

		break;
 8000d86:	e010      	b.n	8000daa <traiter_message_pc+0x5a>

	case 2:   // reculer
		a = 2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	607b      	str	r3, [r7, #4]

		break;
 8000d8c:	e00d      	b.n	8000daa <traiter_message_pc+0x5a>

	case 3:   // droite
		a = 3;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	607b      	str	r3, [r7, #4]
		break;
 8000d92:	e00a      	b.n	8000daa <traiter_message_pc+0x5a>

	case 4:   // gauche
		a = 4;
 8000d94:	2304      	movs	r3, #4
 8000d96:	607b      	str	r3, [r7, #4]

		break;
 8000d98:	e007      	b.n	8000daa <traiter_message_pc+0x5a>

	case 5:   // controle PWM

		a = 5;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	607b      	str	r3, [r7, #4]

		pwm = 2 * UART2_rxBuffer_2[1]; // on a un rapport *2
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <traiter_message_pc+0x6c>)
 8000da0:	785b      	ldrb	r3, [r3, #1]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <traiter_message_pc+0x70>)
 8000da6:	6013      	str	r3, [r2, #0]
		break;
 8000da8:	bf00      	nop
	}

}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000104 	.word	0x20000104
 8000dbc:	200002d0 	.word	0x200002d0
 8000dc0:	2000002c 	.word	0x2000002c

08000dc4 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	4b9a      	ldr	r3, [pc, #616]	; (8001048 <MX_GPIO_Init+0x284>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a99      	ldr	r2, [pc, #612]	; (8001048 <MX_GPIO_Init+0x284>)
 8000de4:	f043 0310 	orr.w	r3, r3, #16
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b97      	ldr	r3, [pc, #604]	; (8001048 <MX_GPIO_Init+0x284>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	4b93      	ldr	r3, [pc, #588]	; (8001048 <MX_GPIO_Init+0x284>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a92      	ldr	r2, [pc, #584]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b90      	ldr	r3, [pc, #576]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b8c      	ldr	r3, [pc, #560]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a8b      	ldr	r2, [pc, #556]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b89      	ldr	r3, [pc, #548]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b85      	ldr	r3, [pc, #532]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a84      	ldr	r2, [pc, #528]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b82      	ldr	r3, [pc, #520]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	4b7e      	ldr	r3, [pc, #504]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a7d      	ldr	r2, [pc, #500]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b7b      	ldr	r3, [pc, #492]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b77      	ldr	r3, [pc, #476]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a76      	ldr	r2, [pc, #472]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b74      	ldr	r3, [pc, #464]	; (8001048 <MX_GPIO_Init+0x284>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2108      	movs	r1, #8
 8000e86:	4871      	ldr	r0, [pc, #452]	; (800104c <MX_GPIO_Init+0x288>)
 8000e88:	f001 fa54 	bl	8002334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	486f      	ldr	r0, [pc, #444]	; (8001050 <MX_GPIO_Init+0x28c>)
 8000e92:	f001 fa4f 	bl	8002334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e96:	2200      	movs	r2, #0
 8000e98:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e9c:	486d      	ldr	r0, [pc, #436]	; (8001054 <MX_GPIO_Init+0x290>)
 8000e9e:	f001 fa49 	bl	8002334 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4864      	ldr	r0, [pc, #400]	; (800104c <MX_GPIO_Init+0x288>)
 8000eba:	f001 f89f 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	485e      	ldr	r0, [pc, #376]	; (8001050 <MX_GPIO_Init+0x28c>)
 8000ed6:	f001 f891 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000eda:	2308      	movs	r3, #8
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eea:	2305      	movs	r3, #5
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4856      	ldr	r0, [pc, #344]	; (8001050 <MX_GPIO_Init+0x28c>)
 8000ef6:	f001 f881 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000efe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4852      	ldr	r0, [pc, #328]	; (8001058 <MX_GPIO_Init+0x294>)
 8000f10:	f001 f874 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f14:	2310      	movs	r3, #16
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f24:	2306      	movs	r3, #6
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	484a      	ldr	r0, [pc, #296]	; (8001058 <MX_GPIO_Init+0x294>)
 8000f30:	f001 f864 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f34:	2304      	movs	r3, #4
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4845      	ldr	r0, [pc, #276]	; (800105c <MX_GPIO_Init+0x298>)
 8000f48:	f001 f858 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	483c      	ldr	r0, [pc, #240]	; (800105c <MX_GPIO_Init+0x298>)
 8000f6a:	f001 f847 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f6e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f72:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4833      	ldr	r0, [pc, #204]	; (8001054 <MX_GPIO_Init+0x290>)
 8000f88:	f001 f838 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f8c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4829      	ldr	r0, [pc, #164]	; (8001050 <MX_GPIO_Init+0x28c>)
 8000faa:	f001 f827 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4825      	ldr	r0, [pc, #148]	; (8001058 <MX_GPIO_Init+0x294>)
 8000fc4:	f001 f81a 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000fc8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fda:	230a      	movs	r3, #10
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481c      	ldr	r0, [pc, #112]	; (8001058 <MX_GPIO_Init+0x294>)
 8000fe6:	f001 f809 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fea:	2320      	movs	r3, #32
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4815      	ldr	r0, [pc, #84]	; (8001054 <MX_GPIO_Init+0x290>)
 8000ffe:	f000 fffd 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001002:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001008:	2312      	movs	r3, #18
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100c:	2301      	movs	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001014:	2304      	movs	r3, #4
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	480f      	ldr	r0, [pc, #60]	; (800105c <MX_GPIO_Init+0x298>)
 8001020:	f000 ffec 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001024:	2302      	movs	r3, #2
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001028:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800102c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <MX_GPIO_Init+0x288>)
 800103a:	f000 ffdf 	bl	8001ffc <HAL_GPIO_Init>

}
 800103e:	bf00      	nop
 8001040:	3730      	adds	r7, #48	; 0x30
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40021000 	.word	0x40021000
 8001050:	40020800 	.word	0x40020800
 8001054:	40020c00 	.word	0x40020c00
 8001058:	40020000 	.word	0x40020000
 800105c:	40020400 	.word	0x40020400

08001060 <demarrer_pwm_lidar>:





void demarrer_pwm_lidar(){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  TIM1->CCR1 = 30000;
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <demarrer_pwm_lidar+0x18>)
 8001066:	f247 5230 	movw	r2, #30000	; 0x7530
 800106a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800106c:	2100      	movs	r1, #0
 800106e:	4803      	ldr	r0, [pc, #12]	; (800107c <demarrer_pwm_lidar+0x1c>)
 8001070:	f002 fc18 	bl	80038a4 <HAL_TIM_PWM_Start>
  return;
 8001074:	bf00      	nop


  }
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40010000 	.word	0x40010000
 800107c:	20000284 	.word	0x20000284

08001080 <lidar_scan>:
	HAL_UART_Transmit(&huart3, Data, 2, 100);
	return;
}


void lidar_scan(){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	uint8_t Data[2] = {0xA5, 0x20};
 8001086:	f242 03a5 	movw	r3, #8357	; 0x20a5
 800108a:	80bb      	strh	r3, [r7, #4]
	HAL_UART_Transmit(&huart3, Data, 2, 100);
 800108c:	1d39      	adds	r1, r7, #4
 800108e:	2364      	movs	r3, #100	; 0x64
 8001090:	2202      	movs	r2, #2
 8001092:	4803      	ldr	r0, [pc, #12]	; (80010a0 <lidar_scan+0x20>)
 8001094:	f003 f921 	bl	80042da <HAL_UART_Transmit>
	return;
 8001098:	bf00      	nop
}
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000334 	.word	0x20000334
 80010a4:	00000000 	.word	0x00000000

080010a8 <uart_lidar_recieve>:



void uart_lidar_recieve(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0

	octet_recu = UART3_rxBuffer;
 80010ae:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <uart_lidar_recieve+0x180>)
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	4b5e      	ldr	r3, [pc, #376]	; (800122c <uart_lidar_recieve+0x184>)
 80010b4:	701a      	strb	r2, [r3, #0]

	switch (lidar_state){
 80010b6:	4b5e      	ldr	r3, [pc, #376]	; (8001230 <uart_lidar_recieve+0x188>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <uart_lidar_recieve+0x1c>
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d041      	beq.n	8001146 <uart_lidar_recieve+0x9e>



		}

	return;
 80010c2:	e0a9      	b.n	8001218 <uart_lidar_recieve+0x170>
			if ((octet_recu == 0xA5) && (last_bit_state == end) ){  // on recoit l'octet de start
 80010c4:	4b59      	ldr	r3, [pc, #356]	; (800122c <uart_lidar_recieve+0x184>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2ba5      	cmp	r3, #165	; 0xa5
 80010ca:	d112      	bne.n	80010f2 <uart_lidar_recieve+0x4a>
 80010cc:	4b59      	ldr	r3, [pc, #356]	; (8001234 <uart_lidar_recieve+0x18c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d10e      	bne.n	80010f2 <uart_lidar_recieve+0x4a>
				bit_state = start1;
 80010d4:	4b58      	ldr	r3, [pc, #352]	; (8001238 <uart_lidar_recieve+0x190>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
				taille_message_recu = 0; // on remet a zero la taille du message recu
 80010da:	4b58      	ldr	r3, [pc, #352]	; (800123c <uart_lidar_recieve+0x194>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
				index_ecriture_message_recu = 0;
 80010e0:	4b57      	ldr	r3, [pc, #348]	; (8001240 <uart_lidar_recieve+0x198>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
				memset(lidar_message_recu,0,sizeof(lidar_message_recu)); // on efface le buffer
 80010e6:	2264      	movs	r2, #100	; 0x64
 80010e8:	2100      	movs	r1, #0
 80010ea:	4856      	ldr	r0, [pc, #344]	; (8001244 <uart_lidar_recieve+0x19c>)
 80010ec:	f004 f988 	bl	8005400 <memset>
 80010f0:	e024      	b.n	800113c <uart_lidar_recieve+0x94>
			else if ((last_bit_state == start1) && (octet_recu == 0x5A)){ // on recoit le deuxième octet de start
 80010f2:	4b50      	ldr	r3, [pc, #320]	; (8001234 <uart_lidar_recieve+0x18c>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d107      	bne.n	800110a <uart_lidar_recieve+0x62>
 80010fa:	4b4c      	ldr	r3, [pc, #304]	; (800122c <uart_lidar_recieve+0x184>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b5a      	cmp	r3, #90	; 0x5a
 8001100:	d103      	bne.n	800110a <uart_lidar_recieve+0x62>
				bit_state = start2;
 8001102:	4b4d      	ldr	r3, [pc, #308]	; (8001238 <uart_lidar_recieve+0x190>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e018      	b.n	800113c <uart_lidar_recieve+0x94>
			else if (last_bit_state == start2){   // on a l'octet qui donne la taille de la communication
 800110a:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <uart_lidar_recieve+0x18c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d107      	bne.n	8001122 <uart_lidar_recieve+0x7a>
				bit_state = size;
 8001112:	4b49      	ldr	r3, [pc, #292]	; (8001238 <uart_lidar_recieve+0x190>)
 8001114:	2202      	movs	r2, #2
 8001116:	701a      	strb	r2, [r3, #0]
				taille_message_recu = octet_recu;
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <uart_lidar_recieve+0x184>)
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	4b47      	ldr	r3, [pc, #284]	; (800123c <uart_lidar_recieve+0x194>)
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e00c      	b.n	800113c <uart_lidar_recieve+0x94>
			else if ((last_bit_state == size) || (last_bit_state == data)){     // on a une data
 8001122:	4b44      	ldr	r3, [pc, #272]	; (8001234 <uart_lidar_recieve+0x18c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d003      	beq.n	8001132 <uart_lidar_recieve+0x8a>
 800112a:	4b42      	ldr	r3, [pc, #264]	; (8001234 <uart_lidar_recieve+0x18c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b03      	cmp	r3, #3
 8001130:	d104      	bne.n	800113c <uart_lidar_recieve+0x94>
				bit_state = data;
 8001132:	4b41      	ldr	r3, [pc, #260]	; (8001238 <uart_lidar_recieve+0x190>)
 8001134:	2203      	movs	r2, #3
 8001136:	701a      	strb	r2, [r3, #0]
				reception_octet_data();
 8001138:	f000 f88c 	bl	8001254 <reception_octet_data>
			last_bit_state = bit_state; // machine d'état
 800113c:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <uart_lidar_recieve+0x190>)
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <uart_lidar_recieve+0x18c>)
 8001142:	701a      	strb	r2, [r3, #0]
			break;
 8001144:	e067      	b.n	8001216 <uart_lidar_recieve+0x16e>
			if (compteur == 4){
 8001146:	4b40      	ldr	r3, [pc, #256]	; (8001248 <uart_lidar_recieve+0x1a0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	d157      	bne.n	80011fe <uart_lidar_recieve+0x156>
				compteur = 0;
 800114e:	4b3e      	ldr	r3, [pc, #248]	; (8001248 <uart_lidar_recieve+0x1a0>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
				float angle = 256 * (float)lidar_message_recu[2] + (float)lidar_message_recu[1];
 8001154:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <uart_lidar_recieve+0x19c>)
 8001156:	789b      	ldrb	r3, [r3, #2]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001160:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800124c <uart_lidar_recieve+0x1a4>
 8001164:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001168:	4b36      	ldr	r3, [pc, #216]	; (8001244 <uart_lidar_recieve+0x19c>)
 800116a:	785b      	ldrb	r3, [r3, #1]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001178:	edc7 7a05 	vstr	s15, [r7, #20]
				angle = angle / 1.41;
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f7ff f987 	bl	8000490 <__aeabi_f2d>
 8001182:	a327      	add	r3, pc, #156	; (adr r3, 8001220 <uart_lidar_recieve+0x178>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fb04 	bl	8000794 <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fbe6 	bl	8000964 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	617b      	str	r3, [r7, #20]
				float distance = 256 * (float)lidar_message_recu[4] + (float)lidar_message_recu[3];
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <uart_lidar_recieve+0x19c>)
 800119e:	791b      	ldrb	r3, [r3, #4]
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800124c <uart_lidar_recieve+0x1a4>
 80011ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <uart_lidar_recieve+0x19c>)
 80011b2:	78db      	ldrb	r3, [r3, #3]
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c0:	edc7 7a04 	vstr	s15, [r7, #16]
				uint8_t angle_8 = (uint8_t) angle;
 80011c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80011d0:	793b      	ldrb	r3, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
				uint8_t distance_8 = (uint8_t) distance;
 80011d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80011e0:	793b      	ldrb	r3, [r7, #4]
 80011e2:	73bb      	strb	r3, [r7, #14]
				uint8_t message_a_transmettre[3] = {1,angle_8,distance_8};
 80011e4:	2301      	movs	r3, #1
 80011e6:	723b      	strb	r3, [r7, #8]
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	727b      	strb	r3, [r7, #9]
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	72bb      	strb	r3, [r7, #10]
				HAL_UART_Transmit(&huart2, message_a_transmettre, 3, 100);
 80011f0:	f107 0108 	add.w	r1, r7, #8
 80011f4:	2364      	movs	r3, #100	; 0x64
 80011f6:	2203      	movs	r2, #3
 80011f8:	4815      	ldr	r0, [pc, #84]	; (8001250 <uart_lidar_recieve+0x1a8>)
 80011fa:	f003 f86e 	bl	80042da <HAL_UART_Transmit>
			lidar_message_recu[compteur] = octet_recu;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <uart_lidar_recieve+0x1a0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <uart_lidar_recieve+0x184>)
 8001204:	7811      	ldrb	r1, [r2, #0]
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <uart_lidar_recieve+0x19c>)
 8001208:	54d1      	strb	r1, [r2, r3]
			compteur ++;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <uart_lidar_recieve+0x1a0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <uart_lidar_recieve+0x1a0>)
 8001212:	6013      	str	r3, [r2, #0]
			break;
 8001214:	bf00      	nop
	return;
 8001216:	bf00      	nop
}
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	28f5c28f 	.word	0x28f5c28f
 8001224:	3ff68f5c 	.word	0x3ff68f5c
 8001228:	20000378 	.word	0x20000378
 800122c:	2000016d 	.word	0x2000016d
 8001230:	20000030 	.word	0x20000030
 8001234:	20000000 	.word	0x20000000
 8001238:	2000016c 	.word	0x2000016c
 800123c:	2000016e 	.word	0x2000016e
 8001240:	20000168 	.word	0x20000168
 8001244:	20000170 	.word	0x20000170
 8001248:	20000034 	.word	0x20000034
 800124c:	43800000 	.word	0x43800000
 8001250:	20000448 	.word	0x20000448

08001254 <reception_octet_data>:

void reception_octet_data(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
		lidar_message_recu[index_ecriture_message_recu] = octet_recu;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <reception_octet_data+0x38>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <reception_octet_data+0x3c>)
 800125e:	7811      	ldrb	r1, [r2, #0]
 8001260:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <reception_octet_data+0x40>)
 8001262:	54d1      	strb	r1, [r2, r3]
		index_ecriture_message_recu ++;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <reception_octet_data+0x38>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	4a08      	ldr	r2, [pc, #32]	; (800128c <reception_octet_data+0x38>)
 800126c:	6013      	str	r3, [r2, #0]
		if (index_ecriture_message_recu == taille_message_recu){
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <reception_octet_data+0x44>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <reception_octet_data+0x38>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d105      	bne.n	8001288 <reception_octet_data+0x34>
			bit_state = end;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <reception_octet_data+0x48>)
 800127e:	2204      	movs	r2, #4
 8001280:	701a      	strb	r2, [r3, #0]
			lidar_fin_du_message_recu();
 8001282:	f000 f80d 	bl	80012a0 <lidar_fin_du_message_recu>
		}


	return;
 8001286:	bf00      	nop
 8001288:	bf00      	nop
}
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000168 	.word	0x20000168
 8001290:	2000016d 	.word	0x2000016d
 8001294:	20000170 	.word	0x20000170
 8001298:	2000016e 	.word	0x2000016e
 800129c:	2000016c 	.word	0x2000016c

080012a0 <lidar_fin_du_message_recu>:


void lidar_fin_du_message_recu(){      // on transmet le message au PC
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0

	uint8_t angle = 3;
 80012a6:	2303      	movs	r3, #3
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t distance = 5;
 80012aa:	2305      	movs	r3, #5
 80012ac:	71bb      	strb	r3, [r7, #6]

	uint8_t test [3] = {1, angle, distance};
 80012ae:	2301      	movs	r3, #1
 80012b0:	703b      	strb	r3, [r7, #0]
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	707b      	strb	r3, [r7, #1]
 80012b6:	79bb      	ldrb	r3, [r7, #6]
 80012b8:	70bb      	strb	r3, [r7, #2]


	//HAL_UART_Transmit(&huart2, test, sizeof(test), 100);


	if((lidar_message_recu[0] == 0x0) && (lidar_message_recu[1] == 0x0) && (lidar_message_recu[2] == 0x40) && (lidar_message_recu[3] == 0x81)){
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <lidar_fin_du_message_recu+0x50>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <lidar_fin_du_message_recu+0x42>
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <lidar_fin_du_message_recu+0x50>)
 80012c4:	785b      	ldrb	r3, [r3, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10b      	bne.n	80012e2 <lidar_fin_du_message_recu+0x42>
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <lidar_fin_du_message_recu+0x50>)
 80012cc:	789b      	ldrb	r3, [r3, #2]
 80012ce:	2b40      	cmp	r3, #64	; 0x40
 80012d0:	d107      	bne.n	80012e2 <lidar_fin_du_message_recu+0x42>
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <lidar_fin_du_message_recu+0x50>)
 80012d4:	78db      	ldrb	r3, [r3, #3]
 80012d6:	2b81      	cmp	r3, #129	; 0x81
 80012d8:	d103      	bne.n	80012e2 <lidar_fin_du_message_recu+0x42>
		lidar_state = scan;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <lidar_fin_du_message_recu+0x54>)
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]

	}



	return;
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop



}
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000170 	.word	0x20000170
 80012f4:	20000030 	.word	0x20000030

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fc:	f000 fc5c 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001300:	f000 f824 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001304:	f7ff fd5e 	bl	8000dc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001308:	f000 fb28 	bl	800195c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800130c:	f000 fb50 	bl	80019b0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001310:	f000 f88c 	bl	800142c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001314:	f000 fa42 	bl	800179c <MX_TIM1_Init>
  MX_SPI2_Init();
 8001318:	f000 f8be 	bl	8001498 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer_2, sizeof(&UART2_rxBuffer_2));
 800131c:	2204      	movs	r2, #4
 800131e:	4907      	ldr	r1, [pc, #28]	; (800133c <main+0x44>)
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <main+0x48>)
 8001322:	f003 f86c 	bl	80043fe <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1);
 8001326:	2201      	movs	r2, #1
 8001328:	4906      	ldr	r1, [pc, #24]	; (8001344 <main+0x4c>)
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <main+0x50>)
 800132c:	f003 f867 	bl	80043fe <HAL_UART_Receive_IT>



  demarrer_pwm_lidar();
 8001330:	f7ff fe96 	bl	8001060 <demarrer_pwm_lidar>
  lidar_scan();
 8001334:	f7ff fea4 	bl	8001080 <lidar_scan>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001338:	e7fe      	b.n	8001338 <main+0x40>
 800133a:	bf00      	nop
 800133c:	200002d0 	.word	0x200002d0
 8001340:	20000448 	.word	0x20000448
 8001344:	20000378 	.word	0x20000378
 8001348:	20000334 	.word	0x20000334

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b094      	sub	sp, #80	; 0x50
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	2230      	movs	r2, #48	; 0x30
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f004 f850 	bl	8005400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <SystemClock_Config+0xcc>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a27      	ldr	r2, [pc, #156]	; (8001418 <SystemClock_Config+0xcc>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <SystemClock_Config+0xcc>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <SystemClock_Config+0xd0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <SystemClock_Config+0xd0>)
 8001396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <SystemClock_Config+0xd0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b2:	2302      	movs	r3, #2
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013bc:	2308      	movs	r3, #8
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c6:	2302      	movs	r3, #2
 80013c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ca:	2307      	movs	r3, #7
 80013cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ce:	f107 0320 	add.w	r3, r7, #32
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 ffc8 	bl	8002368 <HAL_RCC_OscConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013de:	f000 f81f 	bl	8001420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e2:	230f      	movs	r3, #15
 80013e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e6:	2302      	movs	r3, #2
 80013e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2105      	movs	r1, #5
 8001400:	4618      	mov	r0, r3
 8001402:	f001 fa29 	bl	8002858 <HAL_RCC_ClockConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800140c:	f000 f808 	bl	8001420 <Error_Handler>
  }
}
 8001410:	bf00      	nop
 8001412:	3750      	adds	r7, #80	; 0x50
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	e7fe      	b.n	8001428 <Error_Handler+0x8>
	...

0800142c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_SPI1_Init+0x64>)
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <MX_SPI1_Init+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_SPI1_Init+0x64>)
 8001438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800143c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_SPI1_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_SPI1_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_SPI1_Init+0x64>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_SPI1_Init+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_SPI1_Init+0x64>)
 8001458:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800145c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_SPI1_Init+0x64>)
 8001460:	2230      	movs	r2, #48	; 0x30
 8001462:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <MX_SPI1_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_SPI1_Init+0x64>)
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <MX_SPI1_Init+0x64>)
 8001472:	2200      	movs	r2, #0
 8001474:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_SPI1_Init+0x64>)
 8001478:	220a      	movs	r2, #10
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_SPI1_Init+0x64>)
 800147e:	f001 fbe7 	bl	8002c50 <HAL_SPI_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001488:	f7ff ffca 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000022c 	.word	0x2000022c
 8001494:	40013000 	.word	0x40013000

08001498 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_SPI2_Init+0x70>)
 800149e:	4a1b      	ldr	r2, [pc, #108]	; (800150c <MX_SPI2_Init+0x74>)
 80014a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_SPI2_Init+0x70>)
 80014a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_SPI2_Init+0x70>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <MX_SPI2_Init+0x70>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_SPI2_Init+0x70>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_SPI2_Init+0x70>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_SPI2_Init+0x70>)
 80014c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_SPI2_Init+0x70>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <MX_SPI2_Init+0x70>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_SPI2_Init+0x70>)
 80014d8:	2200      	movs	r2, #0
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <MX_SPI2_Init+0x70>)
 80014de:	2200      	movs	r2, #0
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_SPI2_Init+0x70>)
 80014e4:	220a      	movs	r2, #10
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014e8:	4807      	ldr	r0, [pc, #28]	; (8001508 <MX_SPI2_Init+0x70>)
 80014ea:	f001 fbb1 	bl	8002c50 <HAL_SPI_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014f4:	f7ff ff94 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */


  HAL_SPI_Receive_IT (SPI2, pRxData_spi , sizeof(pRxData_spi));
 80014f8:	2264      	movs	r2, #100	; 0x64
 80014fa:	4905      	ldr	r1, [pc, #20]	; (8001510 <MX_SPI2_Init+0x78>)
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_SPI2_Init+0x74>)
 80014fe:	f001 fc31 	bl	8002d64 <HAL_SPI_Receive_IT>

  /* USER CODE END SPI2_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200001d4 	.word	0x200001d4
 800150c:	40003800 	.word	0x40003800
 8001510:	200000a0 	.word	0x200000a0

08001514 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a4e      	ldr	r2, [pc, #312]	; (800166c <HAL_SPI_MspInit+0x158>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d13d      	bne.n	80015b2 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	4b4d      	ldr	r3, [pc, #308]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 8001540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b46      	ldr	r3, [pc, #280]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a45      	ldr	r2, [pc, #276]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b43      	ldr	r3, [pc, #268]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800156e:	23e0      	movs	r3, #224	; 0xe0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800157e:	2305      	movs	r3, #5
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	4619      	mov	r1, r3
 8001588:	483a      	ldr	r0, [pc, #232]	; (8001674 <HAL_SPI_MspInit+0x160>)
 800158a:	f000 fd37 	bl	8001ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800158e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a0:	2305      	movs	r3, #5
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4832      	ldr	r0, [pc, #200]	; (8001674 <HAL_SPI_MspInit+0x160>)
 80015ac:	f000 fd26 	bl	8001ffc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80015b0:	e057      	b.n	8001662 <HAL_SPI_MspInit+0x14e>
  else if(spiHandle->Instance==SPI2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a30      	ldr	r2, [pc, #192]	; (8001678 <HAL_SPI_MspInit+0x164>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d152      	bne.n	8001662 <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a2a      	ldr	r2, [pc, #168]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 80015c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4a23      	ldr	r2, [pc, #140]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	6313      	str	r3, [r2, #48]	; 0x30
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_SPI_MspInit+0x15c>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001610:	2304      	movs	r3, #4
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001620:	2305      	movs	r3, #5
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	4814      	ldr	r0, [pc, #80]	; (800167c <HAL_SPI_MspInit+0x168>)
 800162c:	f000 fce6 	bl	8001ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001630:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001642:	2305      	movs	r3, #5
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <HAL_SPI_MspInit+0x16c>)
 800164e:	f000 fcd5 	bl	8001ffc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2024      	movs	r0, #36	; 0x24
 8001658:	f000 fbfb 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800165c:	2024      	movs	r0, #36	; 0x24
 800165e:	f000 fc14 	bl	8001e8a <HAL_NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3730      	adds	r7, #48	; 0x30
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40013000 	.word	0x40013000
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000
 8001678:	40003800 	.word	0x40003800
 800167c:	40020800 	.word	0x40020800
 8001680:	40020400 	.word	0x40020400

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <HAL_MspInit+0x4c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_MspInit+0x4c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_MspInit+0x4c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_MspInit+0x4c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016c2:	2007      	movs	r0, #7
 80016c4:	f000 fbba 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001720:	f000 fa9c 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <SPI2_IRQHandler+0x10>)
 800172e:	f001 fc4b 	bl	8002fc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200001d4 	.word	0x200001d4

0800173c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <USART2_IRQHandler+0x14>)
 8001742:	f002 ff77 	bl	8004634 <HAL_UART_IRQHandler>

  */

  //uart_pc_recieve();

  recevoir_message_pc2();
 8001746:	f7ff fad9 	bl	8000cfc <recevoir_message_pc2>


  /* USER CODE END USART2_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000448 	.word	0x20000448

08001754 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <USART3_IRQHandler+0x1c>)
 800175a:	f002 ff6b 	bl	8004634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  uart_lidar_recieve();
 800175e:	f7ff fca3 	bl	80010a8 <uart_lidar_recieve>
  HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1);
 8001762:	2201      	movs	r2, #1
 8001764:	4903      	ldr	r1, [pc, #12]	; (8001774 <USART3_IRQHandler+0x20>)
 8001766:	4802      	ldr	r0, [pc, #8]	; (8001770 <USART3_IRQHandler+0x1c>)
 8001768:	f002 fe49 	bl	80043fe <HAL_UART_Receive_IT>




  /* USER CODE END USART3_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000334 	.word	0x20000334
 8001774:	20000378 	.word	0x20000378

08001778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b092      	sub	sp, #72	; 0x48
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2220      	movs	r2, #32
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fe1a 	bl	8005400 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <MX_TIM1_Init+0x100>)
 80017ce:	4a34      	ldr	r2, [pc, #208]	; (80018a0 <MX_TIM1_Init+0x104>)
 80017d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <MX_TIM1_Init+0x100>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <MX_TIM1_Init+0x100>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <MX_TIM1_Init+0x100>)
 80017e0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80017e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	4b2d      	ldr	r3, [pc, #180]	; (800189c <MX_TIM1_Init+0x100>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <MX_TIM1_Init+0x100>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <MX_TIM1_Init+0x100>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017f8:	4828      	ldr	r0, [pc, #160]	; (800189c <MX_TIM1_Init+0x100>)
 80017fa:	f002 f804 	bl	8003806 <HAL_TIM_PWM_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001804:	f7ff fe0c 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001810:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001814:	4619      	mov	r1, r3
 8001816:	4821      	ldr	r0, [pc, #132]	; (800189c <MX_TIM1_Init+0x100>)
 8001818:	f002 fc44 	bl	80040a4 <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001822:	f7ff fdfd 	bl	8001420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001826:	2360      	movs	r3, #96	; 0x60
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	4814      	ldr	r0, [pc, #80]	; (800189c <MX_TIM1_Init+0x100>)
 800184c:	f002 f8f2 	bl	8003a34 <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001856:	f7ff fde3 	bl	8001420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800186e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001872:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	4619      	mov	r1, r3
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <MX_TIM1_Init+0x100>)
 800187e:	f002 fc8d 	bl	800419c <HAL_TIMEx_ConfigBreakDeadTime>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001888:	f7ff fdca 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <MX_TIM1_Init+0x100>)
 800188e:	f000 f82b 	bl	80018e8 <HAL_TIM_MspPostInit>

}
 8001892:	bf00      	nop
 8001894:	3748      	adds	r7, #72	; 0x48
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000284 	.word	0x20000284
 80018a0:	40010000 	.word	0x40010000

080018a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d10d      	bne.n	80018d2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_TIM_PWM_MspInit+0x40>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_TIM_PWM_MspInit+0x40>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_TIM_PWM_MspInit+0x40>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40010000 	.word	0x40010000
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <HAL_TIM_MspPostInit+0x68>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d11e      	bne.n	8001948 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_TIM_MspPostInit+0x6c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_TIM_MspPostInit+0x6c>)
 8001914:	f043 0310 	orr.w	r3, r3, #16
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_TIM_MspPostInit+0x6c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001938:	2301      	movs	r3, #1
 800193a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	4619      	mov	r1, r3
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_TIM_MspPostInit+0x70>)
 8001944:	f000 fb5a 	bl	8001ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40010000 	.word	0x40010000
 8001954:	40023800 	.word	0x40023800
 8001958:	40021000 	.word	0x40021000

0800195c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_USART2_UART_Init+0x50>)
 8001964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800196c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001994:	f002 fc54 	bl	8004240 <HAL_UART_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800199e:	f7ff fd3f 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000448 	.word	0x20000448
 80019ac:	40004400 	.word	0x40004400

080019b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_USART3_UART_Init+0x4c>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <MX_USART3_UART_Init+0x50>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_USART3_UART_Init+0x4c>)
 80019bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MX_USART3_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <MX_USART3_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <MX_USART3_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_USART3_UART_Init+0x4c>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MX_USART3_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_USART3_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_USART3_UART_Init+0x4c>)
 80019e8:	f002 fc2a 	bl	8004240 <HAL_UART_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019f2:	f7ff fd15 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000334 	.word	0x20000334
 8001a00:	40004800 	.word	0x40004800

08001a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	; 0x30
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a4a      	ldr	r2, [pc, #296]	; (8001b4c <HAL_UART_MspInit+0x148>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d134      	bne.n	8001a90 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a48      	ldr	r2, [pc, #288]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	4b42      	ldr	r3, [pc, #264]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a41      	ldr	r2, [pc, #260]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a5e:	230c      	movs	r3, #12
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a6e:	2307      	movs	r3, #7
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4836      	ldr	r0, [pc, #216]	; (8001b54 <HAL_UART_MspInit+0x150>)
 8001a7a:	f000 fabf 	bl	8001ffc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2026      	movs	r0, #38	; 0x26
 8001a84:	f000 f9e5 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a88:	2026      	movs	r0, #38	; 0x26
 8001a8a:	f000 f9fe 	bl	8001e8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a8e:	e058      	b.n	8001b42 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART3)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a30      	ldr	r2, [pc, #192]	; (8001b58 <HAL_UART_MspInit+0x154>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d153      	bne.n	8001b42 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a2b      	ldr	r2, [pc, #172]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_UART_MspInit+0x14c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001aee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b00:	2307      	movs	r3, #7
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4814      	ldr	r0, [pc, #80]	; (8001b5c <HAL_UART_MspInit+0x158>)
 8001b0c:	f000 fa76 	bl	8001ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b22:	2307      	movs	r3, #7
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <HAL_UART_MspInit+0x15c>)
 8001b2e:	f000 fa65 	bl	8001ffc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2027      	movs	r0, #39	; 0x27
 8001b38:	f000 f98b 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b3c:	2027      	movs	r0, #39	; 0x27
 8001b3e:	f000 f9a4 	bl	8001e8a <HAL_NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3730      	adds	r7, #48	; 0x30
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40004400 	.word	0x40004400
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40004800 	.word	0x40004800
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	40020c00 	.word	0x40020c00

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b6a:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b80:	4c0b      	ldr	r4, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b8e:	f7ff fdf3 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f003 fc11 	bl	80053b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7ff fbaf 	bl	80012f8 <main>
  bx  lr    
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ba8:	08005460 	.word	0x08005460
  ldr r2, =_sbss
 8001bac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001bb0:	20000490 	.word	0x20000490

08001bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_Init+0x40>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_Init+0x40>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_Init+0x40>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 f92b 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 f808 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f7ff fd4a 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x54>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x58>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f943 	bl	8001ea6 <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 f90b 	bl	8001e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_InitTick+0x5c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000004 	.word	0x20000004
 8001c54:	2000000c 	.word	0x2000000c
 8001c58:	20000008 	.word	0x20000008

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	2000000c 	.word	0x2000000c
 8001c80:	2000048c 	.word	0x2000048c

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	2000048c 	.word	0x2000048c

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4907      	ldr	r1, [pc, #28]	; (8001d38 <__NVIC_EnableIRQ+0x38>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff8e 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff29 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff3e 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff8e 	bl	8001d90 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5d 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff31 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffa2 	bl	8001df8 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff feda 	bl	8001c84 <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d008      	beq.n	8001ef0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2280      	movs	r2, #128	; 0x80
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e052      	b.n	8001f96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0216 	bic.w	r2, r2, #22
 8001efe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d103      	bne.n	8001f20 <HAL_DMA_Abort+0x62>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0208 	bic.w	r2, r2, #8
 8001f2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f40:	e013      	b.n	8001f6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f42:	f7ff fe9f 	bl	8001c84 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d90c      	bls.n	8001f6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e015      	b.n	8001f96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1e4      	bne.n	8001f42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7c:	223f      	movs	r2, #63	; 0x3f
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d004      	beq.n	8001fbc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e00c      	b.n	8001fd6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2205      	movs	r2, #5
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	e16b      	b.n	80022f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	429a      	cmp	r2, r3
 8002032:	f040 815a 	bne.w	80022ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d005      	beq.n	800204e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204a:	2b02      	cmp	r3, #2
 800204c:	d130      	bne.n	80020b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2203      	movs	r2, #3
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002084:	2201      	movs	r2, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 0201 	and.w	r2, r3, #1
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d017      	beq.n	80020ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2203      	movs	r2, #3
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d123      	bne.n	8002140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	08da      	lsrs	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3208      	adds	r2, #8
 8002100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	220f      	movs	r2, #15
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	08da      	lsrs	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3208      	adds	r2, #8
 800213a:	69b9      	ldr	r1, [r7, #24]
 800213c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0203 	and.w	r2, r3, #3
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80b4 	beq.w	80022ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b60      	ldr	r3, [pc, #384]	; (8002308 <HAL_GPIO_Init+0x30c>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a5f      	ldr	r2, [pc, #380]	; (8002308 <HAL_GPIO_Init+0x30c>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b5d      	ldr	r3, [pc, #372]	; (8002308 <HAL_GPIO_Init+0x30c>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800219e:	4a5b      	ldr	r2, [pc, #364]	; (800230c <HAL_GPIO_Init+0x310>)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	3302      	adds	r3, #2
 80021a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	220f      	movs	r2, #15
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a52      	ldr	r2, [pc, #328]	; (8002310 <HAL_GPIO_Init+0x314>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d02b      	beq.n	8002222 <HAL_GPIO_Init+0x226>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a51      	ldr	r2, [pc, #324]	; (8002314 <HAL_GPIO_Init+0x318>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d025      	beq.n	800221e <HAL_GPIO_Init+0x222>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a50      	ldr	r2, [pc, #320]	; (8002318 <HAL_GPIO_Init+0x31c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01f      	beq.n	800221a <HAL_GPIO_Init+0x21e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4f      	ldr	r2, [pc, #316]	; (800231c <HAL_GPIO_Init+0x320>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d019      	beq.n	8002216 <HAL_GPIO_Init+0x21a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4e      	ldr	r2, [pc, #312]	; (8002320 <HAL_GPIO_Init+0x324>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0x216>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4d      	ldr	r2, [pc, #308]	; (8002324 <HAL_GPIO_Init+0x328>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00d      	beq.n	800220e <HAL_GPIO_Init+0x212>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4c      	ldr	r2, [pc, #304]	; (8002328 <HAL_GPIO_Init+0x32c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x20e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4b      	ldr	r2, [pc, #300]	; (800232c <HAL_GPIO_Init+0x330>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_GPIO_Init+0x20a>
 8002202:	2307      	movs	r3, #7
 8002204:	e00e      	b.n	8002224 <HAL_GPIO_Init+0x228>
 8002206:	2308      	movs	r3, #8
 8002208:	e00c      	b.n	8002224 <HAL_GPIO_Init+0x228>
 800220a:	2306      	movs	r3, #6
 800220c:	e00a      	b.n	8002224 <HAL_GPIO_Init+0x228>
 800220e:	2305      	movs	r3, #5
 8002210:	e008      	b.n	8002224 <HAL_GPIO_Init+0x228>
 8002212:	2304      	movs	r3, #4
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x228>
 8002216:	2303      	movs	r3, #3
 8002218:	e004      	b.n	8002224 <HAL_GPIO_Init+0x228>
 800221a:	2302      	movs	r3, #2
 800221c:	e002      	b.n	8002224 <HAL_GPIO_Init+0x228>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_GPIO_Init+0x228>
 8002222:	2300      	movs	r3, #0
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	f002 0203 	and.w	r2, r2, #3
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	4093      	lsls	r3, r2
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002234:	4935      	ldr	r1, [pc, #212]	; (800230c <HAL_GPIO_Init+0x310>)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_GPIO_Init+0x334>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002266:	4a32      	ldr	r2, [pc, #200]	; (8002330 <HAL_GPIO_Init+0x334>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800226c:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_GPIO_Init+0x334>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002290:	4a27      	ldr	r2, [pc, #156]	; (8002330 <HAL_GPIO_Init+0x334>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_GPIO_Init+0x334>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ba:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_GPIO_Init+0x334>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_GPIO_Init+0x334>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e4:	4a12      	ldr	r2, [pc, #72]	; (8002330 <HAL_GPIO_Init+0x334>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3301      	adds	r3, #1
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	2b0f      	cmp	r3, #15
 80022f4:	f67f ae90 	bls.w	8002018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	40013800 	.word	0x40013800
 8002310:	40020000 	.word	0x40020000
 8002314:	40020400 	.word	0x40020400
 8002318:	40020800 	.word	0x40020800
 800231c:	40020c00 	.word	0x40020c00
 8002320:	40021000 	.word	0x40021000
 8002324:	40021400 	.word	0x40021400
 8002328:	40021800 	.word	0x40021800
 800232c:	40021c00 	.word	0x40021c00
 8002330:	40013c00 	.word	0x40013c00

08002334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	807b      	strh	r3, [r7, #2]
 8002340:	4613      	mov	r3, r2
 8002342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002344:	787b      	ldrb	r3, [r7, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002350:	e003      	b.n	800235a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002352:	887b      	ldrh	r3, [r7, #2]
 8002354:	041a      	lsls	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	619a      	str	r2, [r3, #24]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e264      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d075      	beq.n	8002472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002386:	4ba3      	ldr	r3, [pc, #652]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b04      	cmp	r3, #4
 8002390:	d00c      	beq.n	80023ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002392:	4ba0      	ldr	r3, [pc, #640]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800239a:	2b08      	cmp	r3, #8
 800239c:	d112      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239e:	4b9d      	ldr	r3, [pc, #628]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023aa:	d10b      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	4b99      	ldr	r3, [pc, #612]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d05b      	beq.n	8002470 <HAL_RCC_OscConfig+0x108>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d157      	bne.n	8002470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e23f      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x74>
 80023ce:	4b91      	ldr	r3, [pc, #580]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a90      	ldr	r2, [pc, #576]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x98>
 80023e6:	4b8b      	ldr	r3, [pc, #556]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a8a      	ldr	r2, [pc, #552]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b88      	ldr	r3, [pc, #544]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a87      	ldr	r2, [pc, #540]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 8002400:	4b84      	ldr	r3, [pc, #528]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a83      	ldr	r2, [pc, #524]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b81      	ldr	r3, [pc, #516]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a80      	ldr	r2, [pc, #512]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff fc30 	bl	8001c84 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff fc2c 	bl	8001c84 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e204      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b76      	ldr	r3, [pc, #472]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0xc0>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff fc1c 	bl	8001c84 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002450:	f7ff fc18 	bl	8001c84 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1f0      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	4b6c      	ldr	r3, [pc, #432]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0xe8>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d063      	beq.n	8002546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247e:	4b65      	ldr	r3, [pc, #404]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248a:	4b62      	ldr	r3, [pc, #392]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002492:	2b08      	cmp	r3, #8
 8002494:	d11c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002496:	4b5f      	ldr	r3, [pc, #380]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d116      	bne.n	80024d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	4b5c      	ldr	r3, [pc, #368]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_RCC_OscConfig+0x152>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e1c4      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	4b56      	ldr	r3, [pc, #344]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4952      	ldr	r1, [pc, #328]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	e03a      	b.n	8002546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d8:	4b4f      	ldr	r3, [pc, #316]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7ff fbd1 	bl	8001c84 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e6:	f7ff fbcd 	bl	8001c84 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e1a5      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	4b46      	ldr	r3, [pc, #280]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4940      	ldr	r1, [pc, #256]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
 8002518:	e015      	b.n	8002546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251a:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7ff fbb0 	bl	8001c84 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002528:	f7ff fbac 	bl	8001c84 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e184      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	4b36      	ldr	r3, [pc, #216]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d030      	beq.n	80025b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255a:	4b30      	ldr	r3, [pc, #192]	; (800261c <HAL_RCC_OscConfig+0x2b4>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7ff fb90 	bl	8001c84 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002568:	f7ff fb8c 	bl	8001c84 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e164      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 800257c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x200>
 8002586:	e015      	b.n	80025b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_OscConfig+0x2b4>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258e:	f7ff fb79 	bl	8001c84 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002596:	f7ff fb75 	bl	8001c84 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e14d      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a0 	beq.w	8002702 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10f      	bne.n	80025f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e0:	6413      	str	r3, [r2, #64]	; 0x40
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ee:	2301      	movs	r3, #1
 80025f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_OscConfig+0x2b8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d121      	bne.n	8002642 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_RCC_OscConfig+0x2b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_RCC_OscConfig+0x2b8>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260a:	f7ff fb3b 	bl	8001c84 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	e011      	b.n	8002636 <HAL_RCC_OscConfig+0x2ce>
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	42470000 	.word	0x42470000
 800261c:	42470e80 	.word	0x42470e80
 8002620:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002624:	f7ff fb2e 	bl	8001c84 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e106      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002636:	4b85      	ldr	r3, [pc, #532]	; (800284c <HAL_RCC_OscConfig+0x4e4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d106      	bne.n	8002658 <HAL_RCC_OscConfig+0x2f0>
 800264a:	4b81      	ldr	r3, [pc, #516]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a80      	ldr	r2, [pc, #512]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	e01c      	b.n	8002692 <HAL_RCC_OscConfig+0x32a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b05      	cmp	r3, #5
 800265e:	d10c      	bne.n	800267a <HAL_RCC_OscConfig+0x312>
 8002660:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a7a      	ldr	r2, [pc, #488]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
 800266c:	4b78      	ldr	r3, [pc, #480]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	4a77      	ldr	r2, [pc, #476]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6713      	str	r3, [r2, #112]	; 0x70
 8002678:	e00b      	b.n	8002692 <HAL_RCC_OscConfig+0x32a>
 800267a:	4b75      	ldr	r3, [pc, #468]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a74      	ldr	r2, [pc, #464]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
 8002686:	4b72      	ldr	r3, [pc, #456]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a71      	ldr	r2, [pc, #452]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 800268c:	f023 0304 	bic.w	r3, r3, #4
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d015      	beq.n	80026c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269a:	f7ff faf3 	bl	8001c84 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7ff faef 	bl	8001c84 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e0c5      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	4b65      	ldr	r3, [pc, #404]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ee      	beq.n	80026a2 <HAL_RCC_OscConfig+0x33a>
 80026c4:	e014      	b.n	80026f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c6:	f7ff fadd 	bl	8001c84 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7ff fad9 	bl	8001c84 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0af      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e4:	4b5a      	ldr	r3, [pc, #360]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ee      	bne.n	80026ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d105      	bne.n	8002702 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f6:	4b56      	ldr	r3, [pc, #344]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a55      	ldr	r2, [pc, #340]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 80026fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 809b 	beq.w	8002842 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800270c:	4b50      	ldr	r3, [pc, #320]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d05c      	beq.n	80027d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d141      	bne.n	80027a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002720:	4b4c      	ldr	r3, [pc, #304]	; (8002854 <HAL_RCC_OscConfig+0x4ec>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7ff faad 	bl	8001c84 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272e:	f7ff faa9 	bl	8001c84 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e081      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002740:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	019b      	lsls	r3, r3, #6
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	3b01      	subs	r3, #1
 8002766:	041b      	lsls	r3, r3, #16
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	061b      	lsls	r3, r3, #24
 8002770:	4937      	ldr	r1, [pc, #220]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002776:	4b37      	ldr	r3, [pc, #220]	; (8002854 <HAL_RCC_OscConfig+0x4ec>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7ff fa82 	bl	8001c84 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002784:	f7ff fa7e 	bl	8001c84 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e056      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x41c>
 80027a2:	e04e      	b.n	8002842 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_RCC_OscConfig+0x4ec>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7ff fa6b 	bl	8001c84 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b2:	f7ff fa67 	bl	8001c84 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e03f      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x44a>
 80027d0:	e037      	b.n	8002842 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e032      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027de:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_RCC_OscConfig+0x4e8>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d028      	beq.n	800283e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d121      	bne.n	800283e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d11a      	bne.n	800283e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800280e:	4013      	ands	r3, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002814:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002816:	4293      	cmp	r3, r2
 8002818:	d111      	bne.n	800283e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	085b      	lsrs	r3, r3, #1
 8002826:	3b01      	subs	r3, #1
 8002828:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d107      	bne.n	800283e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d001      	beq.n	8002842 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40007000 	.word	0x40007000
 8002850:	40023800 	.word	0x40023800
 8002854:	42470060 	.word	0x42470060

08002858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0cc      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800286c:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d90c      	bls.n	8002894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b63      	ldr	r3, [pc, #396]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0b8      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ac:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a58      	ldr	r2, [pc, #352]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c4:	4b53      	ldr	r3, [pc, #332]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a52      	ldr	r2, [pc, #328]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d0:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	494d      	ldr	r1, [pc, #308]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d044      	beq.n	8002978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d119      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e07f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d003      	beq.n	8002916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002912:	2b03      	cmp	r3, #3
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002916:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e06f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e067      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002936:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4934      	ldr	r1, [pc, #208]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002948:	f7ff f99c 	bl	8001c84 <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7ff f998 	bl	8001c84 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e04f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 020c 	and.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	429a      	cmp	r2, r3
 8002976:	d1eb      	bne.n	8002950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d20c      	bcs.n	80029a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e032      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4916      	ldr	r1, [pc, #88]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	490e      	ldr	r1, [pc, #56]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029de:	f000 f821 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029e2:	4602      	mov	r2, r0
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	490a      	ldr	r1, [pc, #40]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	5ccb      	ldrb	r3, [r1, r3]
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f8fc 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00
 8002a14:	40023800 	.word	0x40023800
 8002a18:	08005438 	.word	0x08005438
 8002a1c:	20000004 	.word	0x20000004
 8002a20:	20000008 	.word	0x20000008

08002a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	2300      	movs	r3, #0
 8002a36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a3c:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d00d      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x40>
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	f200 80bd 	bhi.w	8002bc8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x34>
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d003      	beq.n	8002a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a56:	e0b7      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b61      	ldr	r3, [pc, #388]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a5a:	60bb      	str	r3, [r7, #8]
       break;
 8002a5c:	e0b7      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a5e:	4b61      	ldr	r3, [pc, #388]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a60:	60bb      	str	r3, [r7, #8]
      break;
 8002a62:	e0b4      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a64:	4b5d      	ldr	r3, [pc, #372]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a6e:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d04d      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7a:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	099b      	lsrs	r3, r3, #6
 8002a80:	461a      	mov	r2, r3
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a8a:	f04f 0100 	mov.w	r1, #0
 8002a8e:	ea02 0800 	and.w	r8, r2, r0
 8002a92:	ea03 0901 	and.w	r9, r3, r1
 8002a96:	4640      	mov	r0, r8
 8002a98:	4649      	mov	r1, r9
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	014b      	lsls	r3, r1, #5
 8002aa4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002aa8:	0142      	lsls	r2, r0, #5
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	ebb0 0008 	subs.w	r0, r0, r8
 8002ab2:	eb61 0109 	sbc.w	r1, r1, r9
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	018b      	lsls	r3, r1, #6
 8002ac0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ac4:	0182      	lsls	r2, r0, #6
 8002ac6:	1a12      	subs	r2, r2, r0
 8002ac8:	eb63 0301 	sbc.w	r3, r3, r1
 8002acc:	f04f 0000 	mov.w	r0, #0
 8002ad0:	f04f 0100 	mov.w	r1, #0
 8002ad4:	00d9      	lsls	r1, r3, #3
 8002ad6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ada:	00d0      	lsls	r0, r2, #3
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	eb12 0208 	adds.w	r2, r2, r8
 8002ae4:	eb43 0309 	adc.w	r3, r3, r9
 8002ae8:	f04f 0000 	mov.w	r0, #0
 8002aec:	f04f 0100 	mov.w	r1, #0
 8002af0:	0259      	lsls	r1, r3, #9
 8002af2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002af6:	0250      	lsls	r0, r2, #9
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	f7fd ff7c 	bl	8000a04 <__aeabi_uldivmod>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4613      	mov	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e04a      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	099b      	lsrs	r3, r3, #6
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b26:	f04f 0100 	mov.w	r1, #0
 8002b2a:	ea02 0400 	and.w	r4, r2, r0
 8002b2e:	ea03 0501 	and.w	r5, r3, r1
 8002b32:	4620      	mov	r0, r4
 8002b34:	4629      	mov	r1, r5
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	014b      	lsls	r3, r1, #5
 8002b40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b44:	0142      	lsls	r2, r0, #5
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	1b00      	subs	r0, r0, r4
 8002b4c:	eb61 0105 	sbc.w	r1, r1, r5
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	018b      	lsls	r3, r1, #6
 8002b5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b5e:	0182      	lsls	r2, r0, #6
 8002b60:	1a12      	subs	r2, r2, r0
 8002b62:	eb63 0301 	sbc.w	r3, r3, r1
 8002b66:	f04f 0000 	mov.w	r0, #0
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	00d9      	lsls	r1, r3, #3
 8002b70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b74:	00d0      	lsls	r0, r2, #3
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	1912      	adds	r2, r2, r4
 8002b7c:	eb45 0303 	adc.w	r3, r5, r3
 8002b80:	f04f 0000 	mov.w	r0, #0
 8002b84:	f04f 0100 	mov.w	r1, #0
 8002b88:	0299      	lsls	r1, r3, #10
 8002b8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b8e:	0290      	lsls	r0, r2, #10
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	f7fd ff30 	bl	8000a04 <__aeabi_uldivmod>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4613      	mov	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	0c1b      	lsrs	r3, r3, #16
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	60bb      	str	r3, [r7, #8]
      break;
 8002bc6:	e002      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bca:	60bb      	str	r3, [r7, #8]
      break;
 8002bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bce:	68bb      	ldr	r3, [r7, #8]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	007a1200 	.word	0x007a1200

08002be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20000004 	.word	0x20000004

08002c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c04:	f7ff fff0 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	0a9b      	lsrs	r3, r3, #10
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	4903      	ldr	r1, [pc, #12]	; (8002c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40023800 	.word	0x40023800
 8002c24:	08005448 	.word	0x08005448

08002c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c2c:	f7ff ffdc 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	0b5b      	lsrs	r3, r3, #13
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4903      	ldr	r1, [pc, #12]	; (8002c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08005448 	.word	0x08005448

08002c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e07b      	b.n	8002d5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d108      	bne.n	8002c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c72:	d009      	beq.n	8002c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	61da      	str	r2, [r3, #28]
 8002c7a:	e005      	b.n	8002c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fc36 	bl	8001514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0c:	ea42 0103 	orr.w	r1, r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	f003 0104 	and.w	r1, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	f003 0210 	and.w	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d110      	bne.n	8002da0 <HAL_SPI_Receive_IT+0x3c>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d86:	d10b      	bne.n	8002da0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f882 	bl	8002ea0 <HAL_SPI_TransmitReceive_IT>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	e076      	b.n	8002e8e <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_SPI_Receive_IT+0x4a>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e06f      	b.n	8002e8e <HAL_SPI_Receive_IT+0x12a>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d002      	beq.n	8002dc8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dc6:	e05d      	b.n	8002e84 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_SPI_Receive_IT+0x70>
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dd8:	e054      	b.n	8002e84 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	88fa      	ldrh	r2, [r7, #6]
 8002df8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4a1e      	ldr	r2, [pc, #120]	; (8002e98 <HAL_SPI_Receive_IT+0x134>)
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002e20:	e002      	b.n	8002e28 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <HAL_SPI_Receive_IT+0x138>)
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e30:	d10f      	bne.n	8002e52 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002e60:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d008      	beq.n	8002e82 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e000      	b.n	8002e84 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8002e82:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	080033f9 	.word	0x080033f9
 8002e9c:	080033af 	.word	0x080033af

08002ea0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_SPI_TransmitReceive_IT+0x20>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e075      	b.n	8002fac <HAL_SPI_TransmitReceive_IT+0x10c>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ece:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ed6:	7dbb      	ldrb	r3, [r7, #22]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d00d      	beq.n	8002ef8 <HAL_SPI_TransmitReceive_IT+0x58>
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ee2:	d106      	bne.n	8002ef2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <HAL_SPI_TransmitReceive_IT+0x52>
 8002eec:	7dbb      	ldrb	r3, [r7, #22]
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d002      	beq.n	8002ef8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ef6:	e054      	b.n	8002fa2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_SPI_TransmitReceive_IT+0x6a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_SPI_TransmitReceive_IT+0x6a>
 8002f04:	887b      	ldrh	r3, [r7, #2]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d102      	bne.n	8002f10 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f0e:	e048      	b.n	8002fa2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d003      	beq.n	8002f24 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2205      	movs	r2, #5
 8002f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	887a      	ldrh	r2, [r7, #2]
 8002f3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	887a      	ldrh	r2, [r7, #2]
 8002f46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_SPI_TransmitReceive_IT+0x118>)
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
 8002f62:	e005      	b.n	8002f70 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <HAL_SPI_TransmitReceive_IT+0x120>)
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <HAL_SPI_TransmitReceive_IT+0x124>)
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002f7e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	d008      	beq.n	8002fa0 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e000      	b.n	8002fa2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002fa0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	080032f1 	.word	0x080032f1
 8002fbc:	08003351 	.word	0x08003351
 8002fc0:	0800322d 	.word	0x0800322d
 8002fc4:	08003291 	.word	0x08003291

08002fc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	099b      	lsrs	r3, r3, #6
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10f      	bne.n	800300c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
    return;
 800300a:	e0d7      	b.n	80031bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	085b      	lsrs	r3, r3, #1
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_SPI_IRQHandler+0x66>
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	09db      	lsrs	r3, r3, #7
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
    return;
 800302c:	e0c6      	b.n	80031bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10c      	bne.n	8003054 <HAL_SPI_IRQHandler+0x8c>
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80b4 	beq.w	80031bc <HAL_SPI_IRQHandler+0x1f4>
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80ad 	beq.w	80031bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	099b      	lsrs	r3, r3, #6
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d023      	beq.n	80030b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b03      	cmp	r3, #3
 8003078:	d011      	beq.n	800309e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	f043 0204 	orr.w	r2, r3, #4
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	e00b      	b.n	80030b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	693b      	ldr	r3, [r7, #16]
        return;
 80030b4:	e082      	b.n	80031bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d014      	beq.n	80030ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00c      	beq.n	8003112 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	f043 0208 	orr.w	r2, r3, #8
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	2b00      	cmp	r3, #0
 8003118:	d04f      	beq.n	80031ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003128:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d104      	bne.n	8003146 <HAL_SPI_IRQHandler+0x17e>
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d034      	beq.n	80031b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0203 	bic.w	r2, r2, #3
 8003154:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d011      	beq.n	8003182 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <HAL_SPI_IRQHandler+0x1fc>)
 8003164:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe ff17 	bl	8001f9e <HAL_DMA_Abort_IT>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318e:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <HAL_SPI_IRQHandler+0x1fc>)
 8003190:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe ff01 	bl	8001f9e <HAL_DMA_Abort_IT>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80031ae:	e003      	b.n	80031b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f81d 	bl	80031f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80031b6:	e000      	b.n	80031ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80031b8:	bf00      	nop
    return;
 80031ba:	bf00      	nop
  }
}
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	08003205 	.word	0x08003205

080031c8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f7ff ffe6 	bl	80031f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f103 020c 	add.w	r2, r3, #12
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	7812      	ldrb	r2, [r2, #0]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10f      	bne.n	8003288 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003276:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d102      	bne.n	8003288 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fa0c 	bl	80036a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	330c      	adds	r3, #12
 80032a2:	7812      	ldrb	r2, [r2, #0]
 80032a4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10f      	bne.n	80032e8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032d6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f9dc 	bl	80036a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	b292      	uxth	r2, r2
 8003304:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	1c9a      	adds	r2, r3, #2
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10f      	bne.n	8003348 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003336:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f9ac 	bl	80036a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	881a      	ldrh	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	1c9a      	adds	r2, r3, #2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003394:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d102      	bne.n	80033a6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f97d 	bl	80036a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f103 020c 	add.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	7812      	ldrb	r2, [r2, #0]
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f9cc 	bl	8003788 <SPI_CloseRx_ISR>
  }
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	b292      	uxth	r2, r2
 800340c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	1c9a      	adds	r2, r3, #2
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f9a9 	bl	8003788 <SPI_CloseRx_ISR>
  }
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003450:	f7fe fc18 	bl	8001c84 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	4413      	add	r3, r2
 800345e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003460:	f7fe fc10 	bl	8001c84 <HAL_GetTick>
 8003464:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003466:	4b39      	ldr	r3, [pc, #228]	; (800354c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	015b      	lsls	r3, r3, #5
 800346c:	0d1b      	lsrs	r3, r3, #20
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	fb02 f303 	mul.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003476:	e054      	b.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d050      	beq.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003480:	f7fe fc00 	bl	8001c84 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	429a      	cmp	r2, r3
 800348e:	d902      	bls.n	8003496 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d13d      	bne.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ae:	d111      	bne.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b8:	d004      	beq.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c2:	d107      	bne.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034dc:	d10f      	bne.n	80034fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e017      	b.n	8003542 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3b01      	subs	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4013      	ands	r3, r2
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	429a      	cmp	r2, r3
 8003530:	bf0c      	ite	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	2300      	movne	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	429a      	cmp	r2, r3
 800353e:	d19b      	bne.n	8003478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000004 	.word	0x20000004

08003550 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003564:	d111      	bne.n	800358a <SPI_EndRxTransaction+0x3a>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356e:	d004      	beq.n	800357a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003578:	d107      	bne.n	800358a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003588:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003592:	d12a      	bne.n	80035ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359c:	d012      	beq.n	80035c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2200      	movs	r2, #0
 80035a6:	2180      	movs	r1, #128	; 0x80
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff ff49 	bl	8003440 <SPI_WaitFlagStateUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d02d      	beq.n	8003610 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e026      	b.n	8003612 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2200      	movs	r2, #0
 80035cc:	2101      	movs	r1, #1
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7ff ff36 	bl	8003440 <SPI_WaitFlagStateUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d01a      	beq.n	8003610 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f043 0220 	orr.w	r2, r3, #32
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e013      	b.n	8003612 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2200      	movs	r2, #0
 80035f2:	2101      	movs	r1, #1
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7ff ff23 	bl	8003440 <SPI_WaitFlagStateUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d007      	beq.n	8003610 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e000      	b.n	8003612 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003628:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <SPI_EndRxTxTransaction+0x7c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1b      	ldr	r2, [pc, #108]	; (800369c <SPI_EndRxTxTransaction+0x80>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	0d5b      	lsrs	r3, r3, #21
 8003634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003646:	d112      	bne.n	800366e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2200      	movs	r2, #0
 8003650:	2180      	movs	r1, #128	; 0x80
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f7ff fef4 	bl	8003440 <SPI_WaitFlagStateUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d016      	beq.n	800368c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e00f      	b.n	800368e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3b01      	subs	r3, #1
 8003678:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d0f2      	beq.n	800366e <SPI_EndRxTxTransaction+0x52>
 8003688:	e000      	b.n	800368c <SPI_EndRxTxTransaction+0x70>
        break;
 800368a:	bf00      	nop
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000004 	.word	0x20000004
 800369c:	165e9f81 	.word	0x165e9f81

080036a0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80036a8:	4b35      	ldr	r3, [pc, #212]	; (8003780 <SPI_CloseRxTx_ISR+0xe0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a35      	ldr	r2, [pc, #212]	; (8003784 <SPI_CloseRxTx_ISR+0xe4>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0a5b      	lsrs	r3, r3, #9
 80036b4:	2264      	movs	r2, #100	; 0x64
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036bc:	f7fe fae2 	bl	8001c84 <HAL_GetTick>
 80036c0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0220 	bic.w	r2, r2, #32
 80036d0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d106      	bne.n	80036e6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036e4:	e009      	b.n	80036fa <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0eb      	beq.n	80036d2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	2164      	movs	r1, #100	; 0x64
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ff8c 	bl	800361c <SPI_EndRxTxTransaction>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	f043 0220 	orr.w	r2, r3, #32
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	2b00      	cmp	r3, #0
 800373a:	d115      	bne.n	8003768 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b04      	cmp	r3, #4
 8003746:	d107      	bne.n	8003758 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff fd39 	bl	80031c8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003756:	e00e      	b.n	8003776 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fd3b 	bl	80031dc <HAL_SPI_TxRxCpltCallback>
}
 8003766:	e006      	b.n	8003776 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fd3d 	bl	80031f0 <HAL_SPI_ErrorCallback>
}
 8003776:	bf00      	nop
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000004 	.word	0x20000004
 8003784:	057619f1 	.word	0x057619f1

08003788 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800379e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80037a0:	f7fe fa70 	bl	8001c84 <HAL_GetTick>
 80037a4:	4603      	mov	r3, r0
 80037a6:	461a      	mov	r2, r3
 80037a8:	2164      	movs	r1, #100	; 0x64
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff fed0 	bl	8003550 <SPI_EndRxTransaction>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d103      	bne.n	80037f8 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff fce9 	bl	80031c8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80037f6:	e002      	b.n	80037fe <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fcf9 	bl	80031f0 <HAL_SPI_ErrorCallback>
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e041      	b.n	800389c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7fe f839 	bl	80018a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f000 f9b7 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <HAL_TIM_PWM_Start+0x24>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e022      	b.n	800390e <HAL_TIM_PWM_Start+0x6a>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d109      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x3e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	bf14      	ite	ne
 80038da:	2301      	movne	r3, #1
 80038dc:	2300      	moveq	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	e015      	b.n	800390e <HAL_TIM_PWM_Start+0x6a>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d109      	bne.n	80038fc <HAL_TIM_PWM_Start+0x58>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	bf14      	ite	ne
 80038f4:	2301      	movne	r3, #1
 80038f6:	2300      	moveq	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	e008      	b.n	800390e <HAL_TIM_PWM_Start+0x6a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	bf14      	ite	ne
 8003908:	2301      	movne	r3, #1
 800390a:	2300      	moveq	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07c      	b.n	8003a10 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_TIM_PWM_Start+0x82>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003924:	e013      	b.n	800394e <HAL_TIM_PWM_Start+0xaa>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d104      	bne.n	8003936 <HAL_TIM_PWM_Start+0x92>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003934:	e00b      	b.n	800394e <HAL_TIM_PWM_Start+0xaa>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d104      	bne.n	8003946 <HAL_TIM_PWM_Start+0xa2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003944:	e003      	b.n	800394e <HAL_TIM_PWM_Start+0xaa>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2201      	movs	r2, #1
 8003954:	6839      	ldr	r1, [r7, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fb7e 	bl	8004058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2d      	ldr	r2, [pc, #180]	; (8003a18 <HAL_TIM_PWM_Start+0x174>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_TIM_PWM_Start+0xcc>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a2c      	ldr	r2, [pc, #176]	; (8003a1c <HAL_TIM_PWM_Start+0x178>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_TIM_PWM_Start+0xd0>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_TIM_PWM_Start+0xd2>
 8003974:	2300      	movs	r3, #0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a22      	ldr	r2, [pc, #136]	; (8003a18 <HAL_TIM_PWM_Start+0x174>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d022      	beq.n	80039da <HAL_TIM_PWM_Start+0x136>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399c:	d01d      	beq.n	80039da <HAL_TIM_PWM_Start+0x136>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1f      	ldr	r2, [pc, #124]	; (8003a20 <HAL_TIM_PWM_Start+0x17c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d018      	beq.n	80039da <HAL_TIM_PWM_Start+0x136>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_TIM_PWM_Start+0x180>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <HAL_TIM_PWM_Start+0x136>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <HAL_TIM_PWM_Start+0x184>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00e      	beq.n	80039da <HAL_TIM_PWM_Start+0x136>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <HAL_TIM_PWM_Start+0x178>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d009      	beq.n	80039da <HAL_TIM_PWM_Start+0x136>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <HAL_TIM_PWM_Start+0x188>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d004      	beq.n	80039da <HAL_TIM_PWM_Start+0x136>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <HAL_TIM_PWM_Start+0x18c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d111      	bne.n	80039fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b06      	cmp	r3, #6
 80039ea:	d010      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fc:	e007      	b.n	8003a0e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	40010400 	.word	0x40010400
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40000800 	.word	0x40000800
 8003a28:	40000c00 	.word	0x40000c00
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40001800 	.word	0x40001800

08003a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e0ae      	b.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	f200 809f 	bhi.w	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a62:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003ba1 	.word	0x08003ba1
 8003a70:	08003ba1 	.word	0x08003ba1
 8003a74:	08003ba1 	.word	0x08003ba1
 8003a78:	08003add 	.word	0x08003add
 8003a7c:	08003ba1 	.word	0x08003ba1
 8003a80:	08003ba1 	.word	0x08003ba1
 8003a84:	08003ba1 	.word	0x08003ba1
 8003a88:	08003b1f 	.word	0x08003b1f
 8003a8c:	08003ba1 	.word	0x08003ba1
 8003a90:	08003ba1 	.word	0x08003ba1
 8003a94:	08003ba1 	.word	0x08003ba1
 8003a98:	08003b5f 	.word	0x08003b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f928 	bl	8003cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0208 	orr.w	r2, r2, #8
 8003ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0204 	bic.w	r2, r2, #4
 8003ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6999      	ldr	r1, [r3, #24]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	619a      	str	r2, [r3, #24]
      break;
 8003ada:	e064      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f978 	bl	8003dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6999      	ldr	r1, [r3, #24]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	021a      	lsls	r2, r3, #8
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	619a      	str	r2, [r3, #24]
      break;
 8003b1c:	e043      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f9cd 	bl	8003ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0208 	orr.w	r2, r2, #8
 8003b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0204 	bic.w	r2, r2, #4
 8003b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	61da      	str	r2, [r3, #28]
      break;
 8003b5c:	e023      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fa21 	bl	8003fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69d9      	ldr	r1, [r3, #28]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	021a      	lsls	r2, r3, #8
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	61da      	str	r2, [r3, #28]
      break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a40      	ldr	r2, [pc, #256]	; (8003ccc <TIM_Base_SetConfig+0x114>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd6:	d00f      	beq.n	8003bf8 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3d      	ldr	r2, [pc, #244]	; (8003cd0 <TIM_Base_SetConfig+0x118>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <TIM_Base_SetConfig+0x40>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3c      	ldr	r2, [pc, #240]	; (8003cd4 <TIM_Base_SetConfig+0x11c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <TIM_Base_SetConfig+0x40>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a3b      	ldr	r2, [pc, #236]	; (8003cd8 <TIM_Base_SetConfig+0x120>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_Base_SetConfig+0x40>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a3a      	ldr	r2, [pc, #232]	; (8003cdc <TIM_Base_SetConfig+0x124>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d108      	bne.n	8003c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2f      	ldr	r2, [pc, #188]	; (8003ccc <TIM_Base_SetConfig+0x114>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d02b      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c18:	d027      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2c      	ldr	r2, [pc, #176]	; (8003cd0 <TIM_Base_SetConfig+0x118>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d023      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2b      	ldr	r2, [pc, #172]	; (8003cd4 <TIM_Base_SetConfig+0x11c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01f      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <TIM_Base_SetConfig+0x120>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01b      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a29      	ldr	r2, [pc, #164]	; (8003cdc <TIM_Base_SetConfig+0x124>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d017      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a28      	ldr	r2, [pc, #160]	; (8003ce0 <TIM_Base_SetConfig+0x128>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <TIM_Base_SetConfig+0x12c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00f      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a26      	ldr	r2, [pc, #152]	; (8003ce8 <TIM_Base_SetConfig+0x130>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00b      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a25      	ldr	r2, [pc, #148]	; (8003cec <TIM_Base_SetConfig+0x134>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a24      	ldr	r2, [pc, #144]	; (8003cf0 <TIM_Base_SetConfig+0x138>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a23      	ldr	r2, [pc, #140]	; (8003cf4 <TIM_Base_SetConfig+0x13c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d108      	bne.n	8003c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <TIM_Base_SetConfig+0x114>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_Base_SetConfig+0xf8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a0c      	ldr	r2, [pc, #48]	; (8003cdc <TIM_Base_SetConfig+0x124>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d103      	bne.n	8003cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	615a      	str	r2, [r3, #20]
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	40010400 	.word	0x40010400
 8003ce0:	40014000 	.word	0x40014000
 8003ce4:	40014400 	.word	0x40014400
 8003ce8:	40014800 	.word	0x40014800
 8003cec:	40001800 	.word	0x40001800
 8003cf0:	40001c00 	.word	0x40001c00
 8003cf4:	40002000 	.word	0x40002000

08003cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f023 0201 	bic.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f023 0302 	bic.w	r3, r3, #2
 8003d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <TIM_OC1_SetConfig+0xd8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_OC1_SetConfig+0x64>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <TIM_OC1_SetConfig+0xdc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d10c      	bne.n	8003d76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0308 	bic.w	r3, r3, #8
 8003d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <TIM_OC1_SetConfig+0xd8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_OC1_SetConfig+0x8e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <TIM_OC1_SetConfig+0xdc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d111      	bne.n	8003daa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	621a      	str	r2, [r3, #32]
}
 8003dc4:	bf00      	nop
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40010000 	.word	0x40010000
 8003dd4:	40010400 	.word	0x40010400

08003dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f023 0210 	bic.w	r2, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0320 	bic.w	r3, r3, #32
 8003e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <TIM_OC2_SetConfig+0xe4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d003      	beq.n	8003e40 <TIM_OC2_SetConfig+0x68>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <TIM_OC2_SetConfig+0xe8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10d      	bne.n	8003e5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <TIM_OC2_SetConfig+0xe4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_OC2_SetConfig+0x94>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a16      	ldr	r2, [pc, #88]	; (8003ec0 <TIM_OC2_SetConfig+0xe8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d113      	bne.n	8003e94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40010000 	.word	0x40010000
 8003ec0:	40010400 	.word	0x40010400

08003ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <TIM_OC3_SetConfig+0xe0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC3_SetConfig+0x66>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a20      	ldr	r2, [pc, #128]	; (8003fa8 <TIM_OC3_SetConfig+0xe4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10d      	bne.n	8003f46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <TIM_OC3_SetConfig+0xe0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d003      	beq.n	8003f56 <TIM_OC3_SetConfig+0x92>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <TIM_OC3_SetConfig+0xe4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d113      	bne.n	8003f7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	621a      	str	r2, [r3, #32]
}
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40010400 	.word	0x40010400

08003fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	031b      	lsls	r3, r3, #12
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a12      	ldr	r2, [pc, #72]	; (8004050 <TIM_OC4_SetConfig+0xa4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d003      	beq.n	8004014 <TIM_OC4_SetConfig+0x68>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a11      	ldr	r2, [pc, #68]	; (8004054 <TIM_OC4_SetConfig+0xa8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d109      	bne.n	8004028 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800401a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	019b      	lsls	r3, r3, #6
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40010400 	.word	0x40010400

08004058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2201      	movs	r2, #1
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	43db      	mvns	r3, r3
 800407a:	401a      	ands	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1a      	ldr	r2, [r3, #32]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	fa01 f303 	lsl.w	r3, r1, r3
 8004090:	431a      	orrs	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	621a      	str	r2, [r3, #32]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e05a      	b.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a21      	ldr	r2, [pc, #132]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d022      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004108:	d01d      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1d      	ldr	r2, [pc, #116]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d018      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1b      	ldr	r2, [pc, #108]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1a      	ldr	r2, [pc, #104]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00e      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a18      	ldr	r2, [pc, #96]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a17      	ldr	r2, [pc, #92]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a15      	ldr	r2, [pc, #84]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10c      	bne.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	4313      	orrs	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40010000 	.word	0x40010000
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800
 800418c:	40000c00 	.word	0x40000c00
 8004190:	40010400 	.word	0x40010400
 8004194:	40014000 	.word	0x40014000
 8004198:	40001800 	.word	0x40001800

0800419c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e03d      	b.n	8004234 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e03f      	b.n	80042d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fd fbcc 	bl	8001a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	; 0x24
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fecf 	bl	8005028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b08a      	sub	sp, #40	; 0x28
 80042de:	af02      	add	r7, sp, #8
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	4613      	mov	r3, r2
 80042e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d17c      	bne.n	80043f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <HAL_UART_Transmit+0x2c>
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e075      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_UART_Transmit+0x3e>
 8004314:	2302      	movs	r3, #2
 8004316:	e06e      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2221      	movs	r2, #33	; 0x21
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432e:	f7fd fca9 	bl	8001c84 <HAL_GetTick>
 8004332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004348:	d108      	bne.n	800435c <HAL_UART_Transmit+0x82>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	e003      	b.n	8004364 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800436c:	e02a      	b.n	80043c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2200      	movs	r2, #0
 8004376:	2180      	movs	r1, #128	; 0x80
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fc13 	bl	8004ba4 <UART_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e036      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800439c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3302      	adds	r3, #2
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	e007      	b.n	80043b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	3301      	adds	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1cf      	bne.n	800436e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2140      	movs	r1, #64	; 0x40
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fbe3 	bl	8004ba4 <UART_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e006      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	4613      	mov	r3, r2
 800440a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b20      	cmp	r3, #32
 8004416:	d11d      	bne.n	8004454 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_UART_Receive_IT+0x26>
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e016      	b.n	8004456 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_UART_Receive_IT+0x38>
 8004432:	2302      	movs	r3, #2
 8004434:	e00f      	b.n	8004456 <HAL_UART_Receive_IT+0x58>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	461a      	mov	r2, r3
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fc18 	bl	8004c80 <UART_Start_Receive_IT>
 8004450:	4603      	mov	r3, r0
 8004452:	e000      	b.n	8004456 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b0a0      	sub	sp, #128	; 0x80
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330c      	adds	r3, #12
 800446c:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004478:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800447c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004486:	66ba      	str	r2, [r7, #104]	; 0x68
 8004488:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800448c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e5      	bne.n	8004466 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3314      	adds	r3, #20
 80044b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044ba:	657a      	str	r2, [r7, #84]	; 0x54
 80044bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80044c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d119      	bne.n	800450a <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	f023 0310 	bic.w	r3, r3, #16
 80044ec:	677b      	str	r3, [r7, #116]	; 0x74
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80044f6:	643a      	str	r2, [r7, #64]	; 0x40
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004514:	2b80      	cmp	r3, #128	; 0x80
 8004516:	d136      	bne.n	8004586 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	61fb      	str	r3, [r7, #28]
   return(result);
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452e:	673b      	str	r3, [r7, #112]	; 0x70
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3314      	adds	r3, #20
 8004536:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004538:	62fa      	str	r2, [r7, #44]	; 0x2c
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800453e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e5      	bne.n	8004518 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004550:	2b00      	cmp	r3, #0
 8004552:	d018      	beq.n	8004586 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004558:	2200      	movs	r2, #0
 800455a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004560:	4618      	mov	r0, r3
 8004562:	f7fd fcac 	bl	8001ebe <HAL_DMA_Abort>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00c      	beq.n	8004586 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004570:	4618      	mov	r0, r3
 8004572:	f7fd fd36 	bl	8001fe2 <HAL_DMA_GetError>
 8004576:	4603      	mov	r3, r0
 8004578:	2b20      	cmp	r3, #32
 800457a:	d104      	bne.n	8004586 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2210      	movs	r2, #16
 8004580:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e052      	b.n	800462c <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d136      	bne.n	8004602 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3314      	adds	r3, #20
 800459a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045b4:	61ba      	str	r2, [r7, #24]
 80045b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6979      	ldr	r1, [r7, #20]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	613b      	str	r3, [r7, #16]
   return(result);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e5      	bne.n	8004594 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d018      	beq.n	8004602 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	2200      	movs	r2, #0
 80045d6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fd fc6e 	bl	8001ebe <HAL_DMA_Abort>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00c      	beq.n	8004602 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fd fcf8 	bl	8001fe2 <HAL_DMA_GetError>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d104      	bne.n	8004602 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2210      	movs	r2, #16
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e014      	b.n	800462c <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3780      	adds	r7, #128	; 0x80
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b0ba      	sub	sp, #232	; 0xe8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800465a:	2300      	movs	r3, #0
 800465c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004660:	2300      	movs	r3, #0
 8004662:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10f      	bne.n	800469a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800467a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_UART_IRQHandler+0x66>
 8004686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fc0d 	bl	8004eb2 <UART_Receive_IT>
      return;
 8004698:	e256      	b.n	8004b48 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800469a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80de 	beq.w	8004860 <HAL_UART_IRQHandler+0x22c>
 80046a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80d1 	beq.w	8004860 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00b      	beq.n	80046e2 <HAL_UART_IRQHandler+0xae>
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f043 0201 	orr.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <HAL_UART_IRQHandler+0xd2>
 80046ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f043 0202 	orr.w	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_UART_IRQHandler+0xf6>
 8004712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f043 0204 	orr.w	r2, r3, #4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d011      	beq.n	800475a <HAL_UART_IRQHandler+0x126>
 8004736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d105      	bne.n	800474e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f043 0208 	orr.w	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 81ed 	beq.w	8004b3e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_UART_IRQHandler+0x14e>
 8004770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fb98 	bl	8004eb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <HAL_UART_IRQHandler+0x17a>
 80047a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d04f      	beq.n	800484e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 faa0 	bl	8004cf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d141      	bne.n	8004846 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3314      	adds	r3, #20
 80047c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3314      	adds	r3, #20
 80047ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1d9      	bne.n	80047c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	2b00      	cmp	r3, #0
 8004814:	d013      	beq.n	800483e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	4a7d      	ldr	r2, [pc, #500]	; (8004a10 <HAL_UART_IRQHandler+0x3dc>)
 800481c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	4618      	mov	r0, r3
 8004824:	f7fd fbbb 	bl	8001f9e <HAL_DMA_Abort_IT>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d016      	beq.n	800485c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004838:	4610      	mov	r0, r2
 800483a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	e00e      	b.n	800485c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f99a 	bl	8004b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004844:	e00a      	b.n	800485c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f996 	bl	8004b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	e006      	b.n	800485c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f992 	bl	8004b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800485a:	e170      	b.n	8004b3e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485c:	bf00      	nop
    return;
 800485e:	e16e      	b.n	8004b3e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	2b01      	cmp	r3, #1
 8004866:	f040 814a 	bne.w	8004afe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8143 	beq.w	8004afe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 813c 	beq.w	8004afe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b40      	cmp	r3, #64	; 0x40
 80048a8:	f040 80b4 	bne.w	8004a14 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8140 	beq.w	8004b42 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ca:	429a      	cmp	r2, r3
 80048cc:	f080 8139 	bcs.w	8004b42 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e2:	f000 8088 	beq.w	80049f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004912:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004916:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800491e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800492a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1d9      	bne.n	80048e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3314      	adds	r3, #20
 8004938:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3314      	adds	r3, #20
 8004952:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004956:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800495a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800495e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e1      	bne.n	8004932 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3314      	adds	r3, #20
 8004974:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800497e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3314      	adds	r3, #20
 800498e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004992:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004994:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004998:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e3      	bne.n	800496e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c6:	f023 0310 	bic.w	r3, r3, #16
 80049ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	330c      	adds	r3, #12
 80049d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80049d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80049da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e3      	bne.n	80049b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fd fa64 	bl	8001ebe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4619      	mov	r1, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f8c0 	bl	8004b8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a0c:	e099      	b.n	8004b42 <HAL_UART_IRQHandler+0x50e>
 8004a0e:	bf00      	nop
 8004a10:	08004dbb 	.word	0x08004dbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 808b 	beq.w	8004b46 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8086 	beq.w	8004b46 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	330c      	adds	r3, #12
 8004a40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a5e:	647a      	str	r2, [r7, #68]	; 0x44
 8004a60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e3      	bne.n	8004a3a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3314      	adds	r3, #20
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	623b      	str	r3, [r7, #32]
   return(result);
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3314      	adds	r3, #20
 8004a92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a96:	633a      	str	r2, [r7, #48]	; 0x30
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e3      	bne.n	8004a72 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0310 	bic.w	r3, r3, #16
 8004ace:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004adc:	61fa      	str	r2, [r7, #28]
 8004ade:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	69b9      	ldr	r1, [r7, #24]
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e3      	bne.n	8004ab8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004af4:	4619      	mov	r1, r3
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f848 	bl	8004b8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004afc:	e023      	b.n	8004b46 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <HAL_UART_IRQHandler+0x4ea>
 8004b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f963 	bl	8004de2 <UART_Transmit_IT>
    return;
 8004b1c:	e014      	b.n	8004b48 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00e      	beq.n	8004b48 <HAL_UART_IRQHandler+0x514>
 8004b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f9a3 	bl	8004e82 <UART_EndTransmit_IT>
    return;
 8004b3c:	e004      	b.n	8004b48 <HAL_UART_IRQHandler+0x514>
    return;
 8004b3e:	bf00      	nop
 8004b40:	e002      	b.n	8004b48 <HAL_UART_IRQHandler+0x514>
      return;
 8004b42:	bf00      	nop
 8004b44:	e000      	b.n	8004b48 <HAL_UART_IRQHandler+0x514>
      return;
 8004b46:	bf00      	nop
  }
}
 8004b48:	37e8      	adds	r7, #232	; 0xe8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop

08004b50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b090      	sub	sp, #64	; 0x40
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb4:	e050      	b.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d04c      	beq.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bc4:	f7fd f85e 	bl	8001c84 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d241      	bcs.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bf4:	637a      	str	r2, [r7, #52]	; 0x34
 8004bf6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e5      	bne.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3314      	adds	r3, #20
 8004c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	613b      	str	r3, [r7, #16]
   return(result);
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f023 0301 	bic.w	r3, r3, #1
 8004c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3314      	adds	r3, #20
 8004c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c28:	623a      	str	r2, [r7, #32]
 8004c2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	69f9      	ldr	r1, [r7, #28]
 8004c2e:	6a3a      	ldr	r2, [r7, #32]
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e5      	bne.n	8004c08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e00f      	b.n	8004c78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4013      	ands	r3, r2
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d09f      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3740      	adds	r7, #64	; 0x40
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	88fa      	ldrh	r2, [r7, #6]
 8004c98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	88fa      	ldrh	r2, [r7, #6]
 8004c9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2222      	movs	r2, #34	; 0x22
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cc4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0220 	orr.w	r2, r2, #32
 8004ce4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b095      	sub	sp, #84	; 0x54
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	330c      	adds	r3, #12
 8004d02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d1c:	643a      	str	r2, [r7, #64]	; 0x40
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3314      	adds	r3, #20
 8004d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3314      	adds	r3, #20
 8004d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d119      	bne.n	8004da0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	330c      	adds	r3, #12
 8004d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f023 0310 	bic.w	r3, r3, #16
 8004d82:	647b      	str	r3, [r7, #68]	; 0x44
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d8c:	61ba      	str	r2, [r7, #24]
 8004d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6979      	ldr	r1, [r7, #20]
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	613b      	str	r3, [r7, #16]
   return(result);
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dae:	bf00      	nop
 8004db0:	3754      	adds	r7, #84	; 0x54
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff fecf 	bl	8004b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b21      	cmp	r3, #33	; 0x21
 8004df4:	d13e      	bne.n	8004e74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	d114      	bne.n	8004e2a <UART_Transmit_IT+0x48>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d110      	bne.n	8004e2a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	1c9a      	adds	r2, r3, #2
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	621a      	str	r2, [r3, #32]
 8004e28:	e008      	b.n	8004e3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6211      	str	r1, [r2, #32]
 8004e34:	781a      	ldrb	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10f      	bne.n	8004e70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff fe54 	bl	8004b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b08c      	sub	sp, #48	; 0x30
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b22      	cmp	r3, #34	; 0x22
 8004ec4:	f040 80ab 	bne.w	800501e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed0:	d117      	bne.n	8004f02 <UART_Receive_IT+0x50>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d113      	bne.n	8004f02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	1c9a      	adds	r2, r3, #2
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28
 8004f00:	e026      	b.n	8004f50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f14:	d007      	beq.n	8004f26 <UART_Receive_IT+0x74>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <UART_Receive_IT+0x82>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	e008      	b.n	8004f46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d15a      	bne.n	800501a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0220 	bic.w	r2, r2, #32
 8004f72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0201 	bic.w	r2, r2, #1
 8004f92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d135      	bne.n	8005010 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f023 0310 	bic.w	r3, r3, #16
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fca:	623a      	str	r2, [r7, #32]
 8004fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	69f9      	ldr	r1, [r7, #28]
 8004fd0:	6a3a      	ldr	r2, [r7, #32]
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e5      	bne.n	8004faa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d10a      	bne.n	8005002 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff fdbf 	bl	8004b8c <HAL_UARTEx_RxEventCallback>
 800500e:	e002      	b.n	8005016 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff fda7 	bl	8004b64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e002      	b.n	8005020 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e000      	b.n	8005020 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3730      	adds	r7, #48	; 0x30
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502c:	b09f      	sub	sp, #124	; 0x7c
 800502e:	af00      	add	r7, sp, #0
 8005030:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800503c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503e:	68d9      	ldr	r1, [r3, #12]
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	ea40 0301 	orr.w	r3, r0, r1
 8005048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800504a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	431a      	orrs	r2, r3
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	431a      	orrs	r2, r3
 800505a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4313      	orrs	r3, r2
 8005060:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800506c:	f021 010c 	bic.w	r1, r1, #12
 8005070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005076:	430b      	orrs	r3, r1
 8005078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005086:	6999      	ldr	r1, [r3, #24]
 8005088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	ea40 0301 	orr.w	r3, r0, r1
 8005090:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4bc5      	ldr	r3, [pc, #788]	; (80053ac <UART_SetConfig+0x384>)
 8005098:	429a      	cmp	r2, r3
 800509a:	d004      	beq.n	80050a6 <UART_SetConfig+0x7e>
 800509c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4bc3      	ldr	r3, [pc, #780]	; (80053b0 <UART_SetConfig+0x388>)
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d103      	bne.n	80050ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050a6:	f7fd fdbf 	bl	8002c28 <HAL_RCC_GetPCLK2Freq>
 80050aa:	6778      	str	r0, [r7, #116]	; 0x74
 80050ac:	e002      	b.n	80050b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ae:	f7fd fda7 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 80050b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050bc:	f040 80b6 	bne.w	800522c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c2:	461c      	mov	r4, r3
 80050c4:	f04f 0500 	mov.w	r5, #0
 80050c8:	4622      	mov	r2, r4
 80050ca:	462b      	mov	r3, r5
 80050cc:	1891      	adds	r1, r2, r2
 80050ce:	6439      	str	r1, [r7, #64]	; 0x40
 80050d0:	415b      	adcs	r3, r3
 80050d2:	647b      	str	r3, [r7, #68]	; 0x44
 80050d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050d8:	1912      	adds	r2, r2, r4
 80050da:	eb45 0303 	adc.w	r3, r5, r3
 80050de:	f04f 0000 	mov.w	r0, #0
 80050e2:	f04f 0100 	mov.w	r1, #0
 80050e6:	00d9      	lsls	r1, r3, #3
 80050e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050ec:	00d0      	lsls	r0, r2, #3
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	1911      	adds	r1, r2, r4
 80050f4:	6639      	str	r1, [r7, #96]	; 0x60
 80050f6:	416b      	adcs	r3, r5
 80050f8:	667b      	str	r3, [r7, #100]	; 0x64
 80050fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	461a      	mov	r2, r3
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	1891      	adds	r1, r2, r2
 8005106:	63b9      	str	r1, [r7, #56]	; 0x38
 8005108:	415b      	adcs	r3, r3
 800510a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800510c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005110:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005114:	f7fb fc76 	bl	8000a04 <__aeabi_uldivmod>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4ba5      	ldr	r3, [pc, #660]	; (80053b4 <UART_SetConfig+0x38c>)
 800511e:	fba3 2302 	umull	r2, r3, r3, r2
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	011e      	lsls	r6, r3, #4
 8005126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005128:	461c      	mov	r4, r3
 800512a:	f04f 0500 	mov.w	r5, #0
 800512e:	4622      	mov	r2, r4
 8005130:	462b      	mov	r3, r5
 8005132:	1891      	adds	r1, r2, r2
 8005134:	6339      	str	r1, [r7, #48]	; 0x30
 8005136:	415b      	adcs	r3, r3
 8005138:	637b      	str	r3, [r7, #52]	; 0x34
 800513a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800513e:	1912      	adds	r2, r2, r4
 8005140:	eb45 0303 	adc.w	r3, r5, r3
 8005144:	f04f 0000 	mov.w	r0, #0
 8005148:	f04f 0100 	mov.w	r1, #0
 800514c:	00d9      	lsls	r1, r3, #3
 800514e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005152:	00d0      	lsls	r0, r2, #3
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	1911      	adds	r1, r2, r4
 800515a:	65b9      	str	r1, [r7, #88]	; 0x58
 800515c:	416b      	adcs	r3, r5
 800515e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	461a      	mov	r2, r3
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	1891      	adds	r1, r2, r2
 800516c:	62b9      	str	r1, [r7, #40]	; 0x28
 800516e:	415b      	adcs	r3, r3
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005176:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800517a:	f7fb fc43 	bl	8000a04 <__aeabi_uldivmod>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4b8c      	ldr	r3, [pc, #560]	; (80053b4 <UART_SetConfig+0x38c>)
 8005184:	fba3 1302 	umull	r1, r3, r3, r2
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	2164      	movs	r1, #100	; 0x64
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	3332      	adds	r3, #50	; 0x32
 8005196:	4a87      	ldr	r2, [pc, #540]	; (80053b4 <UART_SetConfig+0x38c>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051a4:	441e      	add	r6, r3
 80051a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051a8:	4618      	mov	r0, r3
 80051aa:	f04f 0100 	mov.w	r1, #0
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	1894      	adds	r4, r2, r2
 80051b4:	623c      	str	r4, [r7, #32]
 80051b6:	415b      	adcs	r3, r3
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051be:	1812      	adds	r2, r2, r0
 80051c0:	eb41 0303 	adc.w	r3, r1, r3
 80051c4:	f04f 0400 	mov.w	r4, #0
 80051c8:	f04f 0500 	mov.w	r5, #0
 80051cc:	00dd      	lsls	r5, r3, #3
 80051ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051d2:	00d4      	lsls	r4, r2, #3
 80051d4:	4622      	mov	r2, r4
 80051d6:	462b      	mov	r3, r5
 80051d8:	1814      	adds	r4, r2, r0
 80051da:	653c      	str	r4, [r7, #80]	; 0x50
 80051dc:	414b      	adcs	r3, r1
 80051de:	657b      	str	r3, [r7, #84]	; 0x54
 80051e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	461a      	mov	r2, r3
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	1891      	adds	r1, r2, r2
 80051ec:	61b9      	str	r1, [r7, #24]
 80051ee:	415b      	adcs	r3, r3
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80051fa:	f7fb fc03 	bl	8000a04 <__aeabi_uldivmod>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4b6c      	ldr	r3, [pc, #432]	; (80053b4 <UART_SetConfig+0x38c>)
 8005204:	fba3 1302 	umull	r1, r3, r3, r2
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	2164      	movs	r1, #100	; 0x64
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	3332      	adds	r3, #50	; 0x32
 8005216:	4a67      	ldr	r2, [pc, #412]	; (80053b4 <UART_SetConfig+0x38c>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	f003 0207 	and.w	r2, r3, #7
 8005222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4432      	add	r2, r6
 8005228:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800522a:	e0b9      	b.n	80053a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800522c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800522e:	461c      	mov	r4, r3
 8005230:	f04f 0500 	mov.w	r5, #0
 8005234:	4622      	mov	r2, r4
 8005236:	462b      	mov	r3, r5
 8005238:	1891      	adds	r1, r2, r2
 800523a:	6139      	str	r1, [r7, #16]
 800523c:	415b      	adcs	r3, r3
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005244:	1912      	adds	r2, r2, r4
 8005246:	eb45 0303 	adc.w	r3, r5, r3
 800524a:	f04f 0000 	mov.w	r0, #0
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	00d9      	lsls	r1, r3, #3
 8005254:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005258:	00d0      	lsls	r0, r2, #3
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	eb12 0804 	adds.w	r8, r2, r4
 8005262:	eb43 0905 	adc.w	r9, r3, r5
 8005266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	4618      	mov	r0, r3
 800526c:	f04f 0100 	mov.w	r1, #0
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	008b      	lsls	r3, r1, #2
 800527a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800527e:	0082      	lsls	r2, r0, #2
 8005280:	4640      	mov	r0, r8
 8005282:	4649      	mov	r1, r9
 8005284:	f7fb fbbe 	bl	8000a04 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4b49      	ldr	r3, [pc, #292]	; (80053b4 <UART_SetConfig+0x38c>)
 800528e:	fba3 2302 	umull	r2, r3, r3, r2
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	011e      	lsls	r6, r3, #4
 8005296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005298:	4618      	mov	r0, r3
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	1894      	adds	r4, r2, r2
 80052a4:	60bc      	str	r4, [r7, #8]
 80052a6:	415b      	adcs	r3, r3
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052ae:	1812      	adds	r2, r2, r0
 80052b0:	eb41 0303 	adc.w	r3, r1, r3
 80052b4:	f04f 0400 	mov.w	r4, #0
 80052b8:	f04f 0500 	mov.w	r5, #0
 80052bc:	00dd      	lsls	r5, r3, #3
 80052be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052c2:	00d4      	lsls	r4, r2, #3
 80052c4:	4622      	mov	r2, r4
 80052c6:	462b      	mov	r3, r5
 80052c8:	1814      	adds	r4, r2, r0
 80052ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80052cc:	414b      	adcs	r3, r1
 80052ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f04f 0100 	mov.w	r1, #0
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	008b      	lsls	r3, r1, #2
 80052e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052e8:	0082      	lsls	r2, r0, #2
 80052ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80052ee:	f7fb fb89 	bl	8000a04 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4b2f      	ldr	r3, [pc, #188]	; (80053b4 <UART_SetConfig+0x38c>)
 80052f8:	fba3 1302 	umull	r1, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2164      	movs	r1, #100	; 0x64
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	3332      	adds	r3, #50	; 0x32
 800530a:	4a2a      	ldr	r2, [pc, #168]	; (80053b4 <UART_SetConfig+0x38c>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005316:	441e      	add	r6, r3
 8005318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800531a:	4618      	mov	r0, r3
 800531c:	f04f 0100 	mov.w	r1, #0
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	1894      	adds	r4, r2, r2
 8005326:	603c      	str	r4, [r7, #0]
 8005328:	415b      	adcs	r3, r3
 800532a:	607b      	str	r3, [r7, #4]
 800532c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005330:	1812      	adds	r2, r2, r0
 8005332:	eb41 0303 	adc.w	r3, r1, r3
 8005336:	f04f 0400 	mov.w	r4, #0
 800533a:	f04f 0500 	mov.w	r5, #0
 800533e:	00dd      	lsls	r5, r3, #3
 8005340:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005344:	00d4      	lsls	r4, r2, #3
 8005346:	4622      	mov	r2, r4
 8005348:	462b      	mov	r3, r5
 800534a:	eb12 0a00 	adds.w	sl, r2, r0
 800534e:	eb43 0b01 	adc.w	fp, r3, r1
 8005352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	f04f 0100 	mov.w	r1, #0
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	008b      	lsls	r3, r1, #2
 8005366:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800536a:	0082      	lsls	r2, r0, #2
 800536c:	4650      	mov	r0, sl
 800536e:	4659      	mov	r1, fp
 8005370:	f7fb fb48 	bl	8000a04 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <UART_SetConfig+0x38c>)
 800537a:	fba3 1302 	umull	r1, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	2164      	movs	r1, #100	; 0x64
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	3332      	adds	r3, #50	; 0x32
 800538c:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <UART_SetConfig+0x38c>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	f003 020f 	and.w	r2, r3, #15
 8005398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4432      	add	r2, r6
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	377c      	adds	r7, #124	; 0x7c
 80053a4:	46bd      	mov	sp, r7
 80053a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053aa:	bf00      	nop
 80053ac:	40011000 	.word	0x40011000
 80053b0:	40011400 	.word	0x40011400
 80053b4:	51eb851f 	.word	0x51eb851f

080053b8 <__libc_init_array>:
 80053b8:	b570      	push	{r4, r5, r6, lr}
 80053ba:	4d0d      	ldr	r5, [pc, #52]	; (80053f0 <__libc_init_array+0x38>)
 80053bc:	4c0d      	ldr	r4, [pc, #52]	; (80053f4 <__libc_init_array+0x3c>)
 80053be:	1b64      	subs	r4, r4, r5
 80053c0:	10a4      	asrs	r4, r4, #2
 80053c2:	2600      	movs	r6, #0
 80053c4:	42a6      	cmp	r6, r4
 80053c6:	d109      	bne.n	80053dc <__libc_init_array+0x24>
 80053c8:	4d0b      	ldr	r5, [pc, #44]	; (80053f8 <__libc_init_array+0x40>)
 80053ca:	4c0c      	ldr	r4, [pc, #48]	; (80053fc <__libc_init_array+0x44>)
 80053cc:	f000 f828 	bl	8005420 <_init>
 80053d0:	1b64      	subs	r4, r4, r5
 80053d2:	10a4      	asrs	r4, r4, #2
 80053d4:	2600      	movs	r6, #0
 80053d6:	42a6      	cmp	r6, r4
 80053d8:	d105      	bne.n	80053e6 <__libc_init_array+0x2e>
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e0:	4798      	blx	r3
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7ee      	b.n	80053c4 <__libc_init_array+0xc>
 80053e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ea:	4798      	blx	r3
 80053ec:	3601      	adds	r6, #1
 80053ee:	e7f2      	b.n	80053d6 <__libc_init_array+0x1e>
 80053f0:	08005458 	.word	0x08005458
 80053f4:	08005458 	.word	0x08005458
 80053f8:	08005458 	.word	0x08005458
 80053fc:	0800545c 	.word	0x0800545c

08005400 <memset>:
 8005400:	4402      	add	r2, r0
 8005402:	4603      	mov	r3, r0
 8005404:	4293      	cmp	r3, r2
 8005406:	d100      	bne.n	800540a <memset+0xa>
 8005408:	4770      	bx	lr
 800540a:	f803 1b01 	strb.w	r1, [r3], #1
 800540e:	e7f9      	b.n	8005404 <memset+0x4>

08005410 <strcpy>:
 8005410:	4603      	mov	r3, r0
 8005412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005416:	f803 2b01 	strb.w	r2, [r3], #1
 800541a:	2a00      	cmp	r2, #0
 800541c:	d1f9      	bne.n	8005412 <strcpy+0x2>
 800541e:	4770      	bx	lr

08005420 <_init>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr

0800542c <_fini>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr
